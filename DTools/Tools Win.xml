<?xml version="1.0"?>
<doc>
<assembly>
<name>
ToolsWin
</name>
</assembly>
<members>
<member name="F:Tools.API.Public.WindowLongs.ExStyle">
	<summary>Retrieves the extended window styles. For more information, see CreateWindowEx.</summary>
	<remarks>GWL_EXSTYLE</remarks>
</member><member name="F:Tools.API.Public.WindowLongs.Style">
	<summary>Retrieves the window styles.</summary>
	<remarks>GWL_STYLE</remarks>
</member><member name="F:Tools.API.Public.WindowLongs.WndProc">
	<summary>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the CallWindowProc function to call the window procedure.</summary>
	<remarks>GWL_WNDPROC</remarks>
</member><member name="F:Tools.API.Public.WindowLongs.HInstance">
	<summary>Retrieves a handle to the application instance.</summary>
	<remarks>GWL_HINSTANCE</remarks>
</member><member name="F:Tools.API.Public.WindowLongs.hWndParent">
	<summary>Retrieves a handle to the parent window, if any.</summary>
	<remarks>GWL_HWNDPARENT</remarks>
</member><member name="F:Tools.API.Public.WindowLongs.Id">
	<summary>Retrieves the identifier of the window.</summary>
	<remarks>GWL_ID</remarks>
</member><member name="F:Tools.API.Public.WindowLongs.UserData">
	<summary>Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</summary>
	<remarks>GWL_USERDATA</remarks>
</member><member name="F:Tools.API.Public.WindowLongs.DlgProc">
	<summary>Retrieves the address of the dialog box procedure, or a handle representing the address of the dialog box procedure. You must use the CallWindowProc function to call the dialog box procedure.</summary>
	<remarks>DWL_DLGPROC</remarks>
</member><member name="F:Tools.API.Public.WindowLongs.MsgResult">
	<summary>Retrieves the return value of a message processed in the dialog box procedure.</summary>
	<remarks>DWL_MSGRESULT</remarks>
</member><member name="F:Tools.API.Public.WindowLongs.User">
	<summary>Retrieves extra information private to the application, such as handles or pointers.</summary>
	<remarks>DWL_USER</remarks>
</member><member name="T:Tools.API.Public.WindowLongs">
	<summary>Predefined window longs for <see cref="P:Tools.WindowsT.NativeT.Win32Window.WindowLong(Tools.API.Public.WindowLongs)"/></summary>
</member><member name="F:Tools.WindowsT.NativeT.Win32Window._Handle">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> property</summary>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.#ctor(System.Int32)">
	<summary>CTor from <see cref="T:System.Int32"/> handle</summary>
	<param name="hWnd">Handle to window</param>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.#ctor(System.IntPtr)">
	<summary>CTor from <see cref="T:System.IntPtr"/> handle</summary>
	<param name="hWnd">Handle to window</param>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.#ctor(System.Windows.Forms.Control)">
	<summary>CTor from <see cref="T:System.Windows.Forms.Control"/> (including <see cref="T:System.Windows.Forms.Form"/>)</summary>
	<param name="Control">Control to create new instance from</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Control"/> is null</exception>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.chNull``1(``0,System.String)">
	<summary>Checks if given object is null. Throws <see cref="T:System.ArgumentNullException"/> if so.</summary>
	<param name="obj">Object to check</param>
	<param name="param">Name of parameter, passed to <see cref="P:System.ArgumentException.ParamName"/>.</param>
	<typeparam name="T">Type of object being checked. Must be reference type.</typeparam>
	<returns><paramref name="obj"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null</exception>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.#ctor(System.Windows.Forms.IWin32Window)">
	<summary>CTor from <see cref="T:System.Windows.Forms.IWin32Window"/></summary>
	<param name="Window">Window to create new instance from</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Window"/> is null</exception>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.#ctor(System.Windows.Window)">
	<summary>CTor from <see cref="T:System.Windows.Window"/></summary>
	<param name="Window"><see cref="T:System.Windows.Window"/> to create new instance from</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Window"/> is null</exception>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.op_Implicit(System.Windows.Forms.Control)~Tools.WindowsT.NativeT.Win32Window">
	<summary>Converts <see cref="T:System.Windows.Forms.Control"/> to <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.Control"/></param>
	<returns>A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> with same handle as <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.op_Implicit(System.Windows.Window)~Tools.WindowsT.NativeT.Win32Window">
	<summary>Converts <see cref="T:System.Windows.Window"/> to <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></summary>
	<param name="a">A <see cref="T:System.Windows.Window"/></param>
	<returns>A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> with same handle as <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.Handle">
	<summary>Gets the handle to the window represented by the implementer.</summary>
	<returns>A handle to the window represented by the implementer.</returns>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.hWnd">
	<summary>Same as <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> but <see cref="T:System.Int32"/></summary>
</member><member name="F:Tools.WindowsT.NativeT.Win32Window.disposedValue">
	<summary>To detect redundant calls</summary>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.Dispose(System.Boolean)">
	<summary>Sets <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> to zero</summary>
	<remarks>This code added by Visual Basic to correctly implement the disposable pattern.</remarks>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.Dispose">
	<summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
	<remarks>Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.</remarks>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.Clone__">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance.</returns>
	<remarks>Use type-safe <see cref="M:Tools.WindowsT.NativeT.Win32Window.Clone"/> instead</remarks>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.Clone_">
	<summary>Implements <see cref="M:Tools.ICloneable`1.Clone"/></summary>
	<returns><see cref="M:Tools.WindowsT.NativeT.Win32Window.Clone"/></returns>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.Clone">
	<summary>Creates new instance of <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> pointing to same window as curent instance</summary>
	<returns>New instance pointing to same window as current instance</returns>
	<remarks>In fact there is no need to clone <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> object, because it has no internal state other than <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/></remarks>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.Parent">
	<summary>Gets or sets parent of current Window</summary>
	<value>A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> to reparent current window into. Can be null to un-parent current window completely.</value>
	<returns>Current parent of current window. Can return null if current window has no parent or there was error when obtaining parent (ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid)</returns>
	<exception cref="T:Tools.API.Win32APIException">Setting failed. It may indicate that <see cref="P:Tools.WindowsT.NativeT.Win32Window.hWnd"/> does not point to existing window or attempt to set parent to the same window or to one of children.</exception>
	<remarks>Setting value to <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> with <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> of zero has the same effect as setting it to null.
 Non-top-level windows (such as button) cannot be unparented. Setting null for shuch window will cause window to be parented into desktop - not by this implementation but by the OS.</remarks>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.AddToList``1(System.Collections.Generic.List{``0},``0)">
	<summary>Adds <paramref name="item"/> to <paramref name="List"/> and returns true</summary>
	<param name="List"><see cref="T:System.Collections.Generic.List`1"/> to add item to</param>
	<param name="item">Item to be added</param>
	<typeparam name="T">Type of <paramref name="item"/></typeparam>
	<returns>True</returns>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.Children">
	<summary>Gets all childrens of current windows</summary>
	<returns>Childrens of current window</returns>
	<exception cref="T:Tools.API.Win32APIException">Error while enumerating windows. Ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.ParentHandle">
	<summary>Gets or sets handle of current window's parent</summary>
	<value>Handle to window to parent current window into. Set to 0 if window should be parented into desktop.</value>
	<returns>Handle of current window's parent. Zero if current window has no parent.</returns>
	<exception cref="T:Tools.API.Win32APIException">Error when setting parent. It may be caused by invalid <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> or invalid <see cref="P:Tools.WindowsT.NativeT.Win32Window.ParentHandle"/> being set</exception>
	<remarks>It's recomended to use <see cref="P:Tools.WindowsT.NativeT.Win32Window.Parent"/> instead.
 Non-top-level windows (such as button) cannot be unparented. Setting zero for shuch window will cause window to be parented into desktop - not by this implementation but by the OS.</remarks>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.WindowLong(Tools.API.Public.WindowLongs)">
	<summary>Gets or sets specified window long of current window</summary>
	<param name="Long">Long to get or set. Can be one of <see cref="T:Tools.API.Public.WindowLongs"/> values or can be any user-defined integer</param>
	<value>New value of window long</value>
	<returns>Current value of window long</returns>
	<exception cref="T:Tools.API.Win32APIException">Getting or setting of value failed (i.e. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid or <paramref name="Long"/> is invalid)</exception>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.Move(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>Changes window position and size</summary>
	<param name="Height">New height of window in px</param>
	<param name="Left">New x coordinate of left edge of the window in px</param>
	<param name="Repaint">Forces window to repaint its content after moving - default is true</param>
	<param name="Top">New y coordinate of top edge of the window in px</param>
	<param name="Width">New width of window in px</param>
	<exception cref="T:Tools.API.Win32APIException">Moving failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
	<remarks>
 In some multi-monitor configurations the <paramref name="Top"/> and <see cref="P:Tools.WindowsT.NativeT.Win32Window.Left"/> can be negative and it does not necesarilly mean that window is positioned outside the desktop.
 For top-level windows screen coordinates are used. For windows with <see cref="P:Tools.WindowsT.NativeT.Win32Window.Parent"/> parent's coordinates are used.
 </remarks>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.Move(System.Drawing.Rectangle)">
	<summary>Changes window position and size to specified <see cref="T:System.Drawing.Rectangle"/></summary>
	<param name="Rectangle">Defines new window size and position</param>
	<remarks><paramref name="Rectangle"/>.<see cref="P:System.Drawing.Rectangle.Location">Location</see> should be in screen coordibates for top-level windows and in parent's coordinates for windows with <see cref="P:Tools.WindowsT.NativeT.Win32Window.Parent"/></remarks>
	<exception cref="T:Tools.API.Win32APIException">Moving failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.Area">
	<summary>Gets or sets rectangle covered by the window</summary>
	<returns>Current rectangle covered by the window</returns>
	<value>New rectangle covered by the window</value>
	<remarks>For top-level windows screen coordinates are used. For windows with <see cref="P:Tools.WindowsT.NativeT.Win32Window.Parent"/> coordinates of parent are used.</remarks>
	<exception cref="T:Tools.API.Win32APIException">Setting or obtaining window's rectangle failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.Size">
	<summary>Gets or sets the size of the window</summary>
	<value>New size of the window. Position will be unchanged</value>
	<returns>Current size of the window</returns>
	<exception cref="T:Tools.API.Win32APIException">Setting or obtaining of window's rectangle failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.Location">
	<summary>Gets or sets location of the window</summary>
	<value>New position of top left corner of window. Size will ne unchanged.</value>
	<returns>Current position of window top left corner</returns>
	<remarks>For top-level windows the location is in screen coordinates, for windows with <see cref="P:Tools.WindowsT.NativeT.Win32Window.Parent"/> in parent' coordinates.</remarks>
	<exception cref="T:Tools.API.Win32APIException">Setting or obtaining of window's rectangle failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.Left">
	<summary>Gets or sets x coordinale of left edge of the window.</summary>
	<value>New x coordinate of left edge of the window</value>
	<returns>Current x coordinate of left edge of the window</returns>
	<remarks>In some multi-monitor configurations the left edge of desktop can be negative number. In such case <see cref="P:Tools.WindowsT.NativeT.Win32Window.Left"/> can be also negative and it does not necesarilly mean that the window is outside of the desktop.
 For top-level windows the location is in screen coordinates, for windows with <see cref="P:Tools.WindowsT.NativeT.Win32Window.Parent"/> in parent' coordinates.</remarks>
	<exception cref="T:Tools.API.Win32APIException">Setting or obtaining of window's rectangle failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.Top">
	<summary>Gets or sets y coordinate of top edge of the window.</summary>
	<value>New y coordinate of top edge of the window</value>
	<returns>Current y coordinate of top edge of the window</returns>
	<remarks>In some multi-monitor configurations the top edge of desktop can be negative number. In such case <see cref="P:Tools.WindowsT.NativeT.Win32Window.Top"/> can be also negative and it does not necesarilly mean thet the window is outside of the desktop.
 For top-level windows the location is in screen coordinates, for windows with <see cref="P:Tools.WindowsT.NativeT.Win32Window.Parent"/> in parent' coordinates.</remarks>
	<exception cref="T:Tools.API.Win32APIException">Setting or obtaining of window's rectangle failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.Width">
	<summary>Gets or sets width of the window</summary>
	<value>New width of the window</value>
	<returns>Current width of the window</returns>
	<exception cref="T:Tools.API.Win32APIException">Setting or obtaining of window's rectangle failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.Height">
	<summary>Gets or sets height of the window</summary>
	<value>New height of the window</value>
	<returns>Current height of the window</returns>
	<exception cref="T:Tools.API.Win32APIException">Setting or obtaining of window's rectangle failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.Right">
	<summary>Gets x coordinate of right edge of the window</summary>
	<returns>Current x-coordinate of right edge of the window</returns>
	<remarks>For top-level windows the location is in screen coordinates, for windows with <see cref="P:Tools.WindowsT.NativeT.Win32Window.Parent"/> in parent' coordinates.</remarks>
	<exception cref="T:Tools.API.Win32APIException">Obtaining of window's rectangle failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.Bottom">
	<summary>Gets y coordinate of bottom edge of the window</summary>
	<returns>Current y-coordinate of bottom edge of the window</returns>
	<remarks>For top-level windows the location is in screen coordinates, for windows with <see cref="P:Tools.WindowsT.NativeT.Win32Window.Parent"/> in parent' coordinates.</remarks>
	<exception cref="T:Tools.API.Win32APIException">Obtaining of window's rectangle failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.ScreenArea">
	<summary>Gets or sets window area in screen coordinates (even for non-top-level windows)</summary>
	<returns>Current area that windows covers on screen</returns>
	<value>New area to cover</value>
	<exception cref="T:Tools.API.Win32APIException">Error while setting or obtaining the area (ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid)</exception>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.Text">
	<summary>Gets or sets text associated with the window</summary>
	<value>New text of window</value>
	<returns>Current text of the window</returns>
	<remarks>For windows that represents form it is text from title bar, for other controls like labels it is text of the control. See also <seealso cref="P:System.Windows.Forms.Control.Text"/>.
 This property can can get/set text for all windows in the same process as it is called from and text of windows that has title bar (forms) from any process.</remarks>
	<exception cref="T:Tools.API.Win32APIException">Setting or obtaining of text failed. ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.ToString">
	<summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary>
	<returns>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</returns>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.WndProcPointer">
	<summary>Gets or sets pointer to wnd proc of current window. Used for so-called sub-classing.</summary>
	<returns>Pointer to current wnd proc of current window</returns>
	<value>Pointer to new wnd proc. Note: Old wnd proc is lost when setting this property. You should consider backing old value up.</value>
	<remarks>
 wnd proc (window procedure) is procedure with signature of th <see cref="T:Tools.API.Messages.WndProc"/> delegate that processes all the messages. You should consider using <see cref="P:Tools.WindowsT.NativeT.Win32Window.WndProc"/> property rather then this one.
 You can do this also with <see cref="P:Tools.WindowsT.NativeT.Win32Window.WindowLong(Tools.API.Public.WindowLongs)"/> with <see cref="F:Tools.API.Public.WindowLongs.WndProc"/> as argument.
 </remarks>
	<exception cref="T:Tools.API.Win32APIException">Getting or setting of value failed (i.e. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid)</exception>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.WndProc">
	<summary>Gets or sets wnd proc of current window. Used for so-called window sub-classing.</summary>
	<value>New window proc. Note: Old window proc is lost by setting this property. You should consider backing it up.
 <para>Warning: By setting value of this property youar passing delegate to unmanaged code! You must keep that delegate alive as long as it is in use - that means while the window exists or until <see cref="P:Tools.WindowsT.NativeT.Win32Window.WndProc"/> property is changed again. For example following VB code is completely invalid!</para>
		<example><code>instance.WndProc = AddressOf MyReplacementProc</code></example>
		<para>This example creates new delegate, passes it to unmanaged code, and forgets it. The is no reference to that delegate keeping it alive (protecting it from being garbage collected), so you can get unexpected error when the runtime garbage collector collects the delegate and the there is an attempt to call it. The proper way of setting this property is create an instance of <see cref="T:Tools.API.Messages.WndProc"/>, store it somewhere, pass it here and keep that 'somewhere' alive as long as window uses that replaced wnd proc.</para>
		<para>The need to keep delegate alive may be problem when creating backup of previos window procedure in order to revert change of window procedure in the future. This property returns a managed delegate (to possibly onmanaged code). So, this delegate must be kept alive as long as it is used by window. That is not always the think you want to (or can) do. In such case you should considering backing up pointer to the old wnd proc. Pointer can be used to restore the procedure with no need to keep it alive. To do so use the <see cref="P:Tools.WindowsT.NativeT.Win32Window.WndProcPointer"/> property. It is common parctise to backup old wnd proc in order to call it from new one. You cannot call a pointer. So, if you need to back up old wnd proc in order to restore it as well as in order to call it, the best think you can do is back it up as pointer as well as as delegate.</para>
	</value>
	<returns>Delegate to old window proc</returns>
	<exception cref="T:Tools.API.Win32APIException">Getting or setting value failed (i.e. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid). This is also usually thrown when window comes from another process than property is being got.</exception>
	<remarks>
 Window procedure is used to handle messages of current window.
 <para>If current window represents .NET <see cref="T:System.Windows.Forms.Form"/> or other <see cref="T:System.Windows.Forms.Control"/> and you have chance to derive from it, you'd better to do so and the override <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>.
 You are the proctedted from problems with keeping delegate alive. You can also derive from <see cref="T:System.Windows.Forms.NativeWindow"/> and override it's <see cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)"/>.</para>
	</remarks>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.DefWndProc">
	<summary>Gets default window procedure implementation that responds to all messages in defaut way. This implementation is provided by the OS.</summary>
	<returns>Delegate to <see cref="M:Tools.API.GUI.DefWindowProc(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)"/> (internal, PInvoke function)</returns>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.Equals(System.Object)">
	<summary>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</summary>
	<returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.</returns>
	<param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.Equals(System.Windows.Forms.Control)">
	<summary>Indicates whether the current object is equal to another object of the same type.</summary>
	<param name="other">An object to compare with this object.</param>
	<returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.Equals(System.Windows.Forms.IWin32Window)">
	<summary>Indicates whether the current object is equal to another object of the same type.</summary>
	<param name="other">An object to compare with this object.</param>
	<returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.Equals(Tools.WindowsT.NativeT.Win32Window)">
	<summary>Indicates whether the current object is equal to another object of the same type.</summary>
	<param name="other">An object to compare with this object.</param>
	<returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.Equals(System.Windows.Window)">
	<summary>Indicates whether the current object is equal to another object of the same type.</summary>
	<param name="other">An object to compare with this object.</param>
	<returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.op_Equality(System.Windows.Forms.IWin32Window,Tools.WindowsT.NativeT.Win32Window)">
	<summary>Compares <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.IWin32Window"/></param>
	<param name="b">A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></param>
	<returns>True if <paramref name="a"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> equals to <paramref name="b"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see></returns>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.op_Equality(Tools.WindowsT.NativeT.Win32Window,System.Windows.Window)">
	<summary>Compares <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> and <see cref="T:System.Windows.Window"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.IWin32Window"/></param>
	<param name="b">A <see cref="T:System.Windows.Window"/></param>
	<returns>True if <paramref name="a"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see> equals to handle of <paramref name="b"/></returns>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.op_Equality(System.Windows.Window,Tools.WindowsT.NativeT.Win32Window)">
	<summary>Compares <see cref="T:System.Windows.Window"/> and <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></summary>
	<param name="b">A <see cref="T:System.Windows.Forms.IWin32Window"/></param>
	<param name="a">A <see cref="T:System.Windows.Window"/></param>
	<returns>True if <paramref name="b"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see> equals to handle of <paramref name="a"/></returns>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.op_Equality(Tools.WindowsT.NativeT.Win32Window,System.Windows.Forms.IWin32Window)">
	<summary>Compares <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> and <see cref="T:System.Windows.Forms.IWin32Window"/></summary>
	<param name="a">A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></param>
	<param name="b">A <see cref="T:System.Windows.Forms.IWin32Window"/></param>
	<returns>True if <paramref name="a"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see> equals to <paramref name="b"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see></returns>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.op_Equality(Tools.WindowsT.NativeT.Win32Window,Tools.WindowsT.NativeT.Win32Window)">
	<summary>Compares <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> and <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></summary>
	<param name="a">A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></param>
	<param name="b">A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></param>
	<returns>True if <paramref name="a"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see> equals to <paramref name="b"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see></returns>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.op_Inequality(System.Windows.Forms.IWin32Window,Tools.WindowsT.NativeT.Win32Window)">
	<summary>Compares <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.IWin32Window"/></param>
	<param name="b">A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></param>
	<returns>False if <paramref name="a"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> equals to <paramref name="b"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see></returns>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.op_Inequality(Tools.WindowsT.NativeT.Win32Window,System.Windows.Forms.IWin32Window)">
	<summary>Compares <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> and <see cref="T:System.Windows.Forms.IWin32Window"/></summary>
	<param name="a">A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></param>
	<param name="b">A <see cref="T:System.Windows.Forms.IWin32Window"/></param>
	<returns>False if <paramref name="a"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see> equals to <paramref name="b"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see></returns>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.op_Inequality(Tools.WindowsT.NativeT.Win32Window,Tools.WindowsT.NativeT.Win32Window)">
	<summary>Compares <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> and <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></summary>
	<param name="a">A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></param>
	<param name="b">A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></param>
	<returns>False if <paramref name="a"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see> equals to <paramref name="b"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see></returns>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.op_Inequality(Tools.WindowsT.NativeT.Win32Window,System.Windows.Window)">
	<summary>Compares <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> and <see cref="T:System.Windows.Window"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.IWin32Window"/></param>
	<param name="b">A <see cref="T:System.Windows.Window"/></param>
	<returns>False if <paramref name="a"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see> equals to handle of <paramref name="b"/></returns>
</member><member name="M:Tools.WindowsT.NativeT.Win32Window.op_Inequality(System.Windows.Window,Tools.WindowsT.NativeT.Win32Window)">
	<summary>Compares <see cref="T:System.Windows.Window"/> and <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></summary>
	<param name="b">A <see cref="T:System.Windows.Forms.IWin32Window"/></param>
	<param name="a">A <see cref="T:System.Windows.Window"/></param>
	<returns>False if <paramref name="b"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see> equals to handle of <paramref name="a"/></returns>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.Desktop">
	<summary>Gets window that represents the desktop</summary>
	<exception cref="T:Tools.API.Win32APIException">An error occured</exception>
</member><member name="P:Tools.WindowsT.NativeT.Win32Window.TopLevelWindows">
	<summary>Gets all the top-level windows</summary>
	<returns>List of all top-level windows</returns>
	<exception cref="T:Tools.API.Win32APIException">An error occured</exception>
</member><member name="T:Tools.WindowsT.NativeT.Win32Window">
	<summary>Represents native window used in Microsoft Windows</summary>
	<remarks>This class can be used to manipulate windows and controls that originates from non-.NET applications as well as .NET ones. It can be used in 64b environment as well.</remarks>
</member><member name="M:Tools.API.GUI.GetSystemMenu(System.IntPtr,Tools.API.Common.APIBool)">
	<summary>The <see cref="M:Tools.API.GUI.GetSystemMenu(System.IntPtr,Tools.API.Common.APIBool)"/> function allows the application to access the window menu (also known as the System menu or the Control menu) for copying and modifying.</summary>
	<param name="hwnd">Identifies the window that will own a copy of the window menu.</param>
	<param name="revert">
 Specifies the action to be taken. If this parameter is <see cref="F:Tools.API.Common.APIBool.FALSE"/>, <see cref="M:Tools.API.GUI.GetSystemMenu(System.IntPtr,Tools.API.Common.APIBool)"/> returns the handle of the copy of the window menu currently in use. The copy is initially identical to the window menu, but it can be modified.
 If this parameter is <see cref="F:Tools.API.Common.APIBool.TRUE"/>, <see cref="M:Tools.API.GUI.GetSystemMenu(System.IntPtr,Tools.API.Common.APIBool)"/> resets the window menu back to the Windows default state. The previous window menu, if any, is destroyed.</param>
	<returns>If the <paramref name="bRevert"/> parameter is <see cref="F:Tools.API.Common.APIBool.FALSE"/>, the return value is the handle of a copy of the window menu. If the <paramref name="bRevert"/> parameter is <see cref="F:Tools.API.Common.APIBool.TRUE"/>, the return value is <see cref="F:Tools.API.Common.NULL"/>. </returns>
</member><member name="M:Tools.API.GUI.EnableMenuItem(System.IntPtr,System.Int32,Tools.API.GUI.enmEnableMenuItemStatus)">
	<summary>The <see cref="M:Tools.API.GUI.EnableMenuItem(System.IntPtr,System.Int32,Tools.API.GUI.enmEnableMenuItemStatus)"/> function enables, disables, or grays the specified menu item.</summary>
	<param name="menu">Handle to the menu</param>
	<param name="ideEnableItem">Specifies the menu item to be enabled, disabled, or grayed, as determined by the <paramref name="uEnable"/> parameter. This parameter specifies an item in a menu bar, menu, or submenu. Some menu items that can be manipuleated when <paramref name="enable"/> is combination of <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_BYCOMMAND"/> are listed in <see cref="T:Tools.API.GUI.SystemMenuItems"/></param>
	<param name="enable">
 Controls the interpretation of the <paramref name="uIDEnableItem"/> parameter and indicate whether the menu item is enabled, disabled, or grayed. This parameter must be a combination of either <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_BYCOMMAND"/> or <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_BYPOSITION"/> and <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_ENABLED"/>, <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_DISABLED"/>, or <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_GRAYED"/>. 
 </param>
	<returns>The return value specifies the previous state of the menu item (it is either <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_DISABLED"/>, <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_ENABLED"/>, or <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_GRAYED"/>). If the menu item does not exist, the return value is -1.</returns>
	<remarks>
		<para>An application must use the <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_BYPOSITION"/> flag to specify the correct menu handle. If the menu handle to the menu bar is specified, the top-level menu item (an item in the menu bar) is affected. To set the state of an item in a drop-down menu or submenu by position, an application must specify a handle to the drop-down menu or submenu. </para>
		<para>When an application specifies the <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_BYCOMMAND"/> flag, the system checks all items that open submenus in the menu identified by the specified menu handle. Therefore, unless duplicate menu items are present, specifying the menu handle to the menu bar is sufficient. </para>
		<para>The InsertMenu, InsertMenuItem, LoadMenuIndirect, ModifyMenu, and SetMenuItemInfo API functions can also set the state (enabled, disabled, or grayed) of a menu item.</para>
		<para>When you change a window menu, the menu bar is not immediately updated. To force the update, call API DrawMenuBar.</para>
	</remarks>
</member><member name="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_BYCOMMAND">
	<summary>Indicates that uIDEnableItem gives the identifier of the menu item. If neither the MF_BYCOMMAND nor MF_BYPOSITION flag is specified, the MF_BYCOMMAND flag is the default flag.</summary>
</member><member name="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_BYPOSITION">
	<summary>Indicates that uIDEnableItem gives the zero-based relative position of the menu item.</summary>
</member><member name="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_DISABLED">
	<summary>Indicates that the menu item is disabled, but not grayed, so it cannot be selected.</summary>
</member><member name="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_GRAYED">
	<summary>Indicates that the menu item is disabled and grayed so that it cannot be selected.</summary>
</member><member name="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_ENABLED">
	<summary>Indicates that the menu item is enabled and restored from a grayed state so that it can be selected.</summary>
</member><member name="T:Tools.API.GUI.enmEnableMenuItemStatus">
	<summary>Values for <see cref="M:Tools.API.GUI.EnableMenuItem(System.IntPtr,System.Int32,Tools.API.GUI.enmEnableMenuItemStatus)"/>'s enable parameter</summary>
</member><member name="F:Tools.API.GUI.enmPreviousMenuItemStatus.MF_DISABLED">
	<summary>Indicates that the menu item is disabled, but not grayed, so it cannot be selected.</summary>
</member><member name="F:Tools.API.GUI.enmPreviousMenuItemStatus.MF_GRAYED">
	<summary>Indicates that the menu item is disabled and grayed so that it cannot be selected.</summary>
</member><member name="F:Tools.API.GUI.enmPreviousMenuItemStatus.MF_ENABLED">
	<summary>Indicates that the menu item is enabled and restored from a grayed state so that it can be selected.</summary>
</member><member name="F:Tools.API.GUI.enmPreviousMenuItemStatus.DoesNotExist">
	<summary>Indicates that the menu item does not exist.</summary>
</member><member name="T:Tools.API.GUI.enmPreviousMenuItemStatus">
	<summary>Values returned by <see cref="M:Tools.API.GUI.EnableMenuItem(System.IntPtr,System.Int32,Tools.API.GUI.enmEnableMenuItemStatus)"/> function</summary>
</member><member name="F:Tools.API.GUI.SystemMenuItems.SC_CLOSE">
	<summary>Close (X) button</summary>
</member><member name="F:Tools.API.GUI.SystemMenuItems.SC_MOVE">
	<summary>Move menu item (doesn't work)</summary>
</member><member name="F:Tools.API.GUI.SystemMenuItems.SC_MAXIMIZE">
	<summary>Maximize button (doesn't work)</summary>
</member><member name="F:Tools.API.GUI.SystemMenuItems.SC_MINIMIZE">
	<summary>Mninimize button (doesn't work)</summary>
</member><member name="F:Tools.API.GUI.SystemMenuItems.SC_SIZE">
	<summary>Resize menu item (doesn't work)</summary>
</member><member name="F:Tools.API.GUI.SystemMenuItems.SC_RESTORE">
	<summary>Restore button (doesn't work)</summary>
</member><member name="T:Tools.API.GUI.SystemMenuItems">
	<summary>Win32 window system menu standard items</summary>
	<remarks>Used by <see cref="M:Tools.API.GUI.EnableMenuItem(System.IntPtr,System.Int32,Tools.API.GUI.enmEnableMenuItemStatus)"/>'s ideEnableItem parameter when the enable parameter is combination of <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_BYCOMMAND"/></remarks>
</member><member name="M:Tools.API.GUI.RemoveMenu(System.IntPtr,System.Int32,Tools.API.GUI.enmSelectMenuMethod)">
	<summary>The <see cref="M:Tools.API.GUI.RemoveMenu(System.IntPtr,System.Int32,Tools.API.GUI.enmSelectMenuMethod)"/> function deletes a menu item or detaches a submenu from the specified menu. If the menu item opens a drop-down menu or submenu, <see cref="M:Tools.API.GUI.RemoveMenu(System.IntPtr,System.Int32,Tools.API.GUI.enmSelectMenuMethod)"/> does not destroy the menu or its handle, allowing the menu to be reused. Before this function is called, the GetSubMenu function should retrieve a handle to the drop-down menu or submenu. </summary>
	<param name="hMenu">Handle to the menu to be changed. </param>
	<param name="nPosition">Specifies the menu item to be deleted, as determined by the <paramref name="wFlags"/> parameter. </param>
	<param name="wFlags">Specifies how the <paramref name="nPosition"/> parameter is interpreted. This parameter must be one of the following values: <see cref="F:Tools.API.GUI.enmSelectMenuMethod.MF_BYCOMMAND"/> or <see cref="F:Tools.API.GUI.enmSelectMenuMethod.MF_BYPOSITION"/></param>
	<returns>If the function succeeds, the return value is nonzero.
 If the function fails, the return value is zero. To get extended error information, call GetLastError.
 </returns>
	<remarks>The application must call the <see cref="M:Tools.API.GUI.DrawMenuBar(System.IntPtr)"/> function whenever a menu changes, whether or not the menu is in a displayed window.</remarks>
</member><member name="F:Tools.API.GUI.enmSelectMenuMethod.MF_BYCOMMAND">
	<summary>Indicates that uIDEnableItem gives the identifier of the menu item. If neither the MF_BYCOMMAND nor MF_BYPOSITION flag is specified, the MF_BYCOMMAND flag is the default flag.</summary>
</member><member name="F:Tools.API.GUI.enmSelectMenuMethod.MF_BYPOSITION">
	<summary>Indicates that uIDEnableItem gives the zero-based relative position of the menu item.</summary>
</member><member name="T:Tools.API.GUI.enmSelectMenuMethod">
	<summary>Values for <see cref="M:Tools.API.GUI.EnableMenuItem(System.IntPtr,System.Int32,Tools.API.GUI.enmEnableMenuItemStatus)"/>'s enable parameter</summary>
</member><member name="M:Tools.API.GUI.DrawMenuBar(System.IntPtr)">
	<summary>The DrawMenuBar function redraws the menu bar of the specified window. If the menu bar changes after the system has created the window, this function must be called to draw the changed menu bar. </summary>
	<param name="hwnd">Handle to the window whose menu bar needs redrawing.</param>
	<returns>If the function succeeds, the return value is nonzero.
 If the function fails, the return value is zero. To get extended error information, call GetLastError. 
 </returns>
</member><member name="M:Tools.API.GUI.GetWindowRect(System.IntPtr,Tools.API.GUI.RECT@)">
	<summary>The GetWindowRect function retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.</summary>
	<param name="hwnd">Identifies the window.</param>
	<param name="lpRect">Points to a RECT structure that receives the screen coordinates of the upper-left and lower-right corners of the window.</param>
	<returns>If the function succeeds, the return value is nonzero.
 If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
</member><member name="F:Tools.API.GUI.RECT.Left">
	<summary>Specifies the x-coordinate of the upper-left corner of the rectangle.</summary>
</member><member name="F:Tools.API.GUI.RECT.Top">
	<summary>Specifies the y-coordinate of the upper-left corner of the rectangle.</summary>
</member><member name="F:Tools.API.GUI.RECT.Right">
	<summary>Specifies the x-coordinate of the lower-right corner of the rectangle.</summary>
</member><member name="F:Tools.API.GUI.RECT.Bottom">
	<summary>Specifies the y-coordinate of the lower-right corner of the rectangle.</summary>
</member><member name="M:Tools.API.GUI.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>Initializes <see cref="T:Tools.API.GUI.RECT"/> structure</summary>
	<param name="Left">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
	<param name="Top">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
	<param name="Right">Specifies the x-coordinate of the lower-right corner of the rectangle.</param>
	<param name="Bottom">Specifies the y-coordinate of the lower-right corner of the rectangle.</param>
</member><member name="M:Tools.API.GUI.RECT.op_Implicit(System.Drawing.Rectangle)~Tools.API.GUI.RECT">
	<summary>Converts <see cref="T:System.Drawing.Rectangle"/> to <see cref="T:Tools.API.GUI.RECT"/></summary>
	<param name="a">A <see cref="T:System.Drawing.Rectangle"/></param>
	<returns><see cref="T:Tools.API.GUI.RECT"/> equivalent to <paramref name="a"/></returns>
</member><member name="M:Tools.API.GUI.RECT.op_Implicit(Tools.API.GUI.RECT)~System.Drawing.Rectangle">
	<summary>Converts <see cref="T:Tools.API.GUI.RECT"/> to <see cref="T:System.Drawing.Rectangle"/></summary>
	<param name="a">A <see cref="T:Tools.API.GUI.RECT"/></param>
	<returns><see cref="T:System.Drawing.Rectangle"/> equivalent to <paramref name="a"/></returns>
</member><member name="T:Tools.API.GUI.RECT">
	<summary>The RECT structure defines the coordinates of the upper-left and lower-right corners of a rectangle.</summary>
	<remarks>By convention, the right and bottom edges of the rectangle are normally considered exclusive. In other words, the pixel whose coordinates are (right, bottom) lies immediately outside of the the rectangle. For example, when RECT is passed to the FillRect function, the rectangle is filled up to, but not including, the right column and bottom row of pixels. This structure is identical to the RECTL structure.</remarks>
</member><member name="M:Tools.API.GUI.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>The MoveWindow function changes the position and dimensions of the specified window. For a top-level window, the position and dimensions are relative to the upper-left corner of the screen. For a child window, they are relative to the upper-left corner of the parent window’s client area.</summary>
	<param name="bRepaint">Specifies whether the window is to be repainted. If this parameter is TRUE, the window receives a WM_PAINT message. If the parameter is FALSE, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of moving a child window. If this parameter is FALSE, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.</param>
	<param name="hwnd">Identifies the window.</param>
	<param name="nHeight">Specifies the new height of the window.</param>
	<param name="nWidth">Specifies the new width of the window.</param>
	<param name="x">Specifies the new position of the left side of the window.</param>
	<param name="y">Specifies the new position of the top of the window.</param>
	<returns>If the function succeeds, the return value is nonzero.
 If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
</member><member name="M:Tools.API.GUI.SetParent(System.IntPtr,System.IntPtr)">
	<summary>The SetParent function changes the parent window of the specified child window.</summary>
	<param name="hWndChild">Identifies the child window.</param>
	<param name="hWndNewParent">Identifies the new parent window. If this parameter is NULL, the desktop window becomes the new parent window.</param>
	<returns>If the function succeeds, the return value is nonzero.
 If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
</member><member name="M:Tools.API.GUI.GetParent(System.IntPtr)">
	<summary>The GetParent function retrieves the handle of the specified child window’s parent window.</summary>
	<param name="hwnd">Identifies the window whose parent window handle is to be retrieved.</param>
	<remarks>If the function succeeds, the return value is the handle of the parent window. If the window has no parent window, the return value is NULL. To get extended error information, call GetLastError.</remarks>
</member><member name="M:Tools.API.GUI.SetWindowLong(System.IntPtr,Tools.API.GUI.WindowLongs,System.Int32)">
	<summary>The SetWindowLong function changes an attribute of the specified window. The function also sets a 32-bit (long) value at the specified offset into the extra window memory of a window.</summary>
	<param name="hwnd">Identifies the window and, indirectly, the class to which the window belongs.</param>
	<param name="nIndex">Specifies the zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus 4; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer.</param>
	<param name="dwNewLong">Specifies the replacement value.</param>
	<returns>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</returns>
</member><member name="M:Tools.API.GUI.SetWindowLong(System.IntPtr,Tools.API.GUI.WindowProcs,Tools.API.Messages.WndProc)">
	<summary>Overload of the <see cref="M:Tools.API.GUI.SetWindowLong(System.IntPtr,Tools.API.GUI.WindowLongs,System.Int32)"/> function used to set window proc.</summary>
	<param name="hwnd">Identifies the window and, indirectly, the class to which the window belongs.</param>
	<param name="nIndex">Specifies the zero-based offset to the value to be set. This overload expects one of the <see cref="T:Tools.API.GUI.WindowProcs"/> values</param>
	<param name="NewProc">New window procedure - converted to pointer.</param>
	<returns>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</returns>
</member><member name="M:Tools.API.GUI.GetWindowLong(System.IntPtr,Tools.API.GUI.WindowLongs)">
	<summary>The GetWindowLong function retrieves information about the specified window. The function also retrieves the 32-bit (long) value at the specified offset into the extra window memory of a window.</summary>
	<param name="hwnd">Identifies the window and, indirectly, the class to which the window belongs.</param>
	<param name="nIndex">Specifies the zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer.</param>
	<returns>If the function succeeds, the return value is the requested 32-bit value. 
 If the function fails, the return value is zero. To get extended error information, call GetLastError. </returns>
</member><member name="M:Tools.API.GUI.GetWindowLong(System.IntPtr,Tools.API.GUI.WindowProcs)">
	<summary>Overload of the <see cref="M:Tools.API.GUI.GetWindowLong(System.IntPtr,Tools.API.GUI.WindowLongs)"/> function used to get window proc.</summary>
	<param name="hwnd">Identifies the window and, indirectly, the class to which the window belongs.</param>
	<param name="nIndex">Specifies the zero-based offset to the value to be retrieved. This overload expects one of <see cref="T:Tools.API.GUI.WindowProcs"/> values.</param>
	<returns>If the function succeeds, the return value is requested delegate. If it fails the return value is null.</returns>
</member><member name="F:Tools.API.GUI.WindowLongs.GWL_EXSTYLE">
	<summary>Retrieves the extended window styles. For more information, see CreateWindowEx.</summary>
</member><member name="F:Tools.API.GUI.WindowLongs.GWL_STYLE">
	<summary>Retrieves the window styles.</summary>
</member><member name="F:Tools.API.GUI.WindowLongs.GWL_WNDPROC">
	<summary>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the CallWindowProc function to call the window procedure.</summary>
</member><member name="F:Tools.API.GUI.WindowLongs.GWL_HINSTANCE">
	<summary>Retrieves a handle to the application instance.</summary>
</member><member name="F:Tools.API.GUI.WindowLongs.GWL_HWNDPARENT">
	<summary>Retrieves a handle to the parent window, if any.</summary>
</member><member name="F:Tools.API.GUI.WindowLongs.GWL_ID">
	<summary>Retrieves the identifier of the window.</summary>
</member><member name="F:Tools.API.GUI.WindowLongs.GWL_USERDATA">
	<summary>Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</summary>
</member><member name="F:Tools.API.GUI.WindowLongs.DWL_DLGPROC">
	<summary>Retrieves the address of the dialog box procedure, or a handle representing the address of the dialog box procedure. You must use the CallWindowProc function to call the dialog box procedure.</summary>
</member><member name="F:Tools.API.GUI.WindowLongs.DWL_MSGRESULT">
	<summary>Retrieves the return value of a message processed in the dialog box procedure.</summary>
</member><member name="F:Tools.API.GUI.WindowLongs.DWL_USER">
	<summary>Retrieves extra information private to the application, such as handles or pointers.</summary>
</member><member name="T:Tools.API.GUI.WindowLongs">
	<summary>Predefined window longs for <see cref="M:Tools.API.GUI.GetWindowLong(System.IntPtr,Tools.API.GUI.WindowLongs)"/> and <see cref="M:Tools.API.GUI.SetWindowLong(System.IntPtr,Tools.API.GUI.WindowLongs,System.Int32)"/></summary>
	<remarks>Publicly visible alternative of this enumeration is <see cref="T:Tools.API.Public.WindowLongs"/></remarks>
</member><member name="F:Tools.API.GUI.WindowProcs.GWL_WNDPROC">
	<summary>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the CallWindowProc function to call the window procedure.</summary>
</member><member name="F:Tools.API.GUI.WindowProcs.DWL_DLGPROC">
	<summary>Retrieves the address of the dialog box procedure, or a handle representing the address of the dialog box procedure. You must use the CallWindowProc function to call the dialog box procedure.</summary>
</member><member name="T:Tools.API.GUI.WindowProcs">
	<summary>Subset of <see cref="T:Tools.API.GUI.WindowLongs"/> values related to window procedures</summary>
</member><member name="M:Tools.API.GUI.SetWindowText(System.IntPtr,System.String)">
	<summary>The SetWindowText function changes the text of the specified window’s title bar (if it has one). If the specified window is a control, the text of the control is changed.</summary>
	<param name="hwnd">Identifies the window or control whose text is to be changed.</param>
	<param name="lpString">Points to a null-terminated string to be used as the new title or control text.</param>
	<returns>If the function succeeds, the return value is nonzero.
 If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
</member><member name="M:Tools.API.GUI.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
	<summary>The GetWindowText function copies the text of the specified window’s title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied.</summary>
	<param name="cch">Specifies the maximum number of characters to copy to the buffer, including the NULL character. If the text exceeds this limit, it is truncated.</param>
	<param name="hwnd">Identifies the window or control containing the text.</param>
	<param name="lpString">Points to the buffer that will receive the text.</param>
	<returns>If the function succeeds, the return value is the length, in characters, of the copied string, not including the terminating null character. If the window has no title bar or text, if the title bar is empty, or if the window or control handle is invalid, the return value is zero. To get extended error information, call GetLastError. 
 This function cannot retrieve the text of an edit control in another application. </returns>
</member><member name="M:Tools.API.GUI.GetWindowTextLength(System.IntPtr)">
	<summary>The GetWindowTextLength function retrieves the length, in characters, of the specified window’s title bar text (if the window has a title bar). If the specified window is a control, the function retrieves the length of the text within the control.</summary>
	<param name="hwnd">Identifies the window or control.</param>
	<returns>If the function succeeds, the return value is the length, in characters, of the text. Under certain conditions, this value may actually be greater than the length of the text. For more information, see the following Remarks section. 
 If the window has no text, the return value is zero. To get extended error information, call GetLastError. </returns>
</member><member name="M:Tools.API.GUI.ScreenToClient(System.IntPtr,Tools.API.GUI.POINTAPI@)">
	<summary>The ScreenToClient function converts the screen coordinates of a specified point on the screen to client-area coordinates.</summary>
	<param name="hwnd">Handle to the window whose client area will be used for the conversion.</param>
	<param name="lpPoint">Pointer to a POINT structure that specifies the screen coordinates to be converted.</param>
	<returns>If the function succeeds, the return value is nonzero.
 If the function fails, the return value is zero. </returns>
</member><member name="F:Tools.API.GUI.POINTAPI.x">
	<summary>Specifies the x-coordinate of the point.</summary>
</member><member name="F:Tools.API.GUI.POINTAPI.y">
	<summary>Specifies the y-coordinate of the point.</summary>
</member><member name="M:Tools.API.GUI.POINTAPI.#ctor(System.Int32,System.Int32)">
	<summary>CTor</summary>
	<param name="x">the x-coordinate of the point</param>
	<param name="y">the y-coordinate of the point.</param>
</member><member name="M:Tools.API.GUI.POINTAPI.op_Implicit(Tools.API.GUI.POINTAPI)~System.Drawing.Point">
	<summary>Converts <see cref="T:Tools.API.GUI.POINTAPI"/> to <see cref="T:System.Drawing.Point"/></summary>
	<param name="a">A <see cref="T:Tools.API.GUI.POINTAPI"/></param>
	<returns>A <see cref="T:System.Drawing.Point"/></returns>
</member><member name="M:Tools.API.GUI.POINTAPI.op_Implicit(System.Drawing.Point)~Tools.API.GUI.POINTAPI">
	<summary>Converts <see cref="T:System.Drawing.Point"/> to <see cref="T:Tools.API.GUI.POINTAPI"/></summary>
	<param name="a">A <see cref="T:System.Drawing.Point"/></param>
	<returns>A <see cref="T:Tools.API.GUI.POINTAPI"/></returns>
</member><member name="T:Tools.API.GUI.POINTAPI">
	<summary>The POINT structure defines the x- and y- coordinates of a point.</summary>
</member><member name="M:Tools.API.GUI.GetDesktopWindow">
	<summary>The GetDesktopWindow function returns the handle of the Windows desktop window. The desktop window covers the entire screen. The desktop window is the area on top of which all icons and other windows are painted.</summary>
	<returns>The return value is the handle of the desktop window.</returns>
</member><member name="M:Tools.API.GUI.EnumChildWindows(System.IntPtr,Tools.API.GUI.EnumWindowsProc,System.Int32)">
	<summary>The EnumChildWindows function enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function. EnumChildWindows continues until the last child window is enumerated or the callback function returns FALSE.</summary>
	<param name="hWndParent">Identifies the parent window whose child windows are to be enumerated.</param>
	<param name="lpEnumFunc">Points to an application-defined callback function. For more information about the callback function, see the EnumChildProc callback function.</param>
	<param name="lParam">Specifies a 32-bit, application-defined value to be passed to the callback function.</param>
	<returns>If the function succeeds, the return value is nonzero.
 If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
</member><member name="T:Tools.API.GUI.EnumWindowsProc">
	<summary>The EnumChildProc function is an application-defined callback function used with the EnumChildWindows function. It receives the child window handles. The WNDENUMPROC type defines a pointer to this callback function. EnumChildProc is a placeholder for the application-defined function name.</summary>
	<param name="hWnd">Handle to a child window of the parent window specified in EnumChildWindows.</param>
	<param name="lParam">Specifies the application-defined value given in EnumChildWindows.</param>
	<returns>To continue enumeration, the callback function must return TRUE; to stop enumeration, it must return FALSE.</returns>
</member><member name="M:Tools.API.GUI.EnumWindows(Tools.API.GUI.EnumWindowsProc,System.Int32)">
	<summary>The EnumWindows function enumerates all top-level windows on the screen by passing the handle of each window, in turn, to an application-defined callback function. EnumWindows continues until the last top-level window is enumerated or the callback function returns FALSE.</summary>
	<param name="lpEnumFunc">Points to an application-defined callback function. For more information, see the EnumWindowsProc callback function.</param>
	<param name="lParam">Specifies a 32-bit, application-defined value to be passed to the callback function.</param>
	<remarks>If the function succeeds, the return value is nonzero.
 If the function fails, the return value is zero. To get extended error information, call GetLastError.</remarks>
</member><member name="M:Tools.API.GUI.DefWindowProc(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)">
	<summary>The DefWindowProc function calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure.</summary>
	<param name="hwnd">Identifies the window procedure that received the message.</param>
	<param name="wMsg">Specifies the message.</param>
	<param name="wParam">Specifies additional message information. The content of this parameter depends on the value of the Msg parameter.</param>
	<param name="lParam">Specifies additional message information. The content of this parameter depends on the value of the Msg parameter.</param>
	<returns>The return value is the result of the message processing and depends on the message.</returns>
</member><member name="T:Tools.API.GUI">
	<summary>Contains declarations of Win32 API related to GUI</summary>
</member><member name="F:Tools.WindowsT.FormsT.ExtendedForm.SystemMenuState.Disabled">
	<summary>Indicates that the menu item is disabled, but not grayed, so it cannot be selected, but visually seems like it can be selected. Button in title bar is greyed.
 Note: User CANNOT press Alt+F4 (or use another method exluding force methods (kill)) to close window if used by instance member (not static (shared)) <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/>; if used with static (shared) <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/> user CAN use Alt+F4 (or other 'soft' methods) to close window.</summary>
</member><member name="F:Tools.WindowsT.FormsT.ExtendedForm.SystemMenuState.Enabled">
	<summary>Indicates that the menu item is enabled and restored from a grayed state so that it can be selected.</summary>
</member><member name="F:Tools.WindowsT.FormsT.ExtendedForm.SystemMenuState.Grayed">
	<summary>Indicates that the menu item is disabled and grayed so that it cannot be selected. Button in title bar is greyed.
 Note: User CANNOT press Alt+F4 (or use another method exluding force methods (kill)) to close window if used by instance member (not static (shared)) <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/>; if used with static (shared) <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/> user CAN use Alt+F4 (or other 'soft' methods) to close window.</summary>
</member><member name="T:Tools.WindowsT.FormsT.ExtendedForm.SystemMenuState">
	<summary>Possible states of system menu</summary>
</member><member name="P:Tools.WindowsT.FormsT.ExtendedForm.SystemMenuItemEnabled(System.Int32,Tools.API.GUI.SystemMenuItems)">
	<summary>Gets or sets state of selected item of system menu of window represented by <paramref name="WindowHandle"/></summary>
	<param name="MenuItem">Item of system menu (NOTE: Only <see cref="F:Tools.API.GUI.SystemMenuItems.SC_CLOSE"/> works)</param>
	<param name="WindowHandle">Handle to window which's menu should be queryed or altered</param>
	<value>New state of menu item</value>
	<returns>Curent state of menu item</returns>
	<remarks>Getter is little bit destructive - it sets menu state to <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_ENABLED"/> in order to get its state and then renew its state to just got value</remarks>
	<exception cref="T:System.ArgumentException">Given <paramref name="MenuItem"/> doesnt exists</exception>
</member><member name="F:Tools.WindowsT.FormsT.ExtendedForm._CloseBoxEnabled">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled">
	<summary>Gets or sets state of the close button ('X') of current <see cref="T:Tools.WindowsT.FormsT.ExtendedForm"/></summary>
	<value>New state of button</value>
	<returns>Curent state of button</returns>
	<remarks>Status of menu is not re-set after changing <see cref="P:System.Windows.Forms.Form.MinimizeBox"/> or <see cref="P:System.Windows.Forms.Form.MaximizeBox"/> property. You have to refresh user-visible status of this property manually!</remarks>
	<exception cref="T:System.ArgumentException">Error while accessing system menu status (may be caused by no close item in system menu - e.g. because <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBox"/> is false)</exception>
</member><member name="M:Tools.WindowsT.FormsT.ExtendedForm.ShouldSerializeCloseBoxEnabled">
	<summary>Determines if designer should serialize the <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/> property's value</summary>
	<returns>True when <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/> is not <see cref="F:Tools.WindowsT.FormsT.ExtendedForm.SystemMenuState.Enabled"/> and <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBox"/> is True</returns>
</member><member name="M:Tools.WindowsT.FormsT.ExtendedForm.ResetCloseBoxEnabled">
	<summary>Resets the <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/> property to its default value <see cref="F:Tools.WindowsT.FormsT.ExtendedForm.SystemMenuState.Enabled"/></summary>
</member><member name="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled(System.Windows.Forms.IWin32Window)">
	<summary>Gets or sets state of the close button ('X') of given <see cref="T:System.Windows.Forms.IWin32Window"/></summary>
	<param name="Window">Window (form) to get or set state of close button</param>
	<value>New state of button</value>
	<returns>Curent state of button</returns>
	<remarks>Value set via static (shared) property may be lost when window if minimized, maximized or restored</remarks>
	<exception cref="T:System.ArgumentException">Error while accessing system menu status (may be caused by no close item in system menu)</exception>
</member><member name="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled(System.IntPtr)">
	<summary>Gets or sets state of the close button ('X') of window with given handle</summary>
	<param name="WindowHandle">Handle of window to get or set state of close button</param>
	<value>New state of button</value>
	<returns>Curent state of button</returns>
	<remarks>Value set via static (shared) property may be lost when window if minimized, maximized or restored</remarks>
	<exception cref="T:System.ArgumentException">Error while accessing system menu status (may be caused by no close item in system menu)</exception>
</member><member name="F:Tools.WindowsT.FormsT.ExtendedForm._CloseBox">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBox"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBox">
	<summary>Determines if form has close box in upper-right corner in its caption bar</summary>
	<remarks>Setting this property to false causes mennuitem "Close" disappearing and the X button being grayed. User CANNOT use Alt+F4 or other 'non-killing' method to close the window. Property <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/> cannot be changed while <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBox"/> is False.
 You'd better use <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/>
 Windows Vista: The close (X) button is NOT grayed but does nothing when user click it.</remarks>
</member><member name="M:Tools.WindowsT.FormsT.ExtendedForm.ApplyCloseBoxEnabled">
	<summary>(Re)applies the <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/> property on the system menu</summary>
</member><member name="E:Tools.WindowsT.FormsT.ExtendedForm.WindowStateChanged">
	<summary>Raised after the <see cref="P:System.Windows.Forms.Form.WindowState"/> property is changed</summary>
	<param name="sender">source of the event</param>
	<param name="e">Event params (always <see cref="F:System.EventArgs.Empty"/>)</param>
</member><member name="M:Tools.WindowsT.FormsT.ExtendedForm.OnWindowStateChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.ExtendedForm.WindowStateChanged"/> event</summary>
	<param name="e">Event arguments (always <see cref="F:System.EventArgs.Empty"/>)</param>
	<remarks>Note to inheritors: Always call base class's method in order the event to be raised and additional functionalidy maintained in base class's method to work properly</remarks>
</member><member name="M:Tools.WindowsT.FormsT.ExtendedForm.WndProc(System.Windows.Forms.Message@)">
	<summary>Processes Windows messages.</summary>
	<param name="m">The Windows <see cref="T:System.Windows.Forms.Message"/> to process. </param>
	<remarks>Note for inheritors: Always call base class's method <see cref="M:Tools.WindowsT.FormsT.ExtendedForm.WndProc(System.Windows.Forms.Message@)"/> unless you should block certain base class's functionality</remarks>
</member><member name="T:Tools.WindowsT.FormsT.ExtendedForm">
	<summary><see cref="T:System.Windows.Forms.Form"/> with additional functionality based on Win32 API</summary>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.LinkProperties.#ctor">
	<summary>There is no CTor</summary>
</member><member name="P:Tools.WindowsT.FormsT.UtilitiesT.LinkProperties.Color">
	<summary>Color of not visited not hovered hyperlink</summary>
	<remarks>This system value can be also accesed via <see cref="P:System.Windows.Forms.ToolStripLabel.LinkColor"/></remarks>
</member><member name="P:Tools.WindowsT.FormsT.UtilitiesT.LinkProperties.VisitedColor">
	<summary>Color of visited hyperlink</summary>
	<remarks>This system value can be also accesed via <see cref="P:System.Windows.Forms.ToolStripLabel.VisitedLinkColor"/></remarks>
</member><member name="P:Tools.WindowsT.FormsT.UtilitiesT.LinkProperties.HoveredColor">
	<summary>Color of hovered (active) hyperlink</summary>
	<remarks>This system value can be also accesed via <see cref="P:System.Windows.Forms.ToolStripLabel.ActiveLinkColor"/></remarks>
</member><member name="P:Tools.WindowsT.FormsT.UtilitiesT.LinkProperties.Behavior">
	<summary>System defined link behavior (this is actual setting of Internet Explorer)</summary>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.LinkProperties.LinkFontDecoration(System.Drawing.Font,System.Windows.Forms.LinkBehavior)">
	<summary>Decorates given <see cref="T:System.Drawing.Font"/> according to given <see cref="T:System.Windows.Forms.LinkBehavior"/> applyed on non-hovered link</summary>
	<param name="Base">Base font to be decorated</param>
	<param name="Behavior">Link behavior used to decorate <paramref name="Base"/>. If ommited system setting is used</param>
	<returns><paramref name="Base"/> underlined or not according to <paramref name="Behavior"/> or system settings</returns>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.LinkProperties.HoverLinkFontDecoration(System.Drawing.Font,System.Windows.Forms.LinkBehavior)">
	<summary>Decorates given <see cref="T:System.Drawing.Font"/> according to given <see cref="T:System.Windows.Forms.LinkBehavior"/> applyed on hovered link</summary>
	<param name="Base">Base font to be decorated</param>
	<param name="Behavior">Link behavior used to decorate <paramref name="Base"/>. If ommited system setting is used</param>
	<returns><paramref name="Base"/> underlined or not according to <paramref name="Behavior"/> or system settings</returns>
</member><member name="T:Tools.WindowsT.FormsT.UtilitiesT.LinkProperties">
	<summary>Gives acces of hyperlink settings of Internet Explorer</summary>
	<remarks>See also <seealso cref="T:Tools.DrawingT.SystemColorsExtension"/></remarks>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.#ctor">
	<summary>There is no CTor</summary>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.EnsureLinkFonts(System.Drawing.Font,System.Windows.Forms.LinkBehavior,System.Drawing.Font@,System.Drawing.Font@)">
	<summary>Gets link fonts</summary>
	<param name="baseFont">Default font</param>
	<param name="link">Custom link behavior, pass <see cref="F:System.Windows.Forms.LinkBehavior.SystemDefault"/> to use system default</param>
	<param name="linkFont">Out. Link font</param>
	<param name="hoverLinkFont">Out. Hovered link font</param>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.GetIEColor(System.String)">
	<summary>Gets IE color by its name</summary>
	<param name="name">Name of color</param>
	<returns>Value of color with name <paramref name="name"/></returns>
	<permission cref="T:System.Security.Permissions.RegistryPermission"/>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.GetIELinkBehavior">
	<summary>Gets system-defined default link behavior</summary>
	<returns>System-defined default link behavior</returns>
	<permission cref="T:System.Security.Permissions.RegistryPermission"/>
</member><member name="P:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IEActiveLinkColor">
	<summary>Color of active hyperlink</summary>
</member><member name="P:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IELinkColor">
	<summary>Color of hyperlink</summary>
</member><member name="P:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IEVisitedLinkColor">
	<summary>Color of visited hyperlink</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities._IEActiveLinkColor">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IEActiveLinkColor"/> property</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IEAnchorColor">
	<summary>Name of property that stores hyperlink color</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IEAnchorColorHover">
	<summary>Name of property that stores hovered hyperlink color</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IEAnchorColorVisited">
	<summary>Name of property that stores visited hyperlink color</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities._IELinkColor">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IELinkColor"/> property</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IEMainRegPath">
	<summary>Path of main IE regsitry key</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IESettingsRegPath">
	<summary>Path of settings IE registry key</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities._IEVisitedLinkColor">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IEVisitedLinkColor"/> property</summary>
</member><member name="T:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities">
	<summary>Copy of Micforoft's internal System.Windows.Forms.LinkUtilities class that gives access to link setting of Internet Explorer</summary>
	<remarks>This is 1:1 copy of <see cref="T:System.Windows.Forms.LinkUtilities"/> got by Reflector</remarks>
</member><member name="P:Tools.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Tools.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:Tools.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:Tools.API.Win32APIException.#ctor(System.Int32)">
	<summary>CTor with error number</summary>
	<param name="Number">Error number</param>
</member><member name="M:Tools.API.Win32APIException.#ctor">
	<summary>CTor - error number will be obtained automatically via <see cref="M:Tools.API.Common.GetLastError"/></summary>
</member><member name="T:Tools.API.Win32APIException">
	<summary>Generic exception caused by Win32 API</summary>
</member><member name="F:Tools.API.Common.NULL">
	<summary>Value representing NULL</summary>
</member><member name="F:Tools.API.Common.APIBool.TRUE">
	<summary>True</summary>
</member><member name="F:Tools.API.Common.APIBool.FALSE">
	<summary>False</summary>
</member><member name="T:Tools.API.Common.APIBool">
	<summary>Boolean type as used in Win32 API</summary>
</member><member name="M:Tools.API.Common.GetLastError">
	<summary>Retrieves the calling thread's last-error code value. The last-error code is maintained on a per-thread basis. Multiple threads do not overwrite each other's last-error code.</summary>
	<returns>The return value is the calling thread's last-error code.
 <para>The Return Value section of the documentation for each function that sets the last-error code notes the conditions under which the function sets the last-error code. Most functions that set the thread's last-error code set it when they fail. However, some functions also set the last-error code when they succeed. If the function is not documented to set the last-error code, the value returned by this function is simply the most recent last-error code to have been set; some functions set the last-error code to 0 on success and others do not.</para>
		<para>Windows Me/98/95:  Functions that are actually implemented in 16-bit code do not set the last-error code. You should ignore the last-error code when you call these functions. They include window management functions, GDI functions, and Multimedia functions. For functions that do set the last-error code, you should not rely on GetLastError returning the same value as it does under other versions of Windows.</para></returns>
	<remarks>Visual Basic:  Applications should call <see cref="P:Microsoft.VisualBasic.ErrObject.LastDllError"/> of <see cref="M:Microsoft.VisualBasic.Information.Err"/> instead of <see cref="M:Tools.API.Common.GetLastError"/>.</remarks>
</member><member name="M:Tools.API.Common.FormatMessage(Tools.API.Common.FormatMessageFlags,System.Int32@,System.Int32,Tools.API.Common.Languages,System.String,System.Int32,System.Int32@)">
	<summary>Formats a message string. The function requires a message definition as input. The message definition can come from a buffer passed into the function. It can come from a message table resource in an already-loaded module. Or the caller can ask the function to search the system's message table resource(s) for the message definition. The function finds the message definition in a message table resource based on a message identifier and a language identifier. The function copies the formatted message text to an output buffer, processing any embedded insert sequences if requested.</summary>
	<param name="dwFlags">The formatting options, and how to interpret the lpSource parameter. The low-order byte of dwFlags specifies how the function handles line breaks in the output buffer. The low-order byte can also specify the maximum width of a formatted output line. This parameter can be one or more of enumerated values. If the low-order byte is a nonzero value other than FORMAT_MESSAGE_MAX_WIDTH_MASK, it specifies the maximum number of characters in an output line. The function ignores regular line breaks in the message definition text. The function never splits a string delimited by white space across a line break. The function stores hard-coded line breaks in the message definition text into the output buffer. Hard-coded line breaks are coded with the %n escape sequence.</param>
	<param name="lpSource">The location of the message definition. The type of this parameter depends upon the settings in the dwFlags parameter. 
 <para><see cref="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_FROM_HMODULE"/>: A handle to the module that contains the message table to search.</para>
		<para><see cref="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_FROM_STRING"/>: Pointer to a string that consists of unformatted message text. It will be scanned for inserts and formatted accordingly.</para></param>
	<param name="dwMessageId">The message identifier for the requested message. This parameter is ignored if dwFlags includes FORMAT_MESSAGE_FROM_STRING. </param>
	<param name="dwLanguageId">The language identifier for the requested message. This parameter is ignored if dwFlags includes FORMAT_MESSAGE_FROM_STRING. 
 If you pass a specific LANGID in this parameter, FormatMessage will return a message for that LANGID only. If the function cannot find a message for that LANGID, it returns ERROR_RESOURCE_LANG_NOT_FOUND. If you pass in zero, FormatMessage looks for a message for LANGIDs in the following order:
 <list><item>Language neutral</item>
			<item>Thread LANGID, based on the thread's locale value</item>
			<item>User default LANGID, based on the user's default locale value</item>
			<item>System default LANGID, based on the system default locale value</item>
			<item>US English</item>
		</list>
 If FormatMessage does not locate a message for any of the preceding LANGIDs, it returns any language message string that is present. If that fails, it returns ERROR_RESOURCE_LANG_NOT_FOUND.
 </param>
	<param name="lpBuffer">[out] A pointer to a buffer that receives the null-terminated string that specifies the formatted message. If dwFlags includes <see cref="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_ALLOCATE_BUFFER"/>, the function allocates a buffer using the LocalAlloc function, and places the pointer to the buffer at the address specified in lpBuffer. This buffer cannot be larger than 64K bytes.</param>
	<param name="nSize">If the <see cref="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_ALLOCATE_BUFFER"/> flag is not set, this parameter specifies the size of the output buffer, in TCHARs. If FORMAT_MESSAGE_ALLOCATE_BUFFER is set, this parameter specifies the minimum number of TCHARs to allocate for an output buffer. The output buffer cannot be larger than 64K bytes.</param>
	<param name="Arguments">An array of values that are used as insert values in the formatted message. A %1 in the format string indicates the first value in the Arguments array; a %2 indicates the second argument; and so on.  The interpretation of each value depends on the formatting information associated with the insert in the message definition. The default is to treat each value as a pointer to a null-terminated string. By default, the Arguments parameter is of type va_list*, which is a language- and implementation-specific data type for describing a variable number of arguments. The state of the va_list argument is undefined upon return from the function. If the caller is to use the va_list again, it must destroy the variable argument list pointer using va_end and reinitialize it with va_start. If you do not have a pointer of type va_list*, then specify the FORMAT_MESSAGE_ARGUMENT_ARRAY flag and pass a pointer to an array of DWORD_PTR values; those values are input to the message formatted as the insert values. Each insert must have a corresponding element in the array.</param>
	<returns>If the function succeeds, the return value is the number of TCHARs stored in the output buffer, excluding the terminating null character. If the function fails, the return value is zero. To get extended error information, call <see cref="M:Tools.API.Common.GetLastError"/>.</returns>
	<remarks>Within the message text, several escape sequences are supported for dynamically formatting the message. These escape sequences and their meanings are shown in the following table. All escape sequences start with the percent character (%).</remarks>
</member><member name="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_ALLOCATE_BUFFER">
	<summary>The lpBuffer parameter is a pointer to a PVOID pointer, and that the nSize parameter specifies the minimum number of TCHARs to allocate for an output message buffer. The function allocates a buffer large enough to hold the formatted message, and places a pointer to the allocated buffer at the address specified by lpBuffer. The caller should use the LocalFree function to free the buffer when it is no longer needed.</summary>
</member><member name="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_ARGUMENT_ARRAY">
	<summary>Arguments parameter is not a va_list structure, but is a pointer to an array of values that represent the arguments. This flag cannot be used with 64-bit integer values. If you are using a 64-bit integer, you must use the va_list structure.</summary>
</member><member name="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_FROM_HMODULE">
	<summary>The lpSource parameter is a module handle containing the message-table resource(s) to search. If this lpSource handle is NULL, the current process's application image file will be searched. Cannot be used with FORMAT_MESSAGE_FROM_STRING. If the module has no message table resource, the function fails with ERROR_RESOURCE_TYPE_NOT_FOUND.</summary>
</member><member name="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_FROM_STRING">
	<summary>The lpSource parameter is a pointer to a null-terminated message definition. The message definition may contain insert sequences, just as the message text in a message table resource may. Cannot be used with FORMAT_MESSAGE_FROM_HMODULE or FORMAT_MESSAGE_FROM_SYSTEM.</summary>
</member><member name="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_FROM_SYSTEM">
	<summary>The function should search the system message-table resource(s) for the requested message. If this flag is specified with FORMAT_MESSAGE_FROM_HMODULE, the function searches the system message table if the message is not found in the module specified by lpSource. Cannot be used with FORMAT_MESSAGE_FROM_STRING. If this flag is specified, an application can pass the result of the GetLastError function to retrieve the message text for a system-defined error.</summary>
</member><member name="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_IGNORE_INSERTS">
	<summary>Insert sequences in the message definition are to be ignored and passed through to the output buffer unchanged. This flag is useful for fetching a message for later formatting. If this flag is set, the Arguments parameter is ignored.</summary>
</member><member name="F:Tools.API.Common.FormatMessageFlags.Zero">
	<summary>There are no output line width restrictions. The function stores line breaks that are in the message definition text into the output buffer.</summary>
</member><member name="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_MAX_WIDTH_MASK">
	<summary>The function ignores regular line breaks in the message definition text. The function stores hard-coded line breaks in the message definition text into the output buffer. The function generates no new line breaks.</summary>
</member><member name="T:Tools.API.Common.FormatMessageFlags">
	<summary>Flags for the <see cref="M:Tools.API.Common.FormatMessage(Tools.API.Common.FormatMessageFlags,System.Int32@,System.Int32,Tools.API.Common.Languages,System.String,System.Int32,System.Int32@)"/> function</summary>
	<remarks>If the low-order byte is a nonzero value other than <see cref="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_MAX_WIDTH_MASK"/>, it specifies the maximum number of characters in an output line. The function ignores regular line breaks in the message definition text. The function never splits a string delimited by white space across a line break. The function stores hard-coded line breaks in the message definition text into the output buffer. Hard-coded line breaks are coded with the %n escape sequence.</remarks>
</member><member name="M:Tools.API.Common.LastDllErrorInfo">
	<summary>Gets inforemation about error in last API call</summary>
	<returns>Description of error</returns>
</member><member name="M:Tools.API.Common.LastDllErrorInfo(System.Int32)">
	<summary>Gets information about error with specified number</summary>
	<param name="ErrN">Number of error</param>
	<returns>Description of error</returns>
</member><member name="F:Tools.API.Common.Languages.LANG_NEUTRAL">
	<summary>Neutral language</summary>
</member><member name="F:Tools.API.Common.Languages.SUBLANG_DEFAULT">
	<summary>Default sublanguage</summary>
</member><member name="T:Tools.API.Common.Languages">
	<summary>Langauage constants used by various API functions</summary>
</member><member name="T:Tools.API.Common">
	<summary>Common Win32 API declarations</summary>
</member><member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.Run(System.String[])">
	<summary>Runs a screensaver</summary>
	<param name="cmd">Application command line arguments (excluding executable name)</param>
	<remarks>Use this method as only think called by application. Implemented screen saver will take care about everything else. Alternatively you can use <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.Run(System.String[])"/> method.</remarks>
</member><member name="F:Tools.WindowsT.FormsT.ScreenSaverBase.W32.hWnd">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ScreenSaverBase.W32.Handle"/> property</summary>
</member><member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.W32.#ctor(System.IntPtr)">
	<summary>CTor</summary>
	<param name="hWnd">Handle</param>
</member><member name="P:Tools.WindowsT.FormsT.ScreenSaverBase.W32.Handle">
	<summary>Gets the handle to the window represented by the implementer.</summary>
	<returns>A handle to the window represented by the implementer.</returns>
</member><member name="T:Tools.WindowsT.FormsT.ScreenSaverBase.W32">
	<summary>Simply implements <see cref="T:System.Windows.Forms.IWin32Window"/></summary>
</member><member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.Run``1(System.String[])">
	<summary>Creates new instance of ScreenSaver implementation and runs it</summary>
	<param name="cmd">Application command line arguments (excluding executable name)</param>
	<typeparam name="T">Implementation of ScreenSaverBase</typeparam>
	<remarks>Use this method as only think called by application. Implemented screen saver will take care about everything else. Alternatively you can use <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.Run(System.String[])"/> method of new instance of screen saver implementation.</remarks>
</member><member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.GetScreenForm(System.Windows.Forms.Screen)">
	<summary>Creates instance of form for one screen. Called by default implementation of <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunScreenSaver"/> as 1st method.</summary>
	<param name="Screen">Screen form is created for. Can be null if form is created for preview mode.</param>
	<returns>Default implementation returns new unmodified instance of <see cref="T:System.Windows.Forms.Form"/></returns>
	<remarks>
 You should override this method if you do not <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunScreenSaver"/>.
 The purpose of this method is to create instance of form for one screen. You can completely ignore the <paramref name="Screen"/> parameter. You should not use the <paramref name="Screen"/> parameter for sizing and positioning your form - it is done in <see cref="M:Tools.WindowsT.FormsT.FormatScreenForm(System.Windows.Forms.Form,System.Windows.Forms.Screen)"/>.
 </remarks>
</member><member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.FormatScreenForm(System.Windows.Forms.Form)">
	<summary>Perform screen-independent setup of form.  Called by default implementation of <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunScreenSaver"/> as 2nd method.</summary>
	<param name="Form">Form to setup.</param>
	<remarks>
 If you override <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.GetScreenForm(System.Windows.Forms.Screen)"/> you can perform such setup also there. In this case this method should be overriden with do-nothing method.
 Default implementation sets <see cref="P:System.Windows.Forms.Form.BackColor"/> to <see cref="P:System.Drawing.Color.Black"/>,
 <see cref="P:System.Windows.Forms.Form.FormBorderStyle"/> to <see cref="F:System.Windows.Forms.FormBorderStyle.None"/>,
 <see cref="P:System.Windows.Forms.Form.TopMost"/> to <c>True</c> and 
 <see cref="P:System.Windows.Forms.Form.ShowInTaskbar"/> to <c>False</c>.
 </remarks>
</member><member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.FormatScreenForm(System.Windows.Forms.Form,System.Windows.Forms.Screen)">
	<summary>Performs screen-aware setup of form. Called by default implementation of <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunScreenSaver"/> as 3rd method.</summary>
	<param name="Form">Form to perform setup on</param>
	<param name="Screen">Screen to perform setup for</param>
	<remarks>Default implementation makes <paramref name="Form"/> completely covering <paramref name="Screen"/>.</remarks>
</member><member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.HookFormEvents(System.Windows.Forms.Form)">
	<summary>Hooks events for form created by <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.GetScreenForm(System.Windows.Forms.Screen)"/>. Called by default implementation of <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunScreenSaver"/> as 4th method.</summary>
	<param name="Form">Form to hook eventf for</param>
	<remarks>Default implementation hooks <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.OnAcion(System.Windows.Forms.Form,System.EventArgs)"/> to <see cref="E:System.Windows.Forms.Control.MouseDown"/> and <see cref="E:System.Windows.Forms.Control.KeyDown"/></remarks>
</member><member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.OnAcion(System.Windows.Forms.Form,System.EventArgs)">
	<summary>In case you use default implementation fo <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.HookFormEvents(System.Windows.Forms.Form)"/> this method is called for <see cref="E:System.Windows.Forms.Control.MouseDown"/> and <see cref="E:System.Windows.Forms.Control.KeyDown"/> of each screen form.</summary>
	<param name="sender">For that causes the event</param>
	<param name="e">Event parameters</param>
	<remarks>Default implementation closes all forms containded in <see cref="P:Tools.WindowsT.FormsT.ScreenSaverBase.RunningForms"/> (in thread-safe way)</remarks>
</member><member name="F:Tools.WindowsT.FormsT.ScreenSaverBase._RunningForms">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ScreenSaverBase.RunningForms"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ScreenSaverBase.RunningForms">
	<summary>When screen-saver is running should contain all the forms that performs screen-saving</summary>
</member><member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunScreenSaver">
	<summary>Runs the screen saver</summary>
	<remarks>Default implementation calls <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunScreenSaverOnScreen(System.Windows.Forms.Screen)"/> for each screen in single thread.</remarks>
</member><member name="P:Tools.WindowsT.FormsT.ScreenSaverBase.ThreadingApartment">
	<summary>Gets <see cref="T:System.Threading.ApartmentState"/> used by screen threads</summary>
	<returns>Default implementation returns <see cref="F:System.Threading.ApartmentState.MTA"/></returns>
	<remarks>Override this property if you want to work with COM objects and return <see cref="F:System.Threading.ApartmentState.STA"/></remarks>
</member><member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunPreviewLow(System.Int32)">
	<summary>Low-level implementation of preview</summary>
	<param name="hWnd">Handle of control to display preview in</param>
	<remarks>Default implementation creates new panel and places it into window with handle <paramref name="hWnd"/>. If it succedes calls <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunPreview(System.Windows.Forms.Control)"/>.</remarks>
</member><member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunPreview(System.Windows.Forms.Control)">
	<summary>Runs preview of screen saver</summary>
	<param name="Target">Control to display preview in</param>
	<remarks>
 Default implementation creates screen form using <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.GetScreenForm(System.Windows.Forms.Screen)"/> (with null argument), 
 performs it's screen-independent setup using <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.FormatScreenForm(System.Windows.Forms.Form)"/>,
 sets <see cref="P:System.Windows.Forms.Form.TopLevel"/> to <c>False</c> and <see cref="P:System.Windows.Forms.Control.Parent"/> to <paramref name="Target"/>,
 performs forms's screen-aware setup using <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.FormatPreviewForm(System.Windows.Forms.Form)"/>,
 calls <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.HookPreviewFormEvents(System.Windows.Forms.Form)"/>
 adds form into <see cref="P:Tools.WindowsT.FormsT.ScreenSaverBase.RunningForms"/>, 
 and calls <see cref="M:System.Windows.Forms.Application.Run"/> on that form 
 </remarks>
</member><member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.FormatPreviewForm(System.Windows.Forms.Form)">
	<summary>Performs specific seeting of screen form for displaying it in preview mode</summary>
	<param name="Form">Form to setup. It is already placed in container.</param>
	<remarks>Default implementation sets size and position fo form to fit in its parent.
 To get control in which form is placed, see <see cref="P:System.Windows.Forms.Control.Parent"/>.</remarks>
</member><member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.HookPreviewFormEvents(System.Windows.Forms.Form)">
	<summary>Allows to hook for events of screen form used for preview</summary>
	<param name="Form">Form to hook on</param>
	<remarks>Default implementation does nothing</remarks>
</member><member name="P:Tools.WindowsT.FormsT.ScreenSaverBase.SettingsForm">
	<summary>If implemented in derived class gets instance of form used to setup the screensaver</summary>
</member><member name="T:Tools.WindowsT.FormsT.ScreenSaverBase">
	<summary>Provides common base for implementing Windows screensawers</summary>
</member><member name="T:Tools.API.Messages.WndProc">
	<summary>The WindowProc function is an application-defined function that processes messages sent to a window. The WNDPROC type defines a pointer to this callback function. WindowProc is a placeholder for the application-defined function name.</summary>
	<param name="hWnd">Handle to the window.</param>
	<param name="msg">Specifies the message.</param>
	<param name="wParam">Specifies additional message information. The contents of this parameter depend on the value of the uMsg parameter.</param>
	<param name="lParam">Specifies additional message information. The contents of this parameter depend on the value of the uMsg parameter.</param>
	<returns>The return value is the result of the message processing and depends on the message sent.</returns>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_ACTIVATE">
	<summary>The WM_ACTIVATE message is sent to both the window being activated and the window being deactivated. If the windows use the same input queue, the message is sent synchronously, first to the window procedure of the top-level window being deactivated, then to the window procedure of the top-level window being activated. If the windows use different input queues, the message is sent asynchronously, so the window is activated immediately.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The low-order word specifies whether the window is being activated or deactivated. This parameter can be one of the following values. The high-order word specifies the minimized state of the window being activated or deactivated. A nonzero value indicates the window is minimized. <seealso cref="T:Tools.API.Messages.wParam.WM_ACTIVATE"/></description></item>
			<item><term>lParam</term>
				<description>Handle to the window being activated or deactivated, depending on the value of the wParam parameter. If the low-order word of wParam is WA_INACTIVE, lParam is the handle to the window being activated. If the low-order word of wParam is WA_ACTIVE or WA_CLICKACTIVE, lParam is the handle to the window being deactivated. This handle can be NULL.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646274.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_ACTIVATEAPP">
	<summary>The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies whether the window is being activated or deactivated. This parameter is TRUE if the window is being activated; it is FALSE if the window is being deactivated.</description></item>
			<item><term>lParam</term>
				<description>Specifies a thread identifier (a DWORD). If the wParam parameter is TRUE, lParam is the identifier of the thread that owns the window being deactivated. If wParam is FALSE, lParam is the identifier of the thread that owns the window being activated.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632614.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_AFXFIRST">
	<summary>The lowest value for AFX message.</summary>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_AFXLAST">
	<summary>The highest value for AFX message.</summary>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_APP">
	<summary>The WM_APP constant is used by applications to help define private messages, usually of the form WM_APP+X, where X is an integer value.</summary>
	<remarks>The WM_APP constant is used to distinguish between message values that are reserved for use by the system and values that can be used by an application to send messages within a private window class. The following are the ranges of message numbers available.
 <list type="table">
			<listheader><term>Range</term><description>Meaning</description></listheader>
			<item><term>0 through <see cref="F:Tools.API.Messages.WindowMessages.WM_USER"/> - 1</term>
				<description>Messages reserved for use by the system.</description></item>
			<item><term><see cref="F:Tools.API.Messages.WindowMessages.WM_USER"/> through <see cref="F:Tools.API.Messages.WindowMessages.X7FFF"/></term>
				<description>Integer messages for use by private window classes.</description></item>
			<item><term><see cref="F:Tools.API.Messages.WindowMessages.WM_APP"/> throught <see cref="F:Tools.API.Messages.WindowMessages.XBFFF"/></term>
				<description>Messages available for use by applications.</description></item>
			<item><term><see cref="F:Tools.API.Messages.WindowMessages.XC000"/> through <see cref="F:Tools.API.Messages.WindowMessages.XFFFF"/></term>
				<description>String messages for use by applications.</description></item>
			<item><term>Greater than <see cref="F:Tools.API.Messages.WindowMessages.XFFFF"/></term>
				<description>Reserved by the system.</description></item>
		</list><seealso></seealso>
	</remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_ASKCBFORMATNAME">
	<summary>The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the size, in characters, of the buffer pointed to by the lParam parameter.</description></item>
			<item><term>lParam</term>
				<description>Pointer to the buffer that is to receive the clipboard format name.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms649018.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CANCELJOURNAL">
	<summary>The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle.</summary>
	<remarks><list type="table">
			<item><term>Return value</term>
				<description>This message does not return a value. It is meant to be processed from within an application's main loop or a GetMessage hook procedure, not from a window procedure.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms644971.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CANCELMODE">
	<summary>The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example, the EnableWindow function sends this message when disabling the specified window.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632615.aspx</seealso>
 When the WM_CANCELMODE message is sent, the DefWindowProc function cancels internal processing of standard scroll bar input, cancels internal menu processing, and releases the mouse capture.</remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CAPTURECHANGED">
	<summary>The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used. </description></item>
			<item><term>lParam</term>
				<description>Handle to the window gaining the mouse capture.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645605.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CHANGECBCHAIN">
	<summary>The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the window being removed from the clipboard viewer chain.</description></item>
			<item><term>lParam</term>
				<description>Handle to the next window in the chain following the window being removed. This parameter is NULL if the window being removed is the last window in the chain.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms649019.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CHANGEUISTATE">
	<summary>An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The low-order word specifies the action to be taken. This member can be one of the following values: <seealso cref="T:Tools.API.Messages.wParam.WM_CHANGEUISTATE"/></description></item>
			<item><term>lParam</term>
				<description>Not used. Must be set to 0.</description></item>
			<item><term>Return value</term>
				<description>No return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646342.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CHAR">
	<summary>The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the character code of the key.</description></item>
			<item><term>lParam</term>
				<description>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag, as shown in <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/>.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646276.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CHARTOITEM">
	<summary>Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The low-order word specifies the value of the key the user pressed. The high-order word specifies the current position of the caret.</description></item>
			<item><term>lParam</term>
				<description>Handle to the list box.</description></item>
			<item><term>Return value</term>
				<description>The return value specifies the action that the application performed in response to the message. A return value of –1 or –2 indicates that the application handled all aspects of selecting the item and requires no further action by the list box. A return value of 0 or greater specifies the zero-based index of an item in the list box and indicates that the list box should perform the default action for the keystroke on the specified item.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/bb761358.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CHILDACTIVATE">
	<summary>The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632616.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CLEAR">
	<summary>An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>lParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>Return value</term>
				<description>This message does not return a value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms649020.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CLOSE">
	<summary>The WM_CLOSE message is sent as a signal that a window or an application should terminate.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632617.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_COMMAND">
	<summary>The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>If high word is 0 (message source is menu) or 1 (message source is accelerator), low word is one of <see cref="T:Tools.API.Messages.wParam.WM_COMMAND_low"/> constants (menu identifier or acceleretor identifier). If high word is control-defined notification code (source of message is control), low word is control identifier.</description></item>
			<item><term>lParam</term>
				<description>If high word of wParam is not control defined, low word is zero, otherwise it is handle to control window.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms647591.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_COMPACTING">
	<summary>The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
 A window receives this message through its WindowProc function. </summary>
	<remarks>This message is provided only for compatibility with 16-bit Microsoft Windows-based applications.
 <list type="table">
			<item><term>wParam</term>
				<description>Specifies the ratio of central processing unit (CPU) time currently spent by the system compacting memory to CPU time currently spent by the system performing other operations. For example, 0x8000 represents 50 percent of CPU time spent compacting memory.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632618.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_COMPAREITEM">
	<summary>The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the identifier of the control that sent the WM_COMPAREITEM message.</description></item>
			<item><term>lParam</term>
				<description>Pointer to a COMPAREITEMSTRUCT structure that contains the identifiers and application-supplied data for two items in the combo or list box.</description></item>
			<item><term>Return value</term>
				<description>The return value indicates the relative position of the two items. It may be any of the values from <see cref="T:Tools.API.Messages.ReturnValues.WM_COMPAREITEM"/></description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/bb775921.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CONTEXTMENU">
	<summary>The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the window in which the user right-clicked the mouse. This can be a child window of the window receiving the message. For more information about processing this message, see the Remarks section.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the horizontal position of the cursor, in screen coordinates, at the time of the mouse click.
 The high-order word specifies the vertical position of the cursor, in screen coordinates, at the time of the mouse click. </description></item>
			<item><term>Return value</term>
				<description>No return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms647592.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_COPY">
	<summary>An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>lParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>Return value</term>
				<description>This message does not return a value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms649022.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_COPYDATA">
	<summary>An application sends the WM_COPYDATA message to pass data to another application.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the window passing the data.</description></item>
			<item><term>lParam</term>
				<description>Pointer to a COPYDATASTRUCT structure that contains the data to be passed.</description></item>
			<item><term>Return value</term>
				<description>If the receiving application processes this message, it should return TRUE; otherwise, it should return FALSE.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms649011.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CREATE">
	<summary>The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>Pointer to a CREATESTRUCT structure that contains information about the window being created.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero to continue creation of the window. If the application returns –1, the window is destroyed and the CreateWindowEx or CreateWindow function returns a NULL handle.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632619.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CTLCOLORBTN">
	<summary>The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window processing this message.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>A handle to the display context for the button.</description></item>
			<item><term>lParam</term>
				<description>A handle to the button.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it must return a handle to a brush. The system uses the brush to paint the background of the button. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/bb761849.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CTLCOLORDLG">
	<summary>The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the device context for the dialog box.</description></item>
			<item><term>lParam</term>
				<description>Handle to the dialog box.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it must return a handle to a brush. The system uses the brush to paint the background of the dialog box.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645417.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CTLCOLOREDIT">
	<summary>An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the edit control.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>A handle to the device context for the edit control window.</description></item>
			<item><term>lParam</term>
				<description>A handle to the edit control.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it must return the handle of a brush. The system uses the brush to paint the background of the edit control.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/bb761691.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CTLCOLORLISTBOX">
	<summary>Sent to the parent window of a list box before the system draws the list box. By responding to this message, the parent window can set the text and background colors of the list box by using the specified display device context handle.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the device context for the list box.</description></item>
			<item><term>lParam</term>
				<description>Handle to the list box.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it must return a handle to a brush. The system uses the brush to paint the background of the list box.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/bb761360.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CTLCOLORMSGBOX">
	<summary>The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message, the owner window can set the text and background colors of the message box by using the given display device context handle.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Value of wParam. Identifies the device context for the message box. </description></item>
			<item><term>lParam</term>
				<description>Value of lParam. Identifies the message box.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it must return the handle of a brush. Windows uses the brush to paint the background of the message box.</description></item>
		</list><seealso>http://www.piclist.com/techref/os/win/api/win32/mess/src/msg23.htm</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CTLCOLORSCROLLBAR">
	<summary>This message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message, the parent window can use the specified display context handle to set the background color of the scroll bar control.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the device context for the scroll bar control.</description></item>
			<item><term>lParam</term>
				<description>Handle to the scroll bar.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it must return the handle to a brush. The system uses the brush to paint the background of the scroll bar control.
 Default Action: The DefWindowProc function selects the default system colors for the scroll bar control.</description></item>
		</list><seealso>http://mtbeta.msdn.microsoft.com/en-us/library/aa931510.aspx?altlang=en-us</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CTLCOLORSTATIC">
	<summary>A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the static control.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the device context for the static control window.</description></item>
			<item><term>lParam</term>
				<description>Handle to the static control.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, the return value is a handle to a brush that the system uses to paint the background of the static control.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/bb787524.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_CUT">
	<summary>An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>lParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>Return value</term>
				<description>This message does not return a value. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms649023.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_DEADCHAR">
	<summary>The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut character, and then typing the O key.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the character code generated by the dead key.</description></item>
			<item><term>lParam</term>
				<description>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag, as shown by <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/>.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646277.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_DELETEITEM">
	<summary>Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the identifier of the control that sent the WM_DELETEITEM message.</description></item>
			<item><term>lParam</term>
				<description>Pointer to a DELETEITEMSTRUCT structure that contains information about the item deleted from a list box.</description></item>
			<item><term>Return value</term>
				<description>An application should return TRUE if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/bb761362.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_DESTROY">
	<summary>The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen.
 This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632620.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_DESTROYCLIPBOARD">
	<summary>The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>lParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms649024.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_DEVICECHANGE">
	<summary>Notifies an application of a change to the hardware configuration of a device or the computer.
 A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The event that has occurred. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_DEVICECHANGE"/> values from the Dbt.h header file.</description></item>
			<item><term>lParam</term>
				<description>A pointer to a structure that contains event-specific data. Its format depends on the value of the wParam parameter. For more information, refer to the documentation for each event.</description></item>
			<item><term>Return value</term>
				<description>Return <see cref="F:Tools.API.Messages.ReturnValues.WM_DEVICECHANGE.TRUE"/> to grant the request.
 Return <see cref="F:Tools.API.Messages.ReturnValues.WM_DEVICECHANGE.BROADCAST_QUERY_DENY"/> to deny the request.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/aa363480.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_DEVMODECHANGE">
	<summary>The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>Pointer to a string that specifies the device name.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms533204.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_DISPLAYCHANGE">
	<summary>The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the new image depth of the display, in bits per pixel.</description></item>
			<item><term>lParam</term>
				<description></description>The low-order word specifies the horizontal resolution of the screen.
 The high-order word specifies the vertical resolution of the screen. </item>
			<item><term>Return value</term>
				<description>N/A</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms534847.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_DRAWCLIPBOARD">
	<summary>The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>lParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>Return value</term>
				<description>No return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms649025.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_DRAWITEM">
	<summary>The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
 A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the identifier of the control that sent the WM_DRAWITEM message. If the message was sent by a menu, this parameter is zero.</description></item>
			<item><term>lParam</term>
				<description>Pointer to a DRAWITEMSTRUCT structure containing information about the item to be drawn and the type of drawing required.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return TRUE. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/bb775923.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_DROPFILES">
	<summary>Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>A handle to an internal structure describing the dropped files. Pass this handle DragFinish, DragQueryFile, or DragQueryPoint to retrieve information about the dropped files.</description></item>
			<item><term>lParam</term>
				<description>Must be zero.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/bb774303.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_ENABLE">
	<summary>The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies whether the window has been enabled or disabled. This parameter is TRUE if the window has been enabled or FALSE if the window has been disabled.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632621.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_ENDSESSION">
	<summary>The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
 A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>If the session is being ended, this parameter is TRUE; the session can end any time after all applications have returned from processing this message. Otherwise, it is FALSE.</description></item>
			<item><term>lParam</term>
				<description>This parameter can be one or more of the <see cref="T:Tools.API.Messages.lParam.WM_ENDSESSION"/> values. If this parameter is 0, the system is shutting down or restarting (it is not possible to determine which event is occurring).
 Note that this parameter is a bit mask. To test for this value, use a bit-wise operation; do not test for equality.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso></seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_ENTERIDLE">
	<summary>The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies whether the message is the result of a dialog box or a menu being displayed. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_ENTERIDLE"/> values.</description></item>
			<item><term>lParam</term>
				<description>Handle to the dialog box (if wParam is MSGF_DIALOGBOX) or window containing the displayed menu (if wParam is MSGF_MENU).</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645422.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_ENTERMENULOOP">
	<summary>The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>    Specifies whether the window menu was entered using the TrackPopupMenu function. This parameter has a value of TRUE if the window menu was entered using TrackPopupMenu, and FALSE if it was not.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms647595.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_ENTERSIZEMOVE">
	<summary>The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
 The system sends the WM_ENTERSIZEMOVE message regardless of whether the dragging of full windows is enabled.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632622.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_ERASEBKGND">
	<summary>The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the device context.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>An application should return nonzero if it erases the background; otherwise, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms648055.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_EXITMENULOOP">
	<summary>The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies whether the menu is a shortcut menu. This parameter has a value of TRUE if it is a shortcut menu, FALSE if it is not.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms647599.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_EXITSIZEMOVE">
	<summary>The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632623.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_FONTCHANGE">
	<summary>An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources.
 To send this message, call the SendMessage function with the following parameters. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This message has no parameters.</description></item>
			<item><term>lParam</term>
				<description>This message has no parameters.</description></item>
			<item><term>Return value</term>
				<description>N/A</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms533930.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_GETDLGCODE">
	<summary>The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The virtual key, pressed by the user, that prompted Microsoft Windows to issue this notification. The handler must selectively handle these keys. For instance, the handler might accept and process VK_RETURN but delegate VK_TAB to the owner window.</description></item>
			<item><term>lParam</term>
				<description>Pointer to an MSG structure (or NULL if the system is performing a query).</description></item>
			<item><term>Return value</term>
				<description>The return value is one or more of the <see cref="T:Tools.API.Messages.ReturnValues.WM_GETDLGCODE"/> values, indicating which type of input the application processes.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645425.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_GETFONT">
	<summary>An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>lParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>Return value</term>
				<description>The return value is a handle to the font used by the control, or NULL if the control is using the system font. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632624.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_GETHOTKEY">
	<summary>An application sends a WM_GETHOTKEY message to determine the hot key associated with a window.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>lParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>Return value</term>
				<description>The return value is the virtual-key code and modifiers for the hot key, or NULL if no hot key is associated with the window. The virtual-key code is in the low byte of the return value and the modifiers are in the high byte. The modifiers can be a combination of the <see cref="T:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high"/> flags.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646278.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_GETICON">
	<summary>The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the type of icon being retrieved. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_GETICON"/> values.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>The return value is a handle to the large or small icon, depending on the value of wParam. When an application receives this message, it can return a handle to a large or small icon, or pass the message to the DefWindowProc function.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632625.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_GETMINMAXINFO">
	<summary>The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>    Pointer to a MINMAXINFO structure that contains the default maximized position and dimensions, and the default minimum and maximum tracking sizes. An application can override the defaults by setting the members of this structure.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632626.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_GETOBJECT">
	<summary>Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application.
 Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications handle this message. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Provides additional information about the message and is used only by the system. Servers pass dwFlags as the wParam parameter in the call to LresultFromObject when handling the message.</description></item>
			<item><term>lParam</term>
				<description>Object identifier. This value is one of the object identifier constants or a custom object identifier. Servers usually process WM_GETOBJECT only if the dwObjId is OBJID_CLIENT.</description></item>
			<item><term>Return value</term>
				<description>The return value depends on whether the window or control that receives the message implements IAccessible:
 <list type="list"><item>If implementing IAccessible for the object, the application returns the result obtained from LresultFromObject.</item>
						<item>If not implementing IAccessible, or if dwObjID is not OBJID_CLIENT, server applications should allow the message to pass to DefWindowProc.</item>
					</list></description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms696155.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_GETTEXT">
	<summary>An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the maximum number of TCHARs to be copied, including the terminating null character.
 Windows NT/2000/XP:ANSI applications may have the string in the buffer reduced in size (to a minimum of half that of the wParam value) due to conversion from ANSI to Unicode. </description></item>
			<item><term>lParam</term>
				<description>Pointer to the buffer that is to receive the text.</description></item>
			<item><term>Return value</term>
				<description>    The return value is the number of TCHARs copied, not including the terminating null character.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632627.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_GETTEXTLENGTH">
	<summary>An application sends a WM_GETTEXTLENGTH message to determine the length, in characters, of the text associated with a window.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used and must be zero.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used and must be zero.</description></item>
			<item><term>Return value</term>
				<description>The return value is the length of the text in TCHARs, not including the terminating null character. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632628.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_HANDHELDFIRST">
	<summary>The lowest value for handheld message.</summary>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_HANDHELDLAST">
	<summary>The highest value for handheld message.</summary>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_HELP">
	<summary>Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window associated with the menu; otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently active window.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Must be zero.</description></item>
			<item><term>lParam</term>
				<description>The address of a HELPINFO structure that contains information about the menu item, control, dialog box, or window for which Help is requested.</description></item>
			<item><term>Return value</term>
				<description>Returns TRUE.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/bb774305.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_HOTKEY">
	<summary>The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the identifier of the hot key that generated the message. If the message was generated by a system-defined hot key, this parameter will be one of the <see cref="T:Tools.API.Messages.wParam.WM_HOTKEY"/> values.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the keys that were to be pressed in combination with the key specified by the high-order word to generate the WM_HOTKEY message. This word can be one or more of the <see cref="T:Tools.API.Messages.lParam.WM_HOTKEY_low"/> values. The high-order word specifies the virtual key code of the hot key.</description></item>
			<item><term>Return value</term>
				<description>No return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646279.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_HSCROLL">
	<summary>The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The low-order word specifies a scroll bar value that indicates the user's scrolling request. This word can be one of the <see cref="T:Tools.API.Messages.wParam.WM_HSCROLL_low"/> values.
 The high-order word specifies the current position of the scroll box if the low-order word is SB_THUMBPOSITION or SB_THUMBTRACK; otherwise, this word is not used.</description></item>
			<item><term>lParam</term>
				<description>If the message is sent by a scroll bar, then this parameter is the handle to the scroll bar control. If the message is not sent by a scroll bar, this parameter is NULL.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/bb787575.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_HSCROLLCLIPBOARD">
	<summary>The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the clipboard viewer window.</description></item>
			<item><term>lParam</term>
				<description>The low-order word of lParam specifies a scroll bar event. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_HSCROLL_low"/> values. The high-order word of lParam specifies the current position of the scroll box if the low-order word of lParam is SB_THUMBPOSITION; otherwise, the high-order word is not used.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms649026.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_ICONERASEBKGND">
	<summary>Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window; otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the device context of the icon.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>An application should return nonzero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms648056.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_IME_CHAR">
	<summary>Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>DBCS: A single- or double-byte character value. For a double-byte character, (BYTE)(wParam &gt;&gt; 8) contains the lead byte. Note that the parentheses are necessary because the cast operator has higher precedence than the shift operator.
 Unicode: A Unicode character value. </description></item>
			<item><term>lParam</term>
				<description>The repeat count, scan code, extended key flag, context code, previous key state flag, and transition state flag, with values as defined in <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/>.</description></item>
			<item><term>Return value</term>
				<description>N/A</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776090.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_IME_COMPOSITION">
	<summary>Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>DBCS character representing the latest change to the composition string.</description></item>
			<item><term>lParam</term>
				<description>Value specifying how the composition string or character changed. This parameter can be one or more of the <see cref="T:Tools.API.Messages.lParam.WM_IME_COMPOSITION"/> values. For more information about these values, see IME Composition String Values (http://msdn2.microsoft.com/en-us/library/ms776087.aspx).</description></item>
			<item><term>Return value</term>
				<description>This message has no return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776172.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_IME_COMPOSITIONFULL">
	<summary>Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This message has no parameters.</description></item>
			<item><term>lParam</term>
				<description>This message has no parameters.</description></item>
			<item><term>Return value</term>
				<description>This message has no return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776188.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_IME_CONTROL">
	<summary>Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message, the application calls the SendMessage function with the following parameters.</summary>
	<remarks>The command. This parameter can have one of the following values:<list type="table">
			<item><term>wParam</term>
				<description>The command. This parameter can have one of the <see cref="T:Tools.API.Messages.wParam.WM_IME_CONTROL"/> values.</description></item>
			<item><term>lParam</term>
				<description>Command-specific data, with format dependent on the value of the wParam parameter. For more information, refer to the documentation for each command.</description></item>
			<item><term>Return value</term>
				<description>The message returns a command-specific value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776174.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_IME_ENDCOMPOSITION">
	<summary>Sent to an application when the IME ends composition. A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This message has no parameters.</description></item>
			<item><term>lParam</term>
				<description>This message has no parameters.</description></item>
			<item><term>Return value</term>
				<description>This message has no return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776081.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_IME_KEYDOWN">
	<summary>Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Virtual key code of the key.</description></item>
			<item><term>lParam</term>
				<description>Repeat count, scan code, extended key flag, context code, previous key state flag, and transition state flag, as shown in <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/>.</description></item>
			<item><term>Return value</term>
				<description>An application should return 0 if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776177.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_IME_KEYLAST">
	<summary>The highest value of IME keyboard message.</summary>
	<remarks>Note: There is no WM_IME_KEYFIRST</remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_IME_KEYUP">
	<summary>Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Virtual key code of the key.</description></item>
			<item><term>lParam</term>
				<description>Repeat count, scan code, extended key flag, context code, previous key state flag, and transition state flag, as shown in <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/> .</description></item>
			<item><term>Return value</term>
				<description>An application should return 0 if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776074.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_IME_NOTIFY">
	<summary>Sent to an application to notify it of changes to the IME window. A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The command. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_IME_NOTIFY"/>.</description></item>
			<item><term>lParam</term>
				<description>Command-specific data, with format dependent on the value of the wParam parameter. For more information, refer to the documentation for each command.</description></item>
			<item><term>Return value</term>
				<description>The return value depends on the command sent.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776096.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_IME_REQUEST">
	<summary>Sent to an application to provide commands and request information. A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Command. This parameter can have one of the <see cref="T:Tools.API.Messages.wParam.WM_IME_REQUEST"/> values.</description></item>
			<item><term>lParam</term>
				<description>Command-specific data. For more information, see the description for each command.</description></item>
			<item><term>Return value</term>
				<description>Returns a command-specific value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776130.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_IME_SELECT">
	<summary>Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Selection indicator. This parameter specifies TRUE if the indicated IME is selected. The parameter is set to FALSE if the specified IME is no longer selected.</description></item>
			<item><term>lParam</term>
				<description>Input locale identifier associated with the IME.</description></item>
			<item><term>Return value</term>
				<description>This message has no return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776083.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_IME_SETCONTEXT">
	<summary>Sent to an application when a window is activated. A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>TRUE if the window is active, and FALSE otherwise.</description></item>
			<item><term>lParam</term>
				<description>isplay options. This parameter can have one or more of the <see cref="T:Tools.API.Messages.lParam.WM_IME_SETCONTEXT"/> values:</description></item>
			<item><term>Return value</term>
				<description>Returns the value returned by DefWindowProc or ImmIsUIMessage.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776117.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_IME_STARTCOMPOSITION">
	<summary>Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This message has no parameters.</description></item>
			<item><term>lParam</term>
				<description>This message has no parameters.</description></item>
			<item><term>Return value</term>
				<description>This message has no return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776181.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_INITDIALOG">
	<summary>The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the control to receive the default keyboard focus. The system assigns the default keyboard focus only if the dialog box procedure returns TRUE.</description></item>
			<item><term>lParam</term>
				<description>Specifies additional initialization data. This data is passed to the system as the lParam parameter in a call to the CreateDialogIndirectParam, CreateDialogParam, DialogBoxIndirectParam, or DialogBoxParam function used to create the dialog box. For property sheets, this parameter is a pointer to the PROPSHEETPAGE structure used to create the page. This parameter is zero if any other dialog box creation function is used.</description></item>
			<item><term>Return value</term>
				<description>The dialog box procedure should return TRUE to direct the system to set the keyboard focus to the control specified by wParam. Otherwise, it should return FALSE to prevent the system from setting the default keyboard focus.
 The dialog box procedure should return the value directly. The DWL_MSGRESULT value set by the SetWindowLong function is ignored. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645428.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_INITMENU">
	<summary>The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the menu to be initialized.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646344.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_INITMENUPOPUP">
	<summary>The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the drop-down menu or submenu.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the zero-based relative position of the menu item that opens the drop-down menu or submenu.
 The high-order word indicates whether the drop-down menu is the window menu. If the menu is the window menu, this parameter is TRUE; otherwise, it is FALSE. </description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646347.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_INPUTLANGCHANGE">
	<summary>The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to the DefWindowProc function, which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the character set of the new locale.</description></item>
			<item><term>lParam</term>
				<description>Input locale identifier. For more information, see Languages, Locales, and Keyboard Layouts.</description></item>
			<item><term>Return value</term>
				<description>An application should return nonzero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632629.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_INPUTLANGCHANGEREQUEST">
	<summary>The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Information about the new input locale. This parameter can be a combination of the <see cref="T:Tools.API.Messages.wParam.WM_INPUTLANGCHANGEREQUEST"/> flags.</description></item>
			<item><term>lParam</term>
				<description>Input locale identifier. For more information, see Languages, Locales, and Keyboard Layouts.</description></item>
			<item><term>Return value</term>
				<description>This message is posted, not sent, to the application, so the return value is ignored. To accept the change, the application should pass the message to DefWindowProc. To reject the change, the application should return zero without calling DefWindowProc.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632630.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_KEYDOWN">
	<summary>WM_KEYDOWN</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the virtual-key code of the nonsystem key.</description></item>
			<item><term>lParam</term>
				<description>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag, as shown in <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/> table.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646280.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_KEYFIRST">
	<summary>This message filters for keyboard messages. (This is the lowest value of keyboard message.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Not used.</description></item>
			<item><term>lParam</term>
				<description>Not used.</description></item>
			<item><term>Return value</term>
				<description>None.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/aa931746.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_KEYLAST">
	<summary>This message filters for keyboard messages. (This is the highest value of keyboard message)</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Not used.</description></item>
			<item><term>lParam</term>
				<description>Not used.</description></item>
			<item><term>Return value</term>
				<description>None.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/aa453875.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_KEYUP">
	<summary>The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the virtual-key code of the nonsystem key.</description></item>
			<item><term>lParam</term>
				<description>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag, as shown in <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/>.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646281.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_KILLFOCUS">
	<summary>The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the window that receives the keyboard focus. This parameter can be NULL.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646282.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_LBUTTONDBLCLK">
	<summary>The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645606.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_LBUTTONDOWN">
	<summary>The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
			<item><term>lParam</term>
				<description>he low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645607.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_LBUTTONUP">
	<summary>The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645608.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MBUTTONDBLCLK">
	<summary>The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645609.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MBUTTONDOWN">
	<summary>The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645610.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MBUTTONUP">
	<summary>The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645611.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MDIACTIVATE">
	<summary>An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the MDI child window to be activated.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>If an application sends this message to an MDI client window, the return value is zero.
 An MDI child window should return zero if it processes this message. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms644911.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MDICASCADE">
	<summary>An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the cascade behavior. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_MDICASCADE"/> values.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>If the message succeeds, the return value is TRUE.
 If the message fails, the return value is FALSE. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms644912.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MDICREATE">
	<summary>An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>Pointer to an MDICREATESTRUCT structure containing information that the system uses to create the MDI child window.</description></item>
			<item><term>Return value</term>
				<description>If the message succeeds, the return value is the handle to the new child window.
 If the message fails, the return value is NULL. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms644913.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MDIDESTROY">
	<summary>An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the MDI child window to be closed.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>This message always returns zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms644914.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MDIGETACTIVE">
	<summary>An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>Specifies the maximized state. If this parameter is not NULL, it is a pointer to a value that indicates the maximized state of the MDI child window. If the value is TRUE, the window is maximized; a value of FALSE indicates that it is not. If this parameter is NULL, the parameter is ignored.</description></item>
			<item><term>Return value</term>
				<description>The return value is the handle to the active MDI child window. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms644915.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MDIICONARRANGE">
	<summary>An application sends the WM_MDIICONARRANGE message to a multiple document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>not used; must be zero </description></item>
			<item><term>lParam</term>
				<description>not used; must be zero </description></item>
			<item><term>Return value</term>
				<description>N/A</description></item>
		</list><seealso>http://www.piclist.com/techref/os/win/api/win32/mess/src/msg25_16.htm</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MDIMAXIMIZE">
	<summary>An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the MDI child window to be maximized.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>The return value is always zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms644917.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MDINEXT">
	<summary>An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the MDI child window. The system activates the child window that is immediately before or after the specified child window, depending on the value of the lParam parameter. If the wParam parameter is NULL, the system activates the child window that is immediately before or after the currently active child window.</description></item>
			<item><term>lParam</term>
				<description>If this parameter is zero, the system activates the next MDI child window and places the child window identified by the wParam parameter behind all other child windows. If this parameter is nonzero, the system activates the previous child window, placing it in front of the child window identified by wParam.</description></item>
			<item><term>Return value</term>
				<description>The return value is always zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms644918.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MDIREFRESHMENU">
	<summary>An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>lParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>Return value</term>
				<description>If the message succeeds, the return value is the handle to the frame window menu.
 If the message fails, the return value is NULL. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms644919.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MDIRESTORE">
	<summary>An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the MDI child window to be restored.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>The return value is always zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms644920.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MDISETMENU">
	<summary>Handle to the new frame window menu. If this parameter is NULL, the frame window menu is not changed.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the new frame window menu. If this parameter is NULL, the frame window menu is not changed.</description></item>
			<item><term>lParam</term>
				<description>Handle to the new window menu. If this parameter is NULL, the window menu is not changed.</description></item>
			<item><term>Return value</term>
				<description>If the message succeeds, the return value is the handle to the old frame window menu.
 If the message fails, the return value is zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms644921.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MDITILE">
	<summary>An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the tiling option. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_MDITILE"/> values, optionally combined with MDITILE_SKIPDISABLED to prevent disabled MDI child windows from being tiled.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>If the message succeeds, the return value is TRUE.
 If the message fails, the return value is FALSE. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms644922.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MEASUREITEM">
	<summary>The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control, or menu item when the control or menu is created.
 A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Contains the value of the CtlID member of the MEASUREITEMSTRUCT structure pointed to by the lpMeasureItem parameter. This value identifies the control that sent the WM_MEASUREITEM message. If the value is zero, the message was sent by a menu. If the value is nonzero, the message was sent by a combo box or by a list box. If the value is nonzero, and the value of the itemID member of the MEASUREITEMSTRUCT pointed to by lpMeasureItem is (UINT) –1, the message was sent by a combo edit field.</description></item>
			<item><term>lParam</term>
				<description>Pointer to a MEASUREITEMSTRUCT structure that contains the dimensions of the owner-drawn control or menu item.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return TRUE. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/bb775925.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MENUCHAR">
	<summary>The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The low-order word specifies the character code that corresponds to the key the user pressed.
 The high-order word specifies the active menu type. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_MENUCHAR_high"/> values.</description></item>
			<item><term>lParam</term>
				<description>Handle to the active menu.</description></item>
			<item><term>Return value</term>
				<description>An application that processes this message should return one of the <see cref="T:Tools.API.Messages.ReturnValues.WM_MENUCHAR"/> values in the high-order word of the return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646349.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MENUCOMMAND">
	<summary>The WM_MENUCOMMAND message is sent when the user makes a selection from a menu.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the zero-based index of the item selected.
 Windows 98/Me: The high word is the zero-based index of the item selected. The low word is the item ID. </description></item>
			<item><term>lParam</term>
				<description>Handle to the menu for the item selected.</description></item>
			<item><term>Return value</term>
				<description>No return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms647603.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MENUDRAG">
	<summary>The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the position of the item where the drag operation began.</description></item>
			<item><term>lParam</term>
				<description>Handle to the menu containing the item.</description></item>
			<item><term>Return value</term>
				<description>The application should return one of the <see cref="T:Tools.API.Messages.ReturnValues.WM_MENUDRAG"/> values.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms647606.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MENUGETOBJECT">
	<summary>The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>Pointer to a MENUGETOBJECTINFO structure.</description></item>
			<item><term>Return value</term>
				<description>The application should return one of the <see cref="T:Tools.API.Messages.ReturnValues.WM_MENUGETOBJECT"/> values.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms647607.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MENURBUTTONUP">
	<summary>The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the position of the item when the mouse was released.</description></item>
			<item><term>lParam</term>
				<description>Handle to the menu containing the item.</description></item>
			<item><term>Return value</term>
				<description>No return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms647610.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MENUSELECT">
	<summary>The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The low-order word specifies the menu item or submenu index. If the selected item is a command item, this parameter contains the identifier of the menu item. If the selected item opens a drop-down menu or submenu, this parameter contains the index of the drop-down menu or submenu in the main menu, and the lParam parameter contains the handle to the main (clicked) menu; use the GetSubMenu function to get the menu handle to the drop-down menu or submenu.
 The high-order word specifies one or more menu flags. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_MENUSELECT_high"/> values.</description></item>
			<item><term>lParam</term>
				<description>Handle to the menu that was clicked.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646352.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MOUSEACTIVATE">
	<summary>The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProc function.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the top-level parent window of the window being activated.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.
 The high-order word specifies the identifier of the mouse message generated when the user pressed a mouse button. The mouse message is either discarded or posted to the window, depending on the return value.</description></item>
			<item><term>Return value</term>
				<description>The return value specifies whether the window should be activated and whether the identifier of the mouse message should be discarded. It must be one of the <see cref="T:Tools.API.Messages.ReturnValues.WM_MOUSEACTIVATE"/> values.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645612.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MOUSEFIRST">
	<summary>Lowest value of mouse message</summary>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MOUSEHOVER">
	<summary>The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645613.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MOUSELAST">
	<summary>Highest value of mouse message</summary>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MOUSELEAVE">
	<summary>The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>lParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645615.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MOUSEMOVE">
	<summary>The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645616.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MOUSEWHEEL">
	<summary>The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The high-order word indicates the distance the wheel is rotated, expressed in multiples or divisions of WHEEL_DELTA, which is 120. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user.
 The low-order word indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values (but <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> are <see cref="T:System.Int32">Integers</see> while low-order word is <see cref="T:System.Int16"/>). </description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the x-coordinate of the pointer, relative to the upper-left corner of the screen.
 The high-order word specifies the y-coordinate of the pointer, relative to the upper-left corner of the screen. </description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645617.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MOVE">
	<summary>The WM_MOVE message is sent after a window has been moved.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>Specifies the x and y coordinates of the upper-left corner of the client area of the window. The low-order word contains the x-coordinate while the high-order word contains the y coordinate.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632631.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_MOVING">
	<summary>The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>Pointer to a RECT structure with the current position of the window, in screen coordinates. To change the position of the drag rectangle, an application must change the members of this structure.</description></item>
			<item><term>Return value</term>
				<description>An application should return TRUE if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632632.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NCACTIVATE">
	<summary>The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to indicate an active or inactive state.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies when a title bar or icon needs to be changed to indicate an active or inactive state. If an active title bar or icon is to be drawn, the wParam parameter is TRUE. It is FALSE for an inactive title bar or icon.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>When the wParam parameter is FALSE, an application should return TRUE to indicate that the system should proceed with the default processing, or it should return FALSE to prevent the title bar or icon from being deactivated. When wParam is TRUE, the return value is ignored. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632633.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NCCALCSIZE">
	<summary>The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>If wParam is TRUE, it specifies that the application should indicate which part of the client area contains valid information. The system copies the valid information to the specified area within the new client area.
 If wParam is FALSE, the application does not need to indicate the valid part of the client area.</description></item>
			<item><term>lParam</term>
				<description>If wParam is TRUE, lParam points to an NCCALCSIZE_PARAMS structure that contains information an application can use to calculate the new size and position of the client rectangle.
 If wParam is FALSE, lParam points to a RECT structure. On entry, the structure contains the proposed window rectangle for the window. On exit, the structure should contain the screen coordinates of the corresponding window client area.</description></item>
			<item><term>Return value</term>
				<description>If the wParam parameter is FALSE, the application should return zero.
 If wParam is TRUE, the application should return zero or a combination of the <see cref="T:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE"/> values.
 If wParam is TRUE and an application returns zero, the old client area is preserved and is aligned with the upper-left corner of the new client area.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632634.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NCCREATE">
	<summary>The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>Pointer to the CREATESTRUCT structure that contains information about the window being created. The members of CREATESTRUCT are identical to the parameters of the CreateWindowEx function.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return TRUE to continue creation of the window. If the application returns FALSE, the CreateWindow or CreateWindowEx function will return a NULL handle. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632635.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NCDESTROY">
	<summary>The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window.
 The WM_NCDESTROY message is sent after the child windows have been destroyed. In contrast, WM_DESTROY is sent before the child windows are destroyed.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632636.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NCHITTEST">
	<summary>The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the screen.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the screen. </description></item>
			<item><term>Return value</term>
				<description>The return value of the DefWindowProc function is one of the <see cref="T:Tools.API.Messages.ReturnValues.WM_NCHITTEST"/> values, indicating the position of the cursor hot spot.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645618.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NCLBUTTONDBLCLK">
	<summary>The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
			<item><term>lParam</term>
				<description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645619.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NCLBUTTONDOWN">
	<summary>The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
			<item><term>lParam</term>
				<description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645620.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NCLBUTTONUP">
	<summary>The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
			<item><term>lParam</term>
				<description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645621.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NCMBUTTONDBLCLK">
	<summary>The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
			<item><term>lParam</term>
				<description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645622.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NCMBUTTONDOWN">
	<summary>The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
			<item><term>lParam</term>
				<description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645623.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NCMBUTTONUP">
	<summary>The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
			<item><term>lParam</term>
				<description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645624.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NCMOUSEMOVE">
	<summary>The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
			<item><term>lParam</term>
				<description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645627.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NCPAINT">
	<summary>The WM_NCPAINT message is sent to a window when its frame must be painted.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the update region of the window. The update region is clipped to the window frame.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>An application returns zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms534905.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NCRBUTTONDBLCLK">
	<summary>The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
			<item><term>lParam</term>
				<description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645628.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NCRBUTTONDOWN">
	<summary>The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
			<item><term>lParam</term>
				<description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645629.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NCRBUTTONUP">
	<summary>The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
			<item><term>lParam</term>
				<description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645630.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NEXTDLGCTL">
	<summary>The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>If lParam is TRUE, this parameter identifies the control that receives the focus. If lParam is FALSE, this parameter indicates whether the next or previous control with the WS_TABSTOP style receives the focus. If wParam is zero, the next control receives the focus; otherwise, the previous control with the WS_TABSTOP style receives the focus.</description></item>
			<item><term>lParam</term>
				<description>The low-order word indicates how the system uses wParam. If the low-order word is TRUE, wParam is a handle associated with the control that receives the focus; otherwise, wParam is a flag that indicates whether the next or previous control with the WS_TABSTOP style receives the focus.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms645432.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NEXTMENU">
	<summary>The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the virtual-key code of the key.</description></item>
			<item><term>lParam</term>
				<description>Pointer to a MDINEXTMENU structure that contains information about the menu to be activated.</description></item>
			<item><term>Return value</term>
				<description>No return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms647612.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NOTIFY">
	<summary>Sent by a common control to its parent window when an event has occurred or the control requires some information.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The identifier of the common control sending the message. This identifier is not guaranteed to be unique. An application should use the hwndFrom or idFrom member of the NMHDR structure (passed as the lParam parameter) to identify the control.</description></item>
			<item><term>lParam</term>
				<description>A pointer to an NMHDR structure that contains the notification code and additional information. For some notification messages, this parameter points to a larger structure that has the NMHDR structure as its first member.</description></item>
			<item><term>Return value</term>
				<description>The return value is ignored except for notification messages that specify otherwise.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/bb775583.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NOTIFYFORMAT">
	<summary>Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>A handle to the window that is sending the WM_NOTIFYFORMAT message. If Command is NF_QUERY, this parameter is the handle to a control. If Command is NF_REQUERY, this parameter is the handle to the parent window of a control.</description></item>
			<item><term>lParam</term>
				<description>The command value that specifies the nature of the WM_NOTIFYFORMAT message. This will be one of the <see cref="T:Tools.API.Messages.lParam.WM_NOTIFYFORMAT"/> values.</description></item>
			<item><term>Return value</term>
				<description>Returns one of the <see cref="T:Tools.API.Messages.ReturnValues.WM_NOTIFYFORMAT"/> values.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/bb775584.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_NULL">
	<summary>The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>An application returns zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632637.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_PAINT">
	<summary>The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window. The message is sent when the UpdateWindow or RedrawWindow function is called, or by the DispatchMessage function when the application obtains a WM_PAINT message by using the GetMessage or PeekMessage function.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>An application returns zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms534901.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_PAINTCLIPBOARD">
	<summary>The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the clipboard viewer window.</description></item>
			<item><term>lParam</term>
				<description>Handle to a global memory object that contains a PAINTSTRUCT structure. The structure defines the part of the client area to paint.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms649027.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_PAINTICON">
	<summary>Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows, except in unusual circumstances explained in the Remarks.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>lParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms648057.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_PALETTECHANGED">
	<summary>The WM_PALETTECHANGED message is sent to all top-level and overlapped windows after the window with the keyboard focus has realized its logical palette, thereby changing the system palette. This message enables a window that uses a color palette but does not have the keyboard focus to realize its logical palette and update its client area.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the window that caused the system palette to change.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>N/A</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms532653.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_PALETTEISCHANGING">
	<summary>The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the window that is going to realize its logical palette.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms532632.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_PARENTNOTIFY">
	<summary>The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The low-order word of wParam specifies the event for which the parent is being notified. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_PARENTNOTIFY_low"/> values.</description></item>
			<item><term>lParam</term>
				<description>Meaning depends on value of low-order word of wParam</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632638.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_PASTE">
	<summary>An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>lParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>Return value</term>
				<description>This message does not return a value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms649028.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_PENWINFIRST">
	<summary>The lowes value for pen messages.</summary>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_PENWINLAST">
	<summary>The highest value for pen messages.</summary>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_POWER">
	<summary>Notifies applications that the system, typically a battery-powered personal computer, is about to enter a suspended mode.
 Note  The WM_POWER message is obsolete. It is provided only for compatibility with 16-bit Windows-based applications. Applications should use the WM_POWERBROADCAST message.
 A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The power-event notification. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_POWER"/> values.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>The value an application returns depends on the value of the wParam parameter. If wParam is <see cref="F:Tools.API.Messages.wParam.WM_POWER.PWR_SUSPENDREQUEST"/>, the return value is <see cref="F:Tools.API.Messages.ReturnValues.WM_POWER.PWR_FAIL"/> to prevent the system from entering the suspended state; otherwise, it is <see cref="F:Tools.API.Messages.ReturnValues.WM_POWER.PWR_OK"/>. If wParam is <see cref="F:Tools.API.Messages.wParam.WM_POWER.PWR_SUSPENDRESUME"/> or <see cref="F:Tools.API.Messages.wParam.WM_POWER.PWR_CRITICALRESUME"/>, the return value is zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/aa373245.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_POWERBROADCAST">
	<summary>Notifies applications that a power-management event has occurred.
 A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The power-management event. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_POWERBROADCAST"/> event identifiers.</description></item>
			<item><term>lParam</term>
				<description>    The event-specific data. For most events, this parameter is reserved and not used.
 If the wParam parameter is <see cref="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_POWERSETTINGCHANGE"/>, the lParam parameter is a pointer to a POWERBROADCAST_SETTING structure.</description></item>
			<item><term>Return value</term>
				<description>An application should return TRUE if it processes this message.
 Windows Server 2003, Windows XP, and Windows 2000:  An application can return <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.BROADCAST_QUERY_DENY"/> to deny a <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPEND"/> or <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPENDFAILED"/> request.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/aa373247.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_PRINT">
	<summary>The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the device context to draw in.</description></item>
			<item><term>lParam</term>
				<description>Specifies the drawing options. This parameter can be one or more of the <see cref="T:Tools.API.Messages.lParam.WM_PRINT"/> values.</description></item>
			<item><term>Return value</term>
				<description>N/A</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms534856.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_PRINTCLIENT">
	<summary>The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the device context to draw in.</description></item>
			<item><term>lParam</term>
				<description>Specifies drawing options. This parameter can be one or more of the <see cref="T:Tools.API.Messages.lParam.WM_PRINT"/> values.</description></item>
			<item><term>Return value</term>
				<description>N/A</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms534913.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_QUERYDRAGICON">
	<summary>The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>An application should return a handle to a cursor or icon that the system is to display while the user drags the icon. The cursor or icon must be compatible with the display driver's resolution. If the application returns NULL, the system displays the default cursor.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632639.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_QUERYENDSESSION">
	<summary>The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero.
 After processing this message, the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
 A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is reserved for future use.</description></item>
			<item><term>lParam</term>
				<description>This parameter can be one or more of the <seealso cref="T:Tools.API.Messages.lParam.WM_QUERYENDSESSION"/> values. If this parameter is 0, the system is shutting down or restarting (it is not possible to determine which event is occurring).</description></item>
			<item><term>Return value</term>
				<description>Applications should respect the user's intentions and return TRUE. By default, the DefWindowProc function returns TRUE for this message.
 If shutting down would corrupt the system or media that is being burned, the application can return FALSE. However, it is good practice to respect the user's actions.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/aa376890.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_QUERYNEWPALETTE">
	<summary>The WM_QUERYNEWPALETTE message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to realize its logical palette when it receives the focus.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This message has no parameters.</description></item>
			<item><term>lParam</term>
				<description>This message has no parameters.</description></item>
			<item><term>Return value</term>
				<description>If the window realizes its logical palette, it must return TRUE; otherwise, it must return FALSE.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms532654.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_QUERYOPEN">
	<summary>The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>If the icon can be opened, an application that processes this message should return TRUE; otherwise, it should return FALSE to prevent the icon from being opened.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632640.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_QUEUESYNC">
	<summary>The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>N/A</description></item>
			<item><term>lParam</term>
				<description>N/A</description></item>
			<item><term>Return value</term>
				<description>A CBT application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms644972.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_QUIT">
	<summary>The WM_QUIT message indicates a request to terminate an application and is generated when the application calls the PostQuitMessage function. It causes the GetMessage function to return zero.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the exit code given in the PostQuitMessage function.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>This message does not have a return value because it causes the message loop to terminate before the message is sent to the application's window procedure.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632641.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_RBUTTONDBLCLK">
	<summary>The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646241.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_RBUTTONDOWN">
	<summary>The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646242.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_RBUTTONUP">
	<summary>The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646243.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_RENDERALLFORMATS">
	<summary>The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>lParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms649029.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_RENDERFORMAT">
	<summary>The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the clipboard format to be rendered.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms649030.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SETCURSOR">
	<summary>The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the window that contains the cursor.</description></item>
			<item><term>lParam</term>
				<description>The low-order word of lParam specifies the hit-test code.
 The high-order word of lParam specifies the identifier of the mouse message. </description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return TRUE to halt further processing or FALSE to continue.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms648382.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SETFOCUS">
	<summary>The WM_SETFOCUS message is sent to a window after it has gained the keyboard focus.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the window that has lost the keyboard focus. This parameter can be NULL.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646283.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SETFONT">
	<summary>An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the font (HFONT). If this parameter is NULL, the control uses the default system font to draw text.</description></item>
			<item><term>lParam</term>
				<description>The low-order word of lParam specifies whether the control should be redrawn immediately upon setting the font. If this parameter is TRUE, the control redraws itself.</description></item>
			<item><term>Return value</term>
				<description>This message does not return a value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632642.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SETHOTKEY">
	<summary>An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key, the system activates the window.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The low-order word specifies the virtual-key code to associate with the window.
 The high-order word can be one or more of the <see cref="T:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high"/> values.
 Setting wParam to NULL removes the hot key associated with a window.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>The return value is one of the <see cref="T:Tools.API.Messages.ReturnValues.WM_SETHOTKEY"/>.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646284.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SETICON">
	<summary>An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the type of icon to be set. This parameter can be one of the following values: <see cref="F:Tools.API.Messages.wParam.WM_GETICON.ICON_BIG"/>, <see cref="F:Tools.API.Messages.wParam.WM_GETICON.ICON_SMALL"/>.</description></item>
			<item><term>lParam</term>
				<description>Handle to the new large or small icon. If this parameter is NULL, the icon indicated by wParamis removed.</description></item>
			<item><term>Return value</term>
				<description>The return value is a handle to the previous large or small icon, depending on the value of wParam. It is NULL if the window previously had no icon of the type indicated by wParam.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632643.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SETREDRAW">
	<summary>An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn.
 To send this message, call the SendMessage function with the following parameters. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the redraw state. If this parameter is TRUE, the content can be redrawn after a change. If this parameter is FALSE, the content cannot be redrawn after a change.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>An application returns zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms534853.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SETTEXT">
	<summary>An application sends a WM_SETTEXT message to set the text of a window.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>Pointer to a null-terminated string that is the window text.</description></item>
			<item><term>Return value</term>
				<description>The return value is TRUE if the text is set. It is FALSE (for an edit control), LB_ERRSPACE (for a list box), or CB_ERRSPACE (for a combo box) if insufficient space is available to set the text in the edit control. It is CB_ERR if this message is sent to a combo box without an edit control.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632644.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SETTINGCHANGE">
	<summary>A message that is sent to all top-level windows when the SystemParametersInfo function changes a system-wide setting or when policy settings have changed.
 Applications should send WM_SETTINGCHANGE to all top-level windows when they make changes to system parameters. (This message cannot be sent directly to a window.) To send the WM_SETTINGCHANGE message to all top-level windows, use the SendMessageTimeout function with the hwnd parameter set to HWND_BROADCAST.
 A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>When the system sends this message as a result of a SystemParametersInfo call, wParam is a flag that indicates the system parameter that was changed. For a list of values, see SystemParametersInfo.
 When the system sends this message as a result of a change in policy settings, this parameter indicates the type of policy that was applied. This value is 1 if computer policy was applied or zero if user policy was applied.
 When the system sends this message as a result of a change in locale settings, this parameter is zero.
 When an application sends this message, this parameter must be NULL.</description></item>
			<item><term>lParam</term>
				<description>When the system sends this message as a result of a SystemParametersInfo call, lParam is a pointer to a string that indicates the area containing the system parameter that was changed. This parameter does not usually indicate which specific system parameter changed. (Note that some applications send this message with lParam set to NULL.) In general, when you receive this message, you should check and reload any system parameter settings that are used by your application.
 This string can be the name of a registry key or the name of a section in the Win.ini file. When the string is a registry name, it typically indicates only the leaf node in the registry, not the full path.
 When the system sends this message as a result of a change in policy settings, this parameter points to the string "Policy".
 When the system sends this message as a result of a change in locale settings, this parameter points to the string "intl".
 To effect a change in the environment variables for the system or the user, broadcast this message with lParam set to the string "Environment".
 </description></item>
			<item><term>Return value</term>
				<description>If you process this message, return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms725497.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SHOWWINDOW">
	<summary>The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies whether a window is being shown. If wParam is TRUE, the window is being shown. If wParam is FALSE, the window is being hidden.</description></item>
			<item><term>lParam</term>
				<description>Specifies the status of the window being shown. If lParam is zero, the message was sent because of a call to the ShowWindow function; otherwise, lParam is one of the <see cref="T:Tools.API.Messages.lParam.WM_SHOWWINDOW"/> values.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632645.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SIZE">
	<summary>The WM_SIZE message is sent to a window after its size has changed.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the type of resizing requested. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_SIZE"/> values.</description></item>
			<item><term>lParam</term>
				<description>The low-order word of lParam specifies the new width of the client area.
 The high-order word of lParam specifies the new height of the client area. </description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632646.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SIZECLIPBOARD">
	<summary>The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the clipboard viewer window.</description></item>
			<item><term>lParam</term>
				<description>    Handle to a global memory object that contains a RECT structure. The structure specifies the new dimensions of the clipboard viewer's client area.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms649031.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SIZING">
	<summary>The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies which edge of the window is being sized. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_SIZING"/> values.</description></item>
			<item><term>lParam</term>
				<description>Pointer to a RECT structure with the screen coordinates of the drag rectangle. To change the size or position of the drag rectangle, an application must change the members of this structure.</description></item>
			<item><term>Return value</term>
				<description>An application should return TRUE if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632647.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SPOOLERSTATUS">
	<summary>The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the PR_JOBSTATUS flag.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the number of jobs remaining in the Print Manager queue.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms535643.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_STYLECHANGED">
	<summary>The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies whether the window's styles or extended window styles have changed. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_STYLECHANGED"/> values.</description></item>
			<item><term>lParam</term>
				<description>Pointer to a STYLESTRUCT structure that contains the new styles for the window. An application can examine the styles, but cannot change them.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632648.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_STYLECHANGING">
	<summary>The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies whether the window's styles or extended window styles are changing. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_STYLECHANGED"/> values.</description></item>
			<item><term>lParam</term>
				<description>Pointer to a STYLESTRUCT structure that contains the proposed new styles for the window. An application can examine the styles and, if necessary, change them.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632649.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SYNCPAINT">
	<summary>The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This message has no parameters.</description></item>
			<item><term>lParam</term>
				<description>This message has no parameters.</description></item>
			<item><term>Return value</term>
				<description>An application returns zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms534855.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SYSCHAR">
	<summary>The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is, a character key that is pressed while the ALT key is down.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the character code of the window menu key.</description></item>
			<item><term>lParam</term>
				<description>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag, as shown in the <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/>.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646357.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SYSCOLORCHANGE">
	<summary>The WM_SYSCOLORCHANGE message is sent to all top-level windows when a change is made to a system color setting.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This message has no parameters.</description></item>
			<item><term>lParam</term>
				<description>This message has no parameters.</description></item>
			<item><term>Return value</term>
				<description>N/A</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms532603.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SYSCOMMAND">
	<summary>A window receives this message when the user chooses a command from the Window menu (formerly known as the system or control menu) or when the user chooses the maximize button, minimize button, restore button, or close button.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the type of system command requested. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_SYSCOMMAND"/> values.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the horizontal position of the cursor, in screen coordinates, if a window menu command is chosen with the mouse. Otherwise, this parameter is not used.
 The high-order word specifies the vertical position of the cursor, in screen coordinates, if a window menu command is chosen with the mouse. This parameter is –1 if the command is chosen using a system accelerator, or zero if using a mnemonic. </description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646360.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SYSDEADCHAR">
	<summary>The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a dead key that is pressed while holding down the ALT key.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the character code generated by the system dead key — that is, a dead key that is pressed while holding down the ALT key.</description></item>
			<item><term>lParam</term>
				<description>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag, as shown in the <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/>.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646285.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SYSKEYDOWN">
	<summary>The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the virtual-key code of the key being pressed.</description></item>
			<item><term>lParam</term>
				<description>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag, as shown in the <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/>.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646286.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_SYSKEYUP">
	<summary>The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Specifies the virtual-key code of the key being released.</description></item>
			<item><term>lParam</term>
				<description>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag, as shown in the <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/>.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646287.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_TCARD">
	<summary>Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>A value that indicates the action the user has taken. This can be one of the <see cref="T:Tools.API.Messages.wParam.WM_TCARD"/> values.</description></item>
			<item><term>lParam</term>
				<description>If idAction specifies HELP_TCARD_DATA, this parameter is a long specified by the Help author. Otherwise, this parameter is zero.</description></item>
			<item><term>Return value</term>
				<description>The return value is ignored; use zero. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/bb774307.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_TIMECHANGE">
	<summary>A message that is sent whenever there is a change in the system time.
 A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>lParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms725498.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_TIMER">
	<summary>The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>[in] Specifies the timer identifier.</description></item>
			<item><term>lParam</term>
				<description>[in] Pointer to an application-defined callback function that was passed to the SetTimer function when the timer was installed.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message. </description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms644902.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_UNDO">
	<summary>An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>lParam</term>
				<description>Not used; must be zero.</description></item>
			<item><term>Return value</term>
				<description>If the message succeeds, the return value is TRUE.
 If the message fails, the return value is FALSE.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/bb761693.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_UNINITMENUPOPUP">
	<summary>The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the menu</description></item>
			<item><term>lParam</term>
				<description>The high-order word identifies the menu that was destroyed. Currently, it can only be MF_SYSMENU (the window menu).</description></item>
			<item><term>Return value</term>
				<description>No return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms647614.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_USER">
	<summary>This message is used by applications to help define private messages.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>None.</description></item>
			<item><term>lParam</term>
				<description>None.</description></item>
			<item><term>Return value</term>
				<description>None.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/aa928069.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_USERCHANGED">
	<summary>The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. The system sends this message immediately after updating the settings.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>Return value</term>
				<description>An application should return zero if it processes this message.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632651.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_VKEYTOITEM">
	<summary>Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The low-order word specifies the virtual-key code of the key the user pressed. The high-order word specifies the current position of the caret.</description></item>
			<item><term>lParam</term>
				<description>Handle to the list box.</description></item>
			<item><term>Return value</term>
				<description>The return value specifies the action that the application performed in response to the message. A return value of –2 indicates that the application handled all aspects of selecting the item and requires no further action by the list box. (See Remarks.) A return value of –1 indicates that the list box should perform the default action in response to the keystroke. A return value of 0 or greater specifies the index of an item in the list box and indicates that the list box should perform the default action for the keystroke on the specified item.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/bb761364.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_VSCROLL">
	<summary>The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The high-order word specifies the current position of the scroll box if the low-order word is SB_THUMBPOSITION or SB_THUMBTRACK; otherwise, this word is not used.
 The low-order word specifies a scroll bar value that indicates the user's scrolling request. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_HSCROLL_low"/> values.</description></item>
			<item><term>lParam</term>
				<description>If the message is sent by a scroll bar, this parameter is the handle to the scroll bar control. If the message is not sent by a scroll bar, this parameter is NULL.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/bb787577.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_VSCROLLCLIPBOARD">
	<summary>The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>Handle to the clipboard viewer window.</description></item>
			<item><term>lParam</term>
				<description>The low-order word of lParam specifies a scroll bar event. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_HSCROLL_low"/> values. The high-order word of lParam specifies the current position of the scroll box if the low-order word of lParam is SB_THUMBPOSITION; otherwise, the high-order word of lParam is not used.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms649032.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_WINDOWPOSCHANGED">
	<summary>The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>Pointer to a WINDOWPOS structure that contains information about the window's new size and position.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632652.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_WINDOWPOSCHANGING">
	<summary>The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>Pointer to a WINDOWPOS structure that contains information about the window's new size and position.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms632653.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_WININICHANGE">
	<summary>An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
 Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
 A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>This parameter is not used.</description></item>
			<item><term>lParam</term>
				<description>A pointer to a string containing the name of the system parameter that was changed. For example, this string can be the name of a registry key or the name of a section in the Win.ini file. This parameter is not particularly useful in determining which system parameter changed. For example, when the string is a registry name, it typically indicates only the leaf node in the registry, not the whole path. In addition, some applications send this message with lParam set to NULL. In general, when you receive this message, you should check and reload any system parameter settings that are used by your application.</description></item>
			<item><term>Return value</term>
				<description>If you process this message, return zero.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms725499.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_XBUTTONDBLCLK">
	<summary>The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The low-order word indicates whether various virtual keys are down. It can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.
 The high-order word indicates which button was double-clicked. It can be one of the <see cref="T:Tools.API.Messages.wParam.WM_PARENTNOTIFY_WM_XBUTTONDOWN_high"/> values.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return TRUE. For more information about processing the return value, see the Remarks section (http://msdn2.microsoft.com/en-us/library/ms646244.aspx).</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646244.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_XBUTTONDOWN">
	<summary>The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function.</summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The low-order word indicates whether various virtual keys are down. It can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.
 The high-order word indicates which button was clicked. It can be one of the <see cref="T:Tools.API.Messages.wParam.WM_PARENTNOTIFY_WM_XBUTTONDOWN_high"/> values.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.</description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return TRUE. For more information about processing the return value, see the Remarks section (http://msdn2.microsoft.com/en-us/library/ms646245.aspx).</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646245.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_XBUTTONUP">
	<summary>The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
	<remarks><list type="table">
			<item><term>wParam</term>
				<description>The low-order word indicates whether various virtual keys are down. It can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.
 The high-order word indicates which button was double-clicked. It can be one of the <see cref="T:Tools.API.Messages.wParam.WM_PARENTNOTIFY_WM_XBUTTONDOWN_high"/> values.</description></item>
			<item><term>lParam</term>
				<description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
			<item><term>Return value</term>
				<description>If an application processes this message, it should return TRUE. For more information about processing the return value, see the Remarks section.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms646246.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.WindowMessages.X0000">
	<summary>Messages in range <see cref="F:Tools.API.Messages.WindowMessages.X0000"/> through <see cref="F:Tools.API.Messages.WindowMessages.WM_USER_minus_1"/> are reserved for use by the system.</summary>
</member><member name="F:Tools.API.Messages.WindowMessages.WM_USER_minus_1">
	<summary>Messages in range <see cref="F:Tools.API.Messages.WindowMessages.X0000"/> through <see cref="F:Tools.API.Messages.WindowMessages.WM_USER_minus_1"/> are reserved for use by the system.</summary>
</member><member name="F:Tools.API.Messages.WindowMessages.X7FFF">
	<summary>Messages in range <see cref="F:Tools.API.Messages.WindowMessages.WM_USER"/> through <see cref="F:Tools.API.Messages.WindowMessages.X7FFF"/> are integer messages for use by private window classes.</summary>
</member><member name="F:Tools.API.Messages.WindowMessages.XBFFF">
	<summary>Messages in range <see cref="F:Tools.API.Messages.WindowMessages.WM_APP"/> through <see cref="F:Tools.API.Messages.WindowMessages.XBFFF"/> are available for use by applications.</summary>
</member><member name="F:Tools.API.Messages.WindowMessages.XC000">
	<summary>Messages in range <see cref="F:Tools.API.Messages.WindowMessages.XC000"/> through <see cref="F:Tools.API.Messages.WindowMessages.XFFFF"/> are string messages for use by applications</summary>
</member><member name="F:Tools.API.Messages.WindowMessages.XFFFF">
	<summary><para>Messages in range <see cref="F:Tools.API.Messages.WindowMessages.XC000"/> through <see cref="F:Tools.API.Messages.WindowMessages.XFFFF"/> are string messages for use by applications</para>
		<para>Messages greater than <see cref="F:Tools.API.Messages.WindowMessages.XFFFF"/> are reserved by the system</para></summary>
</member><member name="T:Tools.API.Messages.WindowMessages">
	<summary>Window messages</summary>
</member><member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_COMPATTR">
	<summary>Retrieves or updates the attribute of the composition string.</summary>
</member><member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_COMPCLAUSE">
	<summary>Retrieves or updates clause information of the composition string.</summary>
</member><member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_COMPREADATTR">
	<summary>Retrieves or updates the attributes of the reading string of the current composition.</summary>
</member><member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_COMPREADCLAUSE">
	<summary> 	Retrieves or updates the clause information of the reading string of the composition string.</summary>
</member><member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_COMPREADSTR">
	<summary> 	Retrieves or updates the reading string of the current composition.</summary>
</member><member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_COMPSTR">
	<summary> 	Retrieves or updates the current composition string.</summary>
</member><member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_CURSORPOS">
	<summary> 	Retrieves or updates the cursor position in composition string.</summary>
</member><member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_DELTASTART">
	<summary>Retrieves or updates clause information of the result string.</summary>
</member><member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_RESULTCLAUSE">
	<summary>Retrieves or updates clause information of the result string.</summary>
</member><member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_RESULTREADCLAUSE">
	<summary> 	Retrieves or updates the reading string.</summary>
</member><member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_RESULTREADSTR">
	<summary> 	Retrieves or updates the reading string.</summary>
</member><member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_RESULTSTR">
	<summary>Retrieves or updates the string of the composition result.</summary>
</member><member name="T:Tools.API.Messages.IMECompositionStringValues">
	<summary>These values are used with ImmGetCompositionString and WM_IME_COMPOSITION.</summary>
	<remarks><seealso>http://msdn2.microsoft.com/en-us/library/ms776087.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_ACTIVATE.WA_ACTIVE">
	<summary>Activated by some method other than a mouse click (for example, by a call to the SetActiveWindow function or by use of the keyboard interface to select the window).</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_ACTIVATE.WA_CLICKACTIVE">
	<summary>Activated by a mouse click.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_ACTIVATE.WA_INACTIVE">
	<summary>Deactivated.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_ACTIVATE">
	<summary>Values used for wParam used by <see cref="F:Tools.API.Messages.WindowMessages.WM_ACTIVATE"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE_low.UIS_CLEAR">
	<summary>The UI state flags specified by the high-order word should be cleared.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE_low.UIS_INITIALIZE">
	<summary>The UI state flags specified by the high-order word should be changed based on the last input event. For more information, see Remarks.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE_low.UIS_SET">
	<summary>The UI state flags specified by the high-order word should be set.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_CHANGEUISTATE_low">
	<summary>Values for wParam used by <see cref="F:Tools.API.Messages.WindowMessages.WM_CHANGEUISTATE"/>. Those constants are used for low-order word of wParam.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE_high.UISF_HIDEACCEL">
	<summary>Keyboard accelerators are hidden.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE_high.UISF_HIDEFOCUS">
	<summary>Focus indicators are hidden.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE_high.UISF_ACTIVE">
	<summary>Windows XP: A control should be drawn in the style used for active controls.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_CHANGEUISTATE_high">
	<summary>Values for wParam used by <see cref="F:Tools.API.Messages.WindowMessages.WM_CHANGEUISTATE"/>. Those constants are used for high-order word of wParam.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE.UIS_CLEAR">
	<summary>The UI state flags specified by the high-order word should be cleared.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE.UIS_INITIALIZE">
	<summary>The UI state flags specified by the high-order word should be changed based on the last input event. For more information, see Remarks.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE.UIS_SET">
	<summary>The UI state flags specified by the high-order word should be set.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE.UISF_HIDEACCEL">
	<summary>''' <summary>Keyboard accelerators are hidden.</summary></summary>
</member><member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE.UISF_HIDEFOCUS">
	<summary>Focus indicators are hidden.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE.UISF_ACTIVE">
	<summary>Windows XP: A control should be drawn in the style used for active controls.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_CHANGEUISTATE">
	<summary>Values for wParam used by <see cref="F:Tools.API.Messages.WindowMessages.WM_CHANGEUISTATE"/>.</summary>
	<remarks>Actual value of wParam can be or-ed UIS_* and UISF_* constant</remarks>
</member><member name="T:Tools.API.Messages.wParam.WM_COMMAND_low">
	<summary>Constants used for low word of wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_COMMAND"/> message</summary>
	<remarks>Sorry, I haven't found any documentation for those constants</remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_CONFIGCHANGECANCELED">
	<summary>A request to change the current configuration (dock or undock) has been canceled.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_CONFIGCHANGED">
	<summary>The current configuration has changed, due to a dock or undock.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_CUSTOMEVENT">
	<summary>A custom event has occurred.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_DEVICEARRIVAL">
	<summary>A device or piece of media has been inserted and is now available.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_DEVICEQUERYREMOVE">
	<summary>Permission is requested to remove a device or piece of media. Any application can deny this request and cancel the removal.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_DEVICEQUERYREMOVEFAILED">
	<summary>A request to remove a device or piece of media has been canceled.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_DEVICEREMOVECOMPLETE">
	<summary>A device or piece of media has been removed.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_DEVICEREMOVEPENDING">
	<summary>A device or piece of media is about to be removed. Cannot be denied.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_DEVICETYPESPECIFIC">
	<summary>A device-specific event has occurred.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_DEVNODES_CHANGED">
	<summary>A device has been added to or removed from the system.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_QUERYCHANGECONFIG">
	<summary>Permission is requested to change the current configuration (dock or undock).</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_USERDEFINED">
	<summary>The meaning of this message is user-defined.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_DEVICECHANGE">
	<summary>Constants used for wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_DEVICECHANGE"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_ENTERIDLE.MSGF_DIALOGBOX">
	<summary>The system is idle because a dialog box is displayed.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_ENTERIDLE.MSGF_MENU">
	<summary>The system is idle because a menu is displayed.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_ENTERIDLE">
	<summary>Values used by wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_ENTERIDLE"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_GETICON.ICON_BIG">
	<summary>Retrieve the large icon for the window.</summary>
	<remarks><see cref="F:Tools.API.Messages.WindowMessages.WM_SETICON"/>: Set the large icon for the window.</remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_GETICON.ICON_SMALL">
	<summary>Retrieve the small icon for the window.</summary>
	<remarks><see cref="F:Tools.API.Messages.WindowMessages.WM_SETICON"/>: Set the small icon for the window.</remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_GETICON.ICON_SMALL2">
	<summary>Windows XP: Retrieves the small icon provided by the application. If the application does not provide one, the system uses the system-generated icon for that window.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_GETICON">
	<summary>Values used for wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_GETICON"/> message</summary>
	<remarks><see cref="F:Tools.API.Messages.wParam.WM_GETICON.ICON_BIG"/> and <see cref="F:Tools.API.Messages.wParam.WM_GETICON.ICON_SMALL"/> ia also used by <see cref="F:Tools.API.Messages.WindowMessages.WM_SETICON"/>'s wParam.</remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_HOTKEY.IDHOT_SNAPDESKTOP">
	<summary>The "snap desktop" hot key was pressed.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_HOTKEY.IDHOT_SNAPWINDOW">
	<summary>The "snap window" hot key was pressed.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_HOTKEY">
	<summary>Values used for wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_HOTKEY"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_HSCROLL_low.SB_ENDSCROLL">
	<summary>Ends scroll.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_HSCROLL_low.SB_LEFT">
	<summary>Scrolls to the upper left.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_HSCROLL_low.SB_RIGHT">
	<summary>Scrolls to the lower right.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_HSCROLL_low.SB_LINELEFT">
	<summary>Scrolls left by one unit.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_HSCROLL_low.SB_LINERIGHT">
	<summary>Scrolls right by one unit.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_HSCROLL_low.SB_PAGELEFT">
	<summary>Scrolls left by the width of the window.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_HSCROLL_low.SB_PAGERIGHT">
	<summary>Scrolls right by the width of the window.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_HSCROLL_low.SB_THUMBPOSITION">
	<summary>The user has dragged the scroll box (thumb) and released the mouse button. The high-order word indicates the position of the scroll box at the end of the drag operation.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_HSCROLL_low.SB_THUMBTRACK">
	<summary>The user is dragging the scroll box. This message is sent repeatedly until the user releases the mouse button. The high-order word indicates the position that the scroll box has been dragged to.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_HSCROLL_low">
	<summary>Used for low word of wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_HSCROLL"/> message and for low word of lParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_HSCROLLCLIPBOARD"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_VSCROLL_low.SB_BOTTOM">
	<summary>Scrolls to the lower right.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_VSCROLL_low.SB_ENDSCROLL">
	<summary>Ends scroll.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_VSCROLL_low.SB_LINEDOWN">
	<summary>Scrolls one line down.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_VSCROLL_low.SB_LINEUP">
	<summary>Scrolls one line up.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_VSCROLL_low.SB_PAGEDOWN">
	<summary>Scrolls one page down.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_VSCROLL_low.SB_PAGEUP">
	<summary>Scrolls one page up.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_VSCROLL_low.SB_THUMBPOSITION">
	<summary>The user has dragged the scroll box (thumb) and released the mouse button. The high-order word indicates the position of the scroll box at the end of the drag operation.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_VSCROLL_low.SB_THUMBTRACK">
	<summary>The user is dragging the scroll box. This message is sent repeatedly until the user releases the mouse button. The high-order word indicates the position that the scroll box has been dragged to.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_VSCROLL_low.SB_TOP">
	<summary>Scrolls to the upper left.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_VSCROLL_low">
	<summary>Used for low word of wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_VSCROLL"/> message and for low word of lParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_VSCROLLCLIPBOARD"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_CLOSESTATUSWINDOW">
	<summary>Instructs the IME window to hide the status window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>This parameter is not used.</description></item>
			<item><term>Return value</term><description>Returns 0 if successful or a nonzero value otherwise.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776088.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_GETCANDIDATEPOS">
	<summary>Instructs an IME window to get the position of the candidate window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>Pointer to a CANDIDATEFORM structure that contains the position of the candidate window.</description></item>
			<item><term>Return value</term><description>Returns 0 if successful or a nonzero value otherwise.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776097.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_GETCOMPOSITIONFONT">
	<summary>Instructs an IME window to retrieve the logical font used for displaying intermediate characters in the composition window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>Pointer to a LOGFONT structure that receives information about the logical font.</description></item>
			<item><term>Return value</term><description>Returns 0 if successful or a nonzero value otherwise.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776132.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_GETCOMPOSITIONWINDOW">
	<summary>Instructs an IME window to get the position of the composition window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>Pointer to a COMPOSITIONFORM structure that contains the position of the composition window.</description></item>
			<item><term>Return value</term><description>Returns 0 if successful or a nonzero value otherwise.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776104.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_GETSTATUSWINDOWPOS">
	<summary>Instructs an IME window to get the position of the status window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>This parameter is not used.</description></item>
			<item><term>Return value</term><description>Returns a POINTS structure that contains the x coordinate and y coordinate of the status window position in screen coordinates, relative to the upper left corner of the display screen.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776079.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_OPENSTATUSWINDOW">
	<summary>Instructs the IME window to show the status window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>This parameter is not used.</description></item>
			<item><term>Return value</term><description>Returns 0 if successful or a nonzero value otherwise.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776106.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_SETCANDIDATEPOS">
	<summary>Instructs an IME window to set the position of the candidate window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>Pointer to a CANDIDATEFORM structure that contains the x coordinate and y coordinate for the candidate window. The application should set the dwIndex member of this structure.</description></item>
			<item><term>Return value</term><description>Returns 0 if successful or a nonzero value otherwise.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776165.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_SETCOMPOSITIONFONT">
	<summary>Instructs an IME window to specify the logical font to use for displaying intermediate characters in the composition window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>Pointer to a LOGFONT structure that contains information about the logical font.</description></item>
			<item><term>Return value</term><description>Returns 0 if successful or a nonzero value otherwise.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776168.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_SETCOMPOSITIONWINDOW">
	<summary>Instructs an IME window to set the style of the composition window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>Pointer to a COMPOSITIONFORM structure that contains the style information.</description></item>
			<item><term>Return value</term><description>Returns 0 if successful or a nonzero value otherwise.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776180.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_SETSTATUSWINDOWPOS">
	<summary>Instructs an IME window to set the position of the status window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>Pointer to a POINTS structure that contains the x coordinate and y coordinate of the position of the status window. The coordinates are in screen coordinates, relative to the upper left corner of the display screen.</description></item>
			<item><term>Return value</term><description>Returns 0 if successful or a nonzero value otherwise.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776113.aspx</seealso></remarks>
</member><member name="T:Tools.API.Messages.wParam.WM_IME_CONTROL">
	<summary>Values used for wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_IME_CONTROL"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_CHANGECANDIDATE">
	<summary>Notifies the application when an IME is about to change the content of the candidate window. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>Candidate list flag. Each bit corresponds to a candidate list: bit 0 to the first list, bit 1 to the second list, and so on. If a specified bit is 1, the corresponding candidate window is about to be changed.</description></item>
			<item><term>Return value</term><description>This command has no return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776085.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_CLOSECANDIDATE">
	<summary>Notifies an application when an IME is about to close the candidate window. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>Candidate list flag. Each bit corresponds to a candidate list: bit 0 to the first list, bit 1 to the second, and so on. If a specified bit is 1, the corresponding candidate window is about to be closed.</description></item>
			<item><term>Return value</term><description>This command has no return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776137.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_CLOSESTATUSWINDOW">
	<summary>Notifies an application when an IME is about to close the status window. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>This parameter is not used.</description></item>
			<item><term>Return value</term><description>This command has no return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776129.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_GUIDELINE">
	<summary>Notifies an application when an IME is about to show an error message or other information. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>This parameter is not used.</description></item>
			<item><term>Return value</term><description>This command has no return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776142.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_OPENCANDIDATE">
	<summary>Notifies an application when an IME is about to open the candidate window. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>Candidate list flag. Each bit corresponds to a candidate list: bit 0 to the first list, bit 1 to the second, and so on. If a specified bit is 1, the corresponding candidate window is about to be opened.</description></item>
			<item><term>Return value</term><description>This command has no return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776142.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_OPENSTATUSWINDOW">
	<summary>Notifies an application when an IME is about to open the candidate window. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>Candidate list flag. Each bit corresponds to a candidate list: bit 0 to the first list, bit 1 to the second, and so on. If a specified bit is 1, the corresponding candidate window is about to be opened.</description></item>
			<item><term>Return value</term><description>This command has no return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776148.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_SETCANDIDATEPOS">
	<summary>Notifies an application when an IME is about to create the status window. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>This parameter is not used.</description></item>
			<item><term>Return value</term><description>This command has no return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776166.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_SETCOMPOSITIONFONT">
	<summary>Notifies an application when the font of the input context is updated. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>This parameter is not used.</description></item>
			<item><term>Return value</term><description>This command has no return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776123.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_SETCOMPOSITIONWINDOW">
	<summary>Notifies an application when the style or position of the composition window is updated. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>This parameter is not used.</description></item>
			<item><term>Return value</term><description>This command has no return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776098.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_SETCONVERSIONMODE">
	<summary>Notifies an application when the conversion mode of the input context is updated. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>This parameter is not used.</description></item>
			<item><term>Return value</term><description>This command has no return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776163.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_SETOPENSTATUS">
	<summary>Notifies an application when the open status of the input context is updated. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>This parameter is not used.</description></item>
			<item><term>Return value</term><description>This command has no return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776139.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_SETSENTENCEMODE">
	<summary>Notifies an application when the sentence mode of the input context is updated. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>This parameter is not used.</description></item>
			<item><term>Return value</term><description>This command has no return value.</description></item>
		</list><seealso></seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_SETSTATUSWINDOWPOS">
	<summary>Notifies an application when the status window position in the input context is updated. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>This parameter is not used.</description></item>
			<item><term>Return value</term><description>This command has no return value.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776184.aspx</seealso></remarks>
</member><member name="T:Tools.API.Messages.wParam.WM_IME_NOTIFY">
	<summary>Values used for wParam of message <see cref="F:Tools.API.Messages.WindowMessages.WM_IME_NOTIFY"/></summary>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_REQUEST.IMR_CANDIDATEWINDOW">
	<summary>Notfies an application when a selected IME needs information about the candidate window. The application receives this command through the WM_IME_REQUEST message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>Pointer to a buffer containing a CANDIDATEFORM structure. Its dwIndex member contains the index to the candidate window referenced.</description></item>
			<item><term>Return value</term><description>Returns a nonzero value if the application fills in the CANDIDATEFORM structure. Otherwise, the command returns 0.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776080.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_REQUEST.IMR_COMPOSITIONFONT">
	<summary>Notifies an application when a selected IME needs information about the font used by the composition window. The application receives this command through the WM_IME_REQUEST message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>Pointer to a buffer containing a LOGFONT structure. The application fills in the values for the current composition window.</description></item>
			<item><term>Return value</term><description>Returns a nonzero value if the application fills in the LOGFONT structure. Otherwise, the command returns 0.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776149.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_REQUEST.IMR_COMPOSITIONWINDOW">
	<summary>Notifies an application when a selected IME needs information about the composition window. The application receives this command through the WM_IME_REQUEST message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>Pointer to a buffer containing a COMPOSITIONFORM structure.</description></item>
			<item><term>Return value</term><description>Returns a nonzero value if the application fills in the COMPOSITIONFORM structure. Otherwise, the command returns 0.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776169.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_REQUEST.IMR_CONFIRMRECONVERTSTRING">
	<summary>Notifies an application when the IME needs to change the RECONVERTSTRING structure. The application receives this command through the WM_IME_REQUEST message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>Pointer to a RECONVERTSTRING structure from the IME. For more information, see the Remarks section.</description></item>
			<item><term>Return value</term><description>Returns a nonzero value if the application accepts the changed RECONVERTSTRING structure. Otherwise, the command returns 0 and the IME uses the original RECONVERTSTRING structure.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776182.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_REQUEST.IMR_DOCUMENTFEED">
	<summary>Notifies an application when the selected IME needs the converted string from the application. The application receives this command through the WM_IME_REQUEST message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>Pointer to a buffer to contain theRECONVERTSTRING structure.</description></item>
			<item><term>Return value</term><description>Returns the current reconversion string structure. If lParam is set to a null pointer, the application returns the required size for the buffer to hold the structure. The command returns 0 if it does not succeed.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776164.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_REQUEST.IMR_QUERYCHARPOSITION">
	<summary>Notifies an application when the selected IME needs information about the coordinates of a character in the composition string. The application receives this command through the WM_IME_REQUEST message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>Pointer to an IMECHARPOSITION structure that contains the position of the character in the composition window.</description></item>
			<item><term>Return value</term><description>Returns a nonzero value if the application fills the IMECHARPOSITION structure. Otherwise, the command returns 0.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776110.aspx</seealso></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_IME_REQUEST.IMR_RECONVERTSTRING">
	<summary>Notifies an application when a selected IME needs a string for reconversion. The application receives this command through the WM_IME_REQUEST message with wParam and lParam set as follows.</summary>
	<remarks><list type="table">
			<item><term>lParam</term><description>Pointer to a buffer containing the RECONVERTSTRING structure and strings.</description></item>
			<item><term>Return value</term><description>Returns the current reconversion string structure. If lParam is set to a null pointer, the application returns the size for the buffer required to hold the structure. The command returns 0 if it does not succeed.</description></item>
		</list><seealso>http://msdn2.microsoft.com/en-us/library/ms776135.aspx</seealso></remarks>
</member><member name="T:Tools.API.Messages.wParam.WM_IME_REQUEST">
	<summary>Values used for wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_IME_REQUEST"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_INPUTLANGCHANGEREQUEST.INPUTLANGCHANGE_BACKWARD">
	<summary>Windows 2000/XP: A hot key was used to choose the previous input locale in the installed list of input locales. This flag cannot be used with the INPUTLANGCHANGE_FORWARD flag.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_INPUTLANGCHANGEREQUEST.INPUTLANGCHANGE_FORWARD">
	<summary>Windows 2000/XP: A hot key was used to choose the next input locale in the installed list of input locales. This flag cannot be used with the INPUTLANGCHANGE_BACKWARD flag.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_INPUTLANGCHANGEREQUEST.INPUTLANGCHANGE_SYSCHARSET">
	<summary>Windows 2000/XP:The new input locale's keyboard layout can be used with the system character set.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_INPUTLANGCHANGEREQUEST">
	<summary>Values used for wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUTLANGCHANGEREQUEST"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK.MK_CONTROL">
	<summary>The CTRL key is down.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK.MK_LBUTTON">
	<summary>The left mouse button is down.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK.MK_MBUTTON">
	<summary>The middle mouse button is down.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK.MK_RBUTTON">
	<summary>The right mouse button is down.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK.MK_SHIFT">
	<summary>The SHIFT key is down.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK.MK_XBUTTON1">
	<summary>Windows 2000/XP: The first X button is down.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK.MK_XBUTTON2">
	<summary>Windows 2000/XP: The second X button is down.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK">
	<summary>Values used for wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_LBUTTONDBLCLK"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_LBUTTONDOWN"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_LBUTTONUP"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_MBUTTONDBLCLK"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_MBUTTONDOWN"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_MBUTTONUP"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_MOUSEHOVER"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_MOUSEMOVE"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_MOUSEWHEEL"/> (low-order word as <see cref="T:System.Int16"/>), <see cref="F:Tools.API.Messages.WindowMessages.WM_RBUTTONDBLCLK"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_RBUTTONDOWN"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_RBUTTONUP"/></summary>
</member><member name="F:Tools.API.Messages.wParam.WM_MDICASCADE.MDITILE_SKIPDISABLED">
	<summary>Prevents disabled MDI child windows from being cascaded.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_MDICASCADE.MDITILE_ZORDER">
	<summary>Windows 2000/XP: Arranges the windows in Z order.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_MDICASCADE">
	<summary>Values used fro wParam as <see cref="F:Tools.API.Messages.WindowMessages.WM_MDICASCADE"/></summary>
</member><member name="F:Tools.API.Messages.wParam.WM_MDITILE.MDITILE_HORIZONTAL">
	<summary>Tiles windows horizontally.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_MDITILE.MDITILE_VERTICAL">
	<summary>Tiles windows vertically.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_MDITILE.MDITILE_SKIPDISABLED">
	<summary>prevent disabled MDI child windows from being tiled</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_MDITILE">
	<summary>Values for wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_MDITILE"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_MENUCHAR_high.MF_POPUP">
	<summary>A drop-down menu, submenu, or shortcut menu.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_MENUCHAR_high.MF_SYSMENU">
	<summary>The window menu.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_MENUCHAR_high">
	<summary>Values used for high word of wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_MENUCHAR"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_MENUSELECT_high.MF_BITMAP">
	<summary>Item displays a bitmap.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_MENUSELECT_high.MF_CHECKED">
	<summary></summary>
</member><member name="F:Tools.API.Messages.wParam.WM_MENUSELECT_high.MF_DISABLED">
	<summary>Item is disabled.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_MENUSELECT_high.MF_GRAYED">
	<summary>Item is grayed.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_MENUSELECT_high.MF_HILITE">
	<summary>Item is highlighted.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_MENUSELECT_high.MF_MOUSESELECT">
	<summary>Item is selected with the mouse.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_MENUSELECT_high.MF_OWNERDRAW">
	<summary>    Item is an owner-drawn item.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_MENUSELECT_high.MF_POPUP">
	<summary>Item is contained in the window menu. The lParam parameter contains a handle to the menu associated with the message.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_MENUSELECT_high.MF_SYSMENU">
	<summary>Item is contained in the window menu. The lParam parameter contains a handle to the menu associated with the message.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_MENUSELECT_high">
	<summary>Values used for high word of wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_MENUSELECT"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_PARENTNOTIFY_low.WM_CREATE">
	<summary>The child window is being created.</summary>
	<remarks><list type="table">
			<item><term>High-order word of wParam</term><description>Identifier of the child window.</description></item>
			<item><term>lParam</term><description>Handle of the child window.</description></item>
		</list></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_PARENTNOTIFY_low.WM_DESTROY">
	<summary>The child window is being destroyed.</summary>
	<remarks><list type="table">
			<item><term>High-order word of wParam</term><description>Identifier of the child window.</description></item>
			<item><term>lParam</term><description>Handle of the child window.</description></item>
		</list></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_PARENTNOTIFY_low.WM_LBUTTONDOWN">
	<summary>The user has placed the cursor over the child window and has clicked the left mouse button.</summary>
	<remarks><list type="table">
			<item><term>High-order word of wParam</term><description>Undefined.</description></item>
			<item><term>lParam</term><description>The x-coordinate of the cursor is the low-order word, and the y-coordinate of the cursor is the high-order word.</description></item>
		</list></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_PARENTNOTIFY_low.WM_MBUTTONDOWN">
	<summary>The user has placed the cursor over the child window and has clicked the middle mouse button.</summary>
	<remarks><list type="table">
			<item><term>High-order word of wParam</term><description>Undefined.</description></item>
			<item><term>lParam</term><description>The x-coordinate of the cursor is the low-order word, and the y-coordinate of the cursor is the high-order word.</description></item>
		</list></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_PARENTNOTIFY_low.WM_RBUTTONDOWN">
	<summary>The user has placed the cursor over the child window and has clicked the right mouse button.</summary>
	<remarks><list type="table">
			<item><term>High-order word of wParam</term><description>Undefined.</description></item>
			<item><term>lParam</term><description>The x-coordinate of the cursor is the low-order word, and the y-coordinate of the cursor is the high-order word.</description></item>
		</list></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_PARENTNOTIFY_low.WM_XBUTTONDOWN">
	<summary>Windows 2000/XP: The user has placed the cursor over the child window and has clicked the first or second X button.</summary>
	<remarks><list type="table">
			<item><term>High-order word of wParam</term><description>Windows 2000/XP: Indicates which button was pressed. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_PARENTNOTIFY_WM_XBUTTONDOWN_high"/> values.</description></item>
			<item><term>lParam</term><description>The x-coordinate of the cursor is the low-order word, and the y-coordinate of the cursor is the high-order word.</description></item>
		</list></remarks>
</member><member name="T:Tools.API.Messages.wParam.WM_PARENTNOTIFY_low">
	<summary>Values used for low word of wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_PARENTNOTIFY"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_PARENTNOTIFY_WM_XBUTTONDOWN_high.XBUTTON1">
	<summary>X-button 1</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_PARENTNOTIFY_WM_XBUTTONDOWN_high.XBUTTON2">
	<summary>X-button 2</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_PARENTNOTIFY_WM_XBUTTONDOWN_high">
	<summary>Values used for high word of wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_PARENTNOTIFY"/> when low word is <see cref="F:Tools.API.Messages.wParam.WM_PARENTNOTIFY_low.WM_XBUTTONDOWN"/> and for high-order word of wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_XBUTTONDBLCLK"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_XBUTTONDOWN"/> and <see cref="F:Tools.API.Messages.WindowMessages.WM_XBUTTONUP"/></summary>
</member><member name="F:Tools.API.Messages.wParam.WM_POWER.PWR_CRITICALRESUME">
	<summary>Indicates that the system is resuming operation after entering suspended mode without first broadcasting a PWR_SUSPENDREQUEST notification message to the application. An application should perform any necessary recovery actions.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_POWER.PWR_SUSPENDREQUEST">
	<summary>Indicates that the system is about to enter suspended mode.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_POWER.PWR_SUSPENDRESUME">
	<summary>Indicates that the system is resuming operation after having entered suspended mode normally—that is, the system broadcast a PWR_SUSPENDREQUEST notification message to the application before the system was suspended. An application should perform any necessary recovery actions.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_POWER">
	<summary>Values used for wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_POWER"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMBATTERYLOW">
	<summary>Battery power is low. In Windows Server 2008 and Windows Vista, use <see cref="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMPOWERSTATUSCHANGE"/> instead.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMPOWERSTATUSCHANGE">
	<summary>Used in Windows Server 2008 and Windows Vista instead of <see cref="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMBATTERYLOW"/></summary>
</member><member name="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMOEMEVENT">
	<summary>OEM-defined event occurred. In Windows Server 2008 and Windows Vista, this event is not available because these operating systems support only ACPI; APM BIOS events are not supported.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMQUERYSUSPEND">
	<summary>Request for permission to suspend. In Windows Server 2008 and Windows Vista, use the SetThreadExecutionState function instead.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMQUERYSUSPENDFAILED">
	<summary>Suspension request denied. In Windows Server 2008 and Windows Vista, use SetThreadExecutionState instead.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMRESUMECRITICAL">
	<summary>Operation resuming after critical suspension. In Windows Server 2008 and Windows Vista, use <see cref="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMRESUMEAUTOMATIC"/> instead.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMRESUMEAUTOMATIC">
	<summary>Used in Windows Server 2008 and Windows Vista instead of <see cref="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMRESUMECRITICAL"/></summary>
</member><member name="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_POWERSETTINGCHANGE">
	<summary>If the wParam parameter is <see cref="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_POWERSETTINGCHANGE"/>, the lParam parameter is a pointer to a POWERBROADCAST_SETTING structure.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_POWERBROADCAST">
	<summary>Values used for wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_POWERBROADCAST"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SIZE.SIZE_MAXHIDE">
	<summary>Message is sent to all pop-up windows when some other window is maximized.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SIZE.SIZE_MAXIMIZED">
	<summary>The window has been maximized.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SIZE.SIZE_MAXSHOW">
	<summary>Message is sent to all pop-up windows when some other window has been restored to its former size.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SIZE.SIZE_MINIMIZED">
	<summary>The window has been minimized.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SIZE.SIZE_RESTORED">
	<summary>The window has been resized, but neither the SIZE_MINIMIZED nor SIZE_MAXIMIZED value applies.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_SIZE">
	<summary>Values used for wParam of the <see cref="T:Tools.API.Messages.wParam.WM_SIZE"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SIZING.WMSZ_BOTTOM">
	<summary>Bottom edge</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SIZING.WMSZ_BOTTOMLEFT">
	<summary>Bottom-left corner</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SIZING.WMSZ_BOTTOMRIGHT">
	<summary>Bottom-right corner</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SIZING.WMSZ_LEFT">
	<summary>Left edge</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SIZING.WMSZ_RIGHT">
	<summary>Right edge</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SIZING.WMSZ_TOP">
	<summary>Top edge</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SIZING.WMSZ_TOPLEFT">
	<summary>Top-left corner</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SIZING.WMSZ_TOPRIGHT">
	<summary>Top-right corner</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_SIZING">
	<summary>Values used for wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_SIZING"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_STYLECHANGED.GWL_EXSTYLE">
	<summary>The extended window styles have changed.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_STYLECHANGED.GWL_STYLE">
	<summary>The window styles have changed.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_STYLECHANGED">
	<summary>Values used for wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_STYLECHANGED"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_CLOSE">
	<summary>Closes the window.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_CONTEXTHELP">
	<summary>Changes the cursor to a question mark with a pointer. If the user then clicks a control in the dialog box, the control receives a WM_HELP message.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_DEFAULT">
	<summary>Activates the window associated with the application-specified hot key. The lParam parameter identifies the window to activate.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_HOTKEY">
	<summary>Activates the window associated with the application-specified hot key. The lParam parameter identifies the window to activate.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_HSCROLL">
	<summary>Scrolls horizontally.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_KEYMENU">
	<summary>Retrieves the window menu as a result of a keystroke. For more information, see the Remarks section.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_MAXIMIZE">
	<summary>Maximizes the window.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_MINIMIZE">
	<summary>Minimizes the window.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_MONITORPOWER">
	<summary>    Sets the state of the display. This command supports devices that have power-saving features, such as a battery-powered personal computer.</summary>
	<remarks>The lParam parameter can have the following values:
 <list type="table">
			<item><term>1</term><description>the display is going to low power</description></item>
			<item><term>2</term><description> the display is being shut off</description></item>
		</list></remarks>
</member><member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_MOUSEMENU">
	<summary>Retrieves the window menu as a result of a mouse click.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_MOVE">
	<summary>Moves the window.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_NEXTWINDOW">
	<summary>Moves to the next window.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_PREVWINDOW">
	<summary>Moves to the previous window.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_RESTORE">
	<summary>Restores the window to its normal position and size.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_SCREENSAVE">
	<summary>Executes the screen saver application specified in the [boot] section of the System.ini file.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_SIZE">
	<summary>Sizes the window.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_TASKLIST">
	<summary>Activates the Start menu.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_VSCROLL">
	<summary>Scrolls vertically.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_SYSCOMMAND">
	<summary>Values used for wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_SYSCOMMAND"/> message</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_TCARD.IDABORT">
	<summary>The user clicked an authorable Abort button.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_TCARD.IDCANCEL">
	<summary>The user clicked an authorable Cancel button.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_TCARD.IDCLOSE">
	<summary>The user closed the training card.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_TCARD.IDHELP">
	<summary>The user clicked an authorable Windows Help button.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_TCARD.IDIGNORE">
	<summary>The user clicked an authorable Ignore button.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_TCARD.IDOK">
	<summary>The user clicked an authorable OK button.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_TCARD.IDNO">
	<summary>The user clicked an authorable No button.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_TCARD.IDRETRY">
	<summary>The user clicked an authorable Retry button.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_TCARD.HELP_TCARD_DATA">
	<summary>The user clicked an authorable button. The dwActionData parameter contains a long integer specified by the Help author.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_TCARD.HELP_TCARD_NEXT">
	<summary>The user clicked an authorable Next button.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_TCARD.HELP_TCARD_OTHER_CALLER">
	<summary>Another application has requested training cards.</summary>
</member><member name="F:Tools.API.Messages.wParam.WM_TCARD.IDYES">
	<summary>The user clicked an authorable Yes button.</summary>
</member><member name="T:Tools.API.Messages.wParam.WM_TCARD">
	<summary>Values used for wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_TCARD"/> message</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_CHAR.RepeatCountMask">
	<summary>Bits 0÷15: Specifies the repeat count for the current message. The value is the number of times the keystroke is autorepeated as a result of the user holding down the key. If the keystroke is held long enough, multiple messages are sent. However, the repeat count is not cumulative.</summary>
	<remarks><see cref="F:Tools.API.Messages.WindowMessages.WM_IME_CHAR"/>: Repeat count. Since the first byte and second byte is continuous, this is always 1.</remarks>
</member><member name="F:Tools.API.Messages.lParam.WM_CHAR.ScanCodeMask">
	<summary>Bits 16÷23: Specifies the scan code. The value depends on the OEM.</summary>
	<remarks><see cref="F:Tools.API.Messages.WindowMessages.WM_IME_CHAR"/>: Scan code for a complete Asian character.</remarks>
</member><member name="F:Tools.API.Messages.lParam.WM_CHAR.ExtendedMask">
	<summary>Bit 24: Specifies whether the key is an extended key, such as the right-hand ALT and CTRL keys that appear on an enhanced 101- or 102-key keyboard. The value is 1 if it is an extended key; otherwise, it is 0.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_CHAR.ReservedMask">
	<summary>Bits 25÷28: Reserved; do not use.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_CHAR.ContextCodeMask">
	<summary>Bit 29: Specifies the context code. The value is 1 if the ALT key is held down while the key is pressed; otherwise, the value is 0.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_CHAR.PreviousKeyStateMask">
	<summary>Bit 30: Specifies the previous key state. The value is 1 if the key is down before the message is sent, or it is 0 if the key is up.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_CHAR.TransitionStateMask">
	<summary>Bit 31: Specifies the transition state. The value is 1 if the key is being released, or it is 0 if the key is being pressed.</summary>
</member><member name="T:Tools.API.Messages.lParam.WM_CHAR">
	<summary>Bit-masks used by <see cref="F:Tools.API.Messages.WindowMessages.WM_CHAR"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_DEADCHAR"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_IME_CHAR"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_IME_KEYDOWN"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_IME_KEYUP"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_KEYDOWN"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_KEYUP"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_SYSCHAR"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_SYSDEADCHAR"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_SYSKEYDOWN"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_SYSKEYUP"/> message for lParam</summary>
	<remarks>And lParam with mask and to get appropriete value</remarks>
</member><member name="F:Tools.API.Messages.lParam.WM_ENDSESSION.Zero">
	<summary>the system is shutting down or restarting (it is not possible to determine which event is occurring)</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_ENDSESSION.ENDSESSION_CLOSEAPP">
	<summary>f wParam is TRUE, the application must shut down. Any data should be saved automatically without prompting the user (for more information, see Remarks). The Restart Manager sends this message when the application is using a file that needs to be replaced, when it must service the system, or when system resources are exhausted. The application will be restarted if it has registered for restart using the RegisterApplicationRestart function. For more information, see Guidelines for Applications.
 If wParam is FALSE, the application should not shut down.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_ENDSESSION.ENDSESSION_LOGOFF">
	<summary>The user is logging off. For more information, see Logging Off (http://msdn2.microsoft.com/en-us/library/aa376876.aspx).</summary>
</member><member name="T:Tools.API.Messages.lParam.WM_ENDSESSION">
	<summary>Bit masks used by the <see cref="F:Tools.API.Messages.WindowMessages.WM_ENDSESSION"/> message</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_HOTKEY_low.MOD_ALT">
	<summary>Either ALT key was held down.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_HOTKEY_low.MOD_CONTROL">
	<summary>Either CTRL key was held down.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_HOTKEY_low.MOD_SHIFT">
	<summary>Either SHIFT key was held down.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_HOTKEY_low.MOD_WIN">
	<summary>Either WINDOWS key was held down. These keys are labeled with the Microsoft Windows logo. Hotkeys that involve the Windows key are reserved for use by the operating system.</summary>
</member><member name="T:Tools.API.Messages.lParam.WM_HOTKEY_low">
	<summary>Values osed for low word of lParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_HOTKEY"/> message</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_COMPATTR">
	<summary>Retrieves or updates the attribute of the composition string.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_COMPCLAUSE">
	<summary>Retrieves or updates clause information of the composition string.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_COMPREADSTR">
	<summary> 	Retrieves or updates the reading string of the current composition.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_COMPREADATTR">
	<summary>Retrieves or updates the attributes of the reading string of the current composition.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_COMPREADCLAUSE">
	<summary> 	Retrieves or updates the clause information of the reading string of the composition string.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_COMPSTR">
	<summary> 	Retrieves or updates the current composition string.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_CURSORPOS">
	<summary> 	Retrieves or updates the cursor position in composition string.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_DELTASTART">
	<summary> 	Retrieves or updates the cursor position in composition string.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_RESULTCLAUSE">
	<summary>Retrieves or updates clause information of the result string.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_RESULTREADCLAUSE">
	<summary> 	Retrieves or updates the reading string.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_RESULTREADSTR">
	<summary> 	Retrieves or updates the reading string.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_RESULTSTR">
	<summary>Retrieves or updates the string of the composition result.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.CS_INSERTCHAR">
	<summary> 	Insert the wParam composition character at the current insertion point. An application should display the composition character if it processes this message.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.CS_NOMOVECARET">
	<summary>Do not move the caret position as a result of processing the message. For example, if an IME specifies a combination of CS_INSERTCHAR and CS_NOMOVECARET, the application should insert the specified character at the current caret position but should not move the caret to the next position. A subsequent WM_IME_COMPOSITION message with GCS_RESULTSTR will replace this character.</summary>
</member><member name="T:Tools.API.Messages.lParam.WM_IME_COMPOSITION">
	<summary>Values used for lParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_IME_COMPOSITION"/></summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_SETCONTEXT.ISC_SHOWUICOMPOSITIONWINDOW">
	<summary>Show the composition window by user interface window.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_SETCONTEXT.ISC_SHOWUIGUIDWINDOW">
	<summary>Show the guide window by user interface window.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_SETCONTEXT.ISC_SHOWUICANDIDATEWINDOW">
	<summary>Show the candidate window of index 0 by user interface window.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_SETCONTEXT.ISC_SHOWUISOFTKBD">
	<summary>Show the soft keyboard by user interface window.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_SETCONTEXT.ISC_SHOWUICANDIDATEWINDOW_l1">
	<summary>Show the candidate window of index 1 by user interface window.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_SETCONTEXT.ISC_SHOWUICANDIDATEWINDOW_l2">
	<summary> 	Show the candidate window of index 2 by user interface window.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_IME_SETCONTEXT.ISC_SHOWUICANDIDATEWINDOW_l3">
	<summary>Show the candidate window of index 3 by user interface window.</summary>
</member><member name="T:Tools.API.Messages.lParam.WM_IME_SETCONTEXT">
	<summary>Values used for lparam of <see cref="F:Tools.API.Messages.WindowMessages.WM_IME_SETCONTEXT"/> message</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_NOTIFYFORMAT.NF_QUERY">
	<summary>The message is a query to determine whether ANSI or Unicode structures should be used in WM_NOTIFY messages. This command is sent from a control to its parent window during the creation of a control and in response to an NF_REQUERY command.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_NOTIFYFORMAT.NF_REQUERY">
	<summary>The message is a request for a control to send an NF_QUERY form of this message to its parent window. This command is sent from the parent window. The parent window is asking the control to requery it about the type of structures to use in WM_NOTIFY messages. If Command is NF_REQUERY, the return value is the result of the requery operation.</summary>
</member><member name="T:Tools.API.Messages.lParam.WM_NOTIFYFORMAT">
	<summary>Values used for lParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_NOTIFYFORMAT"/> message</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_PRINT.PRF_CHECKVISIBLE">
	<summary>Draws all visible children windows.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_PRINT.PRF_CHILDREN">
	<summary>Draws all visible children windows.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_PRINT.PRF_CLIENT">
	<summary>Draws the client area of the window.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_PRINT.PRF_ERASEBKGND">
	<summary>Erases the background before drawing the window.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_PRINT.PRF_NONCLIENT">
	<summary>Draws the nonclient area of the window.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_PRINT.PRF_OWNED">
	<summary>Draws all owned windows.</summary>
</member><member name="T:Tools.API.Messages.lParam.WM_PRINT">
	<summary>Values used for lParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_PRINT"/> message</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_QUERYENDSESSION.ENDSESSION_CLOSEAPP">
	<summary>The application is using a file that must be replaced, the system is being serviced, or system resources are exhausted. For more information, see Guidelines for Applications (http://msdn2.microsoft.com/en-us/library/aa373651.aspx).</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_QUERYENDSESSION.ENDSESSION_LOGOFF">
	<summary>The user is logging off. For more information, see Logging Off (http://msdn2.microsoft.com/en-us/library/aa376876.aspx).</summary>
</member><member name="T:Tools.API.Messages.lParam.WM_QUERYENDSESSION">
	<summary>Values used for lParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_QUERYENDSESSION"/> message</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_SHOWWINDOW.zero">
	<summary>the message was sent because of a call to the ShowWindow function</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_SHOWWINDOW.SW_OTHERUNZOOM">
	<summary>The window is being uncovered because a maximize window was restored or minimized.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_SHOWWINDOW.SW_OTHERZOOM">
	<summary>The window is being covered by another window that has been maximized.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_SHOWWINDOW.SW_PARENTCLOSING">
	<summary>The window's owner window is being minimized.</summary>
</member><member name="F:Tools.API.Messages.lParam.WM_SHOWWINDOW.SW_PARENTOPENING">
	<summary>The window's owner window is being restored.</summary>
</member><member name="T:Tools.API.Messages.lParam.WM_SHOWWINDOW">
	<summary>Values used for lparam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_SHOWWINDOW"/> message</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_COMPAREITEM.Smaller">
	<summary>Item 1 precedes item 2 in the sorted order.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_COMPAREITEM.Equal">
	<summary>Items 1 and 2 are equivalent in the sorted order.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_COMPAREITEM.Greater">
	<summary>Item 1 follows item 2 in the sorted order.</summary>
</member><member name="T:Tools.API.Messages.ReturnValues.WM_COMPAREITEM">
	<summary>Return values used by the <see cref="F:Tools.API.Messages.WindowMessages.WM_COMPAREITEM"/> message</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_DEVICECHANGE.TRUE">
	<summary>Request granted</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_DEVICECHANGE.BROADCAST_QUERY_DENY">
	<summary>Request denied</summary>
</member><member name="T:Tools.API.Messages.ReturnValues.WM_DEVICECHANGE">
	<summary>Values used as return values for the <see cref="F:Tools.API.Messages.WindowMessages.WM_DEVICECHANGE"/> message</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_BUTTON">
	<summary>Button.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_DEFPUSHBUTTON">
	<summary>Default push button.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_HASSETSEL">
	<summary>EM_SETSEL messages.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_RADIOBUTTON">
	<summary>Radio button.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_STATIC">
	<summary>Static control.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_UNDEFPUSHBUTTON">
	<summary>Non-default push button.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_WANTALLKEYS">
	<summary>All keyboard input.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_WANTARROWS">
	<summary>Direction keys.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_WANTCHARS">
	<summary>WM_CHAR messages.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_WANTMESSAGE">
	<summary>All keyboard input (the application passes this message in the MSG structure to the control).</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_WANTTAB">
	<summary>TAB key.</summary>
</member><member name="T:Tools.API.Messages.ReturnValues.WM_GETDLGCODE">
	<summary>Return values used by the <see cref="F:Tools.API.Messages.WindowMessages.WM_GETDLGCODE"/> message</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high.HOTKEYF_ALT">
	<summary>ALT key</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high.HOTKEYF_CONTROL">
	<summary>CTRL key</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high.HOTKEYF_EXT">
	<summary>Extended key</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high.HOTKEYF_SHIFT">
	<summary>SHIFT key</summary>
</member><member name="T:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high">
	<summary>Used for hight word of return value of <see cref="F:Tools.API.Messages.WindowMessages.WM_GETHOTKEY"/> message. It is also used as <see cref="T:System.Int16"/> for high-order word of wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_SETHOTKEY"/> message.</summary>
	<remarks>You must left-shift by 24 bits this value before it can be used as return value, or use <see cref="T:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high_shifted"/> that can be directly or-ed with virtual key code. For <see cref="F:Tools.API.Messages.WindowMessages.WM_SETHOTKEY"/>'s wParam it must be left-shifted by 16 converted to <see cref="T:System.Int32"/> and then or-ed with low-order word of wParam.</remarks>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high_shifted.HOTKEYF_ALT">
	<summary>ALT key</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high_shifted.HOTKEYF_CONTROL">
	<summary>CTRL key</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high_shifted.HOTKEYF_EXT">
	<summary>Extended key</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high_shifted.HOTKEYF_SHIFT">
	<summary>SHIFT key</summary>
</member><member name="T:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high_shifted">
	<summary>Used to be or-ed with virtual key codes and returned as return value for <see cref="F:Tools.API.Messages.WindowMessages.WM_GETHOTKEY"/></summary>
	<remarks>Those values are 24-bits-left-shifted from original values (so they are placed in high byte of double-word) for high word of <see cref="T:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high"/></remarks>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_MENUCHAR.MNC_IGNORE">
	<summary>Informs the system that it should discard the character the user pressed and create a short beep on the system speaker.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_MENUCHAR.MNC_CLOSE">
	<summary>Informs the system that it should close the active menu.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_MENUCHAR.MNC_EXECUTE">
	<summary>Informs the system that it should choose the item specified in the low-order word of the return value. The owner window receives a WM_COMMAND message.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_MENUCHAR.MNC_SELECT">
	<summary>Informs the system that it should select the item specified in the low-order word of the return value.</summary>
</member><member name="T:Tools.API.Messages.ReturnValues.WM_MENUCHAR">
	<summary>Values used as return values for <see cref="F:Tools.API.Messages.WindowMessages.WM_MENUCHAR"/> messages</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_MENUDRAG.MND_CONTINUE">
	<summary>Menu should remain active. If the mouse is released, it should be ignored.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_MENUDRAG.MND_ENDMENU">
	<summary>	Menu should be ended.</summary>
</member><member name="T:Tools.API.Messages.ReturnValues.WM_MENUDRAG">
	<summary>Values used as return values for message <see cref="F:Tools.API.Messages.WindowMessages.WM_MENUDRAG"/></summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_MENUGETOBJECT.MNGO_NOERROR">
	<summary>An interface pointer was returned in the pvObj member of MENUGETOBJECTINFO</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_MENUGETOBJECT.MNGO_NOINTERFACE">
	<summary>The interface is not supported.</summary>
</member><member name="T:Tools.API.Messages.ReturnValues.WM_MENUGETOBJECT">
	<summary>Values used as return values for message <see cref="F:Tools.API.Messages.WindowMessages.WM_MENUGETOBJECT"/></summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_MOUSEACTIVATE.MA_ACTIVATE">
	<summary>	Activates the window, and does not discard the mouse message.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_MOUSEACTIVATE.MA_ACTIVATEANDEAT">
	<summary>Activates the window, and discards the mouse message.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_MOUSEACTIVATE.MA_NOACTIVATE">
	<summary>	Does not activate the window, and does not discard the mouse message.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_MOUSEACTIVATE.MA_NOACTIVATEANDEAT">
	<summary>Does not activate the window, but discards the mouse message.</summary>
</member><member name="T:Tools.API.Messages.ReturnValues.WM_MOUSEACTIVATE">
	<summary>Values used as return values for the <see cref="F:Tools.API.Messages.WindowMessages.WM_MOUSEACTIVATE"/> message</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE.zero">
	<summary>A zero (0)</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE.WVR_ALIGNTOP">
	<summary>Specifies that the client area of the window is to be preserved and aligned with the top of the new position of the window. For example, to align the client area to the upper-left corner, return the WVR_ALIGNTOP and WVR_ALIGNLEFT values.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE.WVR_ALIGNRIGHT">
	<summary>	Specifies that the client area of the window is to be preserved and aligned with the right side of the new position of the window. For example, to align the client area to the lower-right corner, return the WVR_ALIGNRIGHT and WVR_ALIGNBOTTOM values.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE.WVR_ALIGNLEFT">
	<summary>Specifies that the client area of the window is to be preserved and aligned with the bottom of the new position of the window. For example, to align the client area to the top-left corner, return the WVR_ALIGNTOP and WVR_ALIGNLEFT values.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE.WVR_ALIGNBOTTOM">
	<summary>Specifies that the client area of the window is to be preserved and aligned with the bottom of the new position of the window. For example, to align the client area to the top-left corner, return the WVR_ALIGNTOP and WVR_ALIGNLEFT values.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE.WVR_HREDRAW">
	<summary>Used in combination with any other values, except WVR_VALIDRECTS, causes the window to be completely redrawn if the client rectangle changes size horizontally. This value is similar to CS_HREDRAW class style</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE.WVR_VREDRAW">
	<summary>Used in combination with any other values, except WVR_VALIDRECTS, causes the window to be completely redrawn if the client rectangle changes size vertically. This value is similar to CS_VREDRAW class style</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE.WVR_REDRAW">
	<summary>This value causes the entire window to be redrawn. It is a combination of WVR_HREDRAW and WVR_VREDRAW values.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE.WVR_VALIDRECTS">
	<summary>This value indicates that, upon return from WM_NCCALCSIZE, the rectangles specified by the rgrc[1] and rgrc[2] members of the NCCALCSIZE_PARAMS structure contain valid destination and source area rectangles, respectively. The system combines these rectangles to calculate the area of the window to be preserved. The system copies any part of the window image that is within the source rectangle and clips the image to the destination rectangle. Both rectangles are in parent-relative or screen-relative coordinates. This flag cannot be combined with any other flags.</summary>
	<remarks>This return value allows an application to implement more elaborate client-area preservation strategies, such as centering or preserving a subset of the client area.</remarks>
</member><member name="T:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE">
	<summary>Values used as return values for the <see cref="F:Tools.API.Messages.WindowMessages.WM_NCCALCSIZE"/> message</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTBORDER">
	<summary>	In the border of a window that does not have a sizing border.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTBOTTOM">
	<summary>In the lower-horizontal border of a resizable window (the user can click the mouse to resize the window vertically).</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTBOTTOMLEFT">
	<summary>In the lower-left corner of a border of a resizable window (the user can click the mouse to resize the window diagonally).</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTBOTTOMRIGHT">
	<summary>In the lower-right corner of a border of a resizable window (the user can click the mouse to resize the window diagonally).</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTCAPTION">
	<summary>	In a title bar.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTCLIENT">
	<summary>	In a client area.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTCLOSE">
	<summary>	In a Close button.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTERROR">
	<summary>On the screen background or on a dividing line between windows (same as HTNOWHERE, except that the DefWindowProc function produces a system beep to indicate an error).</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTGROWBOX">
	<summary>	In a size box (same as HTSIZE).</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTHELP">
	<summary>In a Help button.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTHSCROLL">
	<summary>In a horizontal scroll bar.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTLEFT">
	<summary>In the left border of a resizable window (the user can click the mouse to resize the window horizontally).</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTMENU">
	<summary>	In a menu.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTMAXBUTTON">
	<summary>	In a Maximize button.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTMINBUTTON">
	<summary>	In a Minimize button.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTNOWHERE">
	<summary>On the screen background or on a dividing line between windows.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTREDUCE">
	<summary>In a Minimize button.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTRIGHT">
	<summary>In the right border of a resizable window (the user can click the mouse to resize the window horizontally).</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTSIZE">
	<summary>In a size box (same as HTGROWBOX).</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTSYSMENU">
	<summary>In a window menu or in a Close button in a child window.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTTOP">
	<summary>In the upper-horizontal border of a window.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTTOPLEFT">
	<summary>	In the upper-left corner of a window border.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTTOPRIGHT">
	<summary>In the upper-right corner of a window border.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTTRANSPARENT">
	<summary>	In a window currently covered by another window in the same thread (the message will be sent to underlying windows in the same thread until one of them returns a code that is not HTTRANSPARENT).</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTVSCROLL">
	<summary>In the vertical scroll bar.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTZOOM">
	<summary>In a Maximize button.</summary>
</member><member name="T:Tools.API.Messages.ReturnValues.WM_NCHITTEST">
	<summary>Values used as return values for the <see cref="F:Tools.API.Messages.WindowMessages.WM_NCHITTEST"/> message</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NOTIFYFORMAT.NFR_ANSI">
	<summary>ANSI structures should be used in WM_NOTIFY messages sent by the control.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NOTIFYFORMAT.NFR_UNICODE">
	<summary>	Unicode structures should be used in WM_NOTIFY messages sent by the control.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_NOTIFYFORMAT.zero">
	<summary>An error occurred.</summary>
</member><member name="T:Tools.API.Messages.ReturnValues.WM_NOTIFYFORMAT">
	<summary>Values used as return values for the <see cref="F:Tools.API.Messages.WindowMessages.WM_NOTIFYFORMAT"/> message</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_POWER.zero">
	<summary>If wParam is <see cref="F:Tools.API.Messages.wParam.WM_POWER.PWR_SUSPENDRESUME"/> or <see cref="F:Tools.API.Messages.wParam.WM_POWER.PWR_CRITICALRESUME"/>, the return value is zero.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_POWER.PWR_OK">
	<summary>If wParam is <see cref="F:Tools.API.Messages.wParam.WM_POWER.PWR_SUSPENDREQUEST"/>, the return value is <see cref="F:Tools.API.Messages.ReturnValues.WM_POWER.PWR_OK"/> not to prevent the system from entering the suspended state.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_POWER.PWR_FAIL">
	<summary>If wParam is <see cref="F:Tools.API.Messages.wParam.WM_POWER.PWR_SUSPENDREQUEST"/>, the return value is <see cref="F:Tools.API.Messages.ReturnValues.WM_POWER.PWR_FAIL"/> to prevent the system from entering the suspended state.</summary>
</member><member name="T:Tools.API.Messages.ReturnValues.WM_POWER">
	<summary>Values used as return values for the <see cref="F:Tools.API.Messages.WindowMessages.WM_POWER"/> message</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.TRUE">
	<summary>An application should return TRUE if it processes this message.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPENDFAILED">
	<summary>Windows Server 2003, Windows XP, and Windows 2000:  An application can return <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.BROADCAST_QUERY_DENY"/> to deny a <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPEND"/> or <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPENDFAILED"/> request.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.BROADCAST_QUERY_DENY">
	<summary>Windows Server 2003, Windows XP, and Windows 2000:  An application can return <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.BROADCAST_QUERY_DENY"/> to deny a <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPEND"/> or <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPENDFAILED"/> request.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPEND">
	<summary>Windows Server 2003, Windows XP, and Windows 2000:  An application can return <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.BROADCAST_QUERY_DENY"/> to deny a <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPEND"/> or <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPENDFAILED"/> request.</summary>
</member><member name="T:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST">
	<summary>Values used as return values for the <see cref="F:Tools.API.Messages.WindowMessages.WM_POWERBROADCAST"/> messag</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_SETHOTKEY.minus_1">
	<summary>The function is unsuccessful—the hot key is invalid.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_SETHOTKEY.zero">
	<summary>The function is unsuccessful—the window is invalid.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_SETHOTKEY.one">
	<summary>The function is successful, and no other window has the same hot key.</summary>
</member><member name="F:Tools.API.Messages.ReturnValues.WM_SETHOTKEY.two">
	<summary>The function is successful, but another window already has the same hot key.</summary>
</member><member name="T:Tools.API.Messages.ReturnValues.WM_SETHOTKEY">
	<summary>Values used as return values for the <see cref="T:Tools.API.Messages.ReturnValues.WM_SETHOTKEY"/> message</summary>
</member>
</members>
</doc>