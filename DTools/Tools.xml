<?xml version="1.0"?>
<doc>
<assembly>
<name>
Tools
</name>
</assembly>
<members>
<member name="M:Tools.XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
	<summary>
CreateInstance
</summary>
</member><member name="M:Tools.XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
	<summary>
GetPropertyValue
</summary>
</member><member name="M:Tools.XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
	<summary>
SetPropertyValue
</summary>
</member><member name="M:Tools.XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
	<summary>
CreateDelegate
</summary>
</member><member name="M:Tools.XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
	<summary>
AddEventHandler
</summary>
</member><member name="T:Tools.XamlGeneratedNamespace.GeneratedInternalTypeHelper">
	<summary>
GeneratedInternalTypeHelper
</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IExifGetter.GetExifStream">
	<summary>Gets stream of Exif data</summary>
	<remarks>
		<para>Stream content must start with TIFF header</para>
		<para>If there is no Exif data in file stream can be null or have zero length</para>
		<para>Stream must support reading and seeking</para>
	</remarks>
</member><member name="T:Tools.DrawingT.MetadataT.IExifGetter">
	<summary>Represents provider that provides stream of Exif data</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC._Encoding">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.Encoding"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Encoding">
	<summary>Encoding used for encoding and decoding some texts</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.UnsignedBinaryNumber_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>Gets or sets value(s) of type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.UnsignedBinaryNumber"/></summary>
	<param name="Key">Record and dataset number</param>
	<exception cref="T:System.ArgumentException">Value stored in IPTC stream has lenght neither 1, 2, 4 nor 8 (in Getter)</exception>
	<remarks><seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Tag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)"/> for behavior details</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Boolean_Binary_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Byte)">
	<summary>Gets or sets value(s) of type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.Boolean_Binary"/></summary>
	<param name="Key">Record and dataset number</param>
	<param name="Bytes">Number of bytes per one boolean item (ignored in Getter)</param>
	<remarks><seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Tag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)"/> for behavior details</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Byte_Binary_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>Gets or sets value(s) of type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.Byte_Binary"/></summary>
	<param name="Key">Record and dataset number</param>
	<exception cref="T:System.ArgumentException">Value stored in IPTC stream has lenght neither 1, 2, 4 nor 8 (in Getter)</exception>
	<remarks><seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Tag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)"/> for behavior details</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.UShort_Binary_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>Gets or sets value(s) of type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.UShort_Binary"/></summary>
	<param name="Key">Record and dataset number</param>
	<exception cref="T:System.ArgumentException">Value stored in IPTC stream has lenght neither 1, 2, 4 nor 8 (in Getter)</exception>
	<remarks><seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Tag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)"/> for behavior details</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.NumericChar_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Byte,System.Boolean)">
	<summary>Gets or sets value(s) of type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.NumericChar"/></summary>
	<param name="key">Record and dataset number</param>
	<param name="Len">Maximal or fixed lenght of string (ignored in Getter, 0 for no limit)</param>
	<param name="Fixed"><paramref name="Len"/> determines fixed lenght (ignored in Getter)</param>
	<remarks><seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Tag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)"/> for behavior details</remarks>
	<exception cref="T:System.InvalidCastException">Cannot convert stored bytes into number (in Getter)</exception>
	<exception cref="T:System.ArgumentException">
		<paramref name="Len"/> is 0 and <paramref name="Fixed"/> is True (in Setter) -or-
 Number cannot be stored in given number of bytes (if <paramref name="Len"/> is non-zero, in Setter) -or-
 Number to be stored is negative (in Setter)
 </exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.GraphicCharacters_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Int32,System.Boolean,System.Text.Encoding)">
	<summary>Gets or sets values(s) of type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.GraphicCharacters"/></summary>
	<param name="Key">Record and dataset number</param>
	<param name="Len">Maximal or fixed lenght of string value after encoding (ignored in Getter)</param>
	<param name="Fixed"><paramref name="Len"/> determines fixed lenght instead of maximal if True (ignored in Getter)</param>
	<param name="Encoding">Encoding to be used. Is ommited or nothing then <see cref="P:Tools.DrawingT.MetadataT.IPTC.Encoding"/> is used</param>
	<exception cref="T:System.ArgumentException">
		<paramref name="Len"/> is 0 and <paramref name="Fixed"/> is true (in Setter) -or- 
 One of values being set contains non-graphic character (in setter) -or-
 One of values being set violates <paramref name="Len"/> and/or <paramref name="Fixed"/> constraint after being encoded
 </exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Len"/> is negative (in Setter)</exception>
	<remarks><seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Tag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)"/> for behavior details</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.TextWithSpaces_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Int32,System.Boolean,System.Text.Encoding)">
	<summary>Gets or sets values(s) of type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.TextWithSpaces"/></summary>
	<param name="Key">Record and dataset number</param>
	<param name="Len">Maximal or fixed lenght of string value after encoding (ignored in Getter)</param>
	<param name="Fixed"><paramref name="Len"/> determines fixed lenght instead of maximal if True (ignored in Getter)</param>
	<param name="Encoding">Encoding to be used. Is ommited or nothing then <see cref="P:Tools.DrawingT.MetadataT.IPTC.Encoding"/> is used</param>
	<exception cref="T:System.ArgumentException">
		<paramref name="Len"/> is 0 and <paramref name="Fixed"/> is true (in Setter) -or- 
 One of values being set contains non-graphic-non-space character (in setter) -or-
 One of values being set violates <paramref name="Len"/> and/or <paramref name="Fixed"/> constraint after being encoded -or-
 <paramref name="Len"/> is negative (in setter)
 </exception>
	<remarks><seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Tag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)"/> for behavior details</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Text_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Int32,System.Boolean,System.Text.Encoding)">
	<summary>Gets or sets values(s) of type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.TextWithSpaces"/></summary>
	<param name="Key">Record and dataset number</param>
	<param name="Len">Maximal or fixed lenght of string value after encoding (ignored in Getter)</param>
	<param name="Fixed"><paramref name="Len"/> determines fixed lenght instead of maximal if True (ignored in Getter)</param>
	<param name="Encoding">Encoding to be used. Is ommited or nothing then <see cref="P:Tools.DrawingT.MetadataT.IPTC.Encoding"/> is used</param>
	<exception cref="T:System.ArgumentException">
		<paramref name="Len"/> is 0 and <paramref name="Fixed"/> is true (in Setter) -or- 
 One of values being set contains non-graphic-non-space-non-cr-non-lf character (in setter) -or-
 One of values being set violates <paramref name="Len"/> and/or <paramref name="Fixed"/> constraint after being encoded
 </exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Len"/> is negative (in Setter)</exception>
	<remarks><seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Tag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)"/> for behavior details</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.BW460_460">
	<summary>Bitmap of type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.BW460"/> has 460 columns</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.BW460_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Int32,System.Boolean)">
	<summary>Gets or sets value(s) of <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.BW460"/> type</summary>
	<param name="Key">Record and dataset number</param>
	<param name="Len">Maximal or fixed length of serialized bitmap (ignored in Getter)</param>
	<param name="Fixed"><paramref name="Len"/> represents fixed lenght of serialized bitmap (ignored in Getter)</param>
	<exception cref="T:System.ArgumentException">
		<paramref name="Fixed"/> is True and <paramref name="Len"/> is 0 (in Setter) -or-
 Bitmap being set has width different form 460 (in Setter) -or-
 Bitmap violates lenght constraint after serialization (in Setter)
 </exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Len"/> is negative (in Setter)</exception>
	<remarks><seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Tag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)"/> for behavior details</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Cache">
	<summary>Cache for <see cref="P:Tools.DrawingT.MetadataT.IPTC.BW460_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Int32,System.Boolean)"/></summary>
	<remarks>FIlled by <see cref="P:Tools.DrawingT.MetadataT.IPTC.BW460_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Int32,System.Boolean)"/> getter, invalidated by <see cref="M:Tools.DrawingT.MetadataT.IPTC.OnValueChanged(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)"/></remarks>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.Ba2Bytes(System.Collections.BitArray)">
	<summary>Converts <see cref="T:System.Collections.BitArray"/> into <see cref="T:System.Byte"/></summary>
	<param name="ba">Bits to be converted</param>
	<returns>Array of <see cref="T:System.Byte"/>()</returns>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Enum_Binary_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Type)">
	<summary>Gets or sets value(s) of type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.Enum_Binary"/></summary>
	<param name="Key">Record and dataset number</param>
	<param name="Type">Type of neumeration </param>
	<remarks><seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Tag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)"/> for behavior details</remarks>
	<exception cref="T:System.ArgumentException">
 Underlying type of enumeration is neither <see cref="T:System.Byte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.UInt64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/> nor <see cref="T:System.Int64"/> (in Setter) -or-
 <paramref name="Type"/> is not <see cref="T:System.Enum"/> (in Setter)</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Enum is restricted and value being set is not member of <paramref name="Type"/></exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
	<exception cref="T:System.MissingMethodException">Failed to create instance of given enumeration (in Getter; sohold not occure if norma enumeration is passed to <paramref name="Type"/>)</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Enum_NumChar_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Type,System.Byte,System.Boolean)">
	<summary>Gets or sets value(s) of type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.Enum_NumChar"/></summary>
	<param name="Key">Record and dataset number</param>
	<param name="Type">Type of neumeration </param>
	<param name="Len">Maximal or fixed length of serialized bitmap (ignored in Getter)</param>
	<param name="Fixed"><paramref name="Len"/> represents fixed lenght of serialized bitmap (ignored in Getter)</param>
	<remarks><seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Tag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)"/> for behavior details</remarks>
	<exception cref="T:System.ArgumentException">
		<paramref name="Fixed"/> is True and <paramref name="Len"/> is 0 -or-
 <paramref name="Type"/> is not <see cref="T:System.Enum"/> (in Setter)</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Restrict"/> is True and value being set is not member of <paramref name="Type"/></exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
	<exception cref="T:System.MissingMethodException">Failed to create instance of given enumeration (in Getter; sohold not occure if norma enumeration is passed to <paramref name="Type"/>)</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.CCYYMMDD_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>Gets or sets value(s) of type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.CCYYMMDD"/></summary>
	<param name="Key">Record and dataset number</param>
	<remarks><seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Tag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)"/> for behavior details</remarks>
	<exception cref="T:System.ArgumentException">Stored date has lenght different from 8 (in Getter)</exception>
	<exception cref="T:System.InvalidCastException">Stored date contains non-number (in Getter)</exception>
	<exception cref="T:System.ArgumentOutOfRangeException">Stored date's value of month or day is invalid (i.e. 0 or 13 or more months or 0 or more than valid in month days) (in Getter)</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.CCYYMMDDOmmitable_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>Gets or sets value(s) of type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.CCYYMMDDOmmitable"/></summary>
	<param name="Key">Record and dataset number</param>
	<remarks><seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Tag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)"/> for behavior details</remarks>
	<exception cref="T:System.ArgumentException">Stored date ha lenght different from 8 (in Getter)</exception>
	<exception cref="T:System.InvalidCastException">Stored date contains non-number (in Getter)</exception>
	<exception cref="T:System.ArgumentOutOfRangeException">
 Stored date's value of month or day is invalid (i.e. 13 or more months or more than 31 days) (in Getter) -or-
 Date being set is invalid (day is invalid in month context) (in Setter) -or-
 Month or year is ommited when day is not ommited or year is ommited when month or day is not ommited (in Setter)
 </exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.HHMMSS_HHMM_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>Gets or sets value(s) of type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.HHMMSS_HHMM"/></summary>
	<param name="Key">Record and dataset number</param>
	<exception cref="T:System.ArgumentException">
 Stored time has length different than 11 (in Getter) -or-
 Stored time has something else then + or - on 7th position (in Getter)
 </exception>
	<exception cref="T:System.InvalidCastException">Stored time has non-numeric character on any position excepting 7th (in Getter)</exception>
	<exception cref="T:System.ArgumentOutOfRangeException">Stored time is out of range of possible values (see <seealso cref="T:Tools.DrawingT.MetadataT.IPTC.Time"/> for details)</exception>
	<remarks><seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Tag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)"/> for behavior details</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ByteArray_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Int32,System.Boolean)">
	<summary>Gets or sets value of <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.Byte_Binary"/> type</summary>
	<param name="Key">Record and dataset number</param>
	<param name="Len">Maximal or fixed length of data (ignored in Getter)</param>
	<param name="Fixed"><paramref name="Len"/> is fixed length (ignored in Getter)</param>
	<exception cref="T:System.ArgumentException">
		<paramref name="Fixed"/> is True and <paramref name="Len"/> is 0 (in Setter) -or-
 Lenght of byte array is greater then <paramref name="Len"/> and <paramref name="Len"/> is non-zero or length of byte array differs from <paramref name="Len"/> and <paramref name="Fixed"/> is True
 </exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.UNO_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>Gets or sets value of <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.UNO"/> type</summary>
	<param name="Key">Record and dataset number</param>
	<exception cref="T:System.ArgumentNullException">Stored value is null or empty (in Getter)</exception>
	<exception cref="T:System.ArgumentException">IPR or OVI part of stored value is invalid: contains unallowed charactes (white space, *, :, /, ?), is empty or violates lenght constraint. See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.OVI"/> and <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/> for more information (in Getter)</exception>
	<exception cref="T:System.IndexOutOfRangeException">There is not enough (4) parts separated by : in stored value (in Getter)</exception>
	<exception cref="T:System.ArgumentException">UCD component of stored value is to short or contains invalid date (in Getter)</exception>
	<exception cref="T:System.InvalidCastException">UCD component odf stored value contains non-numeric character (in Getter)</exception>
	<exception cref="T:System.OperationCanceledException">ODE part is invalid. See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/> for more information. (in Getter)</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Num2_Str_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Int32,System.Text.Encoding)">
	<summary>Gets or sets value of <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.Num2_Str"/> type</summary>
	<param name="Key">Record and dataset number</param>
	<param name="MaxLenght">Max length of serialized byte array (ignored in getter)</param>
	<param name="Encoding">Encoding for string patr (numeric always uses <see cref="P:System.Text.Encoding.ASCII"/>). If ommited or null then <see cref="P:Tools.DrawingT.MetadataT.IPTC.Encoding"/> is used.</param>
	<exception cref="T:System.ArgumentException">Serialized value is longer than <paramref name="MaxLenght"/> bytes or serialized numeric part is not of lenght 2 bytes</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Num3_Str_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Int32,System.Text.Encoding)">
	<summary>Gets or sets value of <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.Num2_Str"/> type</summary>
	<param name="Key">Record and dataset number</param>
	<param name="MaxLenght">Max length of serialized byte array (ignored in getter)</param>
	<param name="Encoding">Encoding for string patr (numeric always uses <see cref="P:System.Text.Encoding.ASCII"/>). If ommited or null then <see cref="P:Tools.DrawingT.MetadataT.IPTC.Encoding"/> is used.</param>
	<exception cref="T:System.ArgumentException">Serialized value is longer than <paramref name="MaxLenght"/> bytes or serialized numeric part is not of lenght 3 bytes</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.SubjectReference_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Text.Encoding)">
	<summary>Gets or sets value(s) of <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.SubjectReference"/> type</summary>
	<param name="Key">Record and dataset number</param>
	<param name="Encoding">Encoding used to encode and decode names</param>
	<exception cref="T:System.IndexOutOfRangeException">Stored value have more than 5 :-separated parts (in Getter)</exception>
	<exception cref="T:System.ArgumentException">Stored value have less then 5 :-separated parts (in Getter)</exception>
	<exception cref="T:System.InvalidOperationException">Setting value which's part(s) serializes into byte array of bad lengths (allowed lenghts are 1÷32 for <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/>, 8 for <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectReferenceNumber"/> and 0÷64 for names) (in setter)</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Alpha_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Byte,System.Boolean,System.Text.Encoding)">
	<summary>Gets or sets values(s) of type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.Alpha"/></summary>
	<param name="Key">Record and dataset number</param>
	<param name="Len">Maximal or fixed lenght of string value after encoding (ignored in Getter)</param>
	<param name="Fixed"><paramref name="Len"/> determines fixed lenght instead of maximal if True (ignored in Getter)</param>
	<param name="Encoding">Encoding to be used. Is ommited or nothing then <see cref="P:Tools.DrawingT.MetadataT.IPTC.Encoding"/> is used</param>
	<exception cref="T:System.ArgumentException">
		<paramref name="Len"/> is 0 and <paramref name="Fixed"/> is true (in Setter) -or- 
 One of values being set contains non-alpha character (in setter) -or-
 One of values being set violates <paramref name="Len"/> and/or <paramref name="Fixed"/> constraint after being encoded
 </exception>
	<remarks><seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Tag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)"/> for behavior details</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Type,System.Byte,System.Boolean)">
	<summary>Gets or sets value of <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.StringEnum"/> type</summary>
	<param name="Key">Record or dataset number</param>
	<param name="Type">Type of enum in value</param>
	<param name="Len">Maximal or fixed lenght of string value after encoding (ignored in Getter)</param>
	<param name="Fixed"><paramref name="Len"/> determines fixed lenght instead of maximal if True (ignored in Getter)</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.EnumType"/> has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> or it has <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> with <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> set to true and value is not member of <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.EnumType"/> (in Setter)</exception>
	<exception cref="T:System.ArrayTypeMismatchException"><see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.EnumType"/> differs from <paramref name="Type"/> (in setter)</exception>
	<exception cref="T:System.ArgumentException">
 Error while creating generic instance - caused by wrong <paramref name="Type"/> (in Getter) -or-
 Stored value contains invalid character (non-graphic-non-space-non-ASCII) (in getter) -or-
 Value violates length constaraint after serialization (in Setter) -or-
 <paramref name="Fixed"/> is true and <paramref name="Len"/> is 0
 </exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ImageType_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>Gets or sets value(s) of <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.ImageType"/> type</summary>
	<param name="Key">Record and dataset number</param>
	<exception cref="T:System.ArgumentException">
 Stored value has length different than 2B (in Getter) -or-
 2nd byte of stored value cannot be interpreted as <see cref="T:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents"/> (in Getter)
 </exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.AudioType_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>Gets or sets value(s) of <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.ImageType"/> type</summary>
	<param name="Key">Record and dataset number</param>
	<exception cref="T:System.ArgumentException">
 Stored value has length different than 2B (in Getter) -or-
 2nd byte of stored value cannot be interpreted as <see cref="T:Tools.DrawingT.MetadataT.IPTC.AudioDataType"/> (in Getter) -or-
 Setting value which's serializatazion produes more or less than 2 bytes
 </exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.HHMMSS_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>Gets or sets value(s) of <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.HHMMSS"/> type</summary>
	<param name="Key">Record and dataset number</param>
	<exception cref="T:System.ArgumentException">Stored item's length differs from 6 (in Getter)</exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><see cref="T:System.TimeSpan"/> to be stored is less than <see cref="F:System.TimeSpan.Zero"/> or it's <see cref="P:System.TimeSpan.TotalDays"/> is greater than or equal to 1 (in setter)</exception>
	<exception cref="T:System.InvalidCastException">Stored item contains non-numeric character (in Getter)</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ConvertEnumList``1(System.Collections.Generic.List{System.Enum})">
	<summary>Converts <see cref="T:System.Collections.Generic.List`1"/> into <see cref="T:System.Collections.Generic.List`1"/> of any <see cref="T:System.Enum"/></summary>
	<param name="From"><see cref="T:System.Collections.Generic.List`1"/> to be converted</param>
	<typeparam name="TEnum">Type of <see cref="T:System.Enum"/></typeparam>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ConvertEnumList``1(System.Collections.Generic.List{``0})">
	<summary>Converts <see cref="T:System.Collections.Generic.List`1"/> of any <see cref="T:System.Enum"/> into <see cref="T:System.Collections.Generic.List`1"/></summary>
	<param name="From"><see cref="T:System.Collections.Generic.List`1"/> to be converted</param>
	<typeparam name="TEnum">Type of <see cref="T:System.Enum"/></typeparam>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ConvertNumStrList``2(System.Collections.Generic.List{``0})">
	<summary>Converts <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/> to <see cref="T:System.Collections.Generic.List`1"/> of another <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/> that drives from first one</summary>
	<param name="From"><see cref="T:System.Collections.Generic.List`1"/> to be converted</param>
	<typeparam name="TNumStr1">Type of items in <paramref name="From"/></typeparam>
	<typeparam name="TNumStr2">Type of items in return value</typeparam>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ConvertNumStrList``2(System.Collections.Generic.List{``1})">
	<summary>Converts <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/> that derives from another <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/> to list of that another <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/></summary>
	<param name="From"><see cref="T:System.Collections.Generic.List`1"/> to be converted</param>
	<typeparam name="TNumStr1">Type of items in return value</typeparam>
	<typeparam name="TNumStr2">Type of item in <paramref name="From"/></typeparam>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ConvertEnumList``1(System.Collections.Generic.List{Tools.DrawingT.MetadataT.IPTC.StringEnum})">
	<summary>Converts <see cref="T:System.Collections.Generic.List`1"/> into <see cref="T:System.Collections.Generic.List`1"/> of any <see cref="T:System.Enum"/></summary>
	<param name="From"><see cref="T:System.Collections.Generic.List`1"/> to be converted</param>
	<typeparam name="TEnum">Type of <see cref="T:System.Enum"/></typeparam>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ConvertEnumList``1(System.Collections.Generic.List{Tools.DrawingT.MetadataT.IPTC.StringEnum{``0}})">
	<summary>Converts <see cref="T:System.Collections.Generic.List`1"/> of any <see cref="T:System.Enum"/> into <see cref="T:System.Collections.Generic.List`1"/></summary>
	<param name="From"><see cref="T:System.Collections.Generic.List`1"/> to be converted</param>
	<typeparam name="TEnum">Type of <see cref="T:System.Enum"/></typeparam>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.aar">
	<summary>Code for Afar (Qafár af)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.abk">
	<summary>Code for Abkhaz (Аҧсуа)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ace">
	<summary>Code for Acehnese, Achinese (Aceh)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ada">
	<summary>Code for Adangme (Adangme)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ady">
	<summary>Code for Adyghe (адыгэбзэ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.afa">
	<summary>Code for Afro-Asiatic (Other) (Afro-Asiatic (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.afh">
	<summary>Code for Afrihili (Afrihili)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.afr">
	<summary>Code for Afrikaans (Afrikaans)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ach">
	<summary>Code for Acoli (Acoli)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ain">
	<summary>Code for Ainu (アイヌ イタク)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.aka">
	<summary>Code for Akan (Akan)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.akk">
	<summary>Code for Akkadian (akkadû)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.alb">
	<summary>Code for Albanian (Shqip)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ale">
	<summary>Code for Aleut (Unangam Tunuu)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.alg">
	<summary>Code for Algonquian languages (Algonquian languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.alt">
	<summary>Code for Southern Altai (алтай тили)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.amh">
	<summary>Code for Amharic (አማርኛ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ang">
	<summary>Code for English, Old (ca. 450–1100) (Englisc)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.anp">
	<summary>Code for Angika (अङ्गिका)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.apa">
	<summary>Code for Apache languages (Apache languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ara">
	<summary>Code for Arabic (العربية)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.arc">
	<summary>Code for Aramaic (ܐܪܡܝܐ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.arg">
	<summary>Code for Aragonese (Aragonés)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.arm">
	<summary>Code for Armenian (Հայերեն լեզու)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.arn">
	<summary>Code for Araucanian (mapudungun)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.arp">
	<summary>Code for Arapaho (Hinono'eitiit)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.art">
	<summary>Code for Artificial (Other) (Artificial (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.arw">
	<summary>Code for Arawak (Arawak)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.asm">
	<summary>Code for Assamese (অসমীয়া)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ast">
	<summary>Code for Asturian (asturianu)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ath">
	<summary>Code for Athapascan languages (aðapaskāw)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.aus">
	<summary>Code for Australian languages (Australian languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ava">
	<summary>Code for Avaric (авар мацӀ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ave">
	<summary>Code for Avestan (avesta)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.awa">
	<summary>Code for Awadhi (अवधी)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.aym">
	<summary>Code for Aymara (aymar aru)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.aze">
	<summary>Code for Azerbaijani (Azərbaycanca)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bad">
	<summary>Code for Banda (Banda)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bai">
	<summary>Code for Bamileke languages (Bamiléké)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bak">
	<summary>Code for Bashkir (башҡорт теле)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bal">
	<summary>Code for Baluchi (بلوچی)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bam">
	<summary>Code for Bambara (bamanankan)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ban">
	<summary>Code for Balinese (Basa Bali)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.baq">
	<summary>Code for Basque (euskara)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bas">
	<summary>Code for Basa (ɓasaá)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bat">
	<summary>Code for Baltic (Other) (Baltic (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bej">
	<summary>Code for Beja (بداوية)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bel">
	<summary>Code for Belarusian (Беларуская мова)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bem">
	<summary>Code for Bemba (Chiwemba)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ben">
	<summary>Code for Bengali (বাংলা)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ber">
	<summary>Code for Berber (Other) (Tamazight)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bho">
	<summary>Code for Bhojpuri (भोजपुरी)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bih">
	<summary>Code for Bihari (Bihari)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bik">
	<summary>Code for Bikol languages (Bikol)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bin">
	<summary>Code for Bini (Edo)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bis">
	<summary>Code for Bislama (Bislama)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bla">
	<summary>Code for Siksika (siksiká)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bnt">
	<summary>Code for Bantu (Other) (Bantu (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bos">
	<summary>Code for Bosnian (bosanski jezik)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bra">
	<summary>Code for Braj (ब्रज भाषा)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bre">
	<summary>Code for Breton (brezhoneg)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.btk">
	<summary>Code for Batak (Indonesia) (Batak)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bua">
	<summary>Code for Buriat (буряад хэлэн)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bug">
	<summary>Code for Buginese (ᨅᨔ ᨕᨘᨁᨗ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bul">
	<summary>Code for Bulgarian (български език)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.bur">
	<summary>Code for Burmese (မန္မာစာ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.byn">
	<summary>Code for Blin (ብሊና)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.cad">
	<summary>Code for Caddo (Hasí:nay)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.cai">
	<summary>Code for Central American Indian (Other) (Central American Indian (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.car">
	<summary>Code for Carib (Cariban)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.cat">
	<summary>Code for Catalan (català)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.cau">
	<summary>Code for Caucasian (Other) (Caucasian (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ceb">
	<summary>Code for Cebuano (Sinugboanon)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.cel">
	<summary>Code for Celtic (Other) (Celtic (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.cmc">
	<summary>Code for Chamic languages (Chamic languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.cop">
	<summary>Code for Coptic (ⲙⲉⲧⲛ̀ⲣⲉⲙⲛ̀ⲭⲏⲙⲓ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.cor">
	<summary>Code for Cornish (Kernewek)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.cos">
	<summary>Code for Corsican (corsu)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.cpe">
	<summary>Code for Creoles and Pidgins, English-based (Other) (Creoles and Pidgins, English-based (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.cpf">
	<summary>Code for Creoles and Pidgins, French-based (Other) (Creoles and Pidgins, French-based (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.cpp">
	<summary>Code for Creoles and Pidgins, Portuguese-based (Other) (Creoles and Pidgins, Portuguese-based (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.cre">
	<summary>Code for Cree (ᓀᐦᐃᔭᐍᐏᐣ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.crh">
	<summary>Code for Crimean Tatar (къырымтатар тили)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.crp">
	<summary>Code for Creoles and Pidgins (Other) (Creoles and Pidgins (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.csb">
	<summary>Code for Kashubian (kaszëbsczi jãzëk)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.cus">
	<summary>Code for Cushitic (Other) (Cushitic (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.cze">
	<summary>Code for Czech (čeština)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.dak">
	<summary>Code for Dakota (Lakhota)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.dan">
	<summary>Code for Danish (dansk)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.dar">
	<summary>Code for Dargwa (дарган мез)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.day">
	<summary>Code for Dayak (Dayak)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.del">
	<summary>Code for Delaware (Lënape)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.den">
	<summary>Code for Slave (Athapascan) (Slave)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.dgr">
	<summary>Code for Dogrib (Tłįchǫ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.din">
	<summary>Code for Dinka (Thuɔŋjäŋ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.div">
	<summary>Code for Divehi (ދިވެހިބަސ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.doi">
	<summary>Code for Dogri (डोगरी)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.dra">
	<summary>Code for Dravidian (Other) (Dravidian (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.dsb">
	<summary>Code for Sorbian, Lower (dolnoserbski)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.dua">
	<summary>Code for Duala (Douala)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.dum">
	<summary>Code for Dutch, Middle (ca. 1050–1350) (Middelnederlands)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.dut">
	<summary>Code for Dutch (Nederlands)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.dyu">
	<summary>Code for Dyula (Julakan)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.dzo">
	<summary>Code for Dzongkha (རྫོང་ཁ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.efi">
	<summary>Code for Efik (Ibibio)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.egy">
	<summary>Code for Egyptian (Ancient) (r n km.t)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.eka">
	<summary>Code for Ekajuk (Akajo)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.elx">
	<summary>Code for Elamite (Elamite)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.eng">
	<summary>Code for English (English)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.enm">
	<summary>Code for English, Middle (ca. 1100–1500) (English, Middle (ca. 1100–1500))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.epo">
	<summary>Code for Esperanto (Esperanto)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.est">
	<summary>Code for Estonian (Eesti keel)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.eus">
	<summary>Code for Basque (euskara)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ewe">
	<summary>Code for Ewe (Ɛʋɛgbɛ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ewo">
	<summary>Code for Ewondo (Ewondo)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.fan">
	<summary>Code for Fang (Fang)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.fao">
	<summary>Code for Faroese (føroyskt)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.fat">
	<summary>Code for Fanti (Fanti)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.fij">
	<summary>Code for Fijian (vosa Vakaviti)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.fil">
	<summary>Code for Filipino (Filipino)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.fin">
	<summary>Code for Finnish (suomi)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.fiu">
	<summary>Code for Finno-Ugrian (Other) (Finno-Ugrian (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.fon">
	<summary>Code for Fon (Fɔngbe)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.fre">
	<summary>Code for French (français)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.frm">
	<summary>Code for French, Middle (ca. 1400—1600) (le moyen français)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.fro">
	<summary>Code for French, Old (842—ca. 1400) (langue d'oïl)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.frr">
	<summary>Code for Frisian, Northern (Frasch)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.frs">
	<summary>Code for Frisian, Eastern (Seeltersk Fräisk)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.fry">
	<summary>Code for Frisian, Western (frysk)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ful">
	<summary>Code for Fulah (Fulfulde)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.fur">
	<summary>Code for Friulian (furlan)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.gaa">
	<summary>Code for Ga (Gã)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.gay">
	<summary>Code for Gayo (Bahasa Gayo)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.gba">
	<summary>Code for Gbaya (Gbaya)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.gem">
	<summary>Code for Germanic (Other) (Germanic (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.geo">
	<summary>Code for Georgian (ქართული ენა )</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ger">
	<summary>Code for German (Deutsch)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.gez">
	<summary>Code for Geez (ግዕዝ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.gil">
	<summary>Code for Gilbertese (taetae ni Kiribati)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.gla">
	<summary>Code for Scottish Gaelic (Gàidhlig)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.gle">
	<summary>Code for Irish (Gaeilge)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.glg">
	<summary>Code for Galician (Galego)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.glv">
	<summary>Code for Manx (Gaelg)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.gmh">
	<summary>Code for German, Middle High (ca. 1050–1500) (diutisk)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.goh">
	<summary>Code for German, Old High (ca. 750–1050) (diutisc)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.gon">
	<summary>Code for Gondi (Gondi)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.gor">
	<summary>Code for Gorontalo (Grontalo)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.got">
	<summary>Code for Gothic (𐌷𐌰𐌿𐌱𐌹𐌳𐌰𐍃𐌴𐌹𐌳𐍉)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.grb">
	<summary>Code for Grebo (Grebo)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.grc">
	<summary>Code for Greek, Ancient (to 1453) (Ἑλληνικά)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.gre">
	<summary>Code for Greek, Modern (1453–) (Ελληνικά)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.grn">
	<summary>Code for Guarani (Avañe'ẽ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.gsw">
	<summary>Code for German, Alemannic (Alemannisch, Schwyzerdütsch)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.guj">
	<summary>Code for Gujarati (ગુજરાતી)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.gwi">
	<summary>Code for Gwichʼin (Gwich’in)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.hai">
	<summary>Code for Haida (X̲aat Kíl)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.hat">
	<summary>Code for Haitian Creole (Kreyòl ayisyen)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.hau">
	<summary>Code for Hausa (هَوُسَ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.haw">
	<summary>Code for Hawaiian (‘Ōlelo Hawai‘i)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.heb">
	<summary>Code for Hebrew (עִבְרִית; עברית)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.her">
	<summary>Code for Herero (Otjiherero)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.hil">
	<summary>Code for Hiligaynon (Ilonggo)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.him">
	<summary>Code for Himachali (हिमाचल प्रदेश)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.hin">
	<summary>Code for Hindi (हिन्दी)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.hit">
	<summary>Code for Hittite (𒉈𒅆𒇷)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.hmn">
	<summary>Code for Hmong (Hmoob)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.hmo">
	<summary>Code for Hiri Motu (Hiri Motu)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.hrv">
	<summary>Code for Croatian (hrvatski jezik)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.hsb">
	<summary>Code for Sorbian, Upper (hornjoserbsce)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.hun">
	<summary>Code for Hungarian (Magyar)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.hup">
	<summary>Code for Hupa (?)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.cha">
	<summary>Code for Chamorro (Chamoru)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.chb">
	<summary>Code for Chibcha (muysca kubun)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.che">
	<summary>Code for Chechen (нохчийн мотт)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.chg">
	<summary>Code for Chagatai (جغتای )</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.chi">
	<summary>Code for Chinese (中文)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.chk">
	<summary>Code for Chuukese (Trukese)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.chm">
	<summary>Code for Mari (марий йылме)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.chn">
	<summary>Code for Chinook jargon (Lelang)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.cho">
	<summary>Code for Choctaw (Chahta Anumpa)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.chp">
	<summary>Code for Dene Suline (ᑌᓀᓲᒢᕄᓀ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.chr">
	<summary>Code for Cherokee (ᏣᎳᎩ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.chu">
	<summary>Code for Church Slavonic (Ѩзыкъ словѣньскъ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.chv">
	<summary>Code for Chuvash (чӑваш чӗлхи)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.chy">
	<summary>Code for Cheyenne (Tsêhést)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.iba">
	<summary>Code for Iban (Iban)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ibo">
	<summary>Code for Igbo (Igbo)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ice">
	<summary>Code for Icelandic (íslenska)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ido">
	<summary>Code for Ido (Ido)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.iii">
	<summary>Code for Sichuan Yi (ꆇꉙ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ijo">
	<summary>Code for Ijo (Ijo)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.iku">
	<summary>Code for Inuktitut (ᐃᓄᒃᑎᑐᑦ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ile">
	<summary>Code for Interlingue (Interlingue)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ilo">
	<summary>Code for Iloko (Ilokano)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ina">
	<summary>Code for Interlingua (interlingua)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.inc">
	<summary>Code for Indic (Other) (Indic (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ind">
	<summary>Code for Indonesian (Bahasa Indonesia)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ine">
	<summary>Code for Indo-European (Other) (Indo-European (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.inh">
	<summary>Code for Ingush (гӀалгӀай мотт)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ipk">
	<summary>Code for Inupiaq (Iñupiaq)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ira">
	<summary>Code for Iranian (Other) (Iranian (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.iro">
	<summary>Code for Iroquoian languages (Iroquoian languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ita">
	<summary>Code for Italian (italiano)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.jav">
	<summary>Code for Javanese (basa Jawa)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.jbo">
	<summary>Code for Lojban (la lojban.)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.jpn">
	<summary>Code for Japanese (日本語)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.jpr">
	<summary>Code for Judeo-Persian (Jidi)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.jrb">
	<summary>Code for Judeo-Arabic (Judeo-Arabic)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kaa">
	<summary>Code for Kara-Kalpak (қарақалпақ тили)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kab">
	<summary>Code for Kabyle (Taqbaylit)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kac">
	<summary>Code for Kachin (Jinghpaw)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kal">
	<summary>Code for Greenlandic (kalaallisut)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kam">
	<summary>Code for Kamba (Kikamba)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kan">
	<summary>Code for Kannada (ಕನ್ನಡ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kar">
	<summary>Code for Karen (Karen languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kas">
	<summary>Code for Kashmiri (कॉशुर; کٲشُر)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kau">
	<summary>Code for Kanuri (Kanuri)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kaw">
	<summary>Code for Kawi (Bhāṣa Kawi)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kaz">
	<summary>Code for Kazakh (Қазақ тілі)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kbd">
	<summary>Code for Kabardian (къэбэрдеибзэ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kha">
	<summary>Code for Khasi (Khasi)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.khi">
	<summary>Code for Khoisan (Other) (Khoisan)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.khm">
	<summary>Code for Khmer (ភាសាខ្មែរ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kho">
	<summary>Code for Khotanese (Khotanese)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kik">
	<summary>Code for Kikuyu (Gĩkũyũ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kin">
	<summary>Code for Kinyarwanda (kinyaRwanda)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kir">
	<summary>Code for Kirghiz (кыргыз тили)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kmb">
	<summary>Code for Kimbundu (Kimbundu)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kok">
	<summary>Code for Konkani (कोंकणी)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kom">
	<summary>Code for Komi (коми кыв)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kon">
	<summary>Code for Kongo (Kikongo)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kor">
	<summary>Code for Korean (한국어)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kos">
	<summary>Code for Kosraean (Kosrae)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kpe">
	<summary>Code for Kpelle (kpele)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.krc">
	<summary>Code for Karachay-Balkar (къарачай-малкъар тил)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.krl">
	<summary>Code for Karelian (karjalan kieli)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kro">
	<summary>Code for Kru (Kru)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kru">
	<summary>Code for Kurukh (Kurux)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kua">
	<summary>Code for Kuanyama (Oshikwanyama)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kum">
	<summary>Code for Kumyk (къумукъ тил)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kur">
	<summary>Code for Kurdish (Kurdî)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.kut">
	<summary>Code for Kutenai (Kootenai)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.lad">
	<summary>Code for Ladino (ג'ודיאו-איספאנייול)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.lah">
	<summary>Code for Lahnda (ਪੰਜਾਬੀ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.lam">
	<summary>Code for Lamba (Lamba)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.lao">
	<summary>Code for Lao (ພາສາລາວ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.lat">
	<summary>Code for Latin (latine)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.lav">
	<summary>Code for Latvian (latviešu valoda)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.lez">
	<summary>Code for Lezghian (лезги чӀал)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.lim">
	<summary>Code for Limburgish (Limburgs)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.lin">
	<summary>Code for Lingala (lingala)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.lit">
	<summary>Code for Lithuanian (lietuvių kalba)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.lol">
	<summary>Code for Mongo (Mongo)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.loz">
	<summary>Code for Lozi (Silozi)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ltz">
	<summary>Code for Luxembourgish (Lëtzebuergesch)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.lua">
	<summary>Code for Luba-Lulua (lwaà:)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.lub">
	<summary>Code for Luba-Katanga (Luba-Katanga)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.lug">
	<summary>Code for Ganda (Luganda)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.lui">
	<summary>Code for Luiseno (Luiseño)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.lun">
	<summary>Code for Lunda (Chilunda)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.luo">
	<summary>Code for Luo (Dholuo)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.lus">
	<summary>Code for Lushai (Lushai)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mac">
	<summary>Code for Macedonian (македонски јазик)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mad">
	<summary>Code for Madurese (Basa Mathura)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mag">
	<summary>Code for Magahi (मगही)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mah">
	<summary>Code for Marshallese (Kajin M̧ajeļ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mai">
	<summary>Code for Maithili (मैथिली)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mak">
	<summary>Code for Makasar (Makasar)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mal">
	<summary>Code for Malayalam (മലയാളം)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.man">
	<summary>Code for Mandingo (Mandinka)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mao">
	<summary>Code for Māori (te reo Māori)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.map">
	<summary>Code for Austronesian (Other) (Austronesian (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mar">
	<summary>Code for Marathi (मराठी)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mas">
	<summary>Code for Masai (ɔl Maa)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.may">
	<summary>Code for Malay (بهاس ملايو)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mdf">
	<summary>Code for Moksha (мокшень кяль)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mdr">
	<summary>Code for Mandar (Mandar)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.men">
	<summary>Code for Mende (Mɛnde yia)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mga">
	<summary>Code for Irish, Middle (900–1200) (Gaoidhealg)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mic">
	<summary>Code for Mi'kmaq (Mi'gmaq)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.min">
	<summary>Code for Minangkabau (Baso Minangkabau)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mis">
	<summary>Code for miscellaneous languages (miscellaneous languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mkh">
	<summary>Code for Mon-Khmer (Other) (Mon-Khmer (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mlg">
	<summary>Code for Malagasy (Malagasy fiteny)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mlt">
	<summary>Code for Maltese (Malti)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mnc">
	<summary>Code for Manchu (ᠮᠠᠨᠵᡠ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mni">
	<summary>Code for Manipuri (মৈইতৈইলোন)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mno">
	<summary>Code for Manobo languages (Manobo languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.moh">
	<summary>Code for Mohawk (Kanien’keha)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mol">
	<summary>Code for Moldavian (лимба молдовеняскэ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mon">
	<summary>Code for Mongolian (монгол хэл)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mos">
	<summary>Code for Mossi (Mòoré)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mul">
	<summary>Code for multiple languages (multiple languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mun">
	<summary>Code for Munda languages (Munda languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mus">
	<summary>Code for Creek (Maskoki)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mwl">
	<summary>Code for Mirandese (Lhéngua Mirandesa)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mwr">
	<summary>Code for Marwari (मारवाड़ी)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.mya">
	<summary>Code for Burmese (မန္မာစာ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.myn">
	<summary>Code for Mayan languages (Mayan languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.myv">
	<summary>Code for Erzya (эрзянь кель)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nah">
	<summary>Code for Nahuatl (nāhuatl)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nai">
	<summary>Code for North American Indian (Other) (North American Indian (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nap">
	<summary>Code for Neapolitan (napulitano)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nau">
	<summary>Code for Nauruan (Ekakairũ Naoero)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nav">
	<summary>Code for Navajo (Diné bizaad)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nbl">
	<summary>Code for Ndebele, South (Ndébélé)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nde">
	<summary>Code for Ndebele, North (isiNdebele)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ndo">
	<summary>Code for Ndonga (Owambo)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nds">
	<summary>Code for German, Low (Nederdüütsch)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nep">
	<summary>Code for Nepali (नेपाली)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.new">
	<summary>Code for Nepal Bhasa (नेपाल भाषा)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nia">
	<summary>Code for Nias (Nias)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nic">
	<summary>Code for Niger-Kordofanian (Other) (Niger-Kordofanian (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.niu">
	<summary>Code for Niuean (ko e vagahau Niuē)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nno">
	<summary>Code for Norwegian Nynorsk (Norsk nynorsk)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nob">
	<summary>Code for Norwegian Bokmål (Norsk bokmål)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nog">
	<summary>Code for Nogai (ногай тили)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.non">
	<summary>Code for Norse, Old (norskr)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nor">
	<summary>Code for Norwegian (Norsk)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nqo">
	<summary>Code for N'Ko (N'Ko)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nso">
	<summary>Code for Sotho, Northern; Pedi; Sepedi (sePêdi)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nub">
	<summary>Code for Nubian languages (Nubian languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nwc">
	<summary>Code for Nepal Bhasa (नेपाल भाषा)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nya">
	<summary>Code for Chichewa (chiCheŵa)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nym">
	<summary>Code for Nyamwezi (Kinyamwezi)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nyn">
	<summary>Code for Nyankole (Nyankole)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nyo">
	<summary>Code for Nyoro (Runyoro)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.nzi">
	<summary>Code for Nzima (Nzima)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.oci">
	<summary>Code for Occitan (lenga d'òc)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.oji">
	<summary>Code for Ojibwa (ᐊᓂᔑᓇᐯᒧᐏᐣ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ori">
	<summary>Code for Oriya (ଓଡ଼ିଆ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.orm">
	<summary>Code for Oromo (Afaan Oromoo)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.osa">
	<summary>Code for Osage (Osage)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.oss">
	<summary>Code for Ossetian (ирон ӕвзаг)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ota">
	<summary>Code for Turkish, Ottoman (1500–1928) (لسان عثمان)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.oto">
	<summary>Code for Otomian languages (Otomian languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.paa">
	<summary>Code for Papuan (Other) (Papuan (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.pag">
	<summary>Code for Pangasinan (salitan Pangasinan)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.pal">
	<summary>Code for Pahlavi (Pahlavi)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.pam">
	<summary>Code for Pampanga (Kapampangan)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.pan">
	<summary>Code for Punjabi (ਪੰਜਾਬੀ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.pap">
	<summary>Code for Papiamento (Papiamentu)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.pau">
	<summary>Code for Palauan (tekoi ra Belau)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.peo">
	<summary>Code for Persian, Old (ca. 600–400 BC) (Persian, Old (ca. 600–400 BC))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.per">
	<summary>Code for Persian (فارسی)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.phi">
	<summary>Code for Philippine (Other) (Philippine (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.phn">
	<summary>Code for Phoenician (𐤃𐤁𐤓𐤉𐤌𐤟𐤊𐤍𐤏𐤍𐤉𐤌)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.pli">
	<summary>Code for Pali (पालि)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.pol">
	<summary>Code for Polish (polski)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.pon">
	<summary>Code for Pohnpeian (Pohnpeian)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.por">
	<summary>Code for Portuguese (Português)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.pra">
	<summary>Code for Prakrit languages (प्राकृत)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.pro">
	<summary>Code for Provençal, Old (to 1500) (Provençal, Old (to 1500))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.pus">
	<summary>Code for Pushto (پښت)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.que">
	<summary>Code for Quechua (Runa Simi)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.raj">
	<summary>Code for Rajasthani (राजस्थानी)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.rap">
	<summary>Code for Rapanui (rapanui)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.rar">
	<summary>Code for Rarotongan (Māori Kūki 'Āirani)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.roa">
	<summary>Code for Romance (Other) (Romance (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.roh">
	<summary>Code for Raeto-Romance (rumantsch grischun)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.rom">
	<summary>Code for Romany (Romani šib)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.rum">
	<summary>Code for Romanian (română)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.run">
	<summary>Code for Rundi (kiRundi)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.rup">
	<summary>Code for Aromanian (limba armãneascã)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.rus">
	<summary>Code for Russian (русский язык)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sad">
	<summary>Code for Sandawe (Sandawe)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sag">
	<summary>Code for Sango (yângâ tî sängö)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sah">
	<summary>Code for Yakut (Саха тыла)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sai">
	<summary>Code for South American Indian (Other) (South American Indian (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sal">
	<summary>Code for Salishan languages (Salishan languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sam">
	<summary>Code for Samaritan Aramaic (ܐܪܡܝܐ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.san">
	<summary>Code for Sanskrit (संस्कृतम्)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sas">
	<summary>Code for Sasak (Sasak)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sat">
	<summary>Code for Santali (संथाली)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.scc">
	<summary>Code for Serbian (српски језик)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.scn">
	<summary>Code for Sicilian (Sicilianu)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sco">
	<summary>Code for Scots (Scoats leid)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sel">
	<summary>Code for Selkup (шӧльӄумыт әты)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sem">
	<summary>Code for Semitic (Other) (Semitic (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sga">
	<summary>Code for Irish, Old (to 900) (Goídelc)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sgn">
	<summary>Code for Sign languages (Sign languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.shn">
	<summary>Code for Shan (Shan)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sid">
	<summary>Code for Sidamo (Sidámo 'Afó)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sin">
	<summary>Code for Sinhalese (සිංහල)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sio">
	<summary>Code for Siouan languages (Siouan languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sit">
	<summary>Code for Sino-Tibetan (Other) (Sino-Tibetan (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sla">
	<summary>Code for Slavic (Other) (Slavic (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.slo">
	<summary>Code for Slovak (slovenčina)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.slv">
	<summary>Code for Slovenian (slovenščina)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sma">
	<summary>Code for Southern Sami (saemien giele)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sme">
	<summary>Code for Northern Sami (davvisámegiella)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.smi">
	<summary>Code for Sami languages (Other) (Sami languages (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.smj">
	<summary>Code for Lule Sami (sámegiella)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.smn">
	<summary>Code for Inari Sami (säämegiella)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.smo">
	<summary>Code for Samoan (gagana fa'a Samoa)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sms">
	<summary>Code for Skolt Sami (sääʼmǩiõll)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sna">
	<summary>Code for Shona (chiShona)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.snd">
	<summary>Code for Sindhi (سنڌي، سندھی)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.snk">
	<summary>Code for Soninke (Soninkanxaane)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sog">
	<summary>Code for Sogdian (Sogdian)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.som">
	<summary>Code for Somali (Soomaaliga)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.son">
	<summary>Code for Songhai (Songhay languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sot">
	<summary>Code for Sotho, Southern (seSotho)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.spa">
	<summary>Code for Spanish (español)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.srd">
	<summary>Code for Sardinian (sardu)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.srn">
	<summary>Code for Sranan Tongo (Sranan Tongo)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.srr">
	<summary>Code for Serer (Sérère)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ssa">
	<summary>Code for Nilo-Saharan (Other) (Nilo-Saharan (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ssw">
	<summary>Code for Swati (siSwati)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.suk">
	<summary>Code for Sukuma (Sukuma)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sun">
	<summary>Code for Sundanese (basa Sunda)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sus">
	<summary>Code for Susu (Sosokui)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.sux">
	<summary>Code for Sumerian (eme-ĝir)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.swa">
	<summary>Code for Swahili (kiswahili)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.swe">
	<summary>Code for Swedish (Svenska)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.syc">
	<summary>Code for Classical Syriac (ܣܘܪܝܝܐ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.syr">
	<summary>Code for Syriac (ܣܘܪܝܝܐ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tah">
	<summary>Code for Tahitian (te reo Tahiti; te reo Māʼohi)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tai">
	<summary>Code for Tai (Other) (´Tai (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tam">
	<summary>Code for Tamil (தமிழ்)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tat">
	<summary>Code for Tatar (татарча)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tel">
	<summary>Code for Telugu (తెలుగు)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tem">
	<summary>Code for Timne (Timne)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ter">
	<summary>Code for Tereno (Tereno)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tet">
	<summary>Code for Tetum (Tetun)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tgk">
	<summary>Code for Tajik (тоҷикӣ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tgl">
	<summary>Code for Tagalog (Tagalog)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tha">
	<summary>Code for Thai (ภาษาไทย)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tib">
	<summary>Code for Tibetan (བོད་ཡིག)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tig">
	<summary>Code for Tigre (Tigré)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tir">
	<summary>Code for Tigrinya (ትግርኛ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tiv">
	<summary>Code for Tiv (Tiv)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tkl">
	<summary>Code for Tokelau (Tokelauan)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tlh">
	<summary>Code for Klingon (tlhIngan Hol)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tli">
	<summary>Code for Tlingit (Lingít)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tmh">
	<summary>Code for Tamashek (Tamajeq)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tog">
	<summary>Code for Tonga (Malawi) (chiTonga)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ton">
	<summary>Code for Tongan (faka-Tonga)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tpi">
	<summary>Code for Tok Pisin (Tok Pisin)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tsi">
	<summary>Code for Tsimshian (Tsimshianic languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tsn">
	<summary>Code for Tswana (seTswana)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tso">
	<summary>Code for Tsonga (xiTsonga)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tuk">
	<summary>Code for Turkmen (Түркмен)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tum">
	<summary>Code for Tumbuka (chiTumbuka)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tup">
	<summary>Code for Tupi languages (Nheengatu)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tur">
	<summary>Code for Turkish (Türkçe)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tut">
	<summary>Code for Altaic (Other) (Altaic (Other))</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tvl">
	<summary>Code for Tuvalu ('gana Tuvalu)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.twi">
	<summary>Code for Twi (Twi)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.tyv">
	<summary>Code for Tuvinian (тыва дыл)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.udm">
	<summary>Code for Udmurt (удмурт кыл)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.uga">
	<summary>Code for Ugaritic (Ugaritic)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.uig">
	<summary>Code for Uighur (Uyƣurqə)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ukr">
	<summary>Code for Ukrainian (українська мова)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.umb">
	<summary>Code for Umbundu (úmbúndú)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.und">
	<summary>Code for undetermined language (undetermined language)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.urd">
	<summary>Code for Urdu (اردو)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.uzb">
	<summary>Code for Uzbek (Ўзбек)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.vai">
	<summary>Code for Vai (Vai)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ven">
	<summary>Code for Venda (tshiVenḓa)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.vie">
	<summary>Code for Vietnamese (Tiếng Việt)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.vol">
	<summary>Code for Volapük (Volapük)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.vot">
	<summary>Code for Votic (vaďďa tšeeli)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.wak">
	<summary>Code for Wakashan languages (Wakashan languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.wal">
	<summary>Code for Walamo (Walamo)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.war">
	<summary>Code for Waray (Winaray)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.was">
	<summary>Code for Washo (Washoe)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.wel">
	<summary>Code for Welsh (Cymraeg)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.wen">
	<summary>Code for Sorbian languages (Sorbian languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.wln">
	<summary>Code for Walloon (walon)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.wol">
	<summary>Code for Wolof (Wolof)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.xal">
	<summary>Code for Kalmyk (хальмг келн)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.xho">
	<summary>Code for Xhosa (isiXhosa)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.yao">
	<summary>Code for Yao (Chiyao)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.yap">
	<summary>Code for Yapese (Yapese)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.yid">
	<summary>Code for Yiddish (ייִדיש)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.yor">
	<summary>Code for Yoruba (Yorùbá)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ypk">
	<summary>Code for Yupik languages (Yupik languages)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.zap">
	<summary>Code for Zapotec (Zapotec)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.zen">
	<summary>Code for Zenaga (Tuḍḍungiyya)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.zha">
	<summary>Code for Zhuang (Saɯ cueŋƅ)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.znd">
	<summary>Code for Zande (Zande)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.zul">
	<summary>Code for Zulu (isiZulu)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.zun">
	<summary>Code for Zuni (Shiwi)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.zxx">
	<summary>Code for no linguistic content (no linguistic content)</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.zza">
	<summary>Code for Zaza (So-Bé)</summary>
</member><member name="M:Tools.GlobalizationT.ISOLanguage.GetAllCodes">
	<summary>Returns list of all predefined ISO 639-2 and ISO 639-1 language codes</summary>
	<remarks>Reserved code from range qaa÷qtz are not returned. Duplicate codes are returnet only in <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/> property of other codes.</remarks>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.lvwEncodingListViewItemSorter_Changed(Tools.IReportsChange,System.EventArgs)">
	<summary>Handles <see cref="E:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Changed"/> event of <see cref="P:System.Windows.Forms.ListView.ListViewItemSorter"/> of <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.lvwEncoding"/></summary>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.RefreshEncodings">
	<summary>Refreshes list of encodings</summary>
	<remarks>Encodings are obtainded from <see cref="M:System.Text.EncodingInfo.GetEncoding"/></remarks>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.RemoveEncoding(System.Text.EncodingInfo)">
	<summary>Removes first encoding with same <see cref="P:System.Text.EncodingInfo.CodePage"/> as <paramref name="Encoding"/>'s one</summary>
	<param name="Encoding">Encoding to remove</param>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.RemoveEncoding(System.Int32)">
	<summary>Removes first encoding with same <see cref="P:System.Text.EncodingInfo.CodePage"/> as <paramref name="Encoding"/></summary>
	<param name="CodePage">Code page to search for</param>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.Clear">
	<summary>Removes all encodings</summary>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.Add(System.Text.EncodingInfo)">
	<summary>Adds given encoding (if encoding with same <see cref="P:System.Text.EncodingInfo.CodePage"/> is not present in list)</summary>
	<param name="Encoding">Encoding to add</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Encoding"/> is null</exception>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.ContainsCodePage(System.Int32)">
	<summary>Determines wheather encoding with <see cref="P:System.Text.EncodingInfo.CodePage"/> equal to <paramref name="CP"/> is present in list</summary>
	<param name="CP">Code page to search for</param>
	<returns>True if encoding with same code page is found, otherwise not.</returns>
</member><member name="F:Tools.WindowsT.FormsT.EncodingSelector._DisplayStyle">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.DisplayStyle"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.DisplayStyle">
	<summary>Gets or sets format string used to display name of encodings in list</summary>
	<remarks>
 Property is ignored when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/>
		<list>
			<listheader>There are 3 parameters tah can be passed to format string:</listheader>
			<item>{0} - <see cref="P:System.Text.EncodingInfo.DisplayName"/></item>
			<item>{1} - <see cref="P:System.Text.EncodingInfo.Name"/></item>
			<item>{2} - <see cref="P:System.Text.EncodingInfo.CodePage"/></item>
		</list>
		<para>Expamples:
 <example>{0}</example> displays user-friendly name of encoding
 <example>{1} (CP {2})</example> displays IANA-registered name of encoding and its codepage.
 </para>
		<seealso cref="T:System.String"/>
		<seealso cref="P:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.DisplayStyle"/>
	</remarks>
</member><member name="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ComboBox">
	<summary><see cref="T:Tools.WindowsT.FormsT.EncodingSelector"/> is realized by <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ComboBox"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListBox">
	<summary><see cref="T:Tools.WindowsT.FormsT.EncodingSelector"/> is realized by <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListBox"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView">
	<summary><see cref="T:Tools.WindowsT.FormsT.EncodingSelector"/> is realized by <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></summary>
</member><member name="T:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle">
	<summary>Styles of <see cref="T:Tools.WindowsT.FormsT.EncodingSelector"/></summary>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.Style">
	<summary>Defines control used for showing encodings</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Setting value that is not member of <see cref="T:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle"/></exception>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.DefaultMaximumSize">
	<summary>Gets the length and height, in pixels, that is specified as the default maximum size of a control.</summary>
	<returns>A <see cref="T:System.Drawing.Size"/> representing the size of the control.</returns>
	<remarks>If <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ComboBox"/> then height is limited to maximum height of <see cref="T:System.Windows.Forms.ComboBox"/></remarks>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.DefaultMinimumSize">
	<summary>Gets the length and height, in pixels, that is specified as the default minimum size of a control.</summary>
	<returns>A <see cref="T:System.Drawing.Size"/> representing the size of the control.</returns>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.Encodings">
	<summary>Gets lis of actualy displayed <see cref="T:System.Text.EncodingInfo"/>s</summary>
	<remarks>Avoid using this property for getting count of encoding. Use <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Count"/> instead</remarks>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.Count">
	<summary>Number of encodings displayed</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingSelector.ClearPending">
	<summary>True while <see cref="P:System.Windows.Forms.ListView.SelectedItems"/> of <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.lvwEncoding"/> are being cleared. Prevents raising <see cref="E:System.Windows.Forms.ListView.SelectedIndexChanged"/> event multiple times</summary>
</member><member name="E:Tools.WindowsT.FormsT.EncodingSelector.SelectedIndexChanged">
	<summary>Raised after the <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.SelectedIndex"/> property is changed</summary>
	<param name="sender">The source of the evemt</param>
	<param name="e">Arguments</param>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.OnSelectedIndexChanged">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.EncodingSelector.SelectedIndexChanged"/> event</summary>
	<remarks>Note to inheritors: Call base-class method <see cref="M:Tools.WindowsT.FormsT.EncodingSelector.OnSelectedIndexChanged"/> in order the <see cref="E:Tools.WindowsT.FormsT.EncodingSelector.SelectedIndexChanged"/> event to be raised</remarks>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.SelectedIndex">
	<summary>Gets or sets index of currently selected encoding or -1 if no encoding is selected</summary>
	<exception cref="T:System.ArgumentOutOfRangeException">The assigned value is less than -1 or greater than or equal to <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Count"/>.</exception>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.SelectedEncoding">
	<summary>Gets or sets currently selected encoding</summary>
	<exception cref="T:System.ArgumentException">Attempt to select encoding thet is not in list</exception>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.SelectedCodepage">
	<summary>Gets code page identifier of selected encoding or tries to select encoding with given code page</summary>
	<value>Searches for encoding with given codepage. If found selects it. If <paramref name="value"/> is -1 then encoding is unselected.</value>
	<returns>Code page identifier of selected encoding</returns>
	<remarks><seealso cref="P:System.Text.EncodingInfo.CodePage"/></remarks>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.SelectedName">
	<summary>Gets The Internet Assigned Numbers Authority (IANA) name of selected encoding or tries to select encoding with given name</summary>
	<value>Searches for encoding with given name. If found selects it. If <paramref name="value"/> is an empty string then encoding is unselected.</value>
	<returns>The Internet Assigned Numbers Authority (IANA) name of selected encoding</returns>
	<remarks><seealso cref="P:System.Text.EncodingInfo.Name"/></remarks>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.BackColor">
	<summary>Gets or sets the background color for the control.</summary>
	<returns>A System.Drawing.Color that represents the background color of the control</returns>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.ForeColor">
	<summary>Gets or sets the foreground color of the control.</summary>
	<returns>The foreground <see cref="T:System.Drawing.Color"/> of the control.</returns>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.BackgroundImage">
	<summary>Gets or sets the background image displayed in the control.</summary>
	<returns>An <see cref="T:System.Drawing.Image"/> that represents the image to display in the background of the control.</returns>
	<remarks>Applies only when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></remarks>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.BackgroundImageLayout">
	<summary>Gets or sets an <see cref="T:System.Windows.Forms.ImageLayout"/> value.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.ImageLayout"/> values.</returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value specified is not one of the <see cref="T:System.Windows.Forms.ImageLayout"/> values</exception>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.NameColumnHeaderWidth">
	<summary>Defines width of <see cref="T:System.Windows.Forms.ColumnHeader"/> which displays <see cref="P:System.Text.EncodingInfo.Name"/></summary>
	<remarks>Applicable only when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></remarks>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.ShouldSerializeNameColumnHeaderWidth">
	<summary>Instructs designer if <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.NameColumnHeaderWidth"/> should be serialized</summary>
	<returns>True if value differs from default</returns>
	<remarks>User by Windows Forms Designer to determine wheater property should be initialized in designer-generated code or not</remarks>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.ResetNameColumnHeaderWidth">
	<summary>Resets <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.NameColumnHeaderWidth"/> to its default value</summary>
	<remarks>Used by <see cref="T:System.Windows.Forms.PropertyGrid"/></remarks>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.DisplayNameColumnHeaderWidth">
	<summary>Defines width of <see cref="T:System.Windows.Forms.ColumnHeader"/> which displays <see cref="P:System.Text.EncodingInfo.DisplayName"/></summary>
	<remarks>Applicable only when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></remarks>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.ShouldSerializeDisplayNameColumnHeaderWidth">
	<summary>Instructs designer if <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.DisplayNameColumnHeaderWidth"/> should be serialized</summary>
	<returns>True if value differs from default</returns>
	<remarks>User by Windows Forms Designer to determine wheater property should be initialized in designer-generated code or not</remarks>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.ResetDisplayNameColumnHeaderWidth">
	<summary>Resets <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.DisplayNameColumnHeaderWidth"/> to its default value</summary>
	<remarks>Used by <see cref="T:System.Windows.Forms.PropertyGrid"/></remarks>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.CodePageColumnHeaderWidth">
	<summary>Defines width of <see cref="T:System.Windows.Forms.ColumnHeader"/> which displays <see cref="P:System.Text.EncodingInfo.CodePage"/></summary>
	<remarks>Applicable only when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></remarks>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.ShouldSerializeCodePageColumnHeaderWidth">
	<summary>Instructs designer if <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.CodePageColumnHeaderWidth"/> should be serialized</summary>
	<returns>True if value differs from default</returns>
	<remarks>User by Windows Forms Designer to determine wheater property should be initialized in designer-generated code or not</remarks>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.ResetCodePageColumnHeaderWidth">
	<summary>Resets <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.CodePageColumnHeaderWidth"/> to its default value</summary>
	<remarks>Used by <see cref="T:System.Windows.Forms.PropertyGrid"/></remarks>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.NameColumnHeaderText">
	<summary>Gets or sets text of <see cref="T:System.Windows.Forms.ColumnHeader"/> which displays <see cref="P:System.Text.EncodingInfo.Name"/></summary>
	<remarks>Applicable only when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></remarks>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.ShouldSerializeNameColumnHeaderText">
	<summary>Instructs designer if <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.NameColumnHeaderText"/> should be serialized</summary>
	<returns>True if value differs from default</returns>
	<remarks>User by Windows Forms Designer to determine wheater property should be initialized in designer-generated code or not</remarks>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.ResetNameColumnHeaderText">
	<summary>Resets <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.NameColumnHeaderText"/> to its default value</summary>
	<remarks>Used by <see cref="T:System.Windows.Forms.PropertyGrid"/></remarks>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.DisplayNameColumnHeaderText">
	<summary>Gets or sets text of <see cref="T:System.Windows.Forms.ColumnHeader"/> which displays <see cref="P:System.Text.EncodingInfo.DisplayName"/></summary>
	<remarks>Applicable only when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></remarks>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.ShouldSerializeDisplayNameColumnHeaderText">
	<summary>Instructs designer if <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.DisplayNameColumnHeaderText"/> should be serialized</summary>
	<returns>True if value differs from default</returns>
	<remarks>User by Windows Forms Designer to determine wheater property should be initialized in designer-generated code or not</remarks>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.ResetDisplayNameColumnHeaderText">
	<summary>Resets <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.DisplayNameColumnHeaderText"/> to its default value</summary>
	<remarks>Used by <see cref="T:System.Windows.Forms.PropertyGrid"/></remarks>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.CodePageColumnHeaderText">
	<summary>Gets or sets text of <see cref="T:System.Windows.Forms.ColumnHeader"/> which displays <see cref="P:System.Text.EncodingInfo.CodePage"/></summary>
	<remarks>Applicable only when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></remarks>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.ShouldSerializeCodePageColumnHeaderText">
	<summary>Instructs designer if <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.CodePageColumnHeaderText"/> should be serialized</summary>
	<returns>True if value differs from default</returns>
	<remarks>User by Windows Forms Designer to determine wheater property should be initialized in designer-generated code or not</remarks>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.ResetCodePageColumnHeaderText">
	<summary>Resets <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.CodePageColumnHeaderText"/> to its default value</summary>
	<remarks>Used by <see cref="T:System.Windows.Forms.PropertyGrid"/></remarks>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.Sorting">
	<summary>Specifies column and order of sorting</summary>
	<remarks>Sorting can be changed by user by clicking column header. Sorting applies only when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></remarks>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.ShouldSerializeSorting">
	<summary>Instructs designer if <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Sorting"/> should be serialized</summary>
	<returns>True if value differs from default</returns>
	<remarks>User by Windows Forms Designer to determine wheater property should be initialized in designer-generated code or not</remarks>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.ResetSorting">
	<summary>Resets <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Sorting"/> to its default value</summary>
	<remarks>Used by <see cref="T:System.Windows.Forms.PropertyGrid"/></remarks>
</member><member name="F:Tools.WindowsT.FormsT.EncodingSelector.enmColumnOrder.DisplayName_Name_CodePage">
	<summary>Columns are ordered: display name - name - code page</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingSelector.enmColumnOrder.DisplayName_CodePage_Name">
	<summary>Columns are ordered: display name - codepage - name</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingSelector.enmColumnOrder.Name_DisplayName_CodePage">
	<summary>Columns are ordered: name - display name - code page</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingSelector.enmColumnOrder.Name_CodePage_DisplayName">
	<summary>Columns are ordered: name - code page - display name</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingSelector.enmColumnOrder.CodePage_DisplayName_Name">
	<summary>Columns are ordered: code page - display name - name</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingSelector.enmColumnOrder.CodePage_Name_DisplayName">
	<summary>Columns are ordered: code page - name - display name</summary>
</member><member name="T:Tools.WindowsT.FormsT.EncodingSelector.enmColumnOrder">
	<summary>Specifies all possible orders of columns</summary>
	<remarks>
 Column order specification is <see cref="T:System.Int16"/> number divided into 3 4-bits long groups.
 First group is position of DisplayName column, second is position of name column and third of code page column.
 Positions in groups are 1-based.
 </remarks>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.ColumnOrder">
	<summary>Gets or setrs order of columns of <see cref="T:System.Windows.Forms.ListView"/> if <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay._Info">
	<summary>Copntains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.Info"/> property</summary>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.#ctor(System.Text.EncodingInfo)">
	<summary>CTor</summary>
	<param name="Info"><see cref="T:System.Text.EncodingInfo"/> to be wrapped</param>
</member><member name="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay._DisplayStyle">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.DisplayStyle"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.DisplayStyle">
	<summary>Gets or sets format string used to display name of encoding in the <see cref="M:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.ToString"/> function</summary>
	<remarks>
		<list>
			<listheader>There are 3 parameters tah can be passed to format string:</listheader>
			<item>{0} - <see cref="P:System.Text.EncodingInfo.DisplayName"/></item>
			<item>{1} - <see cref="P:System.Text.EncodingInfo.Name"/></item>
			<item>{2} - <see cref="P:System.Text.EncodingInfo.CodePage"/></item>
		</list>
		<seealso cref="T:System.String"/>
	</remarks>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.ToString">
	<summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay"/>.</summary>
	<returns><see cref="P:System.Text.EncodingInfo.DisplayName"/> of <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.Info"/></returns>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.Info">
	<summary>Gets or sets <see cref="T:System.Text.EncodingInfo"/> being wrapped</summary>
	<exception cref="T:System.ArgumentNullException">value is being set to null</exception>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.op_Implicit(System.Text.EncodingInfo)~Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay">
	<summary>Converts <see cref="T:System.Text.EncodingInfo"/> to <see cref="T:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay"/></summary>
	<param name="a"><see cref="T:System.Text.EncodingInfo"/> to be converted</param>
	<returns>New instance of <see cref="T:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay"/> initialized with <paramref name="a"/> or null when <paramref name="a"/> is null.</returns>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.op_Implicit(Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay)~System.Text.EncodingInfo">
	<summary>Converts <see cref="T:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay"/> to <see cref="T:System.Text.EncodingInfo"/></summary>
	<param name="a"><see cref="T:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay"/> to be converted</param>
	<returns>Value of the <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.Info"/> property of <paramref name="a"/> or null when <paramref name="a"/> is null.</returns>
</member><member name="T:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay">
	<summary>Wrapper class aroun <see cref="T:System.Text.EncodingInfo"/> in order to be displayed in list</summary>
</member><member name="E:Tools.WindowsT.FormsT.EncodingSelector.ItemDoubleClick">
	<summary>Raised when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListBox"/> or <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/> and user doubleclicks on item or raised when use presses the enter key and some item is selected not depending on <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/></summary>
	<param name="sender">The source of the event</param>
	<param name="e">Event parameters</param>
</member><member name="M:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorItemClickEventArgs.#ctor(System.Text.EncodingInfo)">
	<summary>CTor</summary>
	<param name="Item">Encoding being selected when event occured</param>
</member><member name="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorItemClickEventArgs._Item">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorItemClickEventArgs.Item"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorItemClickEventArgs.Item">
	<summary>Encoding being selected when event occured</summary>
</member><member name="T:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorItemClickEventArgs">
	<summary>Erguments of the <see cref="E:Tools.WindowsT.FormsT.EncodingSelector.ItemDoubleClick"/> event</summary>
</member><member name="T:Tools.WindowsT.FormsT.EncodingSelector">
	<summary>Control taht allows user to chose from available encoding</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGReader.Stream">
	<summary>Stream of opened file</summary>
</member><member name="P:Tools.DrawingT.IO.JPEG.JPEGReader.JPEGStream">
	<summary>Stream of whole JPEG file</summary>
</member><member name="M:Tools.DrawingT.IO.JPEG.JPEGReader.#ctor(System.String,System.Boolean)">
	<summary>CTor from file</summary>
	<param name="Path">Path to file to read from</param>
	<param name="Write">Opens file for writing as well as for reading if true. This is necessary for <see cref="M:Tools.DrawingT.IO.JPEG.JPEGReader.IPTCEmbed(System.Byte[])"/> to work</param>
	<exception cref="T:System.IO.DirectoryNotFoundException">The specified <paramref name="path"/> is invalid, such as being on an unmapped drive.</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
	<exception cref="T:System.UnauthorizedAccessException">The access requested (readonly) is not permitted by the operating system for the specified path.</exception>
	<exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
	<exception cref="T:System.ArgumentException"><paramref name="path"/> is an empty string (""), contains only white space, or contains one or more invalid characters.</exception>
	<exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
	<exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
	<exception cref="T:System.IO.PathTooLongException">The specified <paramref name="path"/>, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
	<exception cref="T:System.IO.InvalidDataException">
 Invalid JPEG marker found (code doesn't start with FFh, length set to 0 or 2) -or-
 JPEG stream doesn't start with corect SOI marker -or-
 JPEG stream doesn't end with corect EOI marker
 </exception>
</member><member name="M:Tools.DrawingT.IO.JPEG.JPEGReader.#ctor(System.IO.Stream)">
	<summary>CTor from stream</summary>
	<param name="Stream"><see cref="T:System.IO.Stream"/> to read data from</param>
	<exception cref="T:System.NotSupportedException"><paramref name="Stream"/> doesn't support read or seek (the <see cref="P:System.IO.Stream.CanRead"/> or <see cref="P:System.IO.Stream.CanSeek"/> returns false)</exception>
	<exception cref="T:System.IO.InvalidDataException">
 Invalid JPEG marker found (code doesn't start with FFh, length set to 0 or 2) -or-
 JPEG stream doesn't start with corect SOI marker -or-
 JPEG stream doesn't end with corect EOI marker
 </exception>
	<remarks>The <paramref name="Stream"/> is not automatically closed when instance is disposed</remarks>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGReader._Markers">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.IO.JPEG.JPEGReader.Markers"/> property</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGReader._ImageStream">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.IO.JPEG.JPEGReader.ImageStream"/> property</summary>
</member><member name="M:Tools.DrawingT.IO.JPEG.JPEGReader.Parse">
	<summary>Parses given JPEG file and extracts JPEG markers and image data streams</summary>
	<exception cref="T:System.IO.InvalidDataException">
 Invalid JPEG marker found (code doesn't start with FFh, length set to 0 or 2) -or-
 JPEG stream doesn't start with corect SOI marker -or-
 JPEG stream doesn't end with corect EOI marker -or-
 EOI not found at the end of image
 </exception>
</member><member name="P:Tools.DrawingT.IO.JPEG.JPEGReader.Markers">
	<summary>List of markers this JPEG stream</summary>
</member><member name="P:Tools.DrawingT.IO.JPEG.JPEGReader.ImageStream">
	<summary>Stream constrained to Image stream part of JPEG stream</summary>
</member><member name="M:Tools.DrawingT.IO.JPEG.JPEGReader.GetExifStream">
	<summary>Gets stream of Exif data</summary>
	<remarks>
		<para>Stream content starts with TIFF header</para>
		<para>If there is no Exif data in file stream can be null or have zero length</para>
		<para>Stream supports reading and seeking</para>
	</remarks>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGReader._ExifMarkerIndex">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.IO.JPEG.JPEGReader.ExifMarkerIndex"/> property</summary>
	<remarks>If value is less than -1 <see cref="P:Tools.DrawingT.IO.JPEG.JPEGReader.ExifMarkerIndex"/> has not been aquired, if value is -1 then there if no Exif data</remarks>
</member><member name="P:Tools.DrawingT.IO.JPEG.JPEGReader.ExifMarkerIndex">
	<summary>Gets index of marker which stores Exif data</summary>
	<returns>Index of marker into <see cref="P:Tools.DrawingT.IO.JPEG.JPEGReader.Markers"/> collection in which Exif data are stored, -1 if there are no Exif data</returns>
</member><member name="M:Tools.DrawingT.IO.JPEG.JPEGReader.GetIPTCStream">
	<summary>Gets stream of IPTC data</summary>
	<remarks>
		<para>Stream content starts with first tag marker 1Ch of IPTC stream</para>
		<para>If there is no IPTC data in file stream can be null or have zero length</para>
		<para>Stream supports reading and seeking</para>
	</remarks>
	<exception cref="T:System.IO.IOException">IO error while reding Photoshop block stream</exception>
	<exception cref="T:System.IO.EndOfStreamException">End of stream Photoshop block stream reached unexpectedly</exception>
	<exception cref="T:System.IO.InvalidDataException">
 An 8BIM segment doesn't start with string '8BIM'
 Sum of reported size and start of an 8BIM segment data exceeds length of Photoshop block stream
 </exception>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGReader.IPTC8BIM">
	<summary>Value of <see cref="P:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader.Type"/> of 8BIM segment that contains IPTC stream</summary>
</member><member name="P:Tools.DrawingT.IO.JPEG.JPEGReader.IPTC8BIMSegmentIndex">
	<summary>Gets index of 8BIM segment which stores IPTC data</summary>
	<returns>Index of 8BIM segment into <see cref="M:Tools.DrawingT.IO.JPEG.JPEGReader.Get8BIMSegments"/> collection in which IPTC data are stored, -1 if there are no IPTC data</returns>
</member><member name="M:Tools.DrawingT.IO.JPEG.JPEGReader.Get8BIMSegments">
	<summary>Parses Photoshop segment in current JPEG image and return all 8BIM segments contained in it</summary>
	<returns>Collection of <see cref="T:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader"/> representing all 8BIM segments contained in Photoshop block of current image, an empty collection if there are no 8BIM segments (or no Photoshop block or no APP13 marker)</returns>
	<exception cref="T:System.IO.IOException">IO error while reding Photoshop block stream</exception>
	<exception cref="T:System.IO.EndOfStreamException">End of stream Photoshop block stream reached unexpectedly</exception>
	<exception cref="T:System.IO.InvalidDataException">
 An 8BIM segment doesn't start with string '8BIM'
 Sum of reported size and start of an 8BIM segment data exceeds length of Photoshop block stream
 </exception>
</member><member name="M:Tools.DrawingT.IO.JPEG.JPEGReader.GetPhotoShopStream">
	<summary>Gets stream of PhotoShop data</summary>
	<remarks>
		<para>Stream content starts with marker of first 8BIM segment</para>
		<para>If there is no Photoshop data in file stream can be null or have zero length</para>
		<para>Stream supports reading and seeking</para>
	</remarks>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGReader._PhotoshopMarkerIndex">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.IO.JPEG.JPEGReader.PhotoshopMarkerIndex"/> property</summary>
	<remarks>If value is less than -1 <see cref="P:Tools.DrawingT.IO.JPEG.JPEGReader.PhotoshopMarkerIndex"/> has not been aquired yet, if value is -1 then there if no Photoshop data</remarks>
</member><member name="P:Tools.DrawingT.IO.JPEG.JPEGReader.PhotoshopMarkerIndex">
	<summary>Gets index of marker which stores Photoshop data</summary>
	<returns>Index of marker into <see cref="P:Tools.DrawingT.IO.JPEG.JPEGReader.Markers"/> collection in which Photoshop data are stored, -1 if there are no Photoshop data</returns>
</member><member name="M:Tools.DrawingT.IO.JPEG.JPEGReader.IPTCEmbed(System.Byte[])">
	<summary>Writes given IPTC data to stream of JPEG file</summary>
	<param name="IPTCData">Data to be written</param>
	<remarks>either replaces existing IPTC data, adds new 8BIM segment or adds new APP14 marker</remarks>
	<exception cref="T:System.InvalidOperationException">No JPEG marker found</exception>
	<exception cref="T:System.IO.IOException">An IO error occurs</exception>
	<exception cref="T:System.ObjectDisposedException"><see cref="F:Tools.DrawingT.IO.JPEG.JPEGReader.Stream"/> is closed</exception>
	<exception cref="T:System.NotSupportedException">
		<see cref="F:Tools.DrawingT.IO.JPEG.JPEGReader.Stream"/> does not support seeking -or-
 <see cref="F:Tools.DrawingT.IO.JPEG.JPEGReader.Stream"/> does not support writing -or-
 <see cref="F:Tools.DrawingT.IO.JPEG.JPEGReader.Stream"/> does not suport reading
 </exception>
</member><member name="M:Tools.DrawingT.IO.JPEG.JPEGReader.BIM8Header(System.UInt32)">
	<summary>Gets bytes of header of 8BIM 1C02 segment</summary>
	<param name="IPTCDataLength">Size of segment data part to be reported</param>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGReader.disposedValue">
	<summary>To detect redundant calls</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGReader.CloseStreamOnDispose">
	<summary>stream will be closed when <see cref="M:Tools.DrawingT.IO.JPEG.JPEGReader.Dispose(System.Boolean)"/> is invoked</summary>
</member><member name="M:Tools.DrawingT.IO.JPEG.JPEGReader.Dispose(System.Boolean)">
	<summary><see cref="T:System.IDisposable"/></summary>
	<param name="disposing">Free shared unmanaged resources</param>
</member><member name="M:Tools.DrawingT.IO.JPEG.JPEGReader.Dispose">
	<summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
	<remarks>This code added by Visual Basic to correctly implement the disposable pattern.</remarks>
</member><member name="T:Tools.DrawingT.IO.JPEG.JPEGReader">
	<summary>Provides tools realted to reading from JPEG graphic file format on low level</summary>
</member><member name="M:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader.#ctor(System.IO.Stream,System.Int64)">
	<summary>CTor</summary>
	<param name="Stream">Steam which contains segment data</param>
	<param name="Offset">Offest of start of segment within <paramref name="Stream"/></param>
	<exception cref="T:System.IO.IOException">IO error while reding <paramref name="Stream"/></exception>
	<exception cref="T:System.IO.EndOfStreamException">End of stream <paramref name="Stream"/> reached unexpectedly</exception>
	<exception cref="T:System.IO.InvalidDataException">
 Segment doesn't start with string '8BIM'
 Sum of reported size and start of segment data exceeds length of <paramref name="Stream"/>
	</exception>
</member><member name="F:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader._NamePaddNeeded">
	<summary>True when name is padded to odd lenght (event with size specification) by one null byte</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader._Type">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader.Type"/> property</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader._Name">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader.Name"/> property</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader._DataSize">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader.DataSize"/> property</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader._Data">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader.Data"/> property</summary>
</member><member name="P:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader.WholeSize">
	<summary>Size of whole 8BIM segment including all header information</summary>
	<remarks>See <see cref="P:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader.DataSize"/> for size of data part of segment</remarks>
</member><member name="P:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader.DataPadNeeded">
	<summary>True when data must be padded with one null byte to even lenght</summary>
</member><member name="P:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader.NamePaddNeeded">
	<summary>True when name is padded to odd lenght (event with size specification) by one null byte</summary>
</member><member name="P:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader.Type">
	<summary>Type of segment</summary>
</member><member name="P:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader.Name">
	<summary>Name of segment</summary>
</member><member name="P:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader.DataSize">
	<summary>Size of data part of segment</summary>
	<remarks>See <see cref="P:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader.WholeSize"/> for size of whole segment including all header information</remarks>
</member><member name="P:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader.Data">
	<summary>Stream of data part of segment</summary>
</member><member name="T:Tools.DrawingT.IO.JPEG.Photoshop8BIMReader">
	<summary>Represents Photoshop 8BIM segment</summary>
</member><member name="M:Tools.DrawingT.ImageTools.ThumbSize(System.Drawing.Size,System.Drawing.Size)">
	<summary>Gets thumbnail size that best fits into given size</summary>
	<param name="ImgSize">Size of original image</param>
	<param name="ThumbBounds">Size that represents maximal bounds of thumbnail</param>
	<returns>Size that does not exceed <paramref name="ThumbBounds"/> and has same proportions as <paramref name="ImgSize"/></returns>
</member><member name="M:Tools.DrawingT.ImageTools.ThumbSize(System.Drawing.Image,System.Drawing.Size)">
	<summary>Gets size of image that best fits into given size and has same proportins</summary>
	<param name="Image">Original image (only <see cref="P:System.Drawing.Image.Size"/> of this image is used).</param>
	<param name="ThumbBounds">Size that represents maximal bounds of thumbnail</param>
	<returns>Size that does not exceed <paramref name="ThumbBounds"/> and has same proportions as <paramref name="Image"/>.<see cref="P:System.Drawing.Image.Size">Size</see>.</returns>
</member><member name="M:Tools.DrawingT.ImageTools.Overlay(System.Drawing.Image,System.Drawing.Image,System.Drawing.ContentAlignment)">
	<summary>Combines two images by overlaying them</summary>
	<param name="Background">Image to serve as background</param>
	<param name="OverlayImage">Image to draw over <paramref name="Background"/></param>
	<param name="Position">Position of overlay image</param>
	<returns>New instance of <see cref="T:System.Drawing.Image"/> with <paramref name="Background"/> as backround and <paramref name="OverlayImage"/> drawn ovwe it.</returns>
</member><member name="F:Tools.IOt.BinaryReader.ByteAling.LittleEndian">
	<summary>LittleEndian (Intel)</summary>
	<remarks>Stores 0A0B0C0D as 0D0C0B0A</remarks>
</member><member name="F:Tools.IOt.BinaryReader.ByteAling.BigEndian">
	<summary>BigEndian (Motorola)</summary>
	<remarks>Stores 0A0B0C0D as 0A0B0C0D</remarks>
</member><member name="T:Tools.IOt.BinaryReader.ByteAling">
	<summary>Possible byte orders</summary>
</member><member name="F:Tools.IOt.BinaryReader._ByteOrder">
	<summary>Contains value of the <see cref="P:Tools.IOt.BinaryReader.ByteOrder"/> property</summary>
</member><member name="P:Tools.IOt.BinaryReader.ByteOrder">
	<summary>Format in which numeric data are read</summary>
	<remarks>Only integral numbers are affected by this property
 <list><listheader>List of affected functions</listheader>
			<item><see cref="M:Tools.IOt.BinaryReader.ReadInt16"/></item>
			<item><see cref="M:Tools.IOt.BinaryReader.ReadInt32"/></item>
			<item><see cref="M:Tools.IOt.BinaryReader.ReadInt64"/></item>
			<item><see cref="M:Tools.IOt.BinaryReader.ReadUInt16"/></item>
			<item><see cref="M:Tools.IOt.BinaryReader.ReadUInt32"/></item>
			<item><see cref="M:Tools.IOt.BinaryReader.ReadUInt64"/></item>
		</list>
	</remarks>
</member><member name="M:Tools.IOt.BinaryReader.#ctor(System.IO.Stream,Tools.IOt.BinaryReader.ByteAling)">
	<summary>Initializes a new instance of the <see cref="T:Tools.IOt.BinaryReader"/> class based on the supplied stream and using <see cref="T:System.Text.UTF8Encoding"/>.</summary>
	<param name="input">A stream.</param>
	<param name="Align">Format in which numeric data are read</param>
	<exception cref="T:System.ArgumentException">The stream does not support reading, the stream is null, or the stream is already closed</exception>
</member><member name="M:Tools.IOt.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,Tools.IOt.BinaryReader.ByteAling)">
	<summary>Initializes a new instance of the <see cref="T:Tools.IOt.BinaryReader"/> class based on the supplied stream and a specific character encoding.</summary>
	<param name="encoding">The character encoding.</param>
	<param name="input">The supplied stream.</param>
	<param name="Align">Format in which numeric data are read</param>
	<exception cref="T:System.ArgumentNullException">encoding is null.</exception>
	<exception cref="T:System.ArgumentException">The stream does not support reading, the stream is null, or the stream is already closed.</exception>
</member><member name="M:Tools.IOt.BinaryReader.ReadInt16">
	<summary>Reads a 2-byte signed integer from the current stream using specified endian encoding accorifng to <see cref="P:Tools.IOt.BinaryReader.ByteOrder"/> and advances the current position of the stream by two bytes.</summary>
	<returns>A 2-byte signed integer read from the current stream.</returns>
	<exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
	<exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
	<exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
</member><member name="M:Tools.IOt.BinaryReader.ReadInt32">
	<summary>Reads a 4-byte signed integer from the current stream using specified endian encoding accorifng to <see cref="P:Tools.IOt.BinaryReader.ByteOrder"/> and advances the current position of the stream by four bytes.</summary>
	<returns>A 4-byte signed integer read from the current stream.</returns>
	<exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
	<exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
	<exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
</member><member name="M:Tools.IOt.BinaryReader.ReadInt64">
	<summary>Reads an 8-byte signed integer from the current stream using specified endian encoding accorifng to <see cref="P:Tools.IOt.BinaryReader.ByteOrder"/> and advances the current position of the stream by eight bytes.</summary>
	<returns>An 8-byte signed integer read from the current stream.</returns>
	<exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
	<exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
	<exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
</member><member name="M:Tools.IOt.BinaryReader.ReadUInt16">
	<summary>Reads a 2-byte unsigned integer from the current stream using specified endian encoding accorifng to <see cref="P:Tools.IOt.BinaryReader.ByteOrder"/> and advances the position of the stream by two bytes.</summary>
	<returns>A 2-byte unsigned integer read from this stream.</returns>
	<exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
	<exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
	<exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
</member><member name="M:Tools.IOt.BinaryReader.ReadUInt32">
	<summary>Reads a 4-byte unsigned integer from the current stream using specified endian encoding accorifng to <see cref="P:Tools.IOt.BinaryReader.ByteOrder"/> and advances the position of the stream by four bytes.</summary>
	<returns>A 4-byte unsigned integer read from this stream.</returns>
	<exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
	<exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
	<exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
</member><member name="M:Tools.IOt.BinaryReader.ReadUInt64">
	<summary>Reads an 8-byte unsigned integer from the current stream using specified endian encoding accorifng to <see cref="P:Tools.IOt.BinaryReader.ByteOrder"/> and advances the position of the stream by eight bytes.</summary>
	<returns>An 8-byte unsigned integer read from this stream.</returns>
	<exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
	<exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
	<exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
</member><member name="T:Tools.IOt.BinaryReader">
	<summary>Extends <see cref="T:System.IO.BinaryReader"/> to be able to read numeric data in both little-endian and big-endian format</summary>
</member><member name="M:Tools.MathT.LCM(System.Int64,System.Int64)">
	<summary>Least Common Multiple</summary>
	<param name="n1">First number</param>
	<param name="n2">Second number</param>
	<returns>Least common multiple (LCM) of <paramref name="n1"/> and <paramref name="n2"/></returns>
	<remarks>Uses Ευκλιδέσ's alghoritm <seealso>http://www.devx.com/vb2themax/Tip/19015</seealso> Thanks to Francesco Balena</remarks>
	<exception cref="T:System.DivideByZeroException"><paramref name="n1"/> or <paramref name="n2"/> is zero</exception>
</member><member name="M:Tools.MathT.GCD(System.Int64,System.Int64)">
	<summary>Greatest Common Divisor</summary>
	<param name="n1">First number</param>
	<param name="n2">Second number</param>
	<returns>Greatest common divisor (GCD) of <paramref name="n1"/> and <paramref name="n2"/></returns>
	<remarks>Uses Ευκλιδέσ's alghoritm <seealso>http://www.devx.com/vb2themax/Tip/19014</seealso> Thanks to Francesco Balena</remarks>
	<exception cref="T:System.DivideByZeroException"><paramref name="n1"/> or <paramref name="n2"/> is zero</exception>
</member><member name="P:Tools.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Tools.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:Tools.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.NoObject">
	<summary>No object. Represented by fully transparent image.</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Assembly">
	<summary>Assembly</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Attribute">
	<summary>Attribute. Class that derives from <see cref="F:Tools.ReflectionT.CodeImages.Objects.Attribute"/></summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Class">
	<summary>Class (reference type)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Constant">
	<summary>Constant</summary>
	<remarks>Represents .NET constant, not C++ one that is more like read-only field</remarks>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.CTor">
	<summary>Constructor method</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Delegate">
	<summary>Delegate. Class that inherits from <see cref="F:Tools.ReflectionT.CodeImages.Objects.Delegate"/></summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Enum">
	<summary>Enumeration. Class that inherits from <see cref="F:Tools.ReflectionT.CodeImages.Objects.Enum"/></summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.EnumItem">
	<summary>Enumeration item. Constant inside class that derives from <see cref="F:Tools.ReflectionT.CodeImages.Objects.Enum"/></summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Event">
	<summary>Event</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Exception">
	<summary>Exception. Class that derives from <see cref="F:Tools.ReflectionT.CodeImages.Objects.Exception"/></summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Field">
	<summary>Field (class- or global-level variable)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Getter">
	<summary>Read-only property</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Interface">
	<summary>Interface</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Library">
	<summary>Library (represents unmanaged library)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Macro">
	<summary>C/C++ macro</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Map">
	<summary>Map</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.MapItem">
	<summary>Map item</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Method">
	<summary>Method (Sub and Function in Visual Basic)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.MethodOverload">
	<summary>Group of overloaded methods</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Module">
	<summary>.NET PE module</summary>
	<remarks>This is something different tha VB standard module. See <seealso cref="F:Tools.ReflectionT.CodeImages.Objects.StandardModule"/></remarks>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Namespace">
	<summary>Namespace</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Object">
	<summary>Any object</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Operator">
	<summary>Operator</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Property">
	<summary>Property (read-write)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Resource">
	<summary>Single resource (this was image, single string, audio file etc. before compilation)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Resources">
	<summary>Group of resources (this was a resx file before compilation)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Setter">
	<summary>Write-only property</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.StandardModule">
	<summary>VB standard module</summary>
	<remarks>This is somethign different than .NET PE module. See <seealso cref="F:Tools.ReflectionT.CodeImages.Objects.Module"/></remarks>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Structure">
	<summary>Structure (value type, class that inherits <see cref="F:Tools.ReflectionT.CodeImages.Objects.ValueType"/>).</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Template">
	<summary>C++ template (not .NET generic)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Type">
	<summary>Type (unmanaged)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.TypeDef">
	<summary>C++ typedef</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Union">
	<summary>Union (union-layered structure)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.ValueType">
	<summary>Value type that is not considered to be a structure</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Error">
	<summary>Error. Used when erro ocured during aquiring reflection data.</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.GenericClassOpen">
	<summary>Open generic class (with type parameters unspecified)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.GenericTypeClosed">
	<summary>Closed generic type (unknown if class or structure or interface)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.GenericClassClosed">
	<summary>Closed generic class (with type parameters specified)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.GenericMethodClosed">
	<summary>Closed generic method (with type parameters specified)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.GenericStructureClosed">
	<summary>Closed generic structure (with type parameters specified)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.GenericMethodOpen">
	<summary>Open generic method (with type parameters unspecified)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.GenericParameter">
	<summary>Generic parameter</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.GenericStructureOpen">
	<summary>Open gneric structure (with type parameters unspecified)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.GenericInterfaceOpen">
	<summary>Open generic interface (with type parameters unspecified)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.GenericInterfaceClosed">
	<summary>Closed generic interface (with type parameters specified)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.GenericTypeOpen">
	<summary>Open generic type (unknown if class or structure or interface)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.GenericExceptionClosed">
	<summary>Generic open exception class</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.GenericExceptionOpen">
	<summary>Generic closed exception class</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.GenericAttributeClosed">
	<summary>Generic closed attribute class</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.GenericAttributeOpen">
	<summary>Generic open attribute class</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.GenericDelegateOpen">
	<summary>Generic open delegate</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.GenericDelegateClosed">
	<summary>Generic closed delegate</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.Question">
	<summary>Question. Used for unknown kind of member.</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.ForwardReference">
	<summary>Forward refernce (i.e. referenced assemblies, derived types)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.Objects.BackwardReference">
	<summary>Backward reference (i.e. parent types)</summary>
</member><member name="T:Tools.ReflectionT.CodeImages.Objects">
	<summary>Represents supported object types for code images</summary>
	<remarks>Values of items of this enumeration are constructed acording to type of object represented by them. But this construction is not very clear and application should not rely on it. Description follows:
 <list type="table">
			<listheader><term>Bit no.</term><description>Meaning</description></listheader>
			<item><term>0</term><description>Object is either collection, produces new instance (CTor) or is managed but somewhat strange (union).</description></item>
			<item><term>1</term><description>Object either has own <see cref="T:System.Reflection.MemberInfo"/>-derived class or is treated as fallback by logic of <see cref="T:Tools.ReflectionT.CodeImages"/></description></item>
			<item><term>2</term><description>Object represent somethign representable by <see cref="T:System.Reflection.MemberInfo"/>-derived class</description></item>
			<item><term>3</term><description>Member is atomic (from that poit of view taht it does not contain another members. Properties and event are not considered atomic)</description></item>
			<item><term>4</term><description>Members represents specific class (<see cref="T:System.Delegate"/>, <see cref="T:System.Exception"/>, <see cref="T:System.Attribute"/>)</description></item>
			<item><term>5</term><description>Member can be changed (assigned value to)</description></item>
			<item><term>6</term><description>Member has value</description></item>
			<item><term>7</term><description>Object represents error or exception</description></item>
			<item><term>8</term><description>Mmeber is callable</description></item>
			<item><term>9</term><description>Object is instantiable</description></item>
			<item><term>11, 10</term><description>
					<list type="table"><item><term>00</term><description>none of following</description></item>
						<item><term>01</term><description>Object represents value type or top-level object</description></item>
						<item><term>10</term><description>Object represents reference type, medium-level object (between class and assembly) or group of objects</description></item>
						<item><term>11</term><description>Object is not object of code</description></item></list>
				</description></item>
			<item><term>12</term><description>Object is part of managed application</description></item>
			<item><term>14, 13</term><description><list type="table">
						<item><term>00</term><description>none of following</description></item>
						<item><term>01</term><description>Object of higher level tha type</description></item>
						<item><term>10</term><description>Type-level object</description></item>
						<item><term>11</term><description>Object of lower level than type</description></item>
					</list></description></item>
			<item><term>16, 15</term><description><list type="table">
						<item><term>00</term><description>none of following</description></item>
						<item><term>01</term><description>Object is not generic</description></item>
						<item><term>10</term><description>Object is open generic</description></item>
						<item><term>11</term><description>Object is closed generic</description></item>
					</list></description></item>
		</list>
	</remarks>
</member><member name="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)">
	<summary>Gets image that represents code object</summary>
	<param name="ObjectType">Object type</param>
	<returns>Image that represents given object type</returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="ObjectType"/> is not member of <see cref="T:Tools.ReflectionT.CodeImages.Objects"/></exception>
</member><member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.None">
	<summary>No modifier</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Private">
	<summary>Private (See <see cref="F:System.Reflection.MethodAttributes.Private"/>)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Protected">
	<summary>Protected (family visibility) (See <see cref="F:System.Reflection.MethodAttributes.Family"/>)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Friend">
	<summary>Friend (internal, assembly visibility  (See <see cref="F:System.Reflection.MethodAttributes.Assembly"/>)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Public">
	<summary>Public (See <see cref="F:System.Reflection.MethodAttributes.Public"/>)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.ProtectedFriend">
	<summary>Protected Friend (accessible from derived class in any assembly and from whole defining) (See <see cref="F:System.Reflection.MethodAttributes.FamORAssem"/>)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.FriendProtected">
	<summary>Accessible only from derived classes in defining assembly (See <see cref="F:System.Reflection.MethodAttributes.FamANDAssem"/>)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Static">
	<summary>Static (Shared in VB) (See <see cref="F:System.Reflection.MethodAttributes.Static"/>)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Sealed">
	<summary>Final (NotInheritable class or Overrides NotOveridable or without Overridable method in VB) (See <see cref="F:System.Reflection.MethodAttributes.Final"/>)</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Shortcut">
	<summary>Shortcust or reference</summary>
</member><member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Extension">
	<summary>Extension (represents extension method)</summary>
</member><member name="T:Tools.ReflectionT.CodeImages.ObjectModifiers">
	<summary>Code element modifiers that produces overlay images</summary>
	<remarks>With exception of <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Shortcut"/> and <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Extension"/> modifiers are subset of <see cref="T:System.Reflection.MethodAttributes"/>. Thos attributes can be applied on any supported membert as defined in <seealso cref="T:Tools.ReflectionT.CodeImages.Objects"/>. Modifiers can be combined, but not each with each.</remarks>
</member><member name="M:Tools.ReflectionT.CodeImages.GetOverlayImage(Tools.ReflectionT.CodeImages.ObjectModifiers)">
	<summary>Gets overlay image tha repreents given modifiers</summary>
	<param name="Modifiers">Modifiers to get overlay image for</param>
	<returns>16×16 px image with transparent background that graphicaly represents <paramref name="Modifiers"/></returns>
	<remarks>
		<para>Images are dynamically generated on request and cached. If you alter the image returned if will be altered in chache as well and on next call with same <paramref name="Modifiers"/> it will be returned modified</para>.
 <paramref name="Modifiers"/> Can be or-combination of values of <paramref name="Modifiers"/> enumeration. But with some limitation. <paramref name="Modifiers"/> &amp; <see cref="F:System.Reflection.MethodAttributes.MemberAccessMask"/> should be one of <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Private"/>, <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.FriendProtected"/>, <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Friend"/>, <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Protected"/>, <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.ProtectedFriend"/>, <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Public"/> (<see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Public"/> generates no overlay) or this part will be ignored.
 Other <see cref="T:Tools.ReflectionT.CodeImages.ObjectModifiers"/> members can be or-ed with no limitation. Overlay will be combined and single images will be smartly positioned into 4 corners of it.
 Combination of either <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.ProtectedFriend"/> or <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.FriendProtected"/> with <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Static"/>, <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Sealed"/> and <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Shortcut"/> results to need to position 5 images into 4 corners. So, shortcut overly is placed as last one to bottom left corner overlaying protected overlay.
 If <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Extension"/> takes effect it is always placed to right-bottom corner overlayin any other possible image there.
 </remarks>
</member><member name="P:Tools.ReflectionT.CodeImages.ProtectedFriend">
	<summary>Gets image that represents <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.ProtectedFriend"/></summary>
	<remarks>The image is dynamically generated an the cached</remarks>
</member><member name="P:Tools.ReflectionT.CodeImages.FriendProtected">
	<summary>Gets image that represents <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.FriendProtected"/></summary>
	<remarks>The image is dynamically generated an the cached</remarks>
</member><member name="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects,Tools.ReflectionT.CodeImages.ObjectModifiers)">
	<summary>Returns image got from <see cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/> overlayed with image got from <see cref="M:Tools.ReflectionT.CodeImages.GetOverlayImage(Tools.ReflectionT.CodeImages.ObjectModifiers)"/></summary>
	<param name="ObjectType">Type of object for background image</param>
	<param name="Modifiers">Object modifiers</param>
	<returns>16×16px image that graphicaly represents <paramref name="ObjectType"/> with its modifiers.</returns>
	<remarks>Images are dynamically created on request and cached. So if you change the image returned, it will be returned changed on next call.</remarks>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="ObjectType"/> is not member of <see cref="T:Tools.ReflectionT.CodeImages.Objects"/></exception>
</member><member name="F:Tools.ReflectionT.CodeImages.Cache">
	<summary>Contains cache for <see cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects,Tools.ReflectionT.CodeImages.ObjectType)"/></summary>
</member><member name="E:Tools.ReflectionT.CodeImages.ImageAdded">
	<summary>Raised after image is added to cache of images with overlay</summary>
	<param name="Image">Image added</param>
	<param name="ObjectType">Type of object for added image</param>
	<param name="Modifiers">Object modifiers for added image</param>
</member><member name="E:Tools.ReflectionT.CodeImages.ImageRequested">
	<summary>Rased after before <see cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects,Tools.ReflectionT.CodeImages.ObjectType)"/> returns image</summary>
	<param name="Image">Image to be returned</param>
	<param name="ObjectType">Type of object for image</param>
	<param name="Modifiers">Object modifiers for  image</param>
</member><member name="M:Tools.ReflectionT.CodeImages.WithAllImages(Tools.dSub{System.Drawing.Image,Tools.ReflectionT.CodeImages.Objects,Tools.ReflectionT.CodeImages.ObjectModifiers})">
	<summary>For each image in cache calls given callback method</summary>
	<param name="Callback">Method to call. Parameters are same as of the <see cref="E:Tools.ReflectionT.CodeImages.ImageAdded"/> event.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Callback"/> is null</exception>
</member><member name="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects,System.Reflection.MethodAttributes)">
	<summary>Returns image got from <see cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/> overlayed with image got from <see cref="M:Tools.ReflectionT.CodeImages.GetOverlayImage(Tools.ReflectionT.CodeImages.ObjectModifiers)"/></summary>
	<param name="ObjectType">Type of object for background image</param>
	<param name="Attributes">Object modifiers</param>
	<returns>16×16px image that graphicaly represents <paramref name="ObjectType"/> with its modifiers.</returns>
	<remarks>Images are dynamically created on request and cached. So if you change the image returned, it will be returned changed on next call.</remarks>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="ObjectType"/> is not member of <see cref="T:Tools.ReflectionT.CodeImages.Objects"/></exception>
</member><member name="M:Tools.ReflectionT.CodeImages.GetImage(System.Type)">
	<summary>Gets image that graphically represents given type</summary>
	<param name="Type">Type to get image for</param>
	<returns>16×16 image representing type obtained using <see cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/></returns>
	<remarks><seealso cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/></remarks>
	<exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
</member><member name="M:Tools.ReflectionT.CodeImages.GetImage(System.Reflection.MemberInfo)">
	<summary>Gets image that graphically represents given member</summary>
	<param name="Member">Member to represent</param>
	<returns>16×16px image that represents <paramref name="Member"/></returns>
	<remarks><seealso cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/></remarks>
	<exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
	<exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is either <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
</member><member name="M:Tools.ReflectionT.CodeImages.GetImage(System.Reflection.MethodBase)">
	<summary>Gets image that graphicaly represents give method</summary>
	<param name="Member">Method to get image for</param>
	<returns>16×16px image that graphicaly represents <paramref name="Member"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
	<remarks><seealso cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/></remarks>
</member><member name="M:Tools.ReflectionT.CodeImages.GetImage(System.Reflection.PropertyInfo)">
	<summary>Gets image that graphically represents given property</summary>
	<param name="Member">Property to get image for</param>
	<returns>Image that graphically represents <paramref name="Member"/></returns>
	<remarks><seealso cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/></remarks>
	<exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
	<exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and.</exception>
</member><member name="M:Tools.ReflectionT.CodeImages.GetImage(System.Reflection.EventInfo)">
	<summary>Gets image that graphicaly represents given event</summary>
	<param name="Member">Event to get image for</param>
	<returns>16×16px image that graphicaly represents <paramref name="Member"/></returns>
	<remarks><seealso cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/></remarks>
	<exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
	<exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and.</exception>
</member><member name="M:Tools.ReflectionT.CodeImages.GetImage(System.Reflection.FieldInfo)">
	<summary>gets image that graphicaly represents given field</summary>
	<param name="Member">Field to get image for</param>
	<returns>16×16px image that graphiocaly represents <paramref name="Member"/></returns>
	<remarks><seealso cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/></remarks>
	<exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
</member><member name="T:Tools.ReflectionT.CodeImages">
	<summary>Provides images for graphic representation of code members</summary>
</member><member name="M:Tools.WindowsT.WPF.ConvertersT.StronglyTypedConverter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
	<summary>Converts a value.</summary>
	<param name="value">The value produced by the binding source.</param>
	<param name="targetType">The type of the binding target property.</param>
	<param name="parameter">The converter parameter to use.</param>
	<param name="culture">The culture to use in the converter.</param>
	<returns>A converted value. If the method returns null, the valid null value is used.</returns>
	<exception cref="T:System.ArgumentException">Value is not of type <see cref="TSource"/> or <paramref name="targetType"/> cannot be assigned by value of type <see cref="TTarget"/></exception>
</member><member name="M:Tools.WindowsT.WPF.ConvertersT.StronglyTypedConverter`2.Convert(`0,System.Object,System.Globalization.CultureInfo)">
	<summary>Converts a value.</summary>
	<param name="value">The value produced by the binding source.</param>
	<param name="parameter">The converter parameter to use.</param>
	<param name="culture">The culture to use in the converter.</param>
	<returns>A converted value. If the method returns null, the valid null value is used.</returns>
</member><member name="M:Tools.WindowsT.WPF.ConvertersT.StronglyTypedConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
	<summary>Converts a value.</summary>
	<param name="value">The value that is produced by the binding target.</param>
	<param name="targetType">The type to convert to.</param>
	<param name="parameter">The converter parameter to use.</param>
	<param name="culture">The culture to use in the converter.</param>
	<returns>A converted value. If the method returns null, the valid null value is used.</returns>
	<exception cref="T:System.ArgumentException">Value is not of type <see cref="TTarget"/> or <paramref name="targetType"/> cannot be assigned by value of type <see cref="TSource"/></exception>
</member><member name="M:Tools.WindowsT.WPF.ConvertersT.StronglyTypedConverter`2.ConvertBack(`1,System.Object,System.Globalization.CultureInfo)">
	<summary>Converts a value.</summary>
	<param name="value">The value that is produced by the binding target.</param>
	<param name="parameter">The converter parameter to use.</param>
	<param name="culture">The culture to use in the converter.</param>
	<returns>A converted value. If the method returns null, the valid null value is used.</returns>
</member><member name="T:Tools.WindowsT.WPF.ConvertersT.StronglyTypedConverter`2">
	<summary>Common base for type-safe implementations of <see cref="T:System.Windows.Data.IValueConverter"/></summary>
	<typeparam name="TSource">Type values are converted from</typeparam>
	<typeparam name="TTarget">Type values are converted to</typeparam>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.TextBox">
	<summary><see cref="T:System.Windows.Forms.MaskedTextBox"/> that realizes this control</summary>
</member><member name="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.IsOverwriteModeChanged">
	<summary>Occurs after the insert mode has changed. </summary>
</member><member name="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.MaskChanged">
	<summary>Occurs after the input mask is changed.</summary>
</member><member name="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.MaskInputRejected">
	<summary>Occurs when the user's input or assigned character does not match the corresponding format element of the input mask.</summary>
</member><member name="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.MultilineChanged">
	<summary>Typically occurs when the value of the <see cref="P:System.Windows.Forms.MaskedTextBox.Multiline"></see> property has changed; however, this event is not raised by <see cref="T:System.Windows.Forms.MaskedTextBox"></see>.</summary>
</member><member name="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.TextAlignChanged">
	<summary>Occurs when the text alignment is changed. </summary>
</member><member name="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.TypeValidationCompleted">
	<summary>Occurs when <see cref="T:System.Windows.Forms.MaskedTextBox"></see> has finished parsing the current value using the <see cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType"></see> property.</summary>
</member><member name="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.HideSelectionChanged">
	<summary>Occurs when the value of the <see cref="P:System.Windows.Forms.TextBoxBase.HideSelection"></see> property has changed.</summary>
</member><member name="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.ModifiedChanged">
	<summary>Occurs when the value of the <see cref="P:System.Windows.Forms.TextBoxBase.Modified"></see> property has changed.</summary>
</member><member name="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.ReadOnlyChanged">
	<summary>Occurs when the value of the <see cref="P:System.Windows.Forms.TextBoxBase.ReadOnly"></see> property has changed.</summary>
</member><member name="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.TextBoxValidated">
	<summary>Occurs when the control is finished validating.</summary>
</member><member name="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.TextBoxValidating">
	<summary>Occurs when the control is validating.</summary>
</member><member name="M:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.OnTextBoxValidated(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.TextBoxValidated"/> event</summary>
	<param name="e">event arguments</param>
</member><member name="M:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.OnTextBoxValidating(System.ComponentModel.CancelEventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.TextBoxValidating"/> event</summary>
	<param name="e">event arguments</param>
</member><member name="M:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.OnModifiedChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.ModifiedChanged"/> event</summary>
	<param name="e">event arguments</param>
</member><member name="M:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.OnReadOnlyChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.ReadOnlyChanged"/> event</summary>
	<param name="e">event arguments</param>
</member><member name="M:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.OnIsOverwriteModeChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.IsOverwriteModeChanged"/> event</summary>
	<param name="e">event arguments</param>
</member><member name="M:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.OnMaskChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.MaskChanged"/> event</summary>
	<param name="e">event arguments</param>
</member><member name="M:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.OnMaskInputRejected(System.Windows.Forms.MaskInputRejectedEventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.MaskInputRejected"/> event</summary>
	<param name="e">event arguments</param>
</member><member name="M:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.OnTextAlignChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.TextAlignChanged"/> event</summary>
	<param name="e">event arguments</param>
</member><member name="M:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.OnTypeValidationCompleted(System.Windows.Forms.TypeValidationEventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.TypeValidationCompleted"/> event</summary>
	<param name="e">event arguments</param>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.AllowPromptAsInput">
	<summary>Gets or sets a value indicating whether <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar"></see> can be entered as valid data by the user. </summary>
	<returns>true if the user can enter the prompt character into the control; otherwise, false. The default is true. </returns>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.AsciiOnly">
	<summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.MaskedTextBox"></see> control accepts characters outside of the ASCII character set.</summary>
	<returns>true if only ASCII is accepted; false if the <see cref="T:System.Windows.Forms.MaskedTextBox"></see> control can accept any arbitrary Unicode character. The default is false.</returns>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.BeepOnError">
	<summary>Gets or sets a value indicating whether the masked text box control raises the system beep for each user key stroke that it rejects.</summary>
	<returns>true if the <see cref="T:System.Windows.Forms.MaskedTextBox"></see> control should beep on invalid input; otherwise, false. The default is false.</returns>
	<filterpriority>1</filterpriority>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.TextBoxBorderStyle">
	<summary>Gets or sets the border type of the text box control.</summary>
	<returns>A <see cref="T:System.Windows.Forms.BorderStyle"></see> that represents the border type of the text box control. The default is Fixed3D.</returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">A value that is not within the range of valid values for the enumeration was assigned to the property. </exception>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.TextBoxCausesValidation">
	<summary>Gets or sets a value indicating whether the control causes validation to be performed on any controls that require validation when it receives focus.</summary>
	<returns>true if the control causes validation to be performed on any controls requiring validation when it receives focus; otherwise, false. The default is true.</returns>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.TextBoxContextMenuStrip">
	<summary>Gets or sets the <see cref="T:System.Windows.Forms.ContextMenuStrip"></see> associated with this control.</summary>
	<returns>The <see cref="T:System.Windows.Forms.ContextMenuStrip"></see> for this control, or null if there is no <see cref="T:System.Windows.Forms.ContextMenuStrip"></see>. The default is null.</returns>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.Culture">
	<summary>Gets or sets the culture information associated with the masked text box.</summary>
	<returns>A <see cref="T:System.Globalization.CultureInfo"></see> representing the culture supported by the <see cref="T:System.Windows.Forms.MaskedTextBox"></see>.</returns>
	<exception cref="T:System.ArgumentNullException"><see cref="P:System.Windows.Forms.MaskedTextBox.Culture"></see> was set to null.</exception>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.CutCopyMaskFormat">
	<summary>Gets or sets a value that determines whether literals and prompt characters are copied to the clipboard.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.MaskFormat"></see> values. The default is <see cref="F:System.Windows.Forms.MaskFormat.IncludeLiterals"></see>.</returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Property set with a <see cref="T:System.Windows.Forms.MaskFormats"></see> value that is not valid. </exception>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.TextBoxEnabled">
	<summary>Gets or sets a value indicating whether the control can respond to user interaction.</summary>
	<returns>true if the control can respond to user interaction; otherwise, false. The default is true.</returns>
	<filterpriority>1</filterpriority>
	<PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.HideSelection">
	<summary>Gets or sets a value indicating whether the selected text in the text box control remains highlighted when the control loses focus.</summary>
	<returns>true if the selected text does not appear highlighted when the text box control loses focus; false, if the selected text remains highlighted when the text box control loses focus. The default is true.</returns>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.InsertKeyMode">
	<summary>Gets or sets the text insertion mode of the masked text box control.</summary>
	<returns>An <see cref="T:System.Windows.Forms.InsertKeyMode"></see> value that indicates the current insertion mode. The default is <see cref="F:System.Windows.Forms.InsertKeyMode.Default"></see>.</returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">An invalid <see cref="T:System.Windows.Forms.InsertKeyMode"></see> value was supplied when setting this property.</exception>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.Text">
	<summary>Gets or sets the current text in the text box.</summary>
	<returns>The text displayed in the control.</returns>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.Mask">
	<summary>Gets or sets the input mask to use at run time. </summary>
	<returns>A <see cref="T:System.String"></see> representing the current mask. The default value is the empty string which allows any input.</returns>
	<exception cref="T:System.ArgumentException">The string supplied to the <see cref="P:System.Windows.Forms.MaskedTextBox.Mask"></see> property is not a valid mask. Invalid masks include masks containing non-printable characters.</exception>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.PasswordChar">
	<summary>Gets or sets the character to be displayed in substitute for user input.</summary>
	<returns>The <see cref="T:System.Char"></see> value used as the password character.</returns>
	<exception cref="T:System.ArgumentException">The character specified when setting this property is not a valid password character, as determined by the <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)"></see> method of the <see cref="T:System.ComponentModel.MaskedTextProvider"></see> class.</exception>
	<exception cref="T:System.InvalidOperationException">The password character specified is the same as the current prompt character, <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar"></see>. The two are required to be different.</exception>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.HidePromptOnLeave">
	<summary>Gets or sets a value indicating whether the prompt characters in the input mask are hidden when the masked text box loses focus.</summary>
	<returns>true if <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar"></see> is hidden when <see cref="T:System.Windows.Forms.MaskedTextBox"></see> does not have focus; otherwise, false. The default is false.</returns>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.PromptChar">
	<summary>Gets or sets the character used to represent the absence of user input in <see cref="T:System.Windows.Forms.MaskedTextBox"></see>.</summary>
	<returns>The character used to prompt the user for input. The default is an underscore (_). </returns>
	<exception cref="T:System.InvalidOperationException">The prompt character specified is the same as the current password character, <see cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar"></see>. The two are required to be different.</exception>
	<exception cref="T:System.ArgumentException">The character specified when setting this property is not a valid prompt character, as determined by the <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)"></see> method of the <see cref="T:System.ComponentModel.MaskedTextProvider"></see> class.</exception>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.ReadOnly">
	<summary>Gets or sets a value indicating whether text in the text box is read-only.</summary>
	<returns>true if the text box is read-only; otherwise, false. The default is false.</returns>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.ShortcutsEnabled">
	<summary>Gets or sets a value indicating whether the defined shortcuts are enabled.</summary>
	<returns>true to enable the shortcuts; otherwise, false.</returns>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.SkipLiterals">
	<summary>Gets or sets a value indicating whether the user is allowed to reenter literal values.</summary>
	<returns>true to allow literals to be reentered; otherwise, false to prevent the user from overwriting literal characters. The default is true.</returns>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.RejectInputOnFirstFailure">
	<summary>Gets or sets a value indicating whether the parsing of user input should stop after the first invalid character is reached.</summary>
	<returns>true if processing of the input string should be terminated at the first parsing error; otherwise, false if processing should ignore all errors. The default is false.</returns>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.ResetOnPrompt">
	<summary>Gets or sets a value that determines how an input character that matches the prompt character should be handled.</summary>
	<returns>true if the prompt character entered as input causes the current editable position in the mask to be reset; otherwise, false to indicate that the prompt character is to be processed as a normal input character. The default is true.</returns>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.ResetOnSpace">
	<summary>Gets or sets a value that determines how a space input character should be handled.</summary>
	<returns>true if the space input character causes the current editable position in the mask to be reset; otherwise, false to indicate that it is to be processed as a normal input character. The default is true.</returns>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.TextMaskFormat">
	<summary>Gets or sets a value that determines whether literals and prompt characters are included in the formatted string.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.MaskFormat"></see> values. The default is <see cref="F:System.Windows.Forms.MaskFormat.IncludeLiterals"></see>.</returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Property set with a <see cref="T:System.Windows.Forms.MaskFormat"></see> value that is not valid. </exception>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.UseSystemPasswordChar">
	<summary>Gets or sets a value indicating whether the operating system-supplied password character should be used.</summary>
	<returns>true if the system password should be used as the prompt character; otherwise, false. The default is false.</returns>
	<exception cref="T:System.InvalidOperationException">The password character specified is the same as the current prompt character, <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar"></see>. The two are required to be different.</exception>
</member><member name="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.ValidatingType">
	<summary>Gets or sets the data type used to verify the data input by the user. </summary>
	<returns>A <see cref="T:System.Type"></see> representing the data type used in validation. The default is null.</returns>
</member><member name="M:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.OnTextChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:System.Windows.Forms.UserControl.TextChanged"/> event</summary>
</member><member name="M:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.ApplyAutoCahnge">
	<summary>Applies <see cref="P:Tools.WindowsT.FormsT.ControlWithStatus.AutoChanged"/> property after change of <see cref="P:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus.Text"/></summary>
	<remarks>If <see cref="P:Tools.WindowsT.FormsT.ControlWithStatus.Status"/> is <see cref="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Deleted"/> or <see cref="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Error"/> or <see cref="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.NA"/> or <see cref="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Normal"/> than it changes to <see cref="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Changed"/>, if it is <see cref="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Null"/> then it changes to <see cref="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.New"/></remarks>
</member><member name="T:Tools.WindowsT.FormsT.MaskedTextBoxWithStatus">
	<summary>Composite control of <see cref="T:System.Windows.Forms.MaskedTextBox"/> and <see cref="T:Tools.WindowsT.FormsT.StatusMarker"/></summary>
	<remarks>Note: This control will be removed and replaced with attachable implementation of <see cref="T:Tools.WindowsT.FormsT.StatusMarker"/></remarks>
</member><member name="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor">
	<summary>Instance of <see cref="T:Tools.WindowsT.FormsT.EncodingDialog"/> that owns this form</summary>
</member><member name="M:Tools.WindowsT.FormsT.frmEncodingDialog.#ctor(Tools.WindowsT.FormsT.EncodingDialog)">
	<summary>CTor</summary>
	<param name="Owner">The <see cref="T:Tools.WindowsT.FormsT.EncodingDialog"/> that owns this form</param>
</member><member name="M:Tools.WindowsT.FormsT.frmEncodingDialog.ValidateEncoding">
	<summary>Performs action before user is allowed to close the dialog</summary>
</member><member name="F:Tools.WindowsT.FormsT.frmEncodingDialog.ValidationRequired">
	<summary>Set to True when <see cref="P:Tools.WindowsT.FormsT.frmEncodingDialog.bgwTestEncoding"/> was busy when trying to start it in order to validate encoding</summary>
</member><member name="M:Tools.WindowsT.FormsT.frmEncodingDialog.OnTest(System.Text.EncodingInfo,System.ComponentModel.DoWorkEventArgs)">
	<summary>Called assynchronously when testing of encoding is required</summary>
	<param name="Encoding">Encoding to be tested</param>
	<param name="e">Arguments of <see cref="E:System.ComponentModel.BackgroundWorker.DoWork"/> event tah can be used to obtain detailed information about invocation</param>
	<remarks>Do not use <paramref name="e"/>'s <see cref="P:System.ComponentModel.DoWorkEventArgs.Argument"/> it will be raplaced with return value of this function</remarks>
</member><member name="F:Tools.WindowsT.FormsT.frmEncodingDialog.TestResult.Result">
	<summary><see cref="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor"/>'s <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes"/> decoded by selected encoding</summary>
	<remarks>Valid only when <see cref="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor"/>'s <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes"/> is set</remarks>
</member><member name="F:Tools.WindowsT.FormsT.frmEncodingDialog.TestResult.CanDecode">
	<summary>Indicates if <see cref="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor"/>'s <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes"/> can be encoded by selected encoding with no loss of data</summary>
 ''' <remarks>Valid only when <see cref="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor"/>'s <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes"/> is set</remarks>
</member><member name="F:Tools.WindowsT.FormsT.frmEncodingDialog.TestResult.CanEncode">
	<summary>Indicates if <see cref="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor"/>'s <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewString"/> can be encoded by selected encoding with no loss of data</summary>
	<remarks>Valid only when <see cref="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor"/>'s <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewString"/> is set</remarks>
</member><member name="M:Tools.WindowsT.FormsT.frmEncodingDialog.TestResult.#ctor(System.String,System.Boolean,System.Boolean)">
	<summary>CTor</summary>
	<param name="Result"><see cref="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor"/>'s <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes"/> decoded by selected encoding</param>
	<param name="CanDecode">Indicates if <see cref="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor"/>'s <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes"/> can be encoded by selected encoding with no loss of data</param>
	<param name="CanEncode">Valid only when <see cref="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor"/>'s <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewString"/> is set</param>
</member><member name="T:Tools.WindowsT.FormsT.frmEncodingDialog.TestResult">
	<summary>Result of encoding test</summary>
</member><member name="M:Tools.WindowsT.FormsT.frmEncodingDialog.OnTestFinished(Tools.WindowsT.FormsT.frmEncodingDialog.TestResult,System.ComponentModel.RunWorkerCompletedEventArgs)">
	<summary>Called synchronously when <see cref="M:Tools.WindowsT.FormsT.frmEncodingDialog.OnTest(System.Text.EncodingInfo,System.ComponentModel.DoWorkEventArgs)"/> finishes. Used to disply results of testing.</summary>
	<param name="result">Result of testing</param>
	<param name="e">Argument of <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> that can be used to obtain detailed information</param>
</member><member name="T:Tools.WindowsT.FormsT.frmEncodingDialog">
	<summary>Representf dialog shown by <see cref="T:Tools.WindowsT.FormsT.EncodingDialog"/></summary>
</member><member name="M:Tools.WindowsT.FormsT.EncodingDialog.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.WindowsT.FormsT.EncodingDialog.Reset">
	<summary>Resets the properties of a common dialog box to their default values</summary>
	<remarks>Note for inheritors: Call base class method in order to use default reset logic</remarks>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.DialogForm">
	<summary>The form that realizes the dialog</summary>
	<remarks>This field should be no-null only when form is visible. Set it to instance of <see cref="T:Tools.WindowsT.FormsT.frmEncodingDialog"/> in <see cref="M:Tools.WindowsT.FormsT.EncodingDialog.ShowDialog(System.Windows.Forms.Form)"/>, the show it and then set it to null again.</remarks>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog._SelectedEncoding">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.SelectedEncoding"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.EncodingDialog.SelectedEncoding">
	<summary>After dialog has ran returns the ancoding selected by user (if any)</summary>
	<value>Note for inheritors: Set this property in the <see cref="M:Tools.WindowsT.FormsT.EncodingDialog.ShowDialog(System.Windows.Forms.Form)"/> function</value>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog._Preselected">
	<summary>Contgains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.Preselected"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.EncodingDialog.Preselected">
	<summary>Specifies the <see cref="P:System.Text.EncodingInfo.CodePage"/> that will be selected when the dialog is shown (when encoding available)</summary>
	<value><see cref="P:System.Text.EncodingInfo.CodePage"/> of encoding to preselect or negative number to preslect no encoding</value>
	<returns><see cref="P:System.Text.EncodingInfo.CodePage"/> of preselected encoding or negativ value if no encoding will be preselected</returns>
	<remarks>After dialog has ran this property stays unchanged</remarks>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog._PreviewBytes">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes">
	<summary>Gets or sets text to decode by selected encoding and show preview to the user</summary>
	<remarks>If set preview will be shown</remarks>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog._PreviewString">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewString"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewString">
	<summary>Gets or sets text to encode by selected encoding and inform user if all characters can be encoded using selected encoding</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog._RequireCorrect">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.RequireCorrect"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.EncodingDialog.RequireCorrect">
	<summary>Defines if user can select encoding that cannot be used on specified <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes"/> or <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewString"/> without problems</summary>
	<remarks>Applicable only if at least one of <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes"/> or <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewString"/> properties is set</remarks>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog._Text">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.Text"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.EncodingDialog.Text">
	<summary>Gets or sets text displayed in title of window of dialog</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog._ShowHelp">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.ShowHelp"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.EncodingDialog.ShowHelp">
	<summary>Determines if help button will be shown</summary>
</member><member name="E:Tools.WindowsT.FormsT.EncodingDialog.OKClicked">
	<summary>Raised after user clicks OK and dialog allows him co select encoding</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Arguments of event</param>
</member><member name="M:Tools.WindowsT.FormsT.EncodingDialog.OnOKClicked(Tools.WindowsT.FormsT.EncodingDialog.EncodingCancelEventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.EncodingDialog.OKClicked"/> event</summary>
	<param name="e">Event arguments</param>
	<remarks>Note for inheritors: Call base calss method in order the event to be raised</remarks>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingCancelEventArgs.SelectedEncoding">
	<summary>Encoding that was selected in a dialog</summary>
</member><member name="M:Tools.WindowsT.FormsT.EncodingDialog.EncodingCancelEventArgs.#ctor(System.Text.EncodingInfo)">
	<summary>CTor</summary>
	<param name="Encoding">Encoding selected in dialog to be verified by handling code</param>
</member><member name="T:Tools.WindowsT.FormsT.EncodingDialog.EncodingCancelEventArgs">
	<summary>Argument of the <see cref="E:Tools.WindowsT.FormsT.EncodingDialog.OKClicked"/> event</summary>
</member><member name="M:Tools.WindowsT.FormsT.EncodingDialog.RunDialog(System.IntPtr)">
	<summary>When overridden in a derived class, specifies a common dialog box.</summary>
	<param name="hwndOwner">A value that represents the window handle of the owner window for the common dialog box.</param>
	<returns>true if the dialog box was successfully run; otherwise, false.</returns>
</member><member name="M:Tools.WindowsT.FormsT.EncodingDialog.ShowDialog(System.Windows.Forms.Form)">
	<param name="owner"><see cref="T:System.Windows.Forms.Form"/> that will own the dialog</param>
	<returns><see cref="F:System.Windows.Forms.DialogResult.OK"/> if the user clicks OK in the dialog box; otherwise, <see cref="F:System.Windows.Forms.DialogResult.Cancel"/>.</returns>
	<remarks>This function differs from the <see cref="M:System.Windows.Forms.CommonDialog.ShowDialog"/>. Use this shadow function rather than base class's one.</remarks>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedYes">
	<summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/> = True</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedNo">
	<summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/> = False</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserDisplayYes">
	<summary><see cref="P:System.Text.Encoding.IsBrowserDisplay"/> = True</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserDisplayNo">
	<summary><see cref="P:System.Text.Encoding.IsBrowserDisplay"/> = False</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserSaveYes">
	<summary><see cref="P:System.Text.Encoding.IsBrowserSave"/> = True</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserSaveNo">
	<summary><see cref="P:System.Text.Encoding.IsBrowserSave"/> = False</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserYes">
	<summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserDisplayYes"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserSaveYes"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserNo">
	<summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserDisplayNo"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserSaveNo"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsDisplayYes">
	<summary><see cref="P:System.Text.Encoding.IsMailNewsDisplay"/> = True</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsDisplayNo">
	<summary><see cref="P:System.Text.Encoding.IsBrowserDisplay"/> = False</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsSaveYes">
	<summary><see cref="P:System.Text.Encoding.IsMailNewsSave"/> = True</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsSaveNo">
	<summary><see cref="P:System.Text.Encoding.IsMailNewsSave"/> = False</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsYes">
	<summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsDisplayYes"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsSaveYes"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsNo">
	<summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsDisplayNo"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsSaveNo"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.ReadOnlyYes">
	<summary><see cref="P:System.Text.Encoding.IsReadOnly"/> = True</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.ReadOnlyNo">
	<summary><see cref="P:System.Text.Encoding.IsReadOnly"/> = False</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.SingleByte">
	<summary><see cref="P:System.Text.Encoding.IsSingleByte"/> = True</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MultiByte">
	<summary><see cref="P:System.Text.Encoding.IsSingleByte"/> = False</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentBodyYes">
	<summary><see cref="P:System.Text.Encoding.BodyName"/> isn not an empty string</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentBodyNo">
	<summary><see cref="P:System.Text.Encoding.BodyName"/> isn an empty string</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentHeaderYes">
	<summary><see cref="P:System.Text.Encoding.HeaderName"/> isn not an empty string</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentHeaderNo">
	<summary><see cref="P:System.Text.Encoding.HeaderName"/> isn an empty string</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentYes">
	<summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentBodyYes"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentHeaderYes"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentNo">
	<summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentBodyNo"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentHeaderNo"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailYes">
	<summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsYes"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentYes"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNo">
	<summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsNo"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentNo"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.InternetYes">
	<summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailYes"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserYes"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.InternetNo">
	<summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNo"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserNo"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedCYes">
	<summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormC"/>) = True</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedCNo">
	<summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormC"/>) = False</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedDYes">
	<summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormD"/>) = True</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedDNo">
	<summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormD"/>) = False</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedKCYes">
	<summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormKC"/>) = True</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedKCNo">
	<summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormKC"/>) = False</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedKDYes">
	<summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormKD"/>) = True</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedKDNo">
	<summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormKD"/>) = False</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedFullCanonicalBothYes">
	<summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedCYes"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedDYes"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedFullCanonicalBothNo">
	<summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedCNo"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedDNo"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedFullCompatibilityBothYes">
	<summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedKCYes"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedKDYes"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedFullCompatibilityBothNo">
	<summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedKCNo"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedKDNo"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedAllYes">
	<summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedFullCanonicalBothYes"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedFullCompatibilityBothYes"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedAllNo">
	<summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedFullCanonicalBothNo"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedFullCompatibilityBothNo"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedCanonicalAtLeastOneYes">
	<summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormC"/>) = True -or- <see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormD"/>) = True</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedCanonicalAtLeastOneNo">
	<summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormC"/>) = False -or- <see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormD"/>) = False</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedCompatibilityAtLeastOneYes">
	<summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormKC"/>) = True -or- <see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormKD"/>) = True</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedCompatibilityAtLeastOneNo">
	<summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormKC"/>) = False -or- <see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormKD"/>) = False</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedAtLeastOneYes">
	<summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/> with one of <see cref="T:System.Text.NormalizationForm"/> values returns True</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedAtLeastOneNo">
	<summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/> with one of <see cref="T:System.Text.NormalizationForm"/> values returns False</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.CodePage_EQ_WindowsCodePage">
	<summary><see cref="P:System.Text.Encoding.CodePage"/> = <see cref="P:System.Text.Encoding.WindowsCodePage"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.CodePage_NEQ_WindowsCodePage">
	<summary><see cref="P:System.Text.Encoding.CodePage"/> != <see cref="P:System.Text.Encoding.WindowsCodePage"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.PreambleYes">
	<summary><see cref="M:System.Text.Encoding.GetPreamble"/>.<see cref="P:System.Array.Length"/> &gt; 0</summary>
</member><member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.PrembleNo">
	<summary><see cref="M:System.Text.Encoding.GetPreamble"/>.<see cref="P:System.Array.Length"/> = 0</summary>
</member><member name="T:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters">
	<summary>Filters encoding by its parameters</summary>
	<remarks>This enumeration is used to either include only encodings or exclude all encodings that falle into either at least one or all groups specified</remarks>
</member><member name="T:Tools.WindowsT.FormsT.EncodingDialog">
	<summary>Dialog that allows user to select encoding</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel._Items">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> property</summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.#ctor">
	<summary>CTor</summary>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.Text">
	<summary>Gets text currently displayed by this <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/></summary>
	<value>Property is read-only, exception <see cref="T:System.NotSupportedException"/> will be thrown when trying to set it</value>
	<exception cref="T:System.NotSupportedException">Trying to set this property</exception>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkArea">
	<summary>Gets the range in the text treated as a link.</summary>
	<value>Property is read-only, exception <see cref="T:System.NotSupportedException"/> will be thrown when trying to set it</value>
	<returns>A System.Windows.Forms.LinkArea that represents the area treated as a link.</returns>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.Items">
	<summary>List of all items in label</summary>
	<remarks><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> is set to False</remarks>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.ItemsNameTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
	<summary>Converts the given value object to the specified destination type.</summary>
	<param name="culture">The culture to which value will be converted.</param>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="destinationType">The System.Type to convert the value to.</param>
	<param name="value">The <see cref="T:System.Object"/> to convert. This parameter must inherit from <see cref="T:System.Collections.ICollection"/>.</param>
	<returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
	<exception cref="T:System.ArgumentNullException">destinationType is null.</exception>
	<exception cref="T:System.NotSupportedException">The conversion cannot be performed</exception>
</member><member name="T:Tools.WindowsT.FormsT.LinkLabel.ItemsNameTypeConverter">
	<summary>Simple converter taht shows the text (Items) as representation of property in property grid</summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel._Items_ItemValueChanged(Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem},Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem}.ItemValueChangedEventArgs)">
	<summary>
 Handles the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/> event of <see cref="P:Tools.WindowsT.FormsT.LinkLabel._Items"/>.
 When property of item changes specific action is taken depending on the property.
 </summary>
	<param name="sender">The source of the event</param>
	<param name="e">Event parameters (expected to be <see cref="T:Tools.IReportsChange.ValueChangedEventArgs`1"/>)</param>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.RegenerateContent">
	<summary>Regenerates content of <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/></summary>
	<remarks>Called by handlers of events of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/>
		<see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/></remarks>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
	<summary>Raises the <see cref="E:System.Windows.Forms.LinkLabel.LinkClicked"/> event.</summary>
	<param name="e">A <see cref="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs"/> that contains the event data.</param>
	<remarks>Note for inheritors: Call base class <see cref="M:Tools.WindowsT.FormsT.LinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)"/> in order to raise <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkClicked"/> and <see cref="E:System.Windows.Forms.LinkLabel.LinkClicked"/> events and <see cref="T:Tools.WindowsT.FormsT.LinkLabel.AutoLink"/> to be followed</remarks>
</member><member name="E:Tools.WindowsT.FormsT.LinkLabel.LinkClicked">
	<summary>Raised after link is clicked</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Event parameters (contains info about link and item being clicked)</param>
	<remarks><list type="1">
			<listheader>The order of events is following</listheader>
			<item><see cref="E:System.Windows.Forms.LinkLabel.LinkClicked"/></item>
			<item><see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkClicked"/></item>
			<item>If the item being clicked is <see cref="T:Tools.WindowsT.FormsT.LinkLabel.AutoLink"/> and its <see cref="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkURI"/> is not null and <see cref="P:System.Windows.Forms.LinkLabelLinkClickedEventArgs.Button"/> is <see cref="F:System.Windows.Forms.MouseButtons.Left"/> or <see cref="F:System.Windows.Forms.MouseButtons.None"/> then Uri <see cref="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkURI"/> is opened via <see cref="M:System.Diagnostics.Process.Start"/></item>
		</list>
	</remarks>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkClickedEventArgs._Item">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkClickedEventArgs.Item"/> property</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkClickedEventArgs._LinkURI">
	<summary>Contains va lue of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkClickedEventArgs.LinkURI"/> property</summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkClickedEventArgs.#ctor(System.Windows.Forms.LinkLabel.Link,System.Windows.Forms.MouseButtons)">
	<summary>CTor</summary>
	<param name="link"><see cref="P:System.Windows.Forms.LinkLabelLinkClickedEventArgs.Link"/> that was clicked</param>
	<param name="button">The mouse button used to click</param>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkClickedEventArgs.Item">
	<summary>The item that was clicked</summary>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkClickedEventArgs.LinkURI">
	<summary>In case the item is of the type <see cref="T:Tools.WindowsT.FormsT.LinkLabel.AutoLink"/> then contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkURI"/> of the item.</summary>
</member><member name="T:Tools.WindowsT.FormsT.LinkLabel.LinkClickedEventArgs">
	<summary>Arguments of the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkClicked"/> event</summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.PerformClick">
	<summary>Performs click event on <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/>. Causes raising the <see cref="E:System.Windows.Forms.Control.Click"/> event</summary>
	<remarks><see cref="E:System.Windows.Forms.Control.MouseDown"/>, <see cref="E:System.Windows.Forms.Control.MouseUp"/> and <see cref="E:System.Windows.Forms.Control.MouseClick"/> events are not raised</remarks>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.PerformClick(Tools.WindowsT.FormsT.LinkLabel.LinkItem,System.Windows.Forms.MouseButtons)">
	<summary>Perform click event on specified item of <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/></summary>
	<param name="Item">Item on which perform the click</param>
	<param name="button">Mouse button to be simulated</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Item"/> is null</exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Item"/> not found in the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> collection</exception>
	<exception cref="T:System.InvalidOperationException">
		<paramref name="Item"/> found in the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> colletion but not found as <see cref="P:System.Windows.Forms.LinkLabel.Link.LinkData"/> in the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Links"/> collection. Note: This is internal error of <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/> and thus should not be thrown if <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/> is implemented properly.
 Do not change value of <see cref="P:System.Windows.Forms.LinkLabel.Link.LinkData"/> or this exception will be thrown though there is no bug in <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/>.
 </exception>
	<remarks>
		<para>Causes raising <see cref="E:System.Windows.Forms.Control.Click"/> and <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkClicked"/> events</para>
		<para><see cref="E:System.Windows.Forms.Control.MouseDown"/>, <see cref="E:System.Windows.Forms.Control.MouseUp"/> and <see cref="E:System.Windows.Forms.Control.MouseClick"/> events are not raised</para>
	</remarks>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.Links">
	<summary>Gets the collection of links contained within the <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/>.</summary>
	<remarks>
		<para>This shadowes property is read-only. Do not use unshadowing workarounds to obtain read-write acces to te <see cref="P:System.Windows.Forms.LinkLabel.Links"/> property - it will cause unxpected behaviour. Use the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> collection instead.</para>
		<para>Note that any change to the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> collections causes complete change of <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Links"/> collection</para>
		<para>Do not change <see cref="P:System.Windows.Forms.LinkLabel.Link.Start"/> or <see cref="P:System.Windows.Forms.LinkLabel.Link.Length"/> properties unless you know what you are doing.</para>
	</remarks>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.Links(Tools.WindowsT.FormsT.LinkLabel.LinkItem)">
	<summary>Gets acces to link associated with <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkItem"/> contained in <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/></summary>
	<param name="Item">Item which link to obtain</param>
	<returns><see cref="T:System.Windows.Forms.LinkLabel.Link"/> which <paramref name="Item"/> is represented by</returns>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Item"/> not found in <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/></exception>
	<exception cref="T:System.InvalidOperationException">
		<paramref name="Item"/> found in the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> colletion but not found as <see cref="P:System.Windows.Forms.LinkLabel.Link.LinkData"/> in the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Links"/> collection. Note: This is internal error of <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/> and thus should not be thrown if <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/> is implemented properly.
 Do not change value of <see cref="P:System.Windows.Forms.LinkLabel.Link.LinkData"/> or this exception will be thrown though there is no bug in <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/>.</exception>
	<remarks>
		<para>Do not make any changes in the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> collection after modyfiyng any link or after creating reference to it. Also do not change values of items contained in the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> collection. These changes causes invalidation of all links.</para>
		<para>Do not change <see cref="P:System.Windows.Forms.LinkLabel.Link.Start"/> or <see cref="P:System.Windows.Forms.LinkLabel.Link.Length"/> properties unless you know what you are doing.</para>
	</remarks>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.TextPropertyName">
	<summary>Value of the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> passed in the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event when the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text"/> property changes</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem._Text">
	<summary>Text to be shown</summary>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text">
	<summary>Gets or sets text shown in place of this item</summary>
	<remarks>Note for inheritors: Call <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> after change of value (unless calling base class setter <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text"/>)</remarks>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.ToString">
	<summary>String representation of this instance</summary>
</member><member name="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed">
	<summary>Raised when value of member changes</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Event information</param>
	<remarks><paramref name="e"/>Should contain additional information that can be used in event-handling code</remarks>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event</summary>
	<param name="e">Event parameters</param>
	<remarks>Note for inheritors: Always call base class <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> method in order the event to be raised</remarks>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.</summary>
	<param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
	<param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null</exception>
	<exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
	<remarks>Note to inheritors: If you like serialize more data then then <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text"/> property only, then override this method. If you want the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text"/> property to be serialized either call base class method <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> or serialize it in your code.</remarks>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>CTor - deserializes <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem"/></summary>
	<param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains serialized object</param>
	<param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) of this deserialization.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null</exception>
	<exception cref="T:System.InvalidCastException">Serialized value was found but cannot be converted to type of corresponding property</exception>
	<exception cref="T:System.Runtime.Serialization.SerializationException">An exception occured during deserialization</exception>
	<remarks>Note to inheritors: If you want perform deserialization (stronly recomended) provide your own version of this CTor. In order to deserialize the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text"/> property you can either call this base class CTor or deserialize it by your own.</remarks>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.#ctor">
	<summary>CTor</summary>
</member><member name="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem">
	<summary>Common base for items in <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/></summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.TextItem.#ctor">
	<summary>CTor (initializes with an empty string)</summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.TextItem.#ctor(System.String)">
	<summary>CTor (initializes with text to display)</summary>
	<param name="Text">Text to be displayed</param>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.TextItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>CTor - deserializes <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem"/></summary>
	<param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains serialized object</param>
	<param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) of this deserialization.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null</exception>
	<exception cref="T:System.InvalidCastException">Serialized value was found but cannot be converted to type of corresponding property</exception>
	<exception cref="T:System.Runtime.Serialization.SerializationException">An exception occured during deserialization</exception>
	<remarks>Note to inheritors: If you want perform deserialization (stronly recomended) provide your own version of this CTor. In order to deserialize the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text"/> property you can either call thisw base class CTor or deserialize it by your own.</remarks>
</member><member name="T:Tools.WindowsT.FormsT.LinkLabel.TextItem">
	<summary>Non-link (text only) item of <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem.LinkDataPropertyName">
	<summary>Value of the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> passed in the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event when the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.LinkData"/> property changes</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem.DescriptionPropertyName">
	<summary>Value of the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> passed in the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event when the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Description"/> property changes</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem.NamePropertyName">
	<summary>Value of the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> passed in the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event when the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Name"/> property changes</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem.TagPropertyName">
	<summary>Value of the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> passed in the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event when the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Tag"/> property changes</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem.VisitedPropertyName">
	<summary>Value of the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> passed in the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event when the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Visited"/> property changes</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem.EnabledPropertyName">
	<summary>Value of the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> passed in the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event when the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Enabled"/> property changes</summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkItem.#ctor">
	<summary>CTor (initializes with an empty string as <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text"/> and null as <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.LinkData"/></summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkItem.ToString">
	<summary>String representation</summary>
	<remarks>If <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Name"/> is not an empty string then returns <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Name"/> otherwise returns <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text"/></remarks>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkItem.#ctor(System.String,System.Object)">
	<summary>CTor (initializes <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text"/> and optionally <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.LinkData"/></summary>
	<param name="Text">Text to be shown</param>
	<param name="LinkData">Data associtaed with new link</param>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>CTor - deserializes <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem"/></summary>
	<param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains serialized object</param>
	<param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) of this deserialization.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null</exception>
	<exception cref="T:System.InvalidCastException">Serialized value was found but cannot be converted to type of corresponding property</exception>
	<exception cref="T:System.Runtime.Serialization.SerializationException">An exception occured during deserialization</exception>
	<remarks>Note to inheritors: If you want perform deserialization (stronly recomended) provide your own version of this CTor. In order to deserialize the properties of this class you can either call this base class CTor or deserialize them by your own.</remarks>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.</summary>
	<param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
	<param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null</exception>
	<exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
	<remarks>Note to inheritors: If you like serialize more data then then properties of this class, then override this method. If you want the properties of this class to be serialized either call base class method <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> or serialize them in your code.</remarks>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem._LinkData">
	<summary>Data associated with the link</summary>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.LinkData">
	<summary>Gets or sets data associated with the link</summary>
	<remarks>Note for inheritors: Call <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> after tha value is changed (unless calling base class setter <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.LinkData"/>)</remarks>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Description">
	<summary>Stores value for the <see cref="P:System.Windows.Forms.LinkLabel.Link.Description"/> of <see cref="T:System.Windows.Forms.LinkLabel.Link"/> that represents this <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkItem"/></summary>
	<remarks>Note for inheritors: Call base class setter or <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> method in order to raise the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event</remarks>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem._Description">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Description"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Name">
	<summary>Stores value for the <see cref="P:System.Windows.Forms.LinkLabel.Link.Name"/> of <see cref="T:System.Windows.Forms.LinkLabel.Link"/> that represents this <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkItem"/></summary>
	<remarks>Note for inheritors: Call base class setter or <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> method in order to raise the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event</remarks>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem._Name">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Name"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Tag">
	<summary>Stores value for the <see cref="P:System.Windows.Forms.LinkLabel.Link.Tag"/> of <see cref="T:System.Windows.Forms.LinkLabel.Link"/> that represents this <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkItem"/></summary>
	<remarks>Note for inheritors: Call base class setter or <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> method in order to raise the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event</remarks>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem._Tag">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Tag"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Visited">
	<summary>Stores value for the <see cref="P:System.Windows.Forms.LinkLabel.Link.Visited"/> of <see cref="T:System.Windows.Forms.LinkLabel.Link"/> that represents this <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkItem"/></summary>
	<remarks>Note for inheritors: Call base class setter or <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> method in order to raise the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event</remarks>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem._Visited">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Visited"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Enabled">
	<summary>Stores value for the <see cref="P:System.Windows.Forms.LinkLabel.Link.Enabled"/> of <see cref="T:System.Windows.Forms.LinkLabel.Link"/> that represents this <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkItem"/></summary>
	<remarks>Note for inheritors: Call base class setter or <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> method in order to raise the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event</remarks>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem._Enabled">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Enabled"/> property</summary>
</member><member name="T:Tools.WindowsT.FormsT.LinkLabel.LinkItem">
	<summary>Generic link</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkURIPropertyName">
	<summary>Value of the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> passed in the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event when the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkURI"/> property changes</summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.AutoLink.#ctor(System.String)">
	<summary>CTor</summary>
	<param name="Text">Text to display</param>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.AutoLink.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.AutoLink.#ctor(System.String,System.Uri)">
	<summary>CTor</summary>
	<param name="Text">Text to display</param>
	<param name="LinkURI">URI of target of new link</param>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.AutoLink.#ctor(System.String,System.String)">
	<summary>CTor</summary>
	<param name="Text">Text to display</param>
	<param name="LinkPath">Path of target of new link</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null -and- type of <paramref name="value"/> is <see cref="T:System.String"/></exception>
	<exception cref="T:System.UriFormatException">Type of <paramref name="value"/> is <see cref="T:System.String"/> -and- <paramref name="value"/> is empty.-or- The scheme specified in <paramref name="value"/> is not correctly formed. See <see cref="M:System.Uri.CheckSchemeName(System.String)"/>.-or- <paramref name="value"/> contains too many slashes.-or- The password specified in <paramref name="value"/> is not valid.-or- The host name specified in <paramref name="value"/> is not valid.-or- The file name specified in <paramref name="value"/> is not valid. -or- The user name specified in <paramref name="value"/> is not valid.-or- The host or authority name specified in <paramref name="value"/> cannot be terminated by backslashes.-or- The port number specified in <paramref name="value"/> is not valid or cannot be parsed.-or- The length of <paramref name="value"/> exceeds 65534 characters.-or- The length of the scheme specified in <paramref name="value"/> exceeds 1023 characters.-or- There is an invalid character sequence in <paramref name="value"/>.-or- The MS-DOS path specified in <paramref name="value"/> must start with c:\\.</exception>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.AutoLink.#ctor(System.Uri)">
	<summary>CTor - initializes with URI and uses URI's string representation as text</summary>
	<param name="LinkURI">URI of terger of new link</param>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.AutoLink.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>CTor - deserializes <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem"/></summary>
	<param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains serialized object</param>
	<param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) of this deserialization.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null</exception>
	<exception cref="T:System.InvalidCastException">Serialized value was found but cannot be converted to type of corresponding property</exception>
	<exception cref="T:System.Runtime.Serialization.SerializationException">An exception occured during deserialization</exception>
	<remarks>Note to inheritors: If you want perform deserialization (stronly recomended) provide your own version of this CTor. In order to deserialize the properties of this class you can either call this base class CTor or deserialize them by your own.</remarks>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.AutoLink._LinkURI">
	<summary>Target of link</summary>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkData">
	<summary>Data associated with the link</summary>
	<value>New associated data (NOTE: value must be of type <see cref="T:System.Uri"/> or of type <see cref="T:System.String"/> that cab be used as parameter of <see cref="T:System.Uri"/>'s CTor)</value>
	<returns>Data associated with the link</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null -and- type of <paramref name="value"/> is <see cref="T:System.String"/></exception>
	<exception cref="T:System.UriFormatException">Type of <paramref name="value"/> is <see cref="T:System.String"/> -and- <paramref name="value"/> is empty.-or- The scheme specified in <paramref name="value"/> is not correctly formed. See <see cref="M:System.Uri.CheckSchemeName(System.String)"/>.-or- <paramref name="value"/> contains too many slashes.-or- The password specified in <paramref name="value"/> is not valid.-or- The host name specified in <paramref name="value"/> is not valid.-or- The file name specified in <paramref name="value"/> is not valid. -or- The user name specified in <paramref name="value"/> is not valid.-or- The host or authority name specified in <paramref name="value"/> cannot be terminated by backslashes.-or- The port number specified in <paramref name="value"/> is not valid or cannot be parsed.-or- The length of <paramref name="value"/> exceeds 65534 characters.-or- The length of the scheme specified in <paramref name="value"/> exceeds 1023 characters.-or- There is an invalid character sequence in <paramref name="value"/>.-or- The MS-DOS path specified in <paramref name="value"/> must start with c:\\.</exception>
	<exception cref="T:System.InvalidCastException">Type of <paramref name="value"/> is neither <see cref="T:System.Uri"/> nor <see cref="T:System.String"/></exception>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkURI">
	<summary>Gets or sets URI to navigate to</summary>
	<value>Actuall URI or target of the link</value>
	<returns>New URI of target of the link</returns>
	<remarks>Note for inheritors: Call <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> after value is changed (unless calling base class setter <see cref="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkURI"/>)</remarks>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkPath">
	<summary>Gets or sets URI (in form of path string) to navigate to</summary>
	<returns>Actuall path of target of the link</returns>
	<value>New path of target of the link</value>
	<exception cref="T:System.UriFormatException"><paramref name="value"/> is empty.-or- The scheme specified in <paramref name="value"/> is not correctly formed. See <see cref="M:System.Uri.CheckSchemeName(System.String)"/>.-or- <paramref name="value"/> contains too many slashes.-or- The password specified in <paramref name="value"/> is not valid.-or- The host name specified in <paramref name="value"/> is not valid.-or- The file name specified in <paramref name="value"/> is not valid. -or- The user name specified in <paramref name="value"/> is not valid.-or- The host or authority name specified in <paramref name="value"/> cannot be terminated by backslashes.-or- The port number specified in <paramref name="value"/> is not valid or cannot be parsed.-or- The length of <paramref name="value"/> exceeds 65534 characters.-or- The length of the scheme specified in <paramref name="value"/> exceeds 1023 characters.-or- There is an invalid character sequence in <paramref name="value"/>.-or- The MS-DOS path specified in <paramref name="value"/> must start with c:\\.</exception>
	<remarks>
		<para>Exceptions thrown by <see cref="T:System.Uri"/>'s CTor</para>
		<para>Note for inheritors: Call <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> (unless callin base class setter <see cref="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkPath"/> or <see cref="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkURI"/></para>
		<para>Change of this value causes raising <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event with <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> set to <see cref="F:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkURIPropertyName"/></para>
	</remarks>
</member><member name="T:Tools.WindowsT.FormsT.LinkLabel.AutoLink">
	<summary>Link that performs navigation automatically</summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.#ctor">
	<summary>CTor</summary>
	<remarks>Initializes base class <see cref="T:System.ComponentModel.Design.CollectionEditor"/> with type <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/></remarks>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.#ctor(System.Boolean)">
	<summary>CTor</summary>
	<param name="UseStandardEditorForm">Initial value for the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.UseStandardEditorForm"/> property</param>
	<remarks>Initializes base class <see cref="T:System.ComponentModel.Design.CollectionEditor"/> with type <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/></remarks>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor._UseStandardEditorForm">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.UseStandardEditorForm"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.UseStandardEditorForm">
	<summary>Determines behavior of the <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CreateCollectionForm"/> function. If True the that function returns <see cref="M:System.ComponentModel.Design.CollectionEditor.CreateCollectionForm"/> otherwise returns instance of <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.Types">
	<summary>Types of items tha can be added into collection</summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CreateNewItemTypes">
	<summary>Gets the data types that this collection editor can contain.</summary>
	<returns>An array of data types that this collection can contain.</returns>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CreateInstance(System.Type)">
	<summary>Creates a new instance of the specified collection item type.</summary>
	<param name="itemType">The type of item to create.</param>
	<returns>A new instance of the specified object.</returns>
	<exception cref="T:System.ArgumentException"><paramref name="itemType"/> doesn't represent supported type - supported types are: <list><item><see cref="T:Tools.WindowsT.FormsT.LinkLabel.TextItem"/></item>
			<item><see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkItem"/></item>
			<see cref="T:Tools.WindowsT.FormsT.LinkLabel.AutoLink"/></list></exception>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CreateCollectionItemType">
	<summary>Gets the data type that this collection contains.</summary>
	<returns><see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem"/> type</returns>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CreateCollectionForm">
	<summary>Creates a new form to display and edit the current collection.</summary>
	<returns>
		<para>A <see cref="T:System.ComponentModel.Design.CollectionEditor.CollectionForm"/> to provide as the user interface for editing the collection.</para>
		<para>Depending on <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.UseStandardEditorForm"/> returns either <see cref="T:System.ComponentModel.Design.CollectionEditor.CollectionForm"/> returned by <see cref="M:System.ComponentModel.Design.CollectionEditor.CreateCollectionForm"/> or instance or <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm"/></para>
	</returns>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
	<summary>Edits the value of the specified object using the specified service provider and context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
	<param name="value">The object to edit the value of.</param>
	<param name="provider">A service provider object through which editing services can be obtained.</param>
	<returns>The new value of the object. If the value of the object has not changed, this should return the same object it was passed.</returns>
	<exception cref="T:System.ComponentModel.Design.CheckoutException">An attempt to check out a file that is checked into a source code management program did not succeed</exception>
</member><member name="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor">
	<summary>Allows editing of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> collection at design-time</summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.Dispose(System.Boolean)">
	<summary>Form overrides dispose to clean up the component list.</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.lblItemInfo">
	<summary>Shows information about select items</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.components">
	<summary>Required by the Windows Form Designer</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.resources">
	<summary>Resources for this form</summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.InitializeComponent">
	<summary>Initializes components</summary>
	<remarks>
 NOTE: The following procedure is required by the Windows Form Designer
 It can be modified using the Windows Form Designer.  
 Do not modify it using the code editor.
 </remarks>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.splMain">
	<summary>Main <see cref="T:System.Windows.Forms.SplitContainer"/> that splits form into part of list and part of <see cref="T:System.Windows.Forms.PropertyGrid"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.tlpItems">
	<summary>List part of collection is located here</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.lstItems">
	<summary>Shows list of collection items</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.cmdUp">
	<summary>Moves selected item up</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.cmdDown">
	<summary>Moves selected item down</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.tosAdd">
	<summary>Contains <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.tsbAdd"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.tsbAdd">
	<summary>Contains items for adding new items to the collection</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.tosRemove">
	<summary>Contains <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.tsbRemove"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.tsbRemove">
	<summary>Removes selected items</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.pgrProperty">
	<summary>Displays and allows edit properties of selected items</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.cmdCancel">
	<summary>Closes form with no changes on collection</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.cmdOK">
	<summary>Closes form and applies changes on collection</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.totTT">
	<summary>Displays tool tip text on some controls</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm._Editor">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.Editor"/> property</summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.#ctor(Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor)">
	<summary>Initializes a new instance of the <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor"/> class.</summary>
	<param name="editor">The <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor"/> to use for editing the collection.</param>
	<exception cref="T:System.ArgumentException">
		<see cref="P:System.ComponentModel.Design.CollectionEditor.CollectionType"/> of <paramref name="Editor"/> is not <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>
 -or-
 <see cref="P:System.ComponentModel.Design.CollectionEditor.CollectionItemType"/> of <paramref name="Editor"/> is not <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem"/>
 -or-
 Any <see cref="P:System.ComponentModel.Design.CollectionEditor.NewItemTypes"/> of <paramref name="Editor"/> is not <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem"/>
	</exception>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.Add_Click(System.Object,System.EventArgs)">
	<summary>Adds item to collection</summary>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.Editor">
	<summary><see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor"/> used for editin collection</summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.OnEditValueChanged">
	<summary>
 Provides an opportunity to perform processing when a collection value has changed.
 Shows items of collection in <see cref="T:System.Windows.Forms.ListBox"/>.
 </summary>
	<exception cref="T:System.InvalidCastException"><see cref="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.EditValue"/> is not of type <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/></exception>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.ShowEditorDialog(System.Windows.Forms.Design.IWindowsFormsEditorService)">
	<summary>Shows the dialog box for the collection editor using the specified <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService"/> object.</summary>
	<param name="edSvc">An <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService"/> that can be used to show the dialog box.</param>
	<returns>A <see cref="T:System.Windows.Forms.DialogResult"/> that indicates the result code returned from the dialog box.</returns>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.comp">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.Component"/> property</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.inGetService">
	<summary>Identifies if <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.GetService(System.Type)"/> is currently lying on callstack</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.sp">
	<summary>Contains instance of <see cref="T:System.IServiceProvider"/></summary>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.Component">
	<summary>Gets the component associated with the <see cref="T:System.ComponentModel.ISite"/> when implemented by a class.</summary>
	<returns>The <see cref="T:System.ComponentModel.IComponent"/> instance associated with the <see cref="T:System.ComponentModel.ISite"/>.</returns>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.Container">
	<summary>Gets the <see cref="T:System.ComponentModel.IContainer"/> associated with the <see cref="T:System.ComponentModel.ISite"/> when implemented by a class.</summary>
	<returns>Always null in this implementation.</returns>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.DesignMode">
	<summary>Determines whether the component is in design mode when implemented by a class.</summary>
	<returns>Always false in this implementation</returns>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.Name">
	<summary>Gets or sets the name of the component associated with the <see cref="T:System.ComponentModel.ISite"/> when implemented by a class.</summary>
	<returns>Always an empty string in this implementation</returns>
	<value>Setting value has no effect</value>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.GetService(System.Type)">
	<summary>Gets the service object of the specified type.</summary>
	<param name="serviceType">An object that specifies the type of service object to get.</param>
	<returns>A service object of type serviceType.-or- null if there is no service object of type <paramref name="serviceType"/>.</returns>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.#ctor(System.IServiceProvider,System.ComponentModel.IComponent)">
	<summary>CTor</summary>
	<param name="sp">An instance of <see cref="T:System.IServiceProvider"/>. This value is never used.</param>
	<param name="comp">Value that will be returned by the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.Component"/> property</param>
</member><member name="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite">
	<summary>This class was copied from Friend Class System.ComponentModel.Design.CollectionEditor.PropertyGridSite using Reflector</summary>
	<remarks>
 I'm not very sure what exactly this class does or what exactly is used for. It supports <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm"/> functionality. Its instance is passed to <see cref="P:System.Windows.Forms.PropertyGrid.Site"/> property of <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.pgrProperty"/> in <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.OnEditValueChanged"/>
 IMHO it supports design-time interaction between <see cref="T:System.Windows.Forms.PropertyGrid"/> and the object being edited.
 </remarks>
</member><member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.EditValue">
	<summary>Gets or sets the collection object to edit.</summary>
	<returns>The collection object to edit.</returns>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.cmdClose_Click(System.Object,System.EventArgs)">
	<summary>Closes form with no changes on collection</summary>
	<remarks>Changes on collection items' properties are not discarded</remarks>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.ClosingCancel">
	<summary>If true than <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.CollectionForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)"/> cancels editing</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.EnableMode.False">
	<summary>Set to False</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.EnableMode.True">
	<summary>Set to True</summary>
</member><member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.EnableMode.Multi">
	<summary>Set to True (only controls that can be used when multiple items are selected)</summary>
</member><member name="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.EnableMode">
	<summary>Modes for <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.Enable(Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.EnableMode)"/></summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.Enable(Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.EnableMode)">
	<summary>Sets <see cref="P:System.Windows.Forms.Control.Enabled"/> for item-related buttons (<see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.cmdUp"/>, <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.cmdDown"/>, <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.tsbRemove"/>)</summary>
	<param name="Enabled">Mode of setting value</param>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.cmdUp_Click(System.Object,System.EventArgs)">
	<summary>Moves selected item up</summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.cmdDown_Click(System.Object,System.EventArgs)">
	<summary>Moves selected item down</summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.cmdOK_Click(System.Object,System.EventArgs)">
	<summary>Closes form and applies changes</summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.tsbRemove_Click(System.Object,System.EventArgs)">
	<summary>Removes selected items</summary>
</member><member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.ResizeLabel">
	<summary>Changes <see cref="P:System.Windows.Forms.Control.MaximumSize"/> of <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.lblItemInfo"/> in order not to be wider than its container.</summary>
</member><member name="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm">
	<summary>Provides a modal dialog box for editing the contents of the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>  using a <see cref="T:System.Drawing.Design.UITypeEditor"/>.</summary>
</member><member name="T:Tools.WindowsT.FormsT.LinkLabel">
	<summary><see cref="T:System.Windows.Forms.LinkLabel"/> with improved design-time behavior</summary>
</member><member name="P:Tools.CollectionsT.GenericT.IIndexable`2.Item(`1)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="T:Tools.CollectionsT.GenericT.IIndexable`2">
	<summary>Rapresent anything that can be indexed by anything</summary>
	<typeparam name="TIndex">Data type of indexes</typeparam>
	<typeparam name="TItem">Datatype of items</typeparam>
</member><member name="P:Tools.CollectionsT.GenericT.IReadOnlyIndexable`2.Item(`1)">
	<summary>Gets value on specified index</summary>
	<param name="index">Index to obtain value</param>
	<returns>value lying on specified <paramref name="index"/></returns>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="T:Tools.CollectionsT.GenericT.IReadOnlyIndexable`2">
	<summary>Rapresent anything that can be indexed by anything for readonly access</summary>
	<typeparam name="TIndex">Data type of indexes</typeparam>
	<typeparam name="TItem">Datatype of items</typeparam>
</member><member name="T:Tools.CollectionsT.GenericT.IIndexableWithRange`2">
	<summary>Represents anythign that can be indexed by <see cref="T:System.Int64"/></summary>
	<typeparam name="TItem">Data type of items</typeparam>
</member><member name="P:Tools.CollectionsT.GenericT.IReadOnlyIndexableWithRange`2.Minimum">
	<summary>Minimal valid value for index</summary>
</member><member name="P:Tools.CollectionsT.GenericT.IReadOnlyIndexableWithRange`2.Maximum">
	<summary>Maximal valid value for index</summary>
</member><member name="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableWithRange`2">
	<summary>Represents anythign that can be indexed by <see cref="T:System.Int32"/> for readonly acces</summary>
	<typeparam name="TItem">Data type of items</typeparam>
</member><member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.IsSmaller(`1,`1)">
	<summary>Gets value indicating if one index is smaller than other</summary>
	<param name="a">Index which should be smaller</param>
	<param name="b">Index which should be greater</param>
	<returns>true if <paramref name="a"/> &lt; <paramref name="b"/></returns>
</member><member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.IsGreater(`1,`1)">
	<summary>Gets value indicating if one index is greater than other</summary>
	<param name="a">Index which should be smaller</param>
	<param name="b">Index which should be greater</param>
	<returns>true if <paramref name="a"/> &gt; <paramref name="b"/></returns>
</member><member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Increment(`1)">
	<summary>Gets index by 1 greater than given</summary>
	<param name="a">An index to increment</param>
	<returns><paramref name="a"/> + 1</returns>
</member><member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Decrement(`1)">
	<summary>Gets index by 1 smaller than given</summary>
	<param name="a">An index to decrement</param>
	<returns><paramref name="a"/> - 1</returns>
	<remarks>Function must be able to decrement to value <see cref="F:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Collection"/>.<see cref="P:Tools.CollectionsT.GenericT.IReadOnlyIndexableWithRange`2.Minimum">Minimum</see> - 1</remarks>
</member><member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Equals(`1,`1)">
	<summary>Gets value indicating if one index is equals to other</summary>
	<param name="a">An index</param>
	<param name="b">An index</param>
	<returns>true if <paramref name="a"/> == <paramref name="b"/></returns>
</member><member name="F:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Collection">
	<summary><see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableWithRange`2"/> being enumerated</summary>
</member><member name="F:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Position">
	<summary>Curent position</summary>
</member><member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.#ctor(Tools.CollectionsT.GenericT.IReadOnlyIndexableWithRange{`0,`1})">
	<summary>CTor</summary>
	<param name="Collection"><see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableWithRange`2"/> to enumerate through</param>
</member><member name="P:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Current">
	<summary>Gets the element in the collection at the current position of the enumerator.</summary>
	<returns>The element in the collection at the current position of the enumerator.</returns>
	<exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
</member><member name="P:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Current1">
	<summary>Gets the current element in the collection.</summary>
	<returns>The current element in the collection.</returns>
	<exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.MoveNext">
	<summary>Advances the enumerator to the next element of the collection.</summary>
	<returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
</member><member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Reset">
	<summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
</member><member name="F:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.disposedValue">
	<summary>To detect redundant calls</summary>
</member><member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Dispose(System.Boolean)">
	<summary>IDisposable</summary>
</member><member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Dispose">
	<summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
	<remarks>This code added by Visual Basic to correctly implement the disposable pattern.</remarks>
</member><member name="T:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2">
	<summary>Common base for indexable enumerators</summary>
	<typeparam name="TItem">Type of items in collection</typeparam>
	<typeparam name="TIndex">Type of index</typeparam>
</member><member name="M:Tools.CollectionsT.GenericT.LongIndexableEnumerator`1.#ctor(Tools.CollectionsT.GenericT.IReadOnlyIndexable{`0,System.Int64})">
	<summary>CTor</summary>
	<param name="Collection"><see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableWithRange`2"/> to enumerate through</param>
</member><member name="M:Tools.CollectionsT.GenericT.LongIndexableEnumerator`1.Decrement(System.Int64)">
	<summary>Gets index by 1 smaller than given</summary>
	<param name="a">An index to decrement</param>
	<returns><paramref name="a"/> - 1</returns>
</member><member name="M:Tools.CollectionsT.GenericT.LongIndexableEnumerator`1.Equals(System.Int64,System.Int64)">
	<summary>Gets value indicating if one index is equals to other</summary>
	<param name="a">An index</param>
	<param name="b">An index</param>
	<returns>true if <paramref name="a"/> == <paramref name="b"/></returns>
</member><member name="M:Tools.CollectionsT.GenericT.LongIndexableEnumerator`1.Increment(System.Int64)">
	<summary>Gets index by 1 greater than given</summary>
	<param name="a">An index to increment</param>
	<returns><paramref name="a"/> + 1</returns>
</member><member name="M:Tools.CollectionsT.GenericT.LongIndexableEnumerator`1.IsGreater(System.Int64,System.Int64)">
	<summary>Gets value indicating if one index is greater than other</summary>
	<param name="a">Index which should be smaller</param>
	<param name="b">Index which should be greater</param>
	<returns>true if <paramref name="a"/> &gt; <paramref name="b"/></returns>
</member><member name="M:Tools.CollectionsT.GenericT.LongIndexableEnumerator`1.IsSmaller(System.Int64,System.Int64)">
	<summary>Gets value indicating if one index is smaller than other</summary>
	<param name="a">Index which should be smaller</param>
	<param name="b">Index which should be greater</param>
	<returns>true if <paramref name="a"/> &lt; <paramref name="b"/></returns>
</member><member name="T:Tools.CollectionsT.GenericT.LongIndexableEnumerator`1">
	<summary>Implements enumerator of <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexable`2"/></summary>
</member><member name="P:Tools.CollectionsT.GenericT.IReadOnlyCollection`1.Count">
	<summary>Gets the number of elements contained in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see>.</summary>
	<returns>The number of elements contained in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see>.</returns>
	<filterpriority>2</filterpriority>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
	<summary>Copies the elements of the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
	<param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
	<param name="index">The zero-based index in array at which copying begins. </param>
	<exception cref="T:System.ArgumentNullException">array is null. </exception>
	<exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
	<exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
	<exception cref="T:System.InvalidCastException">The type of the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see> cannot be cast automatically to the type of the destination array. </exception>
	<filterpriority>2</filterpriority>
</member><member name="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1">
	<summary>Represents simple type-safe interface for read-only collection</summary>
	<typeparam name="T">Type of items in collections</typeparam>
</member><member name="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2">
	<summary>Represets read-only indexable collection</summary>
	<typeparam name="TIndex">Type of items in collection</typeparam>
	<typeparam name="TItem">Type of index</typeparam>
</member><member name="T:Tools.CollectionsT.GenericT.IIndexableCollection`2">
	<summary>Represents collection that can be indexed</summary>
	<typeparam name="TIndex">Type of items in collection</typeparam>
	<typeparam name="TItem">Type of index</typeparam>
</member><member name="T:Tools.CollectionsT.GenericT.IIndexableWithCount`2">
	<summary>Represents <see cref="T:Tools.CollectionsT.GenericT.IIndexable`2"/> that provides count of items within it</summary>
	<typeparam name="TIndex">Type of items in collection</typeparam>
	<typeparam name="TItem">Type of index</typeparam>
</member><member name="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableWithCount`2">
	<summary>Represents <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexable`2"/> that provides count of items within it</summary>
	<typeparam name="TIndex">Type of items in collection</typeparam>
	<typeparam name="TItem">Type of index</typeparam>
</member><member name="M:Tools.CollectionsT.GenericT.IAddable`1.Add(`0)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="T:Tools.CollectionsT.GenericT.IAddable`1">
	<summary>Represents collection which allows adding items</summary>
	<typeparam name="T">Type of items in clollection</typeparam>
</member><member name="T:Tools.CollectionsT.GenericT.IAddableIndexable`2">
	<summary>Represents indexable collection which allows adding items</summary>
	<typeparam name="TIndex">Type of items in collection</typeparam>
	<typeparam name="TItem">Type of index</typeparam>
</member><member name="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableEnumerable`2">
	<summary>Represents something read-only that can be indexed and enumerated</summary>
	<typeparam name="TIndex">Type of items in collection</typeparam>
	<typeparam name="TItem">Type of index</typeparam>
</member><member name="T:Tools.CollectionsT.GenericT.IIndexableEnumerable`2">
	<summary>Represents somethign that can be indexed and enumerated</summary>
	<typeparam name="TIndex">Type of items in collection</typeparam>
	<typeparam name="TItem">Type of index</typeparam>
</member><member name="M:Tools.CollectionsT.GenericT.IRemovable`1.RemoveAt(`0)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.GenericT.IRemovable`1">
	<summary>Interface of something from which can be removed somethign at specified position (with specified key)</summary>
	<typeparam name="TIndex">Type of index</typeparam>
</member><member name="T:Tools.CollectionsT.GenericT.IIndexableRemovable`2">
	<summary><see cref="T:Tools.CollectionsT.GenericT.IIndexable`2"/> where items can be removed</summary>
	<typeparam name="TIndex">Type of items in collection</typeparam>
	<typeparam name="TItem">Type of index</typeparam>
</member><member name="T:Tools.CollectionsT.GenericT.IAddableRemovable`2">
	<summary>Collection where items can be added and removed at specified index</summary>
	<typeparam name="TIndex">Type of items in collection</typeparam>
	<typeparam name="TItem">Type of index</typeparam>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlySearchable`2.Contains(`0)">
	<summary>Gets value indicating if the collection contains given object</summary>
	<param name="item">Object to search for</param>
	<returns>True if collection contains <paramref name="item"/>; false otherwise</returns>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlySearchable`2.IndexOf(`0)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns collection-specific value. Number-indexed collections usually returns -1.</returns>
</member><member name="T:Tools.CollectionsT.GenericT.IReadOnlySearchable`2">
	<summary><see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexable`2"/> that has <see cref="M:Tools.CollectionsT.GenericT.IReadOnlySearchable`2.Contains"/> and <see cref="M:Tools.CollectionsT.GenericT.IReadOnlySearchable`2.IndexOf"/> functions</summary>
	<typeparam name="TIndex">Type of items in collection</typeparam>
	<typeparam name="TItem">Type of index</typeparam>
</member><member name="T:Tools.CollectionsT.GenericT.ISearchable`2">
	<summary><see cref="T:Tools.CollectionsT.GenericT.IIndexable`2"/> that has <see cref="M:Tools.CollectionsT.GenericT.IReadOnlySearchable`2.Contains"/> and <see cref="M:Tools.CollectionsT.GenericT.IReadOnlySearchable`2.IndexOf"/> functions</summary>
	<typeparam name="TIndex">Type of items in collection</typeparam>
	<typeparam name="TItem">Type of index</typeparam>
</member><member name="M:Tools.CollectionsT.GenericT.IInsertable`2.Insert(`1,`0)">
	<summary>Inserts item into collection at specified index</summary>
	<param name="index">Index to insert item onto</param>
	<param name="item">Item to be inserted</param>
</member><member name="T:Tools.CollectionsT.GenericT.IInsertable`2">
	<summary>Represents indexable collection where items can be inserted at specified index</summary>
	<typeparam name="TIndex">Type of items in collection</typeparam>
	<typeparam name="TItem">Type of index</typeparam>
</member><member name="F:Tools.CollectionsT.SpecializedT.SpecializedWrapper.Collection">
	<summary>Collection being wrapped</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.#ctor(System.Collections.ICollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UnsafeReadOnlyItem(System.Int32)">
	<summary>Gets value on specified index</summary>
	<param name="index">Index to obtain value</param>
	<returns>value lying on specified <paramref name="index"/></returns>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CopyTo(System.Array,System.Int32)">
	<summary>Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.</summary>
	<param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing. </param>
	<param name="index">The zero-based index in <paramref name="array"/> at which copying begins. </param>
	<exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null. </exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero. </exception>
	<exception cref="T:System.ArgumentException">
		<paramref name="array"/> is multidimensional.-or- 
 <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.-or-
 The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination  <paramref name="array"/>. </exception>
	<exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>. </exception>
	<filterpriority>2</filterpriority>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.Copy(System.Object[],System.Int32)">
	<summary>Copies the elements of the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
	<param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
	<param name="index">The zero-based index in array at which copying begins. </param>
	<exception cref="T:System.ArgumentNullException">array is null. </exception>
	<exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
	<exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
	<exception cref="T:System.InvalidCastException">The type of the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see> cannot be cast automatically to the type of the destination array. </exception>
	<filterpriority>2</filterpriority>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.Count">
	<summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.</summary>
	<returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.</returns>
	<filterpriority>2</filterpriority>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IsSynchronized">
	<summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).</summary>
	<returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.</returns>
	<filterpriority>2</filterpriority>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SyncRoot">
	<summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</summary>
	<returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</returns>
	<filterpriority>2</filterpriority>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetEnumerator1">
	<summary>Returns an enumerator that iterates through a collection.</summary>
	<returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
	<filterpriority>2</filterpriority>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.#ctor(`0)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
	<remarks>Derived class is responsible for allowing only such collections which contains only items of type <typeparamref name="TItem"/></remarks>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.IndexOf(`1)">
	<summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.</summary>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
	<returns>The index of item if found in the list; otherwise, -1.</returns>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Insert(System.Int32,`1)">
	<summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.</summary>
	<param name="index">The zero-based index at which item should be inserted.</param>
	<param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
	<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Item(System.Int32)">
	<summary>Gets or sets the element at the specified index.</summary>
	<param name="index">The zero-based index of the element to get or set.</param>
	<returns>The element at the specified index.</returns>
	<exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
	<exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.RemoveAt(System.Int32)">
	<summary>Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.</summary>
	<param name="index">The zero-based index of the item to remove.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
	<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Clear">
	<summary>Removes all items from the <see cref="T:System.Collections.IList"/>.</summary>
	<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.IsFixedSize">
	<summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.</summary>
	<returns>true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.</returns>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.IsReadOnly">
	<summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"/> is read-only.</summary>
	<returns>true if the <see cref="T:System.Collections.IList"/> is read-only; otherwise, false.</returns>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Contains(`1)">
	<summary>Gets value indicating if the collection contains given object</summary>
	<param name="item">Object to search for</param>
	<returns>True if collection contains <paramref name="item"/>; false otherwise</returns>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Add(`1)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Remove(`1)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if 
 <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if 
 <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Item_Unsafe(System.Int32)">
	<summary>Gets or sets the element at the specified index.</summary>
	<param name="index">The zero-based index of the element to get or set.</param>
	<returns>The element at the specified index.</returns>
	<exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"/>.</exception>
	<exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList"/> is read-only.</exception>
	<exception cref="T:Tools.TypeMismatchException">value being set is not of type <typeparemref name="TItem"/></exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Remove_Unsafe(System.Object)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.</summary>
	<param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/>.</param>
	<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size.</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Contains_Unsafe(System.Object)">
	<summary>Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.</summary>
	<param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
	<returns>true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.</returns>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.IndexOf_Unsafe(System.Object)">
	<summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.</summary>
	<param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
	<returns>The index of value if found in the list; otherwise, -1.</returns>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Insert_Unsafe(System.Int32,System.Object)">
	<summary>Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.</summary>
	<param name="index">The zero-based index at which value should be inserted.</param>
	<param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"/>.</exception>
	<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size.</exception>
	<exception cref="T:System.NullReferenceException">value is null reference in the <see cref="T:System.Collections.IList"/>.</exception>
	<exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is not of type <typeparemref name="TItem"/></exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.ThrowType(System.Object)">
	<summary>Checks if given object can be stored in this collection</summary>
	<param name="obj">Object to be stested</param>
	<exception cref="T:Tools.TypeMismatchException"><paramref name="obj"/> is not of type <typeparemref name="TItem"/></exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Add_Unsafe(System.Object)">
	<summary>Adds an item to the <see cref="T:System.Collections.IList"/>.</summary>
	<param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
	<returns>The position into which the new element was inserted.</returns>
	<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size.</exception>
	<exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is not of type <typeparemref name="TItem"/></exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2">
	<summary>Provides common base class for wrappers of type-unsafe <see cref="T:System.Collections.IList"/> to type-safe <see cref="T:System.Collections.Generic.IList`1"/></summary>
	<typeparam name="TCollection">Type of collection being wrapped</typeparam>
	<typeparam name=" TItem">Type of item in collection being wrapped</typeparam>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedWrapper`2.#ctor(`0)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped. It is responsibility of derived class to pass only such collections whichs items are of type <typeparamref name="T"/> in CTor. No check is done.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedWrapper`2.Collection">
	<summary>Collection being wrapped</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedWrapper`2.op_Implicit(Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedWrapper{`0,`1})~`0">
	<summary>Converts <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedWrapper`2"/> to <typeparamref name="TCollection"/></summary>
	<param name="a">A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedWrapper`2"/></param>
	<returns><paramref name="a"/>.<see cref="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedWrapper`2.Collection">Collection</see></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedWrapper`2">
	<summary>Provides common base for specialized wrappers implementations</summary>
	<typeparam name="TCollection">Type of collection being wrapped</typeparam>
	<typeparam name="TItem">Type of item in collection</typeparam>
	<remarks>This class is not intended for direct use. Use <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1"/> instead.</remarks>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedReadOnlyWrapper`2.#ctor(`0)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped. It is responsibility of derived class to pass only such collections whichs items are of type <typeparamref name="T"/> in CTor. No check is done.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedReadOnlyWrapper`2.Collection">
	<summary>Collection being wrapped</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedReadOnlyWrapper`2.op_Implicit(Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedReadOnlyWrapper{`0,`1})~`0">
	<summary>Converts <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedReadOnlyWrapper`2"/> to <typeparamref name="TCollection"/></summary>
	<param name="a">A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedReadOnlyWrapper`2"/></param>
	<returns><paramref name="a"/>.<see cref="F:Tools.CollectionsT.SpecializedT.SpecializedWrapper.Collection">Collection</see></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedReadOnlyWrapper`2">
	<summary>Provides common base for specialized read-only wrappers implementations</summary>
	<typeparam name="TCollection">Type of collection being wrapped</typeparam>
	<typeparam name=" TItem">Type of item in collection</typeparam>
	<remarks>This class is not intended for direct use. Use <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1"/> instead.</remarks>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper">
	<summary>Provides abstract base class and static methods for wrapping type-unsafe <see cref="T:System.Collections.ICollection"/> as type-safe <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/></summary>
	<remarks>Derived classes should derive from <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1"/> or <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1"/> instead</remarks>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.#ctor(System.Collections.ICollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped. It is responsibility of derived class to pass only such collections whichs items are of type <typeparamref name="T"/> in CTor. No check is done.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.Add(`0)">
	<summary>When overriden in derived class adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.Clear">
	<summary>When overriden in derived class removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.Contains(`0)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
	<remarks>If <see cref="F:Tools.CollectionsT.SpecializedT.SpecializedWrapper.Collection"/> provides way how to determine if it contains specific item it is efficiend to override this method and call use that way.</remarks>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.CopyTo(`0[],System.Int32)">
	<summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.</summary>
	<param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
	<param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
	<exception cref="T:System.ArgumentException">
		<paramref name="array"/> is multidimensional.-or-
 <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-
 The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-
 Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.Count">
	<summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.</summary>
	<returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.</returns>
	<filterpriority>2</filterpriority>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.IsReadOnly">
	<summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</summary>
	<returns>This implementation returns always true.</returns>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.Remove(`0)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if 
 <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if 
 <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.Item(System.Int32)">
	<summary>When overridne in derived class gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
	<exception cref="T:System.NotSupportedException">In setter: The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.ItemRO(System.Int32)">
	<summary>Gets value on specified index</summary>
	<param name="index">Index to obtain value</param>
	<returns>value lying on specified <paramref name="index"/></returns>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1">
	<summary>Provides abstract base for implementation of type-unsafe <see cref="T:System.Collections.ICollection"/> to type-safe <see cref="T:System.Collections.Generic.ICollection`1"/> wrappers</summary>
	<typeparam name="T">Type of item of collection</typeparam>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1.#ctor(System.Collections.ICollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped. It is responsibility of derived class to pass only such collections whichs items are of type <typeparamref name="T"/> in CTor. No check is done.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1.GetEnumerator">
	<summary>Returns an enumerator that iterates through the collection.</summary>
	<returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
	<filterpriority>1</filterpriority>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1.UnsafeReadOnlyItem(System.Int32)">
	<summary>Gets or sets value on specified index (type-unsafe)</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
	<remarks>Uses the <see cref="P:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1.Item(System.Int32)"/> property</remarks>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1.ItemRO(System.Int32)">
	<summary>Gets value on specified index</summary>
	<param name="index">Index to obtain value</param>
	<returns>value lying on specified <paramref name="index"/></returns>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1.Item(System.Int32)">
	<summary>Gets value on specified index</summary>
	<param name="index">Index to obtain value</param>
	<returns>value lying on specified <paramref name="index"/></returns>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
	<remarks>This property cannot be overriden, override <see cref="P:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1.ItemRO(System.Int32)"/> instead</remarks>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1.Count">
	<summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.</summary>
	<returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.</returns>
	<filterpriority>2</filterpriority>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1.CopyTo(`0[],System.Int32)">
	<summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.</summary>
	<param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
	<param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
	<exception cref="T:System.ArgumentException">
		<paramref name="array"/> is multidimensional.-or-
 <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-
 The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-
 Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1">
	<summary>Provides abstract base for implementation of type-unsafe <see cref="T:System.Collections.ICollection"/> to type-safe <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexable`2"/> wrappers</summary>
	<typeparam name="T">Type of item of collection</typeparam>
</member><member name="F:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.Array">
	<summary>Array to enumerate through</summary>
</member><member name="F:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.Index">
	<summary>Current index into array</summary>
</member><member name="F:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.Inverse">
	<summary>True if enumeration goes from end to start of an array</summary>
</member><member name="M:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.#ctor(`0[],System.Boolean)">
	<summary>CTor</summary>
	<param name="Array">Array to enumerate through</param>
	<param name="Inverse">True if enumeration should be done from end to beginning of an array</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Array"/> is null</exception>
</member><member name="P:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.Current">
	<summary>Gets the element in the collection at the current position of the enumerator.</summary>
	<returns>The element in the collection at the current position of the enumerator.</returns>
	<exception cref="T:System.InvalidOperationException">Enumeration has not started yet or it has already finished.</exception>
</member><member name="P:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1._Current">
	<summary>Gets the current element in the collection.</summary>
	<returns>The current element in the collection.</returns>
	<exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
	<remarks>Use type-safe <see cref="P:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.Current"/> instead</remarks>
</member><member name="P:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.CurrentIndex">
	<summary>Gets current index into array the enumerator points to</summary>
	<remarks>Index may be in range <see cref="M:System.Array.GetLowerBound(System.Int32)"/> - 1 to <see cref="M:System.Array.GetUpperBound(System.Int32)"/> + 1</remarks>
</member><member name="M:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.MoveNext">
	<summary>Advances the enumerator to the next element of the collection.</summary>
	<returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
	<exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
</member><member name="M:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.MovePrevious">
	<summary>Moves internal pointer of enumerator to previos member of collection</summary>
	<returns>True when pointer was succesfully mowed to item inside the collection. False if it was moved before start of collection or if it already was before start of collection. If pointer was after end of collection, it is moved to last item of collection and return value is true.</returns>
</member><member name="M:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.Reset">
	<summary>Resets enumerator to start position (depends on direction of enumeration)</summary>
</member><member name="F:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.disposedValue">
	<summary>To detect redundant calls</summary>
</member><member name="M:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.Dispose(System.Boolean)">
	<summary>This code added by Visual Basic to correctly implement the disposable pattern.</summary>
	<param name="disposing">Set to True by <see cref="M:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.Dispose(System.Boolean)"/></param>
</member><member name="M:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.Dispose">
	<summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
</member><member name="T:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1">
	<summary>Implements type-safe <see cref="T:System.Collections.Generic.IEnumerator`1"/> for 1-dimensional array of any type</summary>
	<typeparam name="T">Type of array element</typeparam>
	<remarks>Supports arrays with non-zero lower bound.</remarks>
</member><member name="F:Tools.CollectionsT.GenericT.HashTable`1.Internal">
	<summary><see cref="T:System.Collections.Generic.Dictionary`2"/> internally used by this instance</summary>
</member><member name="M:Tools.CollectionsT.GenericT.HashTable`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
	<summary>CTor (optionally with comparer)</summary>
	<param name="EqualityComparer"><see cref="T:System.Collections.Generic.EqualityComparer`1"/> used to compare values (or null to use default)</param>
</member><member name="M:Tools.CollectionsT.GenericT.HashTable`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
	<summary>CTor (with capacity and optionally with comparer)</summary>
	<param name="Capacity">Initial capacity of internal <see cref="T:Tools.CollectionsT.GenericT.HashTable`1"/></param>
	<param name="EqualityComparer"><see cref="T:System.Collections.Generic.EqualityComparer`1"/> used to compare values (or null to use default)</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero</exception>
</member><member name="M:Tools.CollectionsT.GenericT.HashTable`1.Add(`0)">
	<summary>Adds an element into collection.</summary>
	<param name="item">The value of the element to add. The value cannot be null.</param>
	<exception cref="T:System.ArgumentException">An element already exists in internall <see cref="T:System.Collections.Hashtable"/>.</exception>
	<exception cref="T:System.ArgumentNullException">An element is null</exception>
</member><member name="M:Tools.CollectionsT.GenericT.HashTable`1.Clear">
	<summary>Clears internal <see cref="T:Tools.CollectionsT.GenericT.HashTable`1"/> in order to contain no elements</summary>
</member><member name="M:Tools.CollectionsT.GenericT.HashTable`1.Contains(`0)">
	<summary>Determines whether the collection contains a specific value.</summary>
	<param name="item">The object to locate in the collection.</param>
	<returns>true if item is found in the internal <see cref="T:Tools.CollectionsT.GenericT.HashTable`1"/>; otherwise, false.</returns>
</member><member name="M:Tools.CollectionsT.GenericT.HashTable`1.CopyTo(`0[],System.Int32)">
	<summary>Copies the elements of the System.Collections.Generic.ICollection(Of T) to an System.Array, starting at a particular System.Array index.</summary>
	<param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.ICollection(Of T). The System.Array must have zero-based indexing.</param>
	<param name="arrayIndex">The zero-based index in array at which copying begins.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
	<exception cref="T:System.ArgumentNullException">array is null.</exception>
	<exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
</member><member name="P:Tools.CollectionsT.GenericT.HashTable`1.Count">
	<summary>Gets the number of elements contained in the internal <see cref="T:Tools.CollectionsT.GenericT.HashTable`1"/>.</summary>
	<returns>The number of elements contained in the internal <see cref="T:Tools.CollectionsT.GenericT.HashTable`1"/>.</returns>
</member><member name="P:Tools.CollectionsT.GenericT.HashTable`1.IsReadOnly">
	<summary>Determines if this collection is read-only or not (always retruns False)</summary>
	<returns>Always False</returns>
</member><member name="M:Tools.CollectionsT.GenericT.HashTable`1.Remove(`0)">
	<summary>Removes the first occurrence of a specific object from the internal <see cref="T:Tools.CollectionsT.GenericT.HashTable`1"/>.</summary>
	<param name="item">The object to remove from the internal <see cref="T:Tools.CollectionsT.GenericT.HashTable`1"/>.</param>
	<returns>true if item was successfully removed from the internal <see cref="T:Tools.CollectionsT.GenericT.HashTable`1"/>; otherwise, false. This method also returns false if item is not found in the original internal <see cref="T:Tools.CollectionsT.GenericT.HashTable`1"/>.</returns>
</member><member name="M:Tools.CollectionsT.GenericT.HashTable`1.GetEnumerator">
	<summary>Returns an enumerator that iterates through the collection.</summary>
	<returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection</returns>
</member><member name="M:Tools.CollectionsT.GenericT.HashTable`1.GetEnumerator1">
	<summary>Returns an enumerator that iterates through a collection.</summary>
	<returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection</returns>
</member><member name="F:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1.AdaptThis">
	<summary><see cref="T:System.Collections.IEnumerator"/> to be adapted</summary>
</member><member name="M:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1.#ctor(System.Collections.IEnumerator)">
	<summary>CTor</summary>
	<param name="AdaptThis"><see cref="T:System.Collections.IEnumerator"/> to be adapted</param>
</member><member name="P:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1.Current">
	<summary>Gets the element in the collection at the current position of the enumerator.</summary>
	<returns>The element in the collection at the current position of the enumerator</returns>
</member><member name="P:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1.Current1">
	<summary>Gets the current element in the collection.</summary>
	<returns>The current element in the collection.</returns>
	<exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1.MoveNext">
	<summary>Advances the enumerator to the next element of the collection.</summary>
	<returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
	<exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1.Reset">
	<summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
	<exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
</member><member name="F:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1.disposedValue">
	<summary>To detect redundant calls</summary>
</member><member name="M:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1.Dispose(System.Boolean)">
	<summary><see cref="T:System.IDisposable"/></summary>
</member><member name="M:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1.Dispose">
	<summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources</summary>
	<remarks>This code added by Visual Basic to correctly implement the disposable pattern.</remarks>
</member><member name="T:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1">
	<summary>Adapts <see cref="T:System.Collections.Generic.IEnumerator`1"/> into <see cref="T:System.Collections.Generic.IEnumerator`1"/></summary>
	<typeparam name="TVlaue">Type of values stored in <see cref="T:System.Collections.Generic.KeyValuePair`2"/>. Ignored, but must be specified in order the adapter to work in type-safe way</typeparam>
</member><member name="T:Tools.CollectionsT.GenericT.HashTable`1">
	<summary>Provides HashTable designed for storing only keys and quickly testing if key is in collection or not</summary>
	<remarks>Internally uses <see cref="T:System.Collections.Generic.Dictionary`2"/>. Can be used as List of unique items.</remarks>
</member><member name="F:Tools.enmTriBool.False">
	<summary>False value</summary>
</member><member name="F:Tools.enmTriBool.True">
	<summary>True value</summary>
</member><member name="F:Tools.enmTriBool.Unknown">
	<summary>Third value (called Unknowm, Default etc.)</summary>
</member><member name="T:Tools.enmTriBool">
	<summary>Represents tri-state "boolean"</summary>
</member><member name="P:Tools.ResourcesT.Resources.ToolsIcon">
	<summary>Icon representing ĐTools project</summary>
	<remarks>The 'Đ' letter</remarks>
</member><member name="T:Tools.ResourcesT.Resources">
	<summary>Provides access to various resources that should be publicly available for users of ĐTools</summary>
	<remarks>
 Only calls to <see cref="N:Tools.My.Resources"/> are allowed here;
 only properties are allowed here;
 because properties shouldn't be decorated with AuthorAttribute and VersionAttribute, it is not necessary to use these attribute here
 </remarks>
</member><member name="M:Tools.TextT.Misc.MTrim(System.String,System.Boolean)">
	<summary>Normalizes all whitespaces in given <see cref="T:System.String"/></summary>
	<param name="Str"><see cref="T:System.String"/> to normalize</param>
	<param name="KeepType">True to keep type of whitespace (Endline, Tab, Space; first in group is used) or False to replace all whitespaces with spaces</param>
	<returns><see cref="T:System.String"/> with removed white characters at the beginning and at the end and reduced all groups of whitespaces to one white space</returns>
</member><member name="T:Tools.TextT.Misc">
	<summary>Miscaleneous text tools</summary>
</member><member name="F:Tools.WindowsT.FormsT.KeyWordsEditor._AutoCompleteCacheName">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteCacheName"/> property</summary>
</member><member name="F:Tools.WindowsT.FormsT.KeyWordsEditor.AutocompleteCache">
	<summary>Autocomplete chache shared across instances with same <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteCacheName"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.KeyWordsEditor._Synonyms">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Synonyms"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.Synonyms">
	<summary>Gets or sets synonyms configuration</summary>
	<remarks><para>Synonyms configuration is such that its list of pairs of arrays. Key array contain words one of which is added than also all key-array words are added and all value-array words are added to</para>
		<para>If this property is null then synonym capability of <see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/> is turned off</para></remarks>
</member><member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteCacheName">
	<summary>Name of per-session cache of keywords used by this instance</summary>
	<value>An enmpty <see cref="T:System.String"/> to use no temporary chache</value>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.RemoveHandlers">
	<summary>Removes handlers for temporary chache</summary>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.AddHandlers">
	<summary>Adds handlers to temporary cache</summary>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.Autocomplete_Added(Tools.CollectionsT.GenericT.ListWithEvents{System.String},Tools.CollectionsT.GenericT.ListWithEvents{System.String}.ItemIndexEventArgs)">
	<summary>Handles adding item to either autocomplete source</summary>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.Autocomplete_Changed(Tools.CollectionsT.GenericT.ListWithEvents{System.String},Tools.CollectionsT.GenericT.ListWithEvents{System.String}.OldNewItemEvetArgs)">
	<summary>Handles change of item value in either autocomplete source</summary>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.InAnyList(System.String)">
	<summary>Determines if autocomplete item is in one of autocomplete sources</summary>
	<param name="What">Item to search for</param>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.InOtherList(System.String,Tools.CollectionsT.GenericT.ListWithEvents{System.String})">
	<summary>Determines if item is member of autocomplete source other than given</summary>
	<param name="What">Item to search for</param>
	<param name="List">Autocomplete source not to search in</param>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.Autocomplete_Removed(Tools.CollectionsT.GenericT.ListWithEvents{System.String},Tools.CollectionsT.GenericT.ListWithEvents{System.String}.ItemIndexEventArgs)">
	<summary>Hanldes removal of single item from either auto complete source</summary>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.Autocomplete_Cleared(Tools.CollectionsT.GenericT.ListWithEvents{System.String},Tools.CollectionsT.GenericT.ListWithEvents{System.String}.ItemsEventArgs)">
	<summary>Hanles clearing of either auto complete source</summary>
</member><member name="F:Tools.WindowsT.FormsT.KeyWordsEditor._AutoCompleteStable">
	<summary>contains value of the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteStable"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteStable">
	<summary>Permanent autocomplete source</summary>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.TmiEnabled">
	<summary>Enables/disbaled ans shows/hides items of <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.cmsThesaurus"/> according to values of <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteCacheName"/> and <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteStable"/></summary>
</member><member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.InstanceAutoCompleteChache">
	<summary>Gets autocomplete chache used by this instance (if any)</summary>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.OnThesaurusClick(System.EventArgs)">
	<summary>Called when theasursu button is clicked. Shows thesaurus menu (if applicable)</summary>
</member><member name="F:Tools.WindowsT.FormsT.KeyWordsEditor._CaseSensitive">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.CaseSensitive"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.CaseSensitive">
	<summary>Gets or sets value idicating if keywords are case sensitive</summary>
</member><member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.StatusState">
	<summary>Gets or sets state of <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Status"/></summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState"/></exception>
</member><member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.Status">
	<summary><see cref="T:Tools.WindowsT.FormsT.StatusMarker"/> present on this control</summary>
</member><member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.ThesaurusButtonState">
	<summary>Gets or sets state of thesaurus button</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState"/></exception>
</member><member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.MergeButtonState">
	<summary>Gets or sets state of merge button</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState"/></exception>
</member><member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.Merge">
	<summary>Gets or sets value indicating if merge button is checked (orange) or not (gray)</summary>
</member><member name="E:Tools.WindowsT.FormsT.KeyWordsEditor.MergeChanged">
	<summary>Raised after value of the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Merge"/> property changes</summary>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.OnMergeChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.KeyWordsEditor.MergeChanged"/> event</summary>
	<param name="e">Event params</param>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.OnTextChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:System.Windows.Forms.UserControl.TextChanged"/> event</summary>
	<param name="e">Event params</param>
	<remarks>Note for inheritors. If you want to keep <see cref="P:System.Windows.Forms.UserControl.Text"/> and <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.txtEdit">txtEdit</see>.<see cref="P:System.Windows.Forms.TextBox.Text">Text</see>, call base class method or sync them by your own</remarks>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.CSCompare(System.String,System.String)">
	<summary>Compares two <see cref="T:System.String">Strings</see> in way determined by the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.CaseSensitive"/> property</summary>
	<param name="Str1"><see cref="T:System.String"/> to compare</param>
	<param name="Str2"><see cref="T:System.String"/> to compare</param>
	<returns>True if parameters match; false otherwise</returns>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.AddKeyword">
	<summary>Adds keyword from <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.txtEdit"/> into <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.lstKW"/> (it it is not there) and to <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.InstanceAutoCompleteChache"/> is it is not there and if it is not null</summary>
	<remarks>Also synonyms of that word are added to list</remarks>
</member><member name="E:Tools.WindowsT.FormsT.KeyWordsEditor.KeywordAdded">
	<summary>Raised when user adds keyword</summary>
	<remarks>Not raised when keyword is added programatically</remarks>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.OnKeywordAdded(Tools.CollectionsT.GenericT.ListWithEvents{System.String}.ItemEventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.KeyWordsEditor.KeywordAdded"/> event</summary>
	<param name="e">event parameters</param>
</member><member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.KeyWords">
	<summary>List of keywords currenly in list</summary>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.RemoveSelectedItems">
	<summary>Deletes selected items from <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.lstKW"/></summary>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.OnKeyWordRemoved(Tools.CollectionsT.GenericT.ListWithEvents{System.String}.ItemsEventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.KeyWordsEditor.KeyWordRemoved"/> event</summary>
	<param name="e">Event params</param>
</member><member name="E:Tools.WindowsT.FormsT.KeyWordsEditor.KeyWordRemoved">
	<summary>Raised after user manually removes keyword(s)</summary>
	<remarks>Not raised when keywords are removed programatically</remarks>
</member><member name="F:Tools.WindowsT.FormsT.KeyWordsEditor._AutoChange">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoChange"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoChange">
	<summary>Gets or sets value indicating if <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Status">Status</see>.<see cref="P:Tools.WindowsT.FormsT.StatusMarker.Status">Status</see> automatically changes when keyword is added or removed</summary>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.GetSynonymIndexes(System.String)">
	<summary>Gets indexes to <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Synonyms"/> where synonyms of given word are stored in </summary>
	<param name="Word">Word to search for synonyms of</param>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.GetSynonyms(System.String)">
	<summary>Gets all synonyms of given word including it</summary>
	<param name="Word">Word to get synonyms for</param>
	<returns>Synonyms of <paramref name="Word"/> (avoiding duplicates). When no synonyms are found <paramref name="Word"/> itself is returned</returns>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.CSCompareI(System.String,System.String)">
	<summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
	<param name="y">The second object to compare.</param>
	<param name="x">The first object to compare.</param>
	<returns>Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.</returns>
</member><member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.ShowDialog">
	<summary>Shows forms tprovides dialog for editing settings for this instance</summary>
</member><member name="T:Tools.WindowsT.FormsT.KeyWordsEditor">
	<summary>Control that allows eas and very sophisticated editing of set of keywords</summary>
	<remarks>There is a list of known keywords (which can be adited by user and persisted). Synonyms of keywords can be defined and added automatically in list.</remarks>
</member><member name="P:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.DisplayMember">
	<summary>Gets or sets the property to display for <see cref="P:System.Windows.Forms.ToolStripComboBox.ComboBox"/>.</summary>
	<returns>A <see cref="T:System.String"/> specifying the name of an object property that is contained in the collection specified by the <see cref="P:System.Windows.Forms.ListControl.DataSource"/> property. The default is an empty string ("").</returns>
</member><member name="P:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.ValueMember">
	<summary>Gets or sets the property to use as the actual value for the items in <see cref="P:System.Windows.Forms.ToolStripComboBox.ComboBox"/>.</summary>
	<returns>A <see cref="T:System.String"/> representing the name of an object property that is contained in the collection specified by the <see cref="P:System.Windows.Forms.ListControl.DataSource"/> property. The default is an empty string ("").</returns>
	<exception cref="T:System.ArgumentException">The specified property cannot be found on the object specified by the <see cref="P:System.Windows.Forms.ListControl.DataSource"/> property.</exception>
</member><member name="P:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.DataSource">
	<summary>Gets or sets the data source for <see cref="P:System.Windows.Forms.ToolStripComboBox.ComboBox"/>.</summary>
	<returns>An object that implements the <see cref="T:System.Collections.IList"/> interface, such as a <see cref="T:System.Data.DataSet"/> or an <see cref="T:System.Array"/>. The default is null.</returns>
</member><member name="P:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.SelectedIndex">
	<summary>Gets or sets the index specifying the currently selected item.</summary>
	<returns>A zero-based index of the currently selected item. A value of negative one (-1) is returned if no item is selected.</returns>
</member><member name="P:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.SelectedValue">
	<summary>Gets or sets the value of the member property specified by the <see cref="P:System.Windows.Forms.ListControl.ValueMember"/> property.</summary>
	<returns>An object containing the value of the member of the data source specified by the <see cref="P:System.Windows.Forms.ListControl.ValueMember"/> property.</returns>
	<exception cref="T:System.InvalidOperationException">The assigned value is null or the empty string ("").</exception>
</member><member name="P:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.DataBindings">
	<summary>Gets the data bindings for the control.</summary>
	<returns>A <see cref="T:System.Windows.Forms.ControlBindingsCollection"/> that contains the <see cref="T:System.Windows.Forms.Binding"/> objects for the control.</returns>
</member><member name="P:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.BindingContext">
	<summary>Gets or sets the <see cref="T:System.Windows.Forms.BindingContext"/> for the control.</summary>
	<returns>A <see cref="T:System.Windows.Forms.BindingContext"/> for the control.</returns>
</member><member name="M:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.OnBindingContextChanged(System.Object,System.EventArgs)">
	<summary>Called when <see cref="E:System.Windows.Forms.Control.BindingContextChanged"/> of <see cref="P:System.Windows.Forms.ToolStripComboBox.ComboBox"/> occures</summary>
	<param name="sender">Source of event (always <see cref="P:System.Windows.Forms.ToolStripComboBox.ComboBox"/></param>
	<param name="e">Event parameters</param>
</member><member name="M:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.OnBindingContextChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.BindingContextChanged"/> event</summary>
	<param name="e">Event parameters</param>
	<remarks>Note for inheritors: Always call base class's method in order event to be raised</remarks>
</member><member name="E:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.BindingContextChanged">
	<summary>Fired when <see cref="E:System.Windows.Forms.Control.BindingContextChanged"/> of <see cref="P:System.Windows.Forms.ToolStripComboBox.ComboBox"/> occures</summary>
	<param name="sender">Source of the event - rhis isntance of <see cref="T:Tools.WindowsT.FormsT.DataBoundToolStripComboBox"/></param>
	<param name="e">Event parameters</param>
</member><member name="T:Tools.WindowsT.FormsT.DataBoundToolStripComboBox">
	<summary><see cref="T:System.Windows.Forms.ToolStripComboBox"/> that allows databinding</summary>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.#ctor">
	<summary>Private in order not to pe possible to create instance or inherit from this class</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Accessibility">
	<summary>The Accessibility category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Action">
	<summary>The Action category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Appearance">
	<summary>The Appearance category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Asynchronous">
	<summary>The Asynchronous category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Behavior">
	<summary>The Behavior category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Configurations">
	<summary>The Configurations category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Data">
	<summary>The Data category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.DDE">
	<summary>The DDE category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Misc">
	<summary>The Misc category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Design">
	<summary>The Design category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.DragDrop">
	<summary>The DragDrop category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Focus">
	<summary>The Focus category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Font">
	<summary>The Font category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Format">
	<summary>The Format category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Key">
	<summary>The Key category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Layout">
	<summary>The Layout category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.List">
	<summary>The List category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Mouse">
	<summary>The Mouse category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Position">
	<summary>The Position category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Scale">
	<summary>The Scale category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Text">
	<summary>The Text category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.WindowStyle">
	<summary>The Window Style category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Colors">
	<summary>The Colors category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Display">
	<summary>The Display category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.FolderBrowsing">
	<summary>The Folder Browsing category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Items">
	<summary>The Items category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Private">
	<summary>The Private category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.PropertyChanged">
	<summary>The Property Chenged category</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value.Value">
	<summary>Name of category this instance represents</summary>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value.op_Implicit(System.String)~Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value">
	<summary>Converts <see cref="T:System.String"/> to <see cref="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value.Value"/></summary>
	<param name="a">A <see cref="T:System.String"/></param>
	<returns>New <see cref="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value.Value"/> whichs <see cref="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value.Value"/> is <paramref name="a"/></returns>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value.op_Implicit(Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value)~System.String">
	<summary>Converts <see cref="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value.Value"/> to <see cref="T:System.String"/></summary>
	<param name="a">A <see cref="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value.Value"/></param>
	<returns><paramref name="a"/>.<see cref="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value.Value">Value</see></returns>
</member><member name="T:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value">
	<summary>Represents known value of <see cref="T:System.ComponentModel.CategoryAttribute"/> as defined in <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues"/></summary>
	<remarks>This structure is only hint for intellisense</remarks>
	<completionlist cref="T:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues"/>
</member><member name="T:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues">
	<summary>Common values used for <see cref="T:System.ComponentModel.CategoryAttribute"/></summary>
	<remarks>
		<para>This class contains values that when used for <see cref="T:System.ComponentModel.CategoryAttribute"/> are recognized by the .NET Framework and localized to current language.</para>
		<para>You can pass these constans either directly into <see cref="T:System.ComponentModel.CategoryAttribute"/> or you can use <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute"/>'s overloaded CTor that have better intellisense support.</para>
	</remarks>
</member><member name="M:Tools.ComponentModelT.ObjectStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
	<summary>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
	<returns>true if this converter can perform the conversion; otherwise, false.</returns>
</member><member name="M:Tools.ComponentModelT.ObjectStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
	<summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
	<param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="value">The <see cref="T:System.Object"/> to convert.</param>
	<returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
	<exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
</member><member name="T:Tools.ComponentModelT.ObjectStringConverter">
	<summary>Allows editing <see cref="T:System.Object"/> as <see cref="T:System.String"/> in <see cref="T:System.Windows.Forms.PropertyGrid"/></summary>
</member><member name="P:Tools.DataStructuresT.GenericT.IPair`2.Value1">
	<summary>Value of type <see cref="T1"/></summary>
</member><member name="P:Tools.DataStructuresT.GenericT.IPair`2.Value2">
	<summary>Value of type <see cref="T2"/></summary>
</member><member name="M:Tools.DataStructuresT.GenericT.IPair`2.Swap">
	<summary>Swaps values <see cref="P:Tools.DataStructuresT.GenericT.IPair`2.Value1"/> and <see cref="P:Tools.DataStructuresT.GenericT.IPair`2.Value2"/></summary>
</member><member name="T:Tools.DataStructuresT.GenericT.IPair`2">
	<summary>Type tha contains value of two distinct types</summary>
	<typeparam name="T1">Type of first value</typeparam>
	<typeparam name="T2">Type of second value</typeparam>
</member><member name="F:Tools.DataStructuresT.GenericT.Pair`2._Value1">
	<summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Pair`2.Value1"/> property</summary>
</member><member name="F:Tools.DataStructuresT.GenericT.Pair`2._Value2">
	<summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Pair`2.Value2"/> property</summary>
</member><member name="M:Tools.DataStructuresT.GenericT.Pair`2.#ctor(`0,`1)">
	<summary>CTor - initialize with two values</summary>
	<param name="V1">Initial value for <see cref="P:Tools.DataStructuresT.GenericT.Pair`2.Value1"/></param>
	<param name="V2">Initial value for <see cref="P:Tools.DataStructuresT.GenericT.Pair`2.Value2"/></param>
</member><member name="M:Tools.DataStructuresT.GenericT.Pair`2.#ctor(Tools.DataStructuresT.GenericT.IPair{`0,`1})">
	<summary>CTor - initialize with another instance of <see cref="T:Tools.DataStructuresT.GenericT.IPair`2"/></summary>
	<param name="a">Instance to initialize new istance</param>
</member><member name="M:Tools.DataStructuresT.GenericT.Pair`2.Clone1">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="M:Tools.DataStructuresT.GenericT.Pair`2.Swap">
	<summary>Swaps values <see cref="P:Tools.DataStructuresT.GenericT.Pair`2.Value1"/> and <see cref="P:Tools.DataStructuresT.GenericT.Pair`2.Value2"/></summary>
</member><member name="P:Tools.DataStructuresT.GenericT.Pair`2.Value1">
	<summary>Value of type <see cref="T1"/></summary>
</member><member name="P:Tools.DataStructuresT.GenericT.Pair`2.Value2">
	<summary>Value of type <see cref="T2"/></summary>
</member><member name="M:Tools.DataStructuresT.GenericT.Pair`2.Clone">
	<summary>Returns new instance of <see cref="T:Tools.DataStructuresT.GenericT.IPair`2"/> initialized with current instance</summary>
	<returns>New instance of <see cref="T:Tools.DataStructuresT.GenericT.IPair`2"/> initialized with current instance if either <see cref="T1"/> or <see cref="T2"/> implements <see cref="T:Tools.ICloneable`1"/> then they are also cloned via <see cref="M:Tools.ICloneable`1.Clone"/></returns>
</member><member name="M:Tools.DataStructuresT.GenericT.Pair`2.op_Implicit(Tools.DataStructuresT.GenericT.Pair{`0,`1})~System.Collections.Generic.KeyValuePair{`0,`1}">
	<summary>Converts <see cref="T:Tools.DataStructuresT.GenericT.Pair`2"/> into <see cref="T:System.Collections.Generic.KeyValuePair`2"/></summary>
	<param name="a">Value to be converted</param>
	<returns>Converted <paramref name="a"/></returns>
</member><member name="M:Tools.DataStructuresT.GenericT.Pair`2.op_Implicit(System.Collections.Generic.KeyValuePair{`0,`1})~Tools.DataStructuresT.GenericT.Pair{`0,`1}">
	<summary>Converts <see cref="T:System.Collections.Generic.KeyValuePair`2"/> into <see cref="T:Tools.DataStructuresT.GenericT.Pair`2"/></summary>
	<param name="a">Value to be converted</param>
	<returns>Converted <paramref name="a"/></returns>
</member><member name="T:Tools.DataStructuresT.GenericT.Pair`2">
	<summary>Implements <see cref="T:Tools.DataStructuresT.GenericT.IPair`2"/> as reference type</summary>
	<typeparam name="T1">Type of Value1</typeparam>
	<typeparam name="T2">Type of Value2</typeparam>
</member><member name="M:Tools.DataStructuresT.GenericT.Pair`1.#ctor(`0,`0)">
	<summary>CTor - initialize with two values</summary>
	<param name="V1">Initial value for <see cref="P:Tools.DataStructuresT.GenericT.Pair`2.Value1"/></param>
	<param name="V2">Initial value for <see cref="P:Tools.DataStructuresT.GenericT.Pair`2.Value2"/></param>
</member><member name="M:Tools.DataStructuresT.GenericT.Pair`1.#ctor(Tools.DataStructuresT.GenericT.IPair{`0,`0})">
	<summary>CTor - initialize with another instance of <see cref="T:Tools.DataStructuresT.GenericT.IPair`2"/></summary>
	<param name="a">Instance to initialize new istance</param>
</member><member name="M:Tools.DataStructuresT.GenericT.Pair`1.Clone">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="T:Tools.DataStructuresT.GenericT.Pair`1">
	<summary>Limits <see cref="T:Tools.DataStructuresT.GenericT.Pair`2"/> to contain only values of the same type</summary>
</member><member name="M:Tools.DrawingT.DesignT.EmbededFileEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.</summary>
	<returns><see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/></returns>
</member><member name="M:Tools.DrawingT.DesignT.EmbededFileEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
	<summary>Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
	<param name="value">The object to edit.</param>
	<param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
	<returns>Content of loaded file or <paramref name="value"/> if no file is loaded</returns>
</member><member name="F:Tools.DrawingT.DesignT.EmbededFileEditor.Context">
	<summary>The context parameter of <see cref="M:Tools.DrawingT.DesignT.EmbededFileEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> used by <see cref="M:Tools.DrawingT.DesignT.EmbededFileEditor.Lst_Click(System.Object,System.EventArgs)"/></summary>
</member><member name="F:Tools.DrawingT.DesignT.EmbededFileEditor.Service">
	<summary>service obtained from provider parameter of <see cref="M:Tools.DrawingT.DesignT.EmbededFileEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> used by <see cref="M:Tools.DrawingT.DesignT.EmbededFileEditor.Lst_Click(System.Object,System.EventArgs)"/></summary>
</member><member name="F:Tools.DrawingT.DesignT.EmbededFileEditor.Value">
	<summary>Property value is passed through this field between <see cref="M:Tools.DrawingT.DesignT.EmbededFileEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> and <see cref="M:Tools.DrawingT.DesignT.EmbededFileEditor.Lst_Click(System.Object,System.EventArgs)"/></summary>
</member><member name="M:Tools.DrawingT.DesignT.EmbededFileEditor.Lst_Click(System.Object,System.EventArgs)">
	<summary>Invoked when <see cref="T:System.Windows.Forms.ListBox"/> that provided drop-down UI is clicked</summary>
	<param name="sender">The <see cref="T:System.Windows.Forms.ListBox"/></param>
	<param name="e">Event params</param>
</member><member name="T:Tools.DrawingT.DesignT.EmbededFileEditor">
	<summary><see cref="T:Tools.DrawingT.DesignT.UITypeEditor`1"/> of <see cref="T:System.Byte"/> capable to save bytes info file and load them from it</summary>
</member><member name="M:Tools.DrawingT.DesignT.EmbededImageEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.</summary>
	<returns><see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/></returns>
</member><member name="M:Tools.DrawingT.DesignT.EmbededImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
	<summary>Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
	<param name="value">The object to edit.</param>
	<param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
	<returns>Content of loaded file or <paramref name="value"/> if no file is loaded</returns>
</member><member name="F:Tools.DrawingT.DesignT.EmbededImageEditor.Context">
	<summary>The context parameter of <see cref="M:Tools.DrawingT.DesignT.EmbededImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> used by <see cref="M:Tools.DrawingT.DesignT.EmbededImageEditor.Lst_Click(System.Object,System.EventArgs)"/></summary>
</member><member name="F:Tools.DrawingT.DesignT.EmbededImageEditor.Service">
	<summary>service obtained from provider parameter of <see cref="M:Tools.DrawingT.DesignT.EmbededImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> used by <see cref="M:Tools.DrawingT.DesignT.EmbededImageEditor.Lst_Click(System.Object,System.EventArgs)"/></summary>
</member><member name="F:Tools.DrawingT.DesignT.EmbededImageEditor.Value">
	<summary>Property value is passed through this field between <see cref="M:Tools.DrawingT.DesignT.EmbededImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> and <see cref="M:Tools.DrawingT.DesignT.EmbededImageEditor.Lst_Click(System.Object,System.EventArgs)"/></summary>
</member><member name="M:Tools.DrawingT.DesignT.EmbededImageEditor.Lst_Click(System.Object,System.EventArgs)">
	<summary>Invoked when <see cref="T:System.Windows.Forms.ListBox"/> that provided drop-down UI is clicked</summary>
	<param name="sender">The <see cref="T:System.Windows.Forms.ListBox"/></param>
	<param name="e">Event params</param>
</member><member name="T:Tools.DrawingT.DesignT.EmbededImageEditor">
	<summary><see cref="T:Tools.DrawingT.DesignT.UITypeEditor`1"/> of <see cref="T:System.Byte"/> capable to save and load image</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.RecordNumbers.Envelope">
	<summary>Contains internal IPTC data used formerly in telecommunications. Now it is considered being deprecated and is not widely in use.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.RecordNumbers.Application">
	<summary>This record contain informative data about content. Whole record is optional, but when any tag is used then mandatory tags are mandatory.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.RecordNumbers.PreObjectDataDescriptorRecord">
	<summary>Information about ObjectData (before object has been sent)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.RecordNumbers.ObjectDataRecord">
	<summary>Contains embeded object</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.RecordNumbers.PostObjectDataDescriptorRecord">
	<summary>Confirmation of size of ObjectData</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.RecordNumbers">
	<summary>Numbers of IPTC records (groups of tags)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags.ModelVersion">
	<summary>A number identifying the version of the Information Interchange Model, Part I, utilised by the provider.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ModelVersion"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags.Destination">
	<summary>This DataSet is to accommodate some providers who require routing information above the appropriate OSI layers.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Destination"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags.FileFormat">
	<summary>A number representing the file format.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.FileFormat"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags.FileFormatVersion">
	<summary>A binary number representing the particular version of the <see cref="F:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags.FileFormat"/></summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.FileFormatVersion"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags.ServiceIdentifier">
	<summary>Identifies the provider and product.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ServiceIdentifier"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags.EnvelopeNumber">
	<summary>The characters form a number that will be unique for the date specified in <see cref="F:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags.DateSent"/> and for the Service Identifier specified in <see cref="F:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags.ServiceIdentifier"/>.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.EnvelopeNumber"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags.ProductID">
	<summary>Allows a provider to identify subsets of its overall service.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ProductID"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags.EnvelopePriority">
	<summary>Specifies the envelope handling priority and not the editorial urgency (see 2:10, <see cref="P:Tools.DrawingT.MetadataT.IPTC.Urgency"/>).</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.EnvelopePriority"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags.DateSent">
	<summary>Indicates year, month and day the service sent the material.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.DateSent"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags.TimeSent">
	<summary>This is the time the service sent the material.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.TimeSent"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags.CodedCharacterSet">
	<summary>Array of bytes consisting of one or more control functions used for the announcement, invocation or designation of coded character sets. The control functions follow the ISO 2022 standard and may consist of the escape control character and one or more graphic characters. For more details see Appendix C, the IPTC-NAA Code Library.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.CodedCharacterSet"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags.UNO">
	<summary>UNO Unique Name of Object, providing eternal, globally unique identification for objects as specified in the IIM, independent of provider and for any media form.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.UNO"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags.ARMIdentifier">
	<summary>The DataSet identifies the Abstract Relationship Method (ARM) which is described in a document registered by the originator of the ARM with the IPTC and NAA.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ARMIdentifier"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags.ARMVersion">
	<summary>A number representing the particular version of the ARM specified in DataSet <see cref="F:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags.ARMIdentifier"/>.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ARMVersion"/> for more info.</remarks>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags">
	<summary>Numbers of data sets (tags) inside record <see cref="F:Tools.DrawingT.MetadataT.IPTC.RecordNumbers.Envelope"/> (1)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.RecordVersion">
	<summary>A number identifying the version of the Information Interchange Model, Part II (Record 2:xx), utilised by the provider.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.RecordVersion"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ObjectTypeReference">
	<summary>The Object Type is used to distinguish between different types of objects within the IIM.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ObjectTypeReference"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ObjectAttributeReference">
	<summary>The Object Attribute defines the nature of the object independent of the Subject.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ObjectAttributeReference"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ObjectName">
	<summary>Used as a shorthand reference for the object. Changes to existing data, such as updated stories or new crops on photos, should be identified in Edit Status.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ObjectName"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.EditStatus">
	<summary>Status of the objectdata, according to the practice of the provider.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.EditStatus"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.EditorialUpdate">
	<summary>Indicates the type of update that this object provides to a previous object. The link to the previous object is made using the ARM (DataSets 1:120 and 1:122 (<see cref="P:Tools.DrawingT.MetadataT.IPTC.ARM"/>)), according to the practices of the provider.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.EditorialUpdate"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.Urgency">
	<summary>Specifies the editorial urgency of content and not necessarily the envelope handling priority (see 1:60, <see cref="P:Tools.DrawingT.MetadataT.IPTC.EnvelopePriority"/>).</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Urgency"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.SubjectReference">
	<summary>The Subject Reference is a structured definition of the subject matter.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.SubjectReference"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.Category">
	<summary>Identifies the subject of the objectdata in the opinion of the provider.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Category"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.SupplementalCategory">
	<summary>Supplemental categories further refine the subject of an objectdata.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.SupplementalCategory"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.FixtureIdentifier">
	<summary>Identifies objectdata that recurs often and predictably.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.FixtureIdentifier"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.Keywords">
	<summary>Used to indicate specific information retrieval words.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Keywords"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ContentLocationCode">
	<summary>Indicates the code of a country/geographical location referenced by the content of the object.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ContentLocationCode"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ContentLocationName">
	<summary>Provides a full, publishable name of a country/geographical location referenced by the content of the object, according to guidelines of the provider.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ContentLocationName"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ReleaseDate">
	<summary>The earliest date the provider intends the object to be used.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ReleaseDate"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ReleaseTime">
	<summary>The earliest time the provider intends the object to be used.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ReleaseTime"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ExpirationDate">
	<summary>The latest date the provider or owner intends the objectdata to be used.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ExpirationDate"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ExpirationTime">
	<summary>The latest time the provider or owner intends the objectdata to be used.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ExpirationTime"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.SpecialInstructions">
	<summary>Other editorial instructions concerning the use of the objectdata, such as embargoes and warnings.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.SpecialInstructions"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ActionAdvised">
	<summary>Indicates the type of action that this object provides to a previous object.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ActionAdvised"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ReferenceService">
	<summary>Identifies the Service Identifier of a prior envelope to which the current object refers.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ReferenceService"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ReferenceDate">
	<summary>Identifies the date of a prior envelope to which the current object refers.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ReferenceDate"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ReferenceNumber">
	<summary>Identifies the Envelope Number of a prior envelope to which the current object refers.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ReferenceNumber"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.DateCreated">
	<summary>The date the intellectual content of the objectdata was created rather than the date of the creation of the physical representation.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.DateCreated"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.TimeCreated">
	<summary>The time the intellectual content of the objectdata current source material was created rather than the creation of the physical representation.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.TimeCreated"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.DigitalCreationDate">
	<summary>The date the digital representation of the objectdata was created.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.DigitalCreationDate"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.DigitalCreationTime">
	<summary>The time the digital representation of the objectdata was created.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.DigitalCreationTime"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.OriginatingProgram">
	<summary>Identifies the type of program used to originate the objectdata.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.OriginatingProgram"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ProgramVersion">
	<summary>Identifies the type of program used to originate the objectdata.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ProgramVersion"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ObjectCycle">
	<summary>Virtually only used in North America.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ObjectCycle"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ByLine">
	<summary>Contains name of the creator of the objectdata, e.g. writer, photographer or graphic artist.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ByLine"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ByLineTitle">
	<summary>A by-line title is the title of the creator or creators of an objectdata. Where used, a by-line title should follow the by-line it modifies.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ByLineTitle"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.City">
	<summary>Identifies city of objectdata origin according to guidelines established by the provider.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.City"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.SubLocation">
	<summary>Identifies the location within a city from which the objectdata originates, according to guidelines established by the provider.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.SubLocation"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ProvinceState">
	<summary>Identifies Province/State of origin according to guidelines established by the provider.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ProvinceState"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.CountryPrimaryLocationCode">
	<summary>Indicates the code of the country/primary location where the intellectual property of the objectdata was created, e.g. a photo was taken, an event occurred.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.CountryPrimaryLocationCode"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.CountryPrimaryLocationName">
	<summary>Provides full, publishable, name of the country/primary location where the intellectual property of the objectdata was created, according to guidelines of the provider.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.CountryPrimaryLocationName"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.OriginalTransmissionReference">
	<summary>A code representing the location of original transmission according to practices of the provider.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.OriginalTransmissionReference"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.Headline">
	<summary>A publishable entry providing a synopsis of the contents of the objectdata.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Headline"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.Credit">
	<summary>Identifies the provider of the objectdata, not necessarily the owner/creator.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Credit"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.Source">
	<summary>Identifies the original owner of the intellectual content of the objectdata.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Source"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.CopyrightNotice">
	<summary>Contains any necessary copyright notice.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.CopyrightNotice"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.Contact">
	<summary>Identifies the person or organisation which can provide further background information on the objectdata.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Contact"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.CaptionAbstract">
	<summary>A textual description of the objectdata, particularly used where the object is not text.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.CaptionAbstract"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.WriterEditor">
	<summary>Identification of the name of the person involved in the writing, editing or correcting the objectdata or caption/abstract.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.WriterEditor"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.RasterizedeCaption">
	<summary>Image width 460 pixels and image height 128 pixels. Scanning direction bottom to top, left to right.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.RasterizedeCaption"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ImageType">
	<summary>Image Type</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ImageType"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ImageOrientation">
	<summary>Indicates the layout of the image area.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ImageOrientation"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.LanguageIdentifier">
	<summary>Describes the major national language of the object, according to the 2-letter codes of ISO 639:1988.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.LanguageIdentifier"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.AudioType">
	<summary>Type of audio in objectdata</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.AudioType"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.AudioSamplingRate">
	<summary>Sampling rate, representing the sampling rate in hertz (Hz).</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.AudioSamplingRate"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.AudioSamplingResolution">
	<summary>The number of bits in each audio sample.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.AudioSamplingResolution"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.AudioDuration">
	<summary>The running time of an audio objectdata when played back at the speed at which it was recorded.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.AudioDuration"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.AudioOutcue">
	<summary>Identifies the content of the end of an audio objectdata, according to guidelines established by the provider.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.AudioOutcue"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ObjectDataPreviewFileFormat">
	<summary>The file format of the ObjectData Preview.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewFileFormat"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ObjectDataPreviewFileFormatVersion">
	<summary>The particular version of the ObjectData Preview File Format specified in <see cref="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ObjectDataPreviewFileFormat"/></summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewFileFormatVersion"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ApplicationTags.ObjectDataPreviewData">
	<summary>Maximum size of 256000 octets consisting of binary data.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewData"/> for more info.</remarks>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.ApplicationTags">
	<summary>Numbers of data sets (tags) inside record <see cref="F:Tools.DrawingT.MetadataT.IPTC.RecordNumbers.Application"/> (2)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.PreObjectDataDescriptorRecordTags.SizeMode">
	<summary>The octet is set to the binary value of '0' if the size of the objectdata is not known and is set to '1' if the size of the objectdata is known at the beginning of transfer.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.SizeMode"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.PreObjectDataDescriptorRecordTags.MaxSubfileSize">
	<summary>The maximum size for the following Subfile DataSet(s).</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.MaxSubfileSize"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.PreObjectDataDescriptorRecordTags.ObjectDataSizeAnnounced">
	<summary>A binary number representing the overall size of the objectdata, expressed in octets, not including tags, if that size is known when transfer commences.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ObjectDataSizeAnnounced"/> for more info.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.PreObjectDataDescriptorRecordTags.MaximumObjectDataSize">
	<summary>Used when objectdata size is not known, indicating the largest size, expressed in octets, that the objectdata can possibly have, not including tags.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.MaximumObjectDataSize"/> for more info.</remarks>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.PreObjectDataDescriptorRecordTags">
	<summary>Numbers of data sets (tags) inside record <see cref="F:Tools.DrawingT.MetadataT.IPTC.RecordNumbers.PreObjectDataDescriptorRecord"/> (7)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectDataRecordTags.Subfile">
	<summary>Subfile DataSet containing the objectdata itself.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.Subfile"/> for more info.</remarks>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.ObjectDataRecordTags">
	<summary>Numbers of data sets (tags) inside record <see cref="F:Tools.DrawingT.MetadataT.IPTC.RecordNumbers.ObjectDataRecord"/> (8)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.PostObjectDataDescriptorRecordTags.ConfirmedObjectDataSize">
	<summary>Total size of the objectdata, in octets, without tags.</summary>
	<remarks>See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.ConfirmedObjectDataSize"/> for more info.</remarks>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.PostObjectDataDescriptorRecordTags">
	<summary>Numbers of data sets (tags) inside record <see cref="F:Tools.DrawingT.MetadataT.IPTC.RecordNumbers.PostObjectDataDescriptorRecord"/> (9)</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.GetEnum(Tools.DrawingT.MetadataT.IPTC.RecordNumbers)">
	<summary>Gets Enum that contains list of tags for specific record (group of tags)</summary>
	<param name="Record">Number of record to get enum for</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of <paramref name="Record"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.RecordNumbers"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ModelVersion">
	<summary>A number identifying the version of the Information Interchange Model, Part I, utilised by the provider.</summary>
	<remarks>Version numbers are assigned by IPTC and NAA. The version number of this record is four (4).</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.Destination">
	<summary>This DataSet is to accommodate some providers who require routing information above the appropriate OSI layers.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.FileFormat">
	<summary>A number representing the file format.</summary>
	<remarks>The file format must be registered with IPTC or NAA with a unique number assigned to it (see Appendix A). The information is used to route the data to the appropriate system and to allow the receiving system to perform the appropriate actions thereto.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.FileFormatVersion">
	<summary>A binary number representing the particular version of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.FileFormat"/></summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ServiceIdentifier">
	<summary>Identifies the provider and product.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.EnvelopeNumber">
	<summary>The characters form a number that will be unique for the date specified in <see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.DateSent"/> and for the Service Identifier specified in <see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ServiceIdentifier"/>.</summary>
	<remarks>If identical envelope numbers appear with the same date and with the same Service Identifier, records 2-9 must be unchanged from the original. This is not intended to be a sequential serial number reception check.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ProductID">
	<summary>Allows a provider to identify subsets of its overall service.</summary>
	<remarks>Used to provide receiving organisation data on which to select, route, or otherwise handle data.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.EnvelopePriority">
	<summary>Specifies the envelope handling priority and not the editorial urgency (see 2:10, <see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.Urgency"/>).</summary>
	<remarks>'1' indicates the most urgent, '5' the normal urgency, and '8' the least urgent copy. The numeral '9' indicates a User Defined Priority. The numeral '0' is reserved for future use.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.DateSent">
	<summary>Indicates year, month and day the service sent the material.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.TimeSent">
	<summary>This is the time the service sent the material.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.CodedCharacterSet">
	<summary>Array of bytes consisting of one or more control functions used for the announcement, invocation or designation of coded character sets. The control functions follow the ISO 2022 standard and may consist of the escape control character and one or more graphic characters. For more details see Appendix C, the IPTC-NAA Code Library.</summary>
	<remarks>The control functions apply to character oriented DataSets in records 2-6. They also apply to record 8, unless the objectdata explicitly, or the File Format implicitly, defines character sets otherwise. If this DataSet contains the designation function for Unicode in UTF-8 then no other announcement, designation or invocation functions are permitted in this DataSet or in records 2-6. For all other character sets, one or more escape sequences are used: for the announcement of the code extension facilities used in the data which follows, for the initial designation of the G0, G1, G2 and G3 graphic character sets and for the initial invocation of the graphic set (7 bits) or the lefthand and the right-hand graphic set (8 bits) and for the initial invocation of the C0 (7 bits) or of the C0 and the C1 control character sets (8 bits). The announcement of the code extension facilities, if transmitted, must appear in this data set. Designation and invocation of graphic and control function sets (shifting) may be transmitted anywhere where the escape and the other necessary control characters are permitted. However, it is recommended to transmit in this DataSet an initial designation and invocation, i.e. to define all designations and the shift status currently in use by transmitting the appropriate escape sequences and locking-shift functions. If is omitted, the default for records 2-6 and 8 is ISO 646 IRV (7 bits) or ISO 4873 DV (8 bits). Record 1 shall always use ISO 646 IRV or ISO 4873 DV respectively. ECMA as the ISO Registration Authority for escape sequences maintains the International Register of Coded Character Sets to be used with escape sequences, a register of Codes and allocated standardised escape sequences, which are recognised by IPTC-NAA without further approval procedure. The registration procedure is defined in ISO 2375. IPTC-NAA maintain a Register of Codes and allocated private escape sequences, which are shown in paragraph 1.2. IPTC may, as Sponsoring Authority, submit such private sequence Codes for approval as standardised sequence Codes. The registers consist of a Graphic repertoire, a Control function repertoire and a Repertoire of other coding systems (e.g. complete Codes). Together they represent the IPTC-NAA Code Library. Graphic Repertoire94-character sets (intermediate character 2/8 to 2/11)002ISO 646 IRV 4/0004ISO 646 British Version 4/1006ISO 646 USA Version (ASCII) 4/2008-1NATS Primary Set for Finland and Sweden 4/3008-2NATS Secondary Set for Finland and Sweden 4/4009-1NATS Primary Set for Denmark and Norway 4/5009-2NATS Secondary Set for Denmark and Norway 4/6010ISO 646 Swedish Version (SEN 850200) 4/7015ISO 646 Italian Version (ECMA) 5/9016ISO 646 Portuguese Version (ECMA Olivetti) 4/12017ISO 646 Spanish Version (ECMA Olivetti) 5/10018ISO 646 Greek Version (ECMA) 5/11021ISO 646 German Version (DIN 66003) 4/11037Basic Cyrillic Character Set (ISO 5427) 4/14060ISO 646 Norwegian Version (NS 4551) 6/0069ISO 646 French Version (NF Z 62010-1982) 6/6084ISO 646 Portuguese Version (ECMA IBM) 6/7085ISO 646 Spanish Version (ECMA IBM) 6/8086ISO 646 Hungarian Version (HS 7795/3) 6/9121Alternate Primary Graphic Set No. 1 (Canada CSA Z 243.4-1985) 7/7122Alternate Primary Graphic Set No. 2 (Canada CSA Z 243.4-1985) 7/896-character sets (intermediate character 2/12 to 2/15):100Right-hand Part of Latin Alphabet No. 1 (ISO 8859-1) 4/1101Right-hand Part of Latin Alphabet No. 2 (ISO 8859-2) 4/2109Right-hand Part of Latin Alphabet No. 3 (ISO 8859-3) 4/3110Right-hand Part of Latin Alphabet No. 4 (ISO 8859-4) 4/4111Right-hand Part of Latin/Cyrillic Alphabet (ISO 8859-5) 4/0125Right-hand Part of Latin/Greek Alphabet (ISO 8859-7) 4/6127Right-hand Part of Latin/Arabic Alphabet (ISO 8859-6) 4/7138Right-hand Part of Latin/Hebrew Alphabet (ISO 8859-8) 4/8139Right-hand Part of Czechoslovak Standard (ČSN 369103) 4/9Multiple-Byte Graphic Character Sets (1st intermediate character 2/4, 2nd intermediate character 2/8 to 2/11)87Japanese characters (JIS X 0208-1983) 4/2Control Function RepertoireC0 Control Function Sets (intermediate character 2/1)001C0 Set of ISO 646 4/0026IPTC C0 Set for newspaper text transmission 4/3036C0 Set of ISO 646 with SS2 instead of IS4 4/4104Minimum C0 Set for ISO 4873 4/7 C1 Control Function Sets (intermediate character 2/2)077C1 Control Set of ISO 6429 4/3105Minimum C1 Set for ISO 4873 4/7 Single Additional Control Functions062Locking-Shift Two (LS2), ISO 2022 6/14063Locking-Shift Three (LS3), ISO 2022 6/15064Locking-Shift Three Right (LS3R), ISO 2022 7/12065Locking-Shift Two Right (LS2R), ISO 2022 7/13066Locking-Shift One Right (LS1R), ISO 2022 7/14Repertoire of Other Coding Systems (e.g. complete Codes, intermediate character 2/5 )196UCS Transformation Format (UTF-8) 4/7 --&gt;</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.UNO">
	<summary>UNO Unique Name of Object, providing eternal, globally unique identification for objects as specified in the IIM, independent of provider and for any media form.</summary>
	<remarks>The provider must ensure the UNO is unique. Objects with the same UNO are identical.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ARMIdentifier">
	<summary>The DataSet identifies the Abstract Relationship Method (ARM) which is described in a document registered by the originator of the ARM with the IPTC and NAA.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ARMVersion">
	<summary>A number representing the particular version of the ARM specified in DataSet <see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ARMIdentifier"/>.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.RecordVersion">
	<summary>A number identifying the version of the Information Interchange Model, Part II (Record 2:xx), utilised by the provider.</summary>
	<remarks>Version numbers are assigned by IPTC and NAA. The version number of this record is four (4).</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ObjectTypeReference">
	<summary>The Object Type is used to distinguish between different types of objects within the IIM.</summary>
	<remarks>The first part is a number representing a language independent international reference to an Object Type followed by a colon separator. The second part, if used, is a text representation of the Object Type Number (maximum 64 octets) consisting of graphic characters plus spaces either in English, as defined in Appendix G, or in the language of the service as indicated in DataSet 2:135 (<see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.LanguageIdentifier"/>)</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ObjectAttributeReference">
	<summary>The Object Attribute defines the nature of the object independent of the Subject.</summary>
	<remarks>The first part is a number representing a language independent international reference to an Object Attribute followed by a colon separator. The second part, if used, is a text representation of the Object Attribute Number ( maximum 64 octets) consisting of graphic characters plus spaces either in English, as defined in Appendix G, or in the language of the service as indicated in DataSet 2:135 (<see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.LanguageIdentifier"/>)</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ObjectName">
	<summary>Used as a shorthand reference for the object. Changes to existing data, such as updated stories or new crops on photos, should be identified in Edit Status.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.EditStatus">
	<summary>Status of the objectdata, according to the practice of the provider.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.EditorialUpdate">
	<summary>Indicates the type of update that this object provides to a previous object. The link to the previous object is made using the ARM (DataSets 1:120 and 1:122 (<see cref="P:Tools.DrawingT.MetadataT.IPTC.ARM"/>)), according to the practices of the provider.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.Urgency">
	<summary>Specifies the editorial urgency of content and not necessarily the envelope handling priority (see 1:60, <see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.EnvelopePriority"/>).</summary>
	<remarks>The '1' is most urgent, '5' normal and '8' denotes the least-urgent copy. The numerals '9' and '0' are reserved for future use.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.SubjectReference">
	<summary>The Subject Reference is a structured definition of the subject matter.</summary>
	<remarks>It must contain an IPR (default value is "IPTC"), an 8 digit Subject Reference Number and an optional Subject Name, Subject Matter Name and Subject Detail Name. Each part of the Subject reference is separated by a colon (:). The Subject Reference Number contains three parts, a 2 digit Subject Number, a 3 digit Subject Matter Number and a 3 digit Subject Detail Number thus providing unique identification of the object's subject.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.Category">
	<summary>Identifies the subject of the objectdata in the opinion of the provider.</summary>
	<remarks>A list of categories will be maintained by a regional registry, where available, otherwise by the provider.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.SupplementalCategory">
	<summary>Supplemental categories further refine the subject of an objectdata.</summary>
	<remarks>Only a single supplemental category may be contained in each DataSet. A supplemental category may include any of the recognised categories as used in . Otherwise, selection of supplemental categories are left to the provider.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.FixtureIdentifier">
	<summary>Identifies objectdata that recurs often and predictably.</summary>
	<remarks>Enables users to immediately find or recall such an object.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.Keywords">
	<summary>Used to indicate specific information retrieval words.</summary>
	<remarks>Each keyword uses a single Keywords DataSet. Multiple keywords use multiple Keywords DataSets. It is expected that a provider of various types of data that are related in subject matter uses the same keyword, enabling the receiving system or subsystems to search across all types of data for related material.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ContentLocationCode">
	<summary>Indicates the code of a country/geographical location referenced by the content of the object.</summary>
	<remarks>Where ISO has established an appropriate country code under ISO 3166, that code will be used. When ISO3166 does not adequately provide for identification of a location or a country, e.g. ships at sea, space, IPTC will assign an appropriate threecharacter code under the provisions of ISO3166 to avoid conflicts. (see Appendix D) .</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ContentLocationName">
	<summary>Provides a full, publishable name of a country/geographical location referenced by the content of the object, according to guidelines of the provider.</summary>
	<remarks>If used in the same object with DataSet , must immediately follow and correspond to it.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ReleaseDate">
	<summary>The earliest date the provider intends the object to be used.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ReleaseTime">
	<summary>The earliest time the provider intends the object to be used.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ExpirationDate">
	<summary>The latest date the provider or owner intends the objectdata to be used.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ExpirationTime">
	<summary>The latest time the provider or owner intends the objectdata to be used.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.SpecialInstructions">
	<summary>Other editorial instructions concerning the use of the objectdata, such as embargoes and warnings.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ActionAdvised">
	<summary>Indicates the type of action that this object provides to a previous object.</summary>
	<remarks>The link to the previous object is made using the (DataSets 1:120 () and 1:122 ()), according to the practices of the provider.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ReferenceService">
	<summary>Identifies the Service Identifier of a prior envelope to which the current object refers.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ReferenceDate">
	<summary>Identifies the date of a prior envelope to which the current object refers.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ReferenceNumber">
	<summary>Identifies the Envelope Number of a prior envelope to which the current object refers.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.DateCreated">
	<summary>The date the intellectual content of the objectdata was created rather than the date of the creation of the physical representation.</summary>
	<remarks>Thus a photo taken during the American Civil War would carry a creation date during that epoch (1861-1865) rather than the date the photo was digitised for archiving.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.TimeCreated">
	<summary>The time the intellectual content of the objectdata current source material was created rather than the creation of the physical representation.</summary>
	<remarks>Where the time cannot be precisely determined, the closest approximation should be used.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.DigitalCreationDate">
	<summary>The date the digital representation of the objectdata was created.</summary>
	<remarks>Thus a photo taken during the American Civil War would carry a Digital Creation Date within the past several years rather than the date where the image was captured on film, glass plate or other substrate during that epoch (1861-1865).</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.DigitalCreationTime">
	<summary>The time the digital representation of the objectdata was created.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.OriginatingProgram">
	<summary>Identifies the type of program used to originate the objectdata.</summary>
	<remarks>Note: This DataSet to form an advisory to the user and are not "computer" fields. Programmers should not expect to find computer-readable information in this DataSet.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ProgramVersion">
	<summary>Identifies the type of program used to originate the objectdata.</summary>
	<remarks>Note: This DataSet to form an advisory to the user and are not "computer" fields. Programmers should not expect to find computer-readable information in this DataSet.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ObjectCycle">
	<summary>Virtually only used in North America.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ByLine">
	<summary>Contains name of the creator of the objectdata, e.g. writer, photographer or graphic artist.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ByLineTitle">
	<summary>A by-line title is the title of the creator or creators of an objectdata. Where used, a by-line title should follow the by-line it modifies.</summary>
	<remarks>Examples: "Staff Photographer", "Corresponsal", "Envoyé Spécial"</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.City">
	<summary>Identifies city of objectdata origin according to guidelines established by the provider.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.SubLocation">
	<summary>Identifies the location within a city from which the objectdata originates, according to guidelines established by the provider.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ProvinceState">
	<summary>Identifies Province/State of origin according to guidelines established by the provider.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.CountryPrimaryLocationCode">
	<summary>Indicates the code of the country/primary location where the intellectual property of the objectdata was created, e.g. a photo was taken, an event occurred.</summary>
	<remarks>Where ISO has established an appropriate country code under ISO 3166, that code will be used. When ISO3166 does not adequately provide for identification of a location or a new country, e.g. ships at sea, space, IPTC will assign an appropriate three-character code under the provisions of ISO3166 to avoid conflicts. (see Appendix D)</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.CountryPrimaryLocationName">
	<summary>Provides full, publishable, name of the country/primary location where the intellectual property of the objectdata was created, according to guidelines of the provider.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.OriginalTransmissionReference">
	<summary>A code representing the location of original transmission according to practices of the provider.</summary>
	<remarks>Examples: BER-5, PAR-12-11-01</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.Headline">
	<summary>A publishable entry providing a synopsis of the contents of the objectdata.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.Credit">
	<summary>Identifies the provider of the objectdata, not necessarily the owner/creator.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.Source">
	<summary>Identifies the original owner of the intellectual content of the objectdata.</summary>
	<remarks>This could be an agency, a member of an agency or an individual.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.CopyrightNotice">
	<summary>Contains any necessary copyright notice.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.Contact">
	<summary>Identifies the person or organisation which can provide further background information on the objectdata.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.CaptionAbstract">
	<summary>A textual description of the objectdata, particularly used where the object is not text.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.WriterEditor">
	<summary>Identification of the name of the person involved in the writing, editing or correcting the objectdata or caption/abstract.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.RasterizedeCaption">
	<summary>Image width 460 pixels and image height 128 pixels. Scanning direction bottom to top, left to right.</summary>
	<remarks>Contains the rasterized objectdata description and is used where characters that have not been coded are required for the caption.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ImageType">
	<summary>Image Type</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ImageOrientation">
	<summary>Indicates the layout of the image area.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.LanguageIdentifier">
	<summary>Describes the major national language of the object, according to the 2-letter codes of ISO 639:1988.</summary>
	<remarks>Does not define or imply any coded character set, but is used for internal routing, e.g. to various editorial desks. Implementation note: Programmers should provide for three octets for Language Identifier because the ISO is expected to provide for 3-letter codes in the future.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.AudioType">
	<summary>Type of audio in objectdata</summary>
	<remarks>Note: When '0' or 'T' is used, the only authorised combination is "0T". This is the mechanism for sending a caption either to supplement an audio cut sent previously without a caption or to correct a previously sent caption.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.AudioSamplingRate">
	<summary>Sampling rate, representing the sampling rate in hertz (Hz).</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.AudioSamplingResolution">
	<summary>The number of bits in each audio sample.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.AudioDuration">
	<summary>The running time of an audio objectdata when played back at the speed at which it was recorded.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.AudioOutcue">
	<summary>Identifies the content of the end of an audio objectdata, according to guidelines established by the provider.</summary>
	<remarks>The outcue generally consists of the final words spoken within an audio objectdata or the final sounds heard.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ObjectDataPreviewFileFormat">
	<summary>The file format of the ObjectData Preview.</summary>
	<remarks>The file format must be registered with IPTC or NAA with a unique number assigned to it.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ObjectDataPreviewFileFormatVersion">
	<summary>The particular version of the ObjectData Preview File Format specified in <see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ObjectDataPreviewFileFormat"/></summary>
	<remarks>The File Format Version is taken from the list included in Appendix A</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ObjectDataPreviewData">
	<summary>Maximum size of 256000 octets consisting of binary data.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.SizeMode">
	<summary>The octet is set to the binary value of '0' if the size of the objectdata is not known and is set to '1' if the size of the objectdata is known at the beginning of transfer.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.MaxSubfileSize">
	<summary>The maximum size for the following Subfile DataSet(s).</summary>
	<remarks>The largest number is not defined, but programmers should provide at least for the largest binary number contained in four octets taken together. If the entire object is to be transferred together within a single DataSet 8:10, the number equals the size of the object.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ObjectDataSizeAnnounced">
	<summary>A binary number representing the overall size of the objectdata, expressed in octets, not including tags, if that size is known when transfer commences.</summary>
	<remarks>Mandatory if DataSet has value '1' and not allowed if DataSet has value '0'.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.MaximumObjectDataSize">
	<summary>Used when objectdata size is not known, indicating the largest size, expressed in octets, that the objectdata can possibly have, not including tags.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.Subfile">
	<summary>Subfile DataSet containing the objectdata itself.</summary>
	<remarks>Subfiles must be sequential so that the subfiles may be reassembled.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.ConfirmedObjectDataSize">
	<summary>Total size of the objectdata, in octets, without tags.</summary>
	<remarks>This number should equal the number in DataSet if the size of the objectdata is known and has been provided.</remarks>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.KnownDataSets(System.Boolean)">
	<summary>Returns all known data sets</summary>
	<param name="Hidden">Returns also datasets that are within groups</param>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.AdvisedActions.ObjectKill">
	<summary>Object Kill. Signifies that the provider wishes the holder of a copy of the referenced object make no further use of that information and take steps to prevent further distribution thereof.</summary>
	<remarks>Implies that any use of the object might result in embarrassment or other exposure of the provider and/or recipient.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.AdvisedActions.ObjectReplace">
	<summary>Object Replace. Signifies that the provider wants to replace the referenced object with the object provided under the current envelope.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.AdvisedActions.ObjectAppend">
	<summary>Object Append. Signifies that the provider wants to append to the referenced object information provided in the objectdata of the current envelope.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.AdvisedActions.ObjectReference">
	<summary>Object Reference. Signifies that the provider wants to make reference to objectdata in a different envelope.</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.AdvisedActions">
	<summary>Possible values of <see cref="P:Tools.DrawingT.MetadataT.IPTC.ActionAdvised"/></summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ARMMethods.IPTCMethod1">
	<summary>Using DataSets 2:45, 2:47 and 2:50 (<see cref="P:Tools.DrawingT.MetadataT.IPTC.ReferenceService"/>, <see cref="P:Tools.DrawingT.MetadataT.IPTC.ReferenceDate"/> and <see cref="P:Tools.DrawingT.MetadataT.IPTC.ReferenceNumber"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ARMMethods.IPTCMethod2">
	<summary>Using DataSet 1:100 (<see cref="P:Tools.DrawingT.MetadataT.IPTC.UNO"/>)</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.ARMMethods">
	<summary>Abstract Relation Methods Identifiers</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ARMVersions.ARM1">
	<summary>The only ARM version</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.ARMVersions">
	<summary>Abstract Relation Method Versions</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.ArableFarming">
	<summary>Arable Farming</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.FishingIndustry">
	<summary>Fishing Industry</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.ForestryAndTimber">
	<summary>Forestry &amp; Timber</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.LivestockFarming">
	<summary>Livestock Farming</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Biotechnology">
	<summary>Biotechnology</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Fertilisers">
	<summary>Fertilisers</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.HealthAndBeautyProducts">
	<summary>Health &amp; Beauty products</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.InorganicChemicals">
	<summary>Inorganic chemicals</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.OrganicChemicals">
	<summary>Organic chemicals</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Pharmaceuticals">
	<summary>Pharmaceuticals</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.SyntheticsAndPlastics">
	<summary>Synthetics &amp; Plastics</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Hardware">
	<summary>Hardware</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Networking">
	<summary>Networking</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.SatelliteTechnology">
	<summary>Satellite technology</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.SemiconductorsAndActiveComponents">
	<summary>Semiconductors &amp; active components</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Software">
	<summary>Software</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.TelecommunicationsEquipment">
	<summary>Telecommunications Equipment</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.TelecommunicationsServices">
	<summary>Telecommunications Services</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.HeavyConstruction">
	<summary>Heavy construction</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.HouseBuilding">
	<summary>House building</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.RealEstate">
	<summary>Real Estate</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.AlternativeEnergy">
	<summary>Alternative energy</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Coal">
	<summary>Coal</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.OilAndGasDownstreamActivities">
	<summary>Oil &amp; Gas - Downstream activities</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.OilAndGasUpstreamActivities">
	<summary>Oil &amp; Gas - Upstream activities</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.NuclearPower">
	<summary>Nuclear power</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.ElectricityProductionAndDistribution">
	<summary>Electricity Production &amp; Distribution</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.WasteManagementAndPollutionControl">
	<summary>Waste Management &amp; Pollution Control</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.WaterSupply">
	<summary>Water Supply</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.AccountancyAndAuditing">
	<summary>Accountancy &amp; Auditing</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Banking">
	<summary>Banking</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.ConsultancyServices">
	<summary>Consultancy Services</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.EmploymentAgencies">
	<summary>Employment Agencies</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.HealthcareProviders">
	<summary>Healthcare Providers</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Insurance">
	<summary>Insurance</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.LegalServices">
	<summary>Legal services</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.MarketResearch">
	<summary>Market research</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.StockBroking">
	<summary>Stock broking</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Clothing">
	<summary>Clothing</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.DepartmentStores">
	<summary>Department stores</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.FoodDistribution">
	<summary>Food</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.MailOrder">
	<summary>Mail Order</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Retail">
	<summary>Retail</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.SpecialityAtores">
	<summary>Speciality stores</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Wholesale">
	<summary>Wholesale</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.CentralBanks">
	<summary>Central Banks</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.ConsumerIssues">
	<summary>Consumer Issues</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.DebtMarkets">
	<summary>Debt Markets</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.EconomicIndicators">
	<summary>Economic Indicators</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.EmergingMarketsDebt">
	<summary>Emerging Markets Debt</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.ForeignExchangeMarkets">
	<summary>Foreign Exchange Markets</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.GovernmentAid">
	<summary>Government Aid</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.GovernmentDebt">
	<summary>Government Debt</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.InterestRates">
	<summary>Interest Rates</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.InternationalEconomicInstitutions">
	<summary>International Economic Institutions</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.InternationalTradeIssues">
	<summary>International Trade Issues</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.LoanMarkets">
	<summary>Loan Markets</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Energy">
	<summary>Energy</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Metals">
	<summary>Metals</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Securities">
	<summary>Securities</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.SoftCommodities">
	<summary>Soft Commodities</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Advertising">
	<summary>Advertising</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Books">
	<summary>Books</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Cinema">
	<summary>Cinema</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.NewsAgencies">
	<summary>News Agencies</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.NewspaperAndMagazines">
	<summary>Newspaper &amp; Magazines</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Online">
	<summary>Online</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.PublicRelations">
	<summary>Public Relations</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Radio">
	<summary>Radio</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.SatelliteAndCableServices">
	<summary>Satellite &amp; Cable Services</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Television">
	<summary>Television</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Aerospace">
	<summary>Aerospace</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.AutomotiveEquipment">
	<summary>Automotive Equipment</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.DefenceEquipment">
	<summary>Defence Equipment</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.ElectricalAppliances">
	<summary>Electrical Appliances</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.HeavyEngineering">
	<summary>Heavy engineering</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.IndustrialComponents">
	<summary>Industrial components</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.InstrumentEngineering">
	<summary>Instrument engineering</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Shipbuilding">
	<summary>Shipbuilding</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.BuildingMaterials">
	<summary>Building materials</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.GoldAndPreciousMaterials">
	<summary>Gold &amp; Precious Materials</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.IronAndSteel">
	<summary>Iron &amp; Steel</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.NonFerrousMetals">
	<summary>Non ferrous metals</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.AlcoholicDrinks">
	<summary>Alcoholic Drinks</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.FoodIndustry">
	<summary>Food</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.FurnishingsAndFurniture">
	<summary>Furnishings &amp; Furniture</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.PaperAndPackagingProducts">
	<summary>Paper &amp; packaging products</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Rubberproducts">
	<summary>Rubber products</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.SoftDrinks">
	<summary>Soft Drinks</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.TextilesAndClothing">
	<summary>Textiles &amp; Clothing</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Tobacco">
	<summary>Tobacco</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.CasinosAndGambling">
	<summary>Casinos &amp; Gambling</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.HotelsAndAccommodation">
	<summary>Hotels &amp; accommodation</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.RecreationalAndSportsGoods">
	<summary>Recreational &amp; Sports goods</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.RestaurantsAndCatering">
	<summary>Restaurants &amp; catering</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.TourOperators">
	<summary>Tour operators</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.AirTransport">
	<summary>Air Transport</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.Railway">
	<summary>Railway</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.RoadTransport">
	<summary>Road Transport</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail.WaterwayAndMaritimeTransport">
	<summary>Waterway &amp; Maritime Transport</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail">
	<summary>Subject Detail Name and Subject Refrence Number relationship (Economy, Business &amp; Finnance)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.EditorialUpdateValues.AdditionalLanguage">
	<summary>Additional language. Signifies that the accompanying Record 2 DataSets repeat information from another object in a different natural language (as indicated by DataSet 2:135 - <see cref="P:Tools.DrawingT.MetadataT.IPTC.LanguageIdentifier"/>).</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.EditorialUpdateValues">
	<summary>Values for <see cref="P:Tools.DrawingT.MetadataT.IPTC.EditorialUpdate"/></summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.NoObjectData">
	<summary>No Object Data</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.NewsphotoParameterRecord">
	<summary>IPTC-NAA Digital Newsphoto Parameter Record</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.RecommendedMessageFormat">
	<summary>IPTC7901 Recommended Message Format</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.TIFF">
	<summary>Tagged Image File Format (Adobe/Aldus Image data) (Recommended for image ObjectData Preview)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.AdobeIllustrator">
	<summary>Illustrator (Adobe Graphics data)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.AppleSingle">
	<summary>AppleSingle (Apple Computer Inc)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.NAA89_3">
	<summary>NAA 89-3 (ANPA 1312)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.MacBinary">
	<summary>MacBinary II</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.UCOFF">
	<summary>IPTC Unstructured Character Oriented File Format (UCOFF)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.UnitedPressInternationalANPA1312">
	<summary>United Press International ANPA 1312 variant</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.UnitedPressInternationalDownLoadMessage">
	<summary>United Press International Down-Load Message</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.JPEG">
	<summary>¤ JPEG File Interchange (JFIF) (Recommended for image ObjectData Preview)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.PhotoCDImagePac">
	<summary>Photo-CD Image-Pac (Eastman Kodak)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.BMP">
	<summary>¤ Microsoft Bit Mapped Graphics File [*.BMP] (Recommended for image ObjectData Preview)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.WAV">
	<summary>Digital Audio File [*.WAV] (Microsoft &amp; Creative Labs)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.AVI">
	<summary>Audio plus Moving Video [*.AVI] (Microsoft)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.EXE">
	<summary>PC DOS/Windows Executable Files [*.COM][*.EXE]</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.ZIP">
	<summary>Compressed Binary File [*.ZIP] (PKWare Inc)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.AIFF">
	<summary>Audio Interchange File Format AIFF (Apple Computer Inc)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.RIFFWave">
	<summary>RIFF Wave (Microsoft Corporation)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.Freehand">
	<summary>Freehand (Macromedia/Aldus)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.HTML">
	<summary>Hypertext Markup Language "HTML" (The Internet Society)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.MP2">
	<summary>MPEG 2 Audio Layer 2 (Musicom), ISO/IEC</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.MP3">
	<summary>MPEG 2 Audio Layer 3, ISO/IEC</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.PDF">
	<summary>Portable Document File (*.PDF) Adobe</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.NITF">
	<summary>News Industry Text Format (NITF)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.TAR">
	<summary>Tape Archive (*.TAR)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.TTNITF_DTD">
	<summary>Tidningarnas Telegrambyrå NITF version (TTNITF DTD)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.RBNITF_DTD">
	<summary>Ritzaus Bureau NITF version (RBNITF DTD)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.CorelDraw">
	<summary>Corel Draw [*.CDR]</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.FileFormats">
	<summary>Registered file formats by IPTC and NAA</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormatVersions.V0">
	<summary>Version 1 for FileFormat <see cref="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.NoObjectData"/></summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormatVersions.V1">
	<summary>Version 1 for file fromat <see cref="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.NewsphotoParameterRecord"/> and <see cref="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.NAA89_3"/>, 5.0 for <see cref="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.TIFF"/>, 1.40 for <see cref="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.AdobeIllustrator"/>, 2 for <see cref="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.AppleSingle"/>, 1.02 for <see cref="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.JPEG"/> and 3.1 for <see cref="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.Freehand"/></summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormatVersions.V2">
	<summary>Version 2 for file format <see cref="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.NewsphotoParameterRecord"/>, 6.0 for <see cref="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.TIFF"/>, 4.0 for <see cref="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.Freehand"/> and 2.0 for <see cref="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.HTML"/></summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormatVersions.V3">
	<summary>Version 3 for file format <see cref="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.NewsphotoParameterRecord"/> and 5.0 for <see cref="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.Freehand"/></summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.FileFormatVersions.V4">
	<summary>Version 4 for file format <see cref="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.NewsphotoParameterRecord"/> and <see cref="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.RecommendedMessageFormat"/> and 5.5 for <see cref="F:Tools.DrawingT.MetadataT.IPTC.FileFormats.Freehand"/></summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.FileFormatVersions">
	<summary>File format version registered for NAA and IPTC</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeComponents.NoObjectData">
	<summary>Record 2 caption for specific image</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeComponents.BW">
	<summary>Image has 1 component</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeComponents.Component2">
	<summary>Image has 2 components</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeComponents.Component3">
	<summary>Image has 3 components</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeComponents.Component4">
	<summary>Image has 4 components</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeComponents.SuplementaryData">
	<summary>the objectdata contains supplementary data to an image</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.ImageTypeComponents">
	<summary>Number of components in image and special meanings of some numbers</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.Current">
	<summary>Current</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.Analysis">
	<summary>Analysis</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.ArchiveMaterial">
	<summary>Archive material</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.Background">
	<summary>Background</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.Feature">
	<summary>Feature</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.Forecast">
	<summary>Forecast</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.History">
	<summary>History</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.Obituary">
	<summary>Obituary</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.Opinion">
	<summary>Opinion</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.PollsAndSurveys">
	<summary>Polls &amp; Surveys</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.Profile">
	<summary>Profile</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.ResultsListingsAndTables">
	<summary>Results Listings &amp; Tables</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.SideBarAndSupportingInformation">
	<summary>Side bar &amp; Supporting information</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.Summary">
	<summary>Summary</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.TranscriptAndVerbatim">
	<summary>Transcript &amp; Verbatim</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.Interview">
	<summary>Interview</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.FromTheScene">
	<summary>From the Scene</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.Retrospective">
	<summary>Retrospective</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.Statistics">
	<summary>Statistics</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.Update">
	<summary>Update</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.WrapUp">
	<summary>Wrap-up</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes.PressRelease">
	<summary>Press Release</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.ObjectAttributes">
	<summary>Object Attribute Number abd Object Name relationship</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectTypes.News">
	<summary>News</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectTypes.Data">
	<summary>Data. Data in this context implies typically non narrative information, usually not eligible for journalistic intervention or modification. It also applies to information routed by the provider from a third party to the user. Examples are sports results, stock prices and agate.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectTypes.Advisory">
	<summary>Advisory</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.ObjectTypes">
	<summary>Object Type Number and Object Type Name relationship</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Archaeology">
	<summary>Archaeology</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Architecture">
	<summary>Architecture</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Bullfighting">
	<summary>Bullfighting</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Carnival">
	<summary>Carnival</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Cinema">
	<summary>Cinema</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Dance">
	<summary>Dance</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Fashion">
	<summary>Fashion</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Language">
	<summary>Language</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.LibrariesMuseums">
	<summary>Libraries &amp; Museums</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Literature">
	<summary>Literature</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Music">
	<summary>Music</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Painting">
	<summary>Painting</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Photography">
	<summary>Photography</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Radio">
	<summary>Radio</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Sculpture">
	<summary>Sculpture</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Television">
	<summary>Television</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Theatre">
	<summary>Theatre</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Crime">
	<summary>Crime</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Judiciary">
	<summary>Judiciary</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Police">
	<summary>Police</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Punishment">
	<summary>Punishment</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Prison">
	<summary>Prison</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Drought">
	<summary>Drought</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Earthquake">
	<summary>Earthquake</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Famine">
	<summary>Famine</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Fire">
	<summary>Fire</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Flood">
	<summary>Flood</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.IndustrialAccident">
	<summary>Industrial accident</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.MeteorologicalDisaster">
	<summary>Meteorological disaster</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.NuclearAccident">
	<summary>Nuclear accident</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Pollution">
	<summary>Pollution</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.TransportAccident">
	<summary>Transport accident</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.VolcanicEruption">
	<summary>Volcanic eruption</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Agriculture">
	<summary>Agriculture</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Chemicals">
	<summary>Chemicals</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.ComputingAndInformationTechnology">
	<summary>Computing &amp; Information Technology</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.ConstructionAndProperty">
	<summary>Construction &amp; Property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.EnergyAndResources">
	<summary>Energy &amp; Resources</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.FinancialAndBusinessServices">
	<summary>Financial &amp; Business Services</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.GoodsDistribution">
	<summary>Goods Distribution</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.MacroEconomics">
	<summary>Macro Economics</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Markets">
	<summary>Markets</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Media">
	<summary>Media</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.MetalGoodsAndEngineering">
	<summary>Metal Goods &amp; Engineering</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.MetalsAndMinerals">
	<summary>Metals &amp; Minerals</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.ProcessIndustries">
	<summary>Process Industries</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.TourismAndLeisure">
	<summary>Tourism &amp; Leisure</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Transport">
	<summary>Transport</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.AdultEducation">
	<summary>Adult Education</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.FurtherEducation">
	<summary>Further Education</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.ParentOrganisations">
	<summary>Parent Organisations</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Preschooling">
	<summary>Preschooling</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Schools">
	<summary>Schools</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.TeachersUnions">
	<summary>Teachers Unions</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.University">
	<summary>University</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.AlternativeEnergy">
	<summary>Alternative Energy</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Conservation">
	<summary>Conservation</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.EnergySavings">
	<summary>Energy Savings</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.EnvironmentalPolitics">
	<summary>Environmental Politics</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.EnvironmentalPollution">
	<summary>Environmental pollution</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.NaturalResources">
	<summary>Natural resources</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Nature">
	<summary>Nature</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Population">
	<summary>Population</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Waste">
	<summary>Waste</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.WaterSupplies">
	<summary>Water Supplies</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Diseases">
	<summary>Diseases</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.EpidemicAndPlague">
	<summary>Epidemic &amp; Plague</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.HealthTreatment">
	<summary>Health treatment</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.HealthOrganisations">
	<summary>Health organisations</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.MedicalResearch">
	<summary>Medical research</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.MedicalStaff">
	<summary>Medical staff</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Medicines">
	<summary>Medicines</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.PreventativeMedicine">
	<summary>Preventative medicine</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Animals">
	<summary>Animals</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Curiosities">
	<summary>Curiosities</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.People">
	<summary>People</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Apprentices">
	<summary>Apprentices</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.CollectiveContracts">
	<summary>Collective contracts</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Employment">
	<summary>Employment</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.LabourDispute">
	<summary>Labour dispute</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.LabourLegislation">
	<summary>Labour legislation</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Retirement">
	<summary>Retirement</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Retraining">
	<summary>Retraining</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Strike">
	<summary>Strike</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Unemployment">
	<summary>Unemployment</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Unions">
	<summary>Unions</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.WagesAndPensions">
	<summary>Wages &amp; Pensions</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.WorkRelations">
	<summary>Work Relations</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Games">
	<summary>Games</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.GamingAndLotteries">
	<summary>Gaming &amp; Lotteries</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Gastronomy">
	<summary>Gastronomy</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Hobbies">
	<summary>Hobbies</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.HolidaysOrVacations">
	<summary>Holidays or vacations</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Tourism">
	<summary>Tourism</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Defence">
	<summary>Defence</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Diplomacy">
	<summary>Diplomacy</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Elections">
	<summary>Elections</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.EspionageAndIntelligence">
	<summary>Espionage &amp; Intelligence</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.ForeignAid">
	<summary>Foreign Aid</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Government">
	<summary>Government</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.HumanRights">
	<summary>Human Rights</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.LocalAuthorities">
	<summary>Local authorities</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Parliament">
	<summary>Parliament</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Parties">
	<summary>Parties</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Refugees">
	<summary>Refugees</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.RegionalAuthorities">
	<summary>Regional authorities</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.StateBudget">
	<summary>State Budget</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.TreatiesAndOrganisations">
	<summary>Treaties &amp; Organisations</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.CultsAndSects">
	<summary>Cults &amp; sects</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Faith">
	<summary>Faith</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.FreeMasonry">
	<summary>Free masonry</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.ReligiousInstitutions">
	<summary>Religious institutions</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.AppliedSciences">
	<summary>Applied Sciences</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Engineering">
	<summary>Engineering</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.HumanSciences">
	<summary>Human Sciences</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.NaturalSciences">
	<summary>Natural Sciences</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.PhilosophicalSciences">
	<summary>Philosophical Sciences</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Research">
	<summary>Research</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.ScientificExploration">
	<summary>Scientific exploration</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.SpaceProgrammes">
	<summary>Space programmes</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Addiction">
	<summary>Addiction</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Charity">
	<summary>Charity</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Demographics">
	<summary>Demographics</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Disabled">
	<summary>Disabled</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Euthanasia">
	<summary>Euthanasia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Family">
	<summary>Family</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.FamilyPlanning">
	<summary>Family planning</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.HealthInsurance">
	<summary>Health insurance</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Homelessness">
	<summary>Homelessness</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.MinorityGroups">
	<summary>Minority groups</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Pornography">
	<summary>Pornography</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Poverty">
	<summary>Poverty</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Prostitution">
	<summary>Prostitution</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Racism">
	<summary>Racism</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Welfare">
	<summary>Welfare</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Aero">
	<summary>Aero and Aviation Sports</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.AlpineSkiing">
	<summary>Alpine Skiing</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.AmericanFootball">
	<summary>American Football</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Archery">
	<summary>Archery</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.AthleticsTrackAndField">
	<summary>Athletics, Track &amp; Field</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Badminton">
	<summary>Badminton</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Baseball">
	<summary>Baseball</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Basketball">
	<summary>Basketball</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Biathlon">
	<summary>Biathlon</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.BilliardsSnookerPool">
	<summary>Billiards, Snooker and Pool</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Bobsleigh">
	<summary>Bobsleigh</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Bowling">
	<summary>Bowling</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.BowlsAndPetanque">
	<summary>Bowls &amp; Petanque</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Boxing">
	<summary>Boxing</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.CanoeingAndKayaking">
	<summary>Canoeing &amp; Kayaking</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Climbing">
	<summary>Climbing</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Cricket">
	<summary>Cricket</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Curling">
	<summary>Curling</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Cycling">
	<summary>Cycling</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Dancing">
	<summary>Dancing</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Diving">
	<summary>Diving</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Equestrian">
	<summary>Equestrian</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Fencing">
	<summary>Fencing</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.FieldHockey">
	<summary>Field Hockey</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.FigureSkating">
	<summary>Figure Skating</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.FreestyleSkiing">
	<summary>Freestyle Skiing</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Golf">
	<summary>Golf</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Gymnastics">
	<summary>Gymnastics</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Handball">
	<summary>Handball (Team)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Horse">
	<summary>Horse Racing, Harness Racing</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.IceHockey">
	<summary>Ice Hockey</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.JaiAlai">
	<summary>Jai Alai (Pelota)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Judo">
	<summary>Judo</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Karate">
	<summary>Karate</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Lacrosse">
	<summary>Lacrosse</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Luge">
	<summary>Luge</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Marathon">
	<summary>Marathon</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.ModernPentathlon">
	<summary>Modern Pentathlon</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.MotorRacing">
	<summary>Motor Racing</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.MotorRallying">
	<summary>Motor Rallying</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Motorcycling">
	<summary>Motorcycling</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Netball">
	<summary>Netball</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.NordicSkiing">
	<summary>Nordic Skiing</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Orienteering">
	<summary>Orienteering</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Polo">
	<summary>Polo</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.PowerBoating">
	<summary>Power Boating</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Rowing">
	<summary>Rowing</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.RugbyLeague">
	<summary>Rugby League</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.RugbyUnion">
	<summary>Rugby Union</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Sailing">
	<summary>Sailing</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Shooting">
	<summary>Shooting</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.SkiJumping">
	<summary>Ski Jumping</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.SnowBoarding">
	<summary>Snow Boarding</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Soccer">
	<summary>Soccer</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Softball">
	<summary>Softball</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.SpeedSkating">
	<summary>Speed Skating</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Speedway">
	<summary>Speedway</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.SportsOrganisations">
	<summary>Sports Organisations</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Squash">
	<summary>Squash</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.SumoWrestling">
	<summary>Sumo Wrestling</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Surfing">
	<summary>Surfing</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Swimming">
	<summary>Swimming</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.TableTennis">
	<summary>Table Tennis</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.TaekwonDo">
	<summary>Taekwon-Do</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Tennis">
	<summary>Tennis</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Triathlon">
	<summary>Triathlon</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Volleyball">
	<summary>Volleyball</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.WaterPolo">
	<summary>Water Polo</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.WaterSkiing">
	<summary>Water Skiing</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Weightlifting">
	<summary>Weightlifting</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Windsurfing">
	<summary>Windsurfing</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Wrestling">
	<summary>Wrestling</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.ActsOfTerror">
	<summary>Acts of terror</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.ArmedConflict">
	<summary>Armed conflict</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.CivilUnrest">
	<summary>Civil unrest</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.CoupDEtat">
	<summary>Coup d'Etat</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.GuerrillaActivities">
	<summary>Guerrilla activities</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Massacre">
	<summary>Massacre</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Riots">
	<summary>Riots</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.ViolentDemonstrations">
	<summary>Violent demonstrations</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.War">
	<summary>War</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Forecasts">
	<summary>Forecasts</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.GlobalChange">
	<summary>Global change</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Reports">
	<summary>Reports</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Statistics">
	<summary>Statistics</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers.Warnings">
	<summary>Warnings</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers">
	<summary>Subject Matter Name and Subject Reference Number relationship</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers.ArtsCultureEntertainment">
	<summary>Matters pertaining to the advancement and refinement of the human mind, of interests, skills, tastes and emotions</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers.CrimeLawJustice">
	<summary>Establishment and/or statement of the rules of behaviour in society, the enforcement of these rules, breaches of the rules and the punishment of offenders. Organisations and bodies involved in these activities.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers.DisastersAccidents">
	<summary>Man made and natural events resulting in loss of life or injury to living creatures and/or damage to inanimate objects or property.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers.EconomyBusinessFinance">
	<summary>All matters concerning the planning, production and exchange of wealth.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers.Education">
	<summary>All aspects of furthering knowledge of human individuals from birth to death.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers.EnvironmentalIssues">
	<summary>All aspects of protection, damage, and condition of the ecosystem of the planet earth and its surroundings.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers.Health">
	<summary>All aspects pertaining to the physical and mental welfare of human beings.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers.HumanInterest">
	<summary>Lighter items about individuals, groups, animals or objects.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers.Labour">
	<summary>Social aspects, organisations, rules and conditions affecting the employment of human effort for the generation of wealth or provision of services and the economic support of the unemployed.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers.LifestyleAndLeisure">
	<summary>Activities undertaken for pleasure, relaxation or recreation outside paid employment, including eating and travel.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers.Politics">
	<summary>Local, regional, national and international exercise of power, or struggle for power, and the relationships between governing bodies and states.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers.ReligionBelief">
	<summary>All aspects of human existence involving theology, philosophy, ethics and spirituality.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers.ScienceTechnology">
	<summary>All aspects pertaining to human understanding of nature and the physical world and the development and application of this knowledge</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers.SocialIssues">
	<summary>Aspects of the behaviour of humans affecting the quality of life.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers.Sport">
	<summary>Competitive exercise involving physical effort. Organisations and bodies involved in these activities.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers.UnrestConflictsWar">
	<summary>Acts of socially or politically motivated protest and/or violence.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers.Weather">
	<summary>The study, reporting and predic meteorological phenomena.</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers">
	<summary>Subject Reference Number and Subject Name relationship (version IPTC/1)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.AudioDataType.Actuality">
	<summary>Actuality</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.AudioDataType.QuestionAndAnswer">
	<summary>Question and answer session</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.AudioDataType.Music">
	<summary>Music, transmitted by itself</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.AudioDataType.Response">
	<summary>Response to a question</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.AudioDataType.RawSound">
	<summary>Raw sound</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.AudioDataType.Scener">
	<summary>Scener</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.AudioDataType.TextOnly">
	<summary>Text only</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.AudioDataType.Voicer">
	<summary>Voicer</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.AudioDataType.Wrap">
	<summary>Wrap</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.AudioDataType">
	<summary>The exact type of audio contained in the current objectdata.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents.Monochrome">
	<summary>Monochrome</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents.Yellow">
	<summary>Yellow component</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents.Magenta">
	<summary>Magenta component</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents.Cyan">
	<summary>Cyan component</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents.Black">
	<summary>Black component</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents.Red">
	<summary>Red component</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents.Green">
	<summary>Green component</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents.Blue">
	<summary>Blue component</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents.Text">
	<summary>Text only</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents.FrameSequential">
	<summary>Full colour composite, frame sequential</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents.LineSequential">
	<summary>Full colour composite, line sequential</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents.PixesSequential">
	<summary>Full colour composite, pixel sequential</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents.SpecialSequential">
	<summary>Full colour composite, special sequential</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents">
	<summary>Exact content of the current objectdata in terms of colour composition.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.AFP">
	<summary>Agence France Presse</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.AP">
	<summary>Associated Press</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.APD">
	<summary>Associated Press</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.APE">
	<summary>Associated Press</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.APF">
	<summary>Associated Press</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.APS">
	<summary>Associated Press</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.BN">
	<summary>Canadian Press</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.CP">
	<summary>Canadian Press</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.CTK">
	<summary>Czech News Agency</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.dpa">
	<summary>Deutsche Presse-Agentur GmbH</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.HNA">
	<summary>Croatian News Agency</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.IPTC">
	<summary>International Press Telecommunications Council</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.MTI">
	<summary>Magyar Távirati Iroda / Hungarian News Agency</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.PC">
	<summary>Canadian Press</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.PN">
	<summary>Canadian Press</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.REUTERS">
	<summary>Reuters</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.STA">
	<summary>Slovenska Tiskovna Agencija</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.TT">
	<summary>Tidningarnas Telegrambyrå</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.UP">
	<summary>United Press International</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.InformationProviders.UPI">
	<summary>United Press International</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.InformationProviders">
	<summary>Information Providers Reference</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Aruba">
	<summary>Aruba</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Afghanistan">
	<summary>Afghanistan</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Angola">
	<summary>Angola</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Anguilla">
	<summary>Anguilla</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Åland">
	<summary>Åland Islands</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Albania">
	<summary>Albania</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Andorra">
	<summary>Andorra</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.NetherlandsAntilles">
	<summary>Netherlands Antilles</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.UnitedArabEmirates">
	<summary>United Arab Emirates</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Argentina">
	<summary>Argentina</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Armenia">
	<summary>Armenia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.AmericanSamoa">
	<summary>American Samoa</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Antarctica">
	<summary>Antarctica</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.FrenchSouthernTerritories">
	<summary>French Southern Territories</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.AntiguaAndBarbuda">
	<summary>Antigua and Barbuda</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Australia">
	<summary>Australia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Austria">
	<summary>Austria</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Azerbaijan">
	<summary>Azerbaijan</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Burundi">
	<summary>Burundi</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Belgium">
	<summary>Belgium</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Benin">
	<summary>Benin</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.BurkinaFaso">
	<summary>Burkina Faso</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Bangladesh">
	<summary>Bangladesh</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Bulgaria">
	<summary>Bulgaria</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Bahrain">
	<summary>Bahrain</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Bahamas">
	<summary>Bahamas</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.BosniaAndHerzegovina">
	<summary>Bosnia and Herzegovina</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Belarus">
	<summary>Belarus</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Belize">
	<summary>Belize</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Bermuda">
	<summary>Bermuda</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Bolivia">
	<summary>Bolivia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Brazil">
	<summary>Brazil</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Barbados">
	<summary>Barbados</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Brunei">
	<summary>Brunei Darussalam</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Bhutan">
	<summary>Bhutan</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.BouvetIsland">
	<summary>Bouvet Island</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Botswana">
	<summary>Botswana</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.CentralAfricanRepublic">
	<summary>Central African Republic</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Canada">
	<summary>Canada</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.CocosIslands">
	<summary>Cocos (Keeling) Islands</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Switzerland">
	<summary>Switzerland</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Chile">
	<summary>Chile</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.China">
	<summary>China</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.CôteDIvoire">
	<summary>Côte d'Ivoire</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Cameroon">
	<summary>Cameroon</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Zaire">
	<summary>Congo, the Democratic Republic of the[1]</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Congo">
	<summary>Congo</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.CookIslands">
	<summary>Cook Islands</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Colombia">
	<summary>Colombia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Comoros">
	<summary>Comoros</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.CapeVerde">
	<summary>Cape Verde</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.CostaRica">
	<summary>Costa Rica</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Cuba">
	<summary>Cuba</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.ChristmasIsland">
	<summary>Christmas Island</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.CaymanIslands">
	<summary>Cayman Islands</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Cyprus">
	<summary>Cyprus</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.CzechRepublic">
	<summary>Czech Republic</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Germany">
	<summary>Germany</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Djibouti">
	<summary>Djibouti</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Dominica">
	<summary>Dominica</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Denmark">
	<summary>Denmark</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.DominicanRepublic">
	<summary>Dominican Republic</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Algeria">
	<summary>Algeria</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Ecuador">
	<summary>Ecuador</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Egypt">
	<summary>Egypt</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Eritrea">
	<summary>Eritrea</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.WesternSahara">
	<summary>Western Sahara</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Spain">
	<summary>Spain</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Estonia">
	<summary>Estonia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Ethiopia">
	<summary>Ethiopia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Finland">
	<summary>Finland</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Fiji">
	<summary>Fiji</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.FalklandIslands">
	<summary>Falkland Islands (Malvinas)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.France">
	<summary>France</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.FaroeIslands">
	<summary>Faroe Islands</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Micronesia">
	<summary>Micronesia, Federated States of</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Gabon">
	<summary>Gabon</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.UnitedKingdom">
	<summary>United Kingdom</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Georgia">
	<summary>Georgia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Guernsey">
	<summary>Guernsey</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Ghana">
	<summary>Ghana</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Gibraltar">
	<summary>Gibraltar</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Guinea">
	<summary>Guinea</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Guadeloupe">
	<summary>Guadeloupe</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Gambia">
	<summary>Gambia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.GuineaBissau">
	<summary>Guinea-Bissau</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.EquatorialGuinea">
	<summary>Equatorial Guinea</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Greece">
	<summary>Greece</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Grenada">
	<summary>Grenada</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Greenland">
	<summary>Greenland</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Guatemala">
	<summary>Guatemala</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.FrenchGuiana">
	<summary>French Guiana</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Guam">
	<summary>Guam</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Guyana">
	<summary>Guyana</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.HongKong">
	<summary>Hong Kong</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.HeardIslandAndMcDonaldIslands">
	<summary>Heard Island and McDonald Islands</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Honduras">
	<summary>Honduras</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Croatia">
	<summary>Croatia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Haiti">
	<summary>Haiti</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Hungary">
	<summary>Hungary</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Indonesia">
	<summary>Indonesia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Man">
	<summary>Isle of Man</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.India">
	<summary>India</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.BritishIndianOceanTerritory">
	<summary>British Indian Ocean Territory</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Ireland">
	<summary>Ireland</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Iran">
	<summary>Iran, Islamic Republic of</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Iraq">
	<summary>Iraq</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Iceland">
	<summary>Iceland</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Israel">
	<summary>Israel</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Italy">
	<summary>Italy</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Jamaica">
	<summary>Jamaica</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Jersey">
	<summary>Jersey</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Jordan">
	<summary>Jordan</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Japan">
	<summary>Japan</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Kazakhstan">
	<summary>Kazakhstan</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Kenya">
	<summary>Kenya</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Kyrgyzstan">
	<summary>Kyrgyzstan</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Cambodia">
	<summary>Cambodia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Kiribati">
	<summary>Kiribati</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.SaintKittsAndNevis">
	<summary>Saint Kitts and Nevis</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Korea">
	<summary>Korea, Republic of</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Kuwait">
	<summary>Kuwait</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Laos">
	<summary>Lao People's Democratic Republic</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Lebanon">
	<summary>Lebanon</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Liberia">
	<summary>Liberia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Libya">
	<summary>Libyan Arab Jamahiriya</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.SaintLucia">
	<summary>Saint Lucia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Liechtenstein">
	<summary>Liechtenstein</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.SriLanka">
	<summary>Sri Lanka</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Lesotho">
	<summary>Lesotho</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Lithuania">
	<summary>Lithuania</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Luxembourg">
	<summary>Luxembourg</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Latvia">
	<summary>Latvia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Macao">
	<summary>Macao</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Morocco">
	<summary>Morocco</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Monaco">
	<summary>Monaco</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Moldova">
	<summary>Moldova, Republic of</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Madagascar">
	<summary>Madagascar</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Maldives">
	<summary>Maldives</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Mexico">
	<summary>Mexico</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.MarshallIslands">
	<summary>Marshall Islands</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Macedonia">
	<summary>Macedonia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Mali">
	<summary>Mali</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Malta">
	<summary>Malta</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Myanmar">
	<summary>Myanmar</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Montenegro">
	<summary>Montenegro</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Mongolia">
	<summary>Mongolia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.NorthernMarianaIslands">
	<summary>Northern Mariana Islands</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Mozambique">
	<summary>Mozambique</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Mauritania">
	<summary>Mauritania</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Montserrat">
	<summary>Montserrat</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Martinique">
	<summary>Martinique</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Mauritius">
	<summary>Mauritius</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Malawi">
	<summary>Malawi</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Malaysia">
	<summary>Malaysia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Mayotte">
	<summary>Mayotte</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Namibia">
	<summary>Namibia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.NewCaledonia">
	<summary>New Caledonia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Niger">
	<summary>Niger</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Norfolk">
	<summary>Norfolk Island</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Nigeria">
	<summary>Nigeria</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Nicaragua">
	<summary>Nicaragua</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Niue">
	<summary>Niue</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Netherlands">
	<summary>Netherlands</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Norway">
	<summary>Norway</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Nepal">
	<summary>Nepal</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Nauru">
	<summary>Nauru</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.NewZealand">
	<summary>New Zealand</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Oman">
	<summary>Oman</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Pakistan">
	<summary>Pakistan</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Panama">
	<summary>Panama</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Pitcairn">
	<summary>Pitcairn</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Peru">
	<summary>Peru</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Philippines">
	<summary>Philippines</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Palau">
	<summary>Palau</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.PapuaNewGuinea">
	<summary>Papua New Guinea</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Poland">
	<summary>Poland</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.PuertoRico">
	<summary>Puerto Rico</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.NortKorea">
	<summary>Korea, Democratic People's Republic of</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Portugal">
	<summary>Portugal</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Paraguay">
	<summary>Paraguay</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Palestina">
	<summary>Palestinian Territory, Occupied</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.FrenchPolynesia">
	<summary>French Polynesia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Qatar">
	<summary>Qatar</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Réunion">
	<summary>Réunion</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Romania">
	<summary>Romania</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Russiaa">
	<summary>Russian Federation</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Rwanda">
	<summary>Rwanda</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.SaudiArabia">
	<summary>Saudi Arabia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Sudan">
	<summary>Sudan</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Senegal">
	<summary>Senegal</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Singapore">
	<summary>Singapore</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.SouthGeorgiaAndTheSouthSandwichIslands">
	<summary>South Georgia and the South Sandwich Islands</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.SaintHelena">
	<summary>Saint Helena</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.SvalbardAndJanMayen">
	<summary>Svalbard and Jan Mayen</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.SolomonIslands">
	<summary>Solomon Islands</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.SierraLeone">
	<summary>Sierra Leone</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Salvador">
	<summary>El Salvador</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.SanMarino">
	<summary>San Marino</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Somalia">
	<summary>Somalia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.SaintPierreAndMiquelon">
	<summary>Saint Pierre and Miquelon</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Serbia">
	<summary>Serbia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.SaoTomeAndPrincipe">
	<summary>Sao Tome and Principe</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Suriname">
	<summary>Suriname</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Slovakia">
	<summary>Slovakia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Slovenia">
	<summary>Slovenia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Sweden">
	<summary>Sweden</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Swaziland">
	<summary>Swaziland</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Seychelles">
	<summary>Seychelles</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Syria">
	<summary>Syrian Arab Republic</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.TurksAndCaicos">
	<summary>Turks and Caicos Islands</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Chad">
	<summary>Chad</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Togo">
	<summary>Togo</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Thailand">
	<summary>Thailand</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Tajikistan">
	<summary>Tajikistan</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Tokelau">
	<summary>Tokelau</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Turkmenistan">
	<summary>Turkmenistan</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.TimorLeste">
	<summary>Timor-Leste</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Tonga">
	<summary>Tonga</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.TrinidadAndTobago">
	<summary>Trinidad and Tobago</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Tunisia">
	<summary>Tunisia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Turkey">
	<summary>Turkey</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Tuvalu">
	<summary>Tuvalu</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Taiwan">
	<summary>Taiwan (ROC)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Tanzania">
	<summary>Tanzania, United Republic of</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Uganda">
	<summary>Uganda</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Ukraine">
	<summary>Ukraine</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.UnitedStatesMinorOutlyingIslands">
	<summary>United States Minor Outlying Islands</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Uruguay">
	<summary>Uruguay</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.USA">
	<summary>United States</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Uzbekistan">
	<summary>Uzbekistan</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Vatican">
	<summary>Vatican City State (Holy See)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.SaintVincentAndTheGrenadines">
	<summary>Saint Vincent and the Grenadines</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Venezuela">
	<summary>Venezuela</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.BritishVirginIslands">
	<summary>Virgin Islands, British</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.AmericanVirginIslands">
	<summary>Virgin Islands, U.S.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.VietNam">
	<summary>Viet Nam</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Vanuatu">
	<summary>Vanuatu</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.WallisAndFutuna">
	<summary>Wallis and Futuna</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Samoa">
	<summary>Samoa</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Yemen">
	<summary>Yemen</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.SouthAfrica">
	<summary>South Africa</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Zambia">
	<summary>Zambia</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Zimbabwe">
	<summary>Zimbabwe</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Ascension">
	<summary>Ascension Island — Reserved on request of UPU, also used by ITU</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Clipperton">
	<summary>Clipperton Island — Reserved on request of ITU</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.DiegoGarcia">
	<summary>Diego Garcia — Reserved on request of ITU</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.FranceMetropolitan">
	<summary>France, Metropolitan — Reserved on request of France</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.TristanDaCunha">
	<summary>Tristan da Cunha — Reserved on request of UPU</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.UnitedNations">
	<summary>United Nations</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.EuropeanUnion">
	<summary>European Union (formerly known as the EC and before that the EEC)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Space">
	<summary>Space</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.AtSea">
	<summary>at Sea</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.InFlight">
	<summary>In Flight</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.England">
	<summary>England (where greater granularity than Great Britain is desired)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Scotland">
	<summary>- Scotland</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.NorthernIreland">
	<summary>Northern Ireland</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ISO3166.Wales">
	<summary>Wales</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.ISO3166">
	<summary>ISO 3166-1 alpha-3 codes used by <see cref="P:Tools.DrawingT.MetadataT.IPTC.ContentLocationCode"/> with addition of some spacial codes used there.</summary>
	<remarks>Reserved code elements are codes which, while not ISO 3166-1 codes, are in use for some applications in conjunction with the ISO 3166 codes. The ISO 3166/MA therefore reserves them, so that they are not used for new official ISO 3166 codes, thereby creating conflicts between the standard and those applications.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectCycleValues.Morning">
	<summary>Morning</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectCycleValues.Evening">
	<summary>Evening</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectCycleValues.Both">
	<summary>Both</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.ObjectCycleValues">
	<summary>Values of <see cref="P:Tools.DrawingT.MetadataT.IPTC.ObjectCycle"/></summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Orientations.Portrait">
	<summary>Portrait</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Orientations.Landscape">
	<summary>Landscape</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Orientations.Square">
	<summary>Square</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.Orientations">
	<summary>Possible orientations of image</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.GetTag(Tools.DrawingT.MetadataT.IPTC.RecordNumbers,System.Byte)">
	<summary>Gets details about tag format by tag record and number</summary>
	<param name="Record">Recor number</param>
	<param name="TagNumber">Number of tag within <paramref name="Record"/></param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Record"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.RecordNumbers"/> -or- <paramref name="TagNumber"/> is not tag within <paramref name="record"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.GetTag(Tools.DrawingT.MetadataT.IPTC.EnvelopeTags)">
	<summary>Get details about tag format for tag from record <see cref="F:Tools.DrawingT.MetadataT.IPTC.RecordNumbers.Envelope"/></summary>
	<param name="Number">Number of tag within record</param>		''' <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Number"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.EnvelopeTags"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.GetTag(Tools.DrawingT.MetadataT.IPTC.ApplicationTags)">
	<summary>Get details about tag format for tag from record <see cref="F:Tools.DrawingT.MetadataT.IPTC.RecordNumbers.Application"/></summary>
	<param name="Number">Number of tag within record</param>		''' <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Number"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.ApplicationTags"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.GetTag(Tools.DrawingT.MetadataT.IPTC.PreObjectDataDescriptorRecordTags)">
	<summary>Get details about tag format for tag from record <see cref="F:Tools.DrawingT.MetadataT.IPTC.RecordNumbers.PreObjectDataDescriptorRecord"/></summary>
	<param name="Number">Number of tag within record</param>		''' <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Number"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.PreObjectDataDescriptorRecordTags"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.GetTag(Tools.DrawingT.MetadataT.IPTC.ObjectDataRecordTags)">
	<summary>Get details about tag format for tag from record <see cref="F:Tools.DrawingT.MetadataT.IPTC.RecordNumbers.ObjectDataRecord"/></summary>
	<param name="Number">Number of tag within record</param>		''' <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Number"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.ObjectDataRecordTags"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.GetTag(Tools.DrawingT.MetadataT.IPTC.PostObjectDataDescriptorRecordTags)">
	<summary>Get details about tag format for tag from record <see cref="F:Tools.DrawingT.MetadataT.IPTC.RecordNumbers.PostObjectDataDescriptorRecord"/></summary>
	<param name="Number">Number of tag within record</param>		''' <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Number"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.PostObjectDataDescriptorRecordTags"/></exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Groups.ARM">
	<summary>Abstract Relation Method</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Groups.ContentLocation">
	<summary>Country/geographical location referenced by the content of the object</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Groups.Reference">
	<summary>Identifies a prior envelope to which the current object refers.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Groups.ByLineInfo">
	<summary>Creator of the object data</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Groups.ObjectDataPreview">
	<summary>Preview of embeded object</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.Groups">
	<summary>Groups of tags</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.GetGroup(Tools.DrawingT.MetadataT.IPTC.Groups)">
	<summary>Gets information about known group of IPTC tags</summary>
	<param name="Group">Code of group to get information about</param>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ARMGroup.Load(Tools.DrawingT.MetadataT.IPTC)">
	<summary>Loads groups from IPTC</summary>
	<param name="IPTC"><see cref="T:Tools.DrawingT.MetadataT.IPTC"/> to load groups from</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="IPTC"/> is null</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ARMGroup.GroupInfo">
	<summary>Gets information about this group</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ARMGroup._ARMIdentifier">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.ARMGroup.ARMIdentifier"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ARMGroup.ARMIdentifier">
	<summary>The DataSet identifies the Abstract Relationship Method (ARM) which is described in a document registered by the originator of the ARM with the IPTC and NAA.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ARMGroup._ARMVersion">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.ARMGroup.ARMVersion"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ARMGroup.ARMVersion">
	<summary>A number representing the particular version of the ARM specified in DataSet <see cref="P:Tools.DrawingT.MetadataT.IPTC.ARMGroup.ARMIdentifier"/>.</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.ARMGroup">
	<summary>Abstract Relation Method</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ContentLocationGroup.Load(Tools.DrawingT.MetadataT.IPTC)">
	<summary>Loads groups from IPTC</summary>
	<param name="IPTC"><see cref="T:Tools.DrawingT.MetadataT.IPTC"/> to load groups from</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="IPTC"/> is null</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ContentLocationGroup.GroupInfo">
	<summary>Gets information about this group</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ContentLocationGroup._ContentLocationCode">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.ContentLocationGroup.ContentLocationCode"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ContentLocationGroup.ContentLocationCode">
	<summary>Indicates the code of a country/geographical location referenced by the content of the object.</summary>
	<remarks>Where ISO has established an appropriate country code under ISO 3166, that code will be used. When ISO3166 does not adequately provide for identification of a location or a country, e.g. ships at sea, space, IPTC will assign an appropriate threecharacter code under the provisions of ISO3166 to avoid conflicts. (see Appendix D) .</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ContentLocationGroup._ContentLocationName">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.ContentLocationGroup.ContentLocationName"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ContentLocationGroup.ContentLocationName">
	<summary>Provides a full, publishable name of a country/geographical location referenced by the content of the object, according to guidelines of the provider.</summary>
	<remarks>If used in the same object with DataSet , must immediately follow and correspond to it.</remarks>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.ContentLocationGroup">
	<summary>Country/geographical location referenced by the content of the object</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ReferenceGroup.Load(Tools.DrawingT.MetadataT.IPTC)">
	<summary>Loads groups from IPTC</summary>
	<param name="IPTC"><see cref="T:Tools.DrawingT.MetadataT.IPTC"/> to load groups from</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="IPTC"/> is null</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ReferenceGroup.GroupInfo">
	<summary>Gets information about this group</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ReferenceGroup._ReferenceService">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.ReferenceGroup.ReferenceService"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ReferenceGroup.ReferenceService">
	<summary>Identifies the Service Identifier of a prior envelope to which the current object refers.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ReferenceGroup._ReferenceDate">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.ReferenceGroup.ReferenceDate"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ReferenceGroup.ReferenceDate">
	<summary>Identifies the date of a prior envelope to which the current object refers.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ReferenceGroup._ReferenceNumber">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.ReferenceGroup.ReferenceNumber"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ReferenceGroup.ReferenceNumber">
	<summary>Identifies the Envelope Number of a prior envelope to which the current object refers.</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.ReferenceGroup">
	<summary>Identifies a prior envelope to which the current object refers.</summary>
	<remarks>Indicate that the current object refers to the content of a prior envelope.</remarks>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ByLineInfoGroup.Load(Tools.DrawingT.MetadataT.IPTC)">
	<summary>Loads groups from IPTC</summary>
	<param name="IPTC"><see cref="T:Tools.DrawingT.MetadataT.IPTC"/> to load groups from</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="IPTC"/> is null</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ByLineInfoGroup.GroupInfo">
	<summary>Gets information about this group</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ByLineInfoGroup._ByLine">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.ByLineInfoGroup.ByLine"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ByLineInfoGroup.ByLine">
	<summary>Contains name of the creator of the objectdata, e.g. writer, photographer or graphic artist.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ByLineInfoGroup._ByLineTitle">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.ByLineInfoGroup.ByLineTitle"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ByLineInfoGroup.ByLineTitle">
	<summary>A by-line title is the title of the creator or creators of an objectdata. Where used, a by-line title should follow the by-line it modifies.</summary>
	<remarks>Examples: "Staff Photographer", "Corresponsal", "Envoyé Spécial"</remarks>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.ByLineInfoGroup">
	<summary>Creator of the object data</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup.Load(Tools.DrawingT.MetadataT.IPTC)">
	<summary>Loads groups from IPTC</summary>
	<param name="IPTC"><see cref="T:Tools.DrawingT.MetadataT.IPTC"/> to load groups from</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="IPTC"/> is null</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup.GroupInfo">
	<summary>Gets information about this group</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup._ObjectDataPreviewFileFormat">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup.ObjectDataPreviewFileFormat"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup.ObjectDataPreviewFileFormat">
	<summary>The file format of the ObjectData Preview.</summary>
	<remarks>The file format must be registered with IPTC or NAA with a unique number assigned to it.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup._ObjectDataPreviewFileFormatVersion">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup.ObjectDataPreviewFileFormatVersion"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup.ObjectDataPreviewFileFormatVersion">
	<summary>The particular version of the ObjectData Preview File Format specified in <see cref="P:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup.ObjectDataPreviewFileFormat"/></summary>
	<remarks>The File Format Version is taken from the list included in Appendix A</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup._ObjectDataPreviewData">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup.ObjectDataPreviewData"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup.ObjectDataPreviewData">
	<summary>Maximum size of 256000 octets consisting of binary data.</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup">
	<summary>Preview of embeded object</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ARM">
	<summary>Abstract Relation Method</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ContentLocation">
	<summary>Country/geographical location referenced by the content of the object</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Reference">
	<summary>Identifies a prior envelope to which the current object refers.</summary>
	<remarks>Indicate that the current object refers to the content of a prior envelope.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ByLineInfo">
	<summary>Creator of the object data</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreview">
	<summary>Preview of embeded object</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ModelVersion">
	<summary>A number identifying the version of the Information Interchange Model, Part I, utilised by the provider.</summary>
	<remarks>Version numbers are assigned by IPTC and NAA. The version number of this record is four (4).</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Destination">
	<summary>This DataSet is to accommodate some providers who require routing information above the appropriate OSI layers.</summary>
	<returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.FileFormat">
	<summary>A number representing the file format.</summary>
	<remarks>The file format must be registered with IPTC or NAA with a unique number assigned to it (see Appendix A). The information is used to route the data to the appropriate system and to allow the receiving system to perform the appropriate actions thereto.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.FileFormatVersion">
	<summary>A binary number representing the particular version of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.FileFormat"/></summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ServiceIdentifier">
	<summary>Identifies the provider and product.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.EnvelopeNumber">
	<summary>The characters form a number that will be unique for the date specified in <see cref="P:Tools.DrawingT.MetadataT.IPTC.DateSent"/> and for the Service Identifier specified in <see cref="P:Tools.DrawingT.MetadataT.IPTC.ServiceIdentifier"/>.</summary>
	<remarks>If identical envelope numbers appear with the same date and with the same Service Identifier, records 2-9 must be unchanged from the original. This is not intended to be a sequential serial number reception check.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ProductID">
	<summary>Allows a provider to identify subsets of its overall service.</summary>
	<remarks>Used to provide receiving organisation data on which to select, route, or otherwise handle data.</remarks>
	<returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.EnvelopePriority">
	<summary>Specifies the envelope handling priority and not the editorial urgency (see 2:10, <see cref="P:Tools.DrawingT.MetadataT.IPTC.Urgency"/>).</summary>
	<remarks>'1' indicates the most urgent, '5' the normal urgency, and '8' the least urgent copy. The numeral '9' indicates a User Defined Priority. The numeral '0' is reserved for future use.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DateSent">
	<summary>Indicates year, month and day the service sent the material.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.TimeSent">
	<summary>This is the time the service sent the material.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.CodedCharacterSet">
	<summary>Array of bytes consisting of one or more control functions used for the announcement, invocation or designation of coded character sets. The control functions follow the ISO 2022 standard and may consist of the escape control character and one or more graphic characters. For more details see Appendix C, the IPTC-NAA Code Library.</summary>
	<remarks>The control functions apply to character oriented DataSets in records 2-6. They also apply to record 8, unless the objectdata explicitly, or the File Format implicitly, defines character sets otherwise. If this DataSet contains the designation function for Unicode in UTF-8 then no other announcement, designation or invocation functions are permitted in this DataSet or in records 2-6. For all other character sets, one or more escape sequences are used: for the announcement of the code extension facilities used in the data which follows, for the initial designation of the G0, G1, G2 and G3 graphic character sets and for the initial invocation of the graphic set (7 bits) or the lefthand and the right-hand graphic set (8 bits) and for the initial invocation of the C0 (7 bits) or of the C0 and the C1 control character sets (8 bits). The announcement of the code extension facilities, if transmitted, must appear in this data set. Designation and invocation of graphic and control function sets (shifting) may be transmitted anywhere where the escape and the other necessary control characters are permitted. However, it is recommended to transmit in this DataSet an initial designation and invocation, i.e. to define all designations and the shift status currently in use by transmitting the appropriate escape sequences and locking-shift functions. If is omitted, the default for records 2-6 and 8 is ISO 646 IRV (7 bits) or ISO 4873 DV (8 bits). Record 1 shall always use ISO 646 IRV or ISO 4873 DV respectively. ECMA as the ISO Registration Authority for escape sequences maintains the International Register of Coded Character Sets to be used with escape sequences, a register of Codes and allocated standardised escape sequences, which are recognised by IPTC-NAA without further approval procedure. The registration procedure is defined in ISO 2375. IPTC-NAA maintain a Register of Codes and allocated private escape sequences, which are shown in paragraph 1.2. IPTC may, as Sponsoring Authority, submit such private sequence Codes for approval as standardised sequence Codes. The registers consist of a Graphic repertoire, a Control function repertoire and a Repertoire of other coding systems (e.g. complete Codes). Together they represent the IPTC-NAA Code Library. Graphic Repertoire94-character sets (intermediate character 2/8 to 2/11)002ISO 646 IRV 4/0004ISO 646 British Version 4/1006ISO 646 USA Version (ASCII) 4/2008-1NATS Primary Set for Finland and Sweden 4/3008-2NATS Secondary Set for Finland and Sweden 4/4009-1NATS Primary Set for Denmark and Norway 4/5009-2NATS Secondary Set for Denmark and Norway 4/6010ISO 646 Swedish Version (SEN 850200) 4/7015ISO 646 Italian Version (ECMA) 5/9016ISO 646 Portuguese Version (ECMA Olivetti) 4/12017ISO 646 Spanish Version (ECMA Olivetti) 5/10018ISO 646 Greek Version (ECMA) 5/11021ISO 646 German Version (DIN 66003) 4/11037Basic Cyrillic Character Set (ISO 5427) 4/14060ISO 646 Norwegian Version (NS 4551) 6/0069ISO 646 French Version (NF Z 62010-1982) 6/6084ISO 646 Portuguese Version (ECMA IBM) 6/7085ISO 646 Spanish Version (ECMA IBM) 6/8086ISO 646 Hungarian Version (HS 7795/3) 6/9121Alternate Primary Graphic Set No. 1 (Canada CSA Z 243.4-1985) 7/7122Alternate Primary Graphic Set No. 2 (Canada CSA Z 243.4-1985) 7/896-character sets (intermediate character 2/12 to 2/15):100Right-hand Part of Latin Alphabet No. 1 (ISO 8859-1) 4/1101Right-hand Part of Latin Alphabet No. 2 (ISO 8859-2) 4/2109Right-hand Part of Latin Alphabet No. 3 (ISO 8859-3) 4/3110Right-hand Part of Latin Alphabet No. 4 (ISO 8859-4) 4/4111Right-hand Part of Latin/Cyrillic Alphabet (ISO 8859-5) 4/0125Right-hand Part of Latin/Greek Alphabet (ISO 8859-7) 4/6127Right-hand Part of Latin/Arabic Alphabet (ISO 8859-6) 4/7138Right-hand Part of Latin/Hebrew Alphabet (ISO 8859-8) 4/8139Right-hand Part of Czechoslovak Standard (ČSN 369103) 4/9Multiple-Byte Graphic Character Sets (1st intermediate character 2/4, 2nd intermediate character 2/8 to 2/11)87Japanese characters (JIS X 0208-1983) 4/2Control Function RepertoireC0 Control Function Sets (intermediate character 2/1)001C0 Set of ISO 646 4/0026IPTC C0 Set for newspaper text transmission 4/3036C0 Set of ISO 646 with SS2 instead of IS4 4/4104Minimum C0 Set for ISO 4873 4/7 C1 Control Function Sets (intermediate character 2/2)077C1 Control Set of ISO 6429 4/3105Minimum C1 Set for ISO 4873 4/7 Single Additional Control Functions062Locking-Shift Two (LS2), ISO 2022 6/14063Locking-Shift Three (LS3), ISO 2022 6/15064Locking-Shift Three Right (LS3R), ISO 2022 7/12065Locking-Shift Two Right (LS2R), ISO 2022 7/13066Locking-Shift One Right (LS1R), ISO 2022 7/14Repertoire of Other Coding Systems (e.g. complete Codes, intermediate character 2/5 )196UCS Transformation Format (UTF-8) 4/7 --&gt;</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.UNO">
	<summary>UNO Unique Name of Object, providing eternal, globally unique identification for objects as specified in the IIM, independent of provider and for any media form.</summary>
	<remarks>The provider must ensure the UNO is unique. Objects with the same UNO are identical.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.RecordVersion">
	<summary>A number identifying the version of the Information Interchange Model, Part II (Record 2:xx), utilised by the provider.</summary>
	<remarks>Version numbers are assigned by IPTC and NAA. The version number of this record is four (4).</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ObjectTypeReference">
	<summary>The Object Type is used to distinguish between different types of objects within the IIM.</summary>
	<remarks>The first part is a number representing a language independent international reference to an Object Type followed by a colon separator. The second part, if used, is a text representation of the Object Type Number (maximum 64 octets) consisting of graphic characters plus spaces either in English, as defined in Appendix G, or in the language of the service as indicated in DataSet 2:135 (<see cref="P:Tools.DrawingT.MetadataT.IPTC.LanguageIdentifier"/>)</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ObjectAttributeReference">
	<summary>The Object Attribute defines the nature of the object independent of the Subject.</summary>
	<remarks>The first part is a number representing a language independent international reference to an Object Attribute followed by a colon separator. The second part, if used, is a text representation of the Object Attribute Number ( maximum 64 octets) consisting of graphic characters plus spaces either in English, as defined in Appendix G, or in the language of the service as indicated in DataSet 2:135 (<see cref="P:Tools.DrawingT.MetadataT.IPTC.LanguageIdentifier"/>)</remarks>
	<returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ObjectName">
	<summary>Used as a shorthand reference for the object. Changes to existing data, such as updated stories or new crops on photos, should be identified in Edit Status.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.EditStatus">
	<summary>Status of the objectdata, according to the practice of the provider.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.EditorialUpdate">
	<summary>Indicates the type of update that this object provides to a previous object. The link to the previous object is made using the ARM (DataSets 1:120 and 1:122 (<see cref="P:Tools.DrawingT.MetadataT.IPTC.ARM"/>)), according to the practices of the provider.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Urgency">
	<summary>Specifies the editorial urgency of content and not necessarily the envelope handling priority (see 1:60, <see cref="P:Tools.DrawingT.MetadataT.IPTC.EnvelopePriority"/>).</summary>
	<remarks>The '1' is most urgent, '5' normal and '8' denotes the least-urgent copy. The numerals '9' and '0' are reserved for future use.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.SubjectReference">
	<summary>The Subject Reference is a structured definition of the subject matter.</summary>
	<remarks>It must contain an IPR (default value is "IPTC"), an 8 digit Subject Reference Number and an optional Subject Name, Subject Matter Name and Subject Detail Name. Each part of the Subject reference is separated by a colon (:). The Subject Reference Number contains three parts, a 2 digit Subject Number, a 3 digit Subject Matter Number and a 3 digit Subject Detail Number thus providing unique identification of the object's subject.</remarks>
	<returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Category">
	<summary>Identifies the subject of the objectdata in the opinion of the provider.</summary>
	<remarks>A list of categories will be maintained by a regional registry, where available, otherwise by the provider.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.SupplementalCategory">
	<summary>Supplemental categories further refine the subject of an objectdata.</summary>
	<remarks>Only a single supplemental category may be contained in each DataSet. A supplemental category may include any of the recognised categories as used in . Otherwise, selection of supplemental categories are left to the provider.</remarks>
	<returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.FixtureIdentifier">
	<summary>Identifies objectdata that recurs often and predictably.</summary>
	<remarks>Enables users to immediately find or recall such an object.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Keywords">
	<summary>Used to indicate specific information retrieval words.</summary>
	<remarks>Each keyword uses a single Keywords DataSet. Multiple keywords use multiple Keywords DataSets. It is expected that a provider of various types of data that are related in subject matter uses the same keyword, enabling the receiving system or subsystems to search across all types of data for related material.</remarks>
	<returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ReleaseDate">
	<summary>The earliest date the provider intends the object to be used.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ReleaseTime">
	<summary>The earliest time the provider intends the object to be used.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ExpirationDate">
	<summary>The latest date the provider or owner intends the objectdata to be used.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ExpirationTime">
	<summary>The latest time the provider or owner intends the objectdata to be used.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.SpecialInstructions">
	<summary>Other editorial instructions concerning the use of the objectdata, such as embargoes and warnings.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ActionAdvised">
	<summary>Indicates the type of action that this object provides to a previous object.</summary>
	<remarks>The link to the previous object is made using the (DataSets 1:120 () and 1:122 ()), according to the practices of the provider.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DateCreated">
	<summary>The date the intellectual content of the objectdata was created rather than the date of the creation of the physical representation.</summary>
	<remarks>Thus a photo taken during the American Civil War would carry a creation date during that epoch (1861-1865) rather than the date the photo was digitised for archiving.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.TimeCreated">
	<summary>The time the intellectual content of the objectdata current source material was created rather than the creation of the physical representation.</summary>
	<remarks>Where the time cannot be precisely determined, the closest approximation should be used.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DigitalCreationDate">
	<summary>The date the digital representation of the objectdata was created.</summary>
	<remarks>Thus a photo taken during the American Civil War would carry a Digital Creation Date within the past several years rather than the date where the image was captured on film, glass plate or other substrate during that epoch (1861-1865).</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DigitalCreationTime">
	<summary>The time the digital representation of the objectdata was created.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.OriginatingProgram">
	<summary>Identifies the type of program used to originate the objectdata.</summary>
	<remarks>Note: This DataSet to form an advisory to the user and are not "computer" fields. Programmers should not expect to find computer-readable information in this DataSet.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ProgramVersion">
	<summary>Identifies the type of program used to originate the objectdata.</summary>
	<remarks>Note: This DataSet to form an advisory to the user and are not "computer" fields. Programmers should not expect to find computer-readable information in this DataSet.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ObjectCycle">
	<summary>Virtually only used in North America.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.City">
	<summary>Identifies city of objectdata origin according to guidelines established by the provider.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.SubLocation">
	<summary>Identifies the location within a city from which the objectdata originates, according to guidelines established by the provider.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ProvinceState">
	<summary>Identifies Province/State of origin according to guidelines established by the provider.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.CountryPrimaryLocationCode">
	<summary>Indicates the code of the country/primary location where the intellectual property of the objectdata was created, e.g. a photo was taken, an event occurred.</summary>
	<remarks>Where ISO has established an appropriate country code under ISO 3166, that code will be used. When ISO3166 does not adequately provide for identification of a location or a new country, e.g. ships at sea, space, IPTC will assign an appropriate three-character code under the provisions of ISO3166 to avoid conflicts. (see Appendix D)</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.CountryPrimaryLocationName">
	<summary>Provides full, publishable, name of the country/primary location where the intellectual property of the objectdata was created, according to guidelines of the provider.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.OriginalTransmissionReference">
	<summary>A code representing the location of original transmission according to practices of the provider.</summary>
	<remarks>Examples: BER-5, PAR-12-11-01</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Headline">
	<summary>A publishable entry providing a synopsis of the contents of the objectdata.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Credit">
	<summary>Identifies the provider of the objectdata, not necessarily the owner/creator.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Source">
	<summary>Identifies the original owner of the intellectual content of the objectdata.</summary>
	<remarks>This could be an agency, a member of an agency or an individual.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.CopyrightNotice">
	<summary>Contains any necessary copyright notice.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Contact">
	<summary>Identifies the person or organisation which can provide further background information on the objectdata.</summary>
	<returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.CaptionAbstract">
	<summary>A textual description of the objectdata, particularly used where the object is not text.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.WriterEditor">
	<summary>Identification of the name of the person involved in the writing, editing or correcting the objectdata or caption/abstract.</summary>
	<returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.RasterizedeCaption">
	<summary>Image width 460 pixels and image height 128 pixels. Scanning direction bottom to top, left to right.</summary>
	<remarks>Contains the rasterized objectdata description and is used where characters that have not been coded are required for the caption.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ImageType">
	<summary>Image Type</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ImageOrientation">
	<summary>Indicates the layout of the image area.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.LanguageIdentifier">
	<summary>Describes the major national language of the object, according to the 2-letter codes of ISO 639:1988.</summary>
	<remarks>Does not define or imply any coded character set, but is used for internal routing, e.g. to various editorial desks. Implementation note: Programmers should provide for three octets for Language Identifier because the ISO is expected to provide for 3-letter codes in the future.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.AudioType">
	<summary>Type of audio in objectdata</summary>
	<remarks>Note: When '0' or 'T' is used, the only authorised combination is "0T". This is the mechanism for sending a caption either to supplement an audio cut sent previously without a caption or to correct a previously sent caption.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.AudioSamplingRate">
	<summary>Sampling rate, representing the sampling rate in hertz (Hz).</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.AudioSamplingResolution">
	<summary>The number of bits in each audio sample.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.AudioDuration">
	<summary>The running time of an audio objectdata when played back at the speed at which it was recorded.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.AudioOutcue">
	<summary>Identifies the content of the end of an audio objectdata, according to guidelines established by the provider.</summary>
	<remarks>The outcue generally consists of the final words spoken within an audio objectdata or the final sounds heard.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.SizeMode">
	<summary>The octet is set to the binary value of '0' if the size of the objectdata is not known and is set to '1' if the size of the objectdata is known at the beginning of transfer.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.MaxSubfileSize">
	<summary>The maximum size for the following Subfile DataSet(s).</summary>
	<remarks>The largest number is not defined, but programmers should provide at least for the largest binary number contained in four octets taken together. If the entire object is to be transferred together within a single DataSet 8:10, the number equals the size of the object.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ObjectDataSizeAnnounced">
	<summary>A binary number representing the overall size of the objectdata, expressed in octets, not including tags, if that size is known when transfer commences.</summary>
	<remarks>Mandatory if DataSet has value '1' and not allowed if DataSet has value '0'.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.MaximumObjectDataSize">
	<summary>Used when objectdata size is not known, indicating the largest size, expressed in octets, that the objectdata can possibly have, not including tags.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Subfile">
	<summary>Subfile DataSet containing the objectdata itself.</summary>
	<remarks>Subfiles must be sequential so that the subfiles may be reassembled.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ConfirmedObjectDataSize">
	<summary>Total size of the objectdata, in octets, without tags.</summary>
	<remarks>This number should equal the number in DataSet if the size of the objectdata is known and has been provided.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ARMIdentifier">
	<summary>The DataSet identifies the Abstract Relationship Method (ARM) which is described in a document registered by the originator of the ARM with the IPTC and NAA.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ARMVersion">
	<summary>A number representing the particular version of the ARM specified in DataSet <see cref="P:Tools.DrawingT.MetadataT.IPTC.ARMIdentifier"/>.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ContentLocationCode">
	<summary>Indicates the code of a country/geographical location referenced by the content of the object.</summary>
	<remarks>Where ISO has established an appropriate country code under ISO 3166, that code will be used. When ISO3166 does not adequately provide for identification of a location or a country, e.g. ships at sea, space, IPTC will assign an appropriate threecharacter code under the provisions of ISO3166 to avoid conflicts. (see Appendix D) .</remarks>
	<returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ContentLocationName">
	<summary>Provides a full, publishable name of a country/geographical location referenced by the content of the object, according to guidelines of the provider.</summary>
	<remarks>If used in the same object with DataSet , must immediately follow and correspond to it.</remarks>
	<returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ReferenceService">
	<summary>Identifies the Service Identifier of a prior envelope to which the current object refers.</summary>
	<returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ReferenceDate">
	<summary>Identifies the date of a prior envelope to which the current object refers.</summary>
	<returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ReferenceNumber">
	<summary>Identifies the Envelope Number of a prior envelope to which the current object refers.</summary>
	<returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ByLine">
	<summary>Contains name of the creator of the objectdata, e.g. writer, photographer or graphic artist.</summary>
	<returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ByLineTitle">
	<summary>A by-line title is the title of the creator or creators of an objectdata. Where used, a by-line title should follow the by-line it modifies.</summary>
	<remarks>Examples: "Staff Photographer", "Corresponsal", "Envoyé Spécial"</remarks>
	<returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewFileFormat">
	<summary>The file format of the ObjectData Preview.</summary>
	<remarks>The file format must be registered with IPTC or NAA with a unique number assigned to it.</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewFileFormatVersion">
	<summary>The particular version of the ObjectData Preview File Format specified in <see cref="P:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewFileFormat"/></summary>
	<remarks>The File Format Version is taken from the list included in Appendix A</remarks>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewData">
	<summary>Maximum size of 256000 octets consisting of binary data.</summary>
	<returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">Tag exists in this instance but it's value is invalid.</exception>
	<exception cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">Invalid value pased to property or other serialization error occured</exception>
</member><member name="M:Tools.WindowsT.FormsT.ControlWithStatus.OnAdd(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.ControlWithStatus.Add"/> event</summary>
	<param name="e">Event parameters</param>
</member><member name="E:Tools.WindowsT.FormsT.ControlWithStatus.Add">
	<summary>Raised after add menu item is clicked</summary>
</member><member name="P:Tools.WindowsT.FormsT.ControlWithStatus.AddMenuState">
	<summary>state of add menu item</summary>
</member><member name="P:Tools.WindowsT.FormsT.ControlWithStatus.AutoChanged">
	<summary>Indicates if <see cref="P:Tools.WindowsT.FormsT.ControlWithStatus.Status"/> automatically chnages to <see cref="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Changed"/> and <see cref="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.New"/> if user takes appropriate action</summary>
</member><member name="M:Tools.WindowsT.FormsT.ControlWithStatus.OnDelete(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.ControlWithStatus.Delete"/> event</summary>
	<param name="e">Event parameters</param>
</member><member name="E:Tools.WindowsT.FormsT.ControlWithStatus.Delete">
	<summary>Raised after delete menu item is clcked</summary>
</member><member name="P:Tools.WindowsT.FormsT.ControlWithStatus.DeleteMenustate">
	<summary>State of delete menu item</summary>
</member><member name="M:Tools.WindowsT.FormsT.ControlWithStatus.OnMarkAsChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.ControlWithStatus.MarkAsChanged"/> event</summary>
	<param name="e">Event parameters</param>
</member><member name="E:Tools.WindowsT.FormsT.ControlWithStatus.MarkAsChanged">
	<summary>Raised after mark-as-changed menu item is clicked</summary>
</member><member name="P:Tools.WindowsT.FormsT.ControlWithStatus.MarkAsChangedMenuState">
	<summary>State of mar-as-changed menu item</summary>
</member><member name="M:Tools.WindowsT.FormsT.ControlWithStatus.OnReset(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.ControlWithStatus.Reset"/> event</summary>
	<param name="e">Event parameters</param>
</member><member name="E:Tools.WindowsT.FormsT.ControlWithStatus.Reset">
	<summary>Raised after reset menu item is clicked</summary>
</member><member name="P:Tools.WindowsT.FormsT.ControlWithStatus.ResetMenuState">
	<summary>state of reset menu item</summary>
</member><member name="P:Tools.WindowsT.FormsT.ControlWithStatus.Status">
	<summary>Current status of control</summary>
</member><member name="M:Tools.WindowsT.FormsT.ControlWithStatus.OnStatusChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.ControlWithStatus.StatusChanged"/> event</summary>
	<param name="e">Event parameters</param>
</member><member name="E:Tools.WindowsT.FormsT.ControlWithStatus.StatusChanged">
	<summary>Raised after <see cref="P:Tools.WindowsT.FormsT.ControlWithStatus.Status"/> is changed</summary>
</member><member name="T:Tools.WindowsT.FormsT.ControlWithStatus">
	<summary>Common base for controls with <see cref="T:Tools.WindowsT.FormsT.StatusMarker"/></summary>
</member><member name="F:Tools.CollectionsT.GenericT.FilteredEnumerator`1.internal">
	<summary>Filtered <see cref="T:System.Collections.Generic.IEnumerator`1"/></summary>
</member><member name="F:Tools.CollectionsT.GenericT.FilteredEnumerator`1.Filter">
	<summary>Predicate filter. Include only items for which predicate is true</summary>
</member><member name="M:Tools.CollectionsT.GenericT.FilteredEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0},System.Predicate{`0})">
	<summary>CTor</summary>
	<param name="Other">The <see cref="T:System.Collections.Generic.IEnumerator`1"/> to be filtered</param>
	<param name="Filter">Filter predicate. Only items for which predicate is True are included in filtered enumeration</param>
</member><member name="P:Tools.CollectionsT.GenericT.FilteredEnumerator`1.Current">
	<summary>Gets the element in the collection at the current position of the enumerator.</summary>
	<returns>The element in the collection at the current position of the enumerator.</returns>
	<exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.-or- The collection was modified after the enumerator was created.</exception>
</member><member name="P:Tools.CollectionsT.GenericT.FilteredEnumerator`1._Current">
	<summary>Gets the current element in the collection.</summary>
	<returns>The current element in the collection.</returns>
	<exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.-or- The collection was modified after the enumerator was created.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.FilteredEnumerator`1.MoveNext">
	<summary>Advances the enumerator to the next element of the collection while exluding elements for which predicate given in CTor is false.</summary>
	<returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
	<exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
</member><member name="M:Tools.CollectionsT.GenericT.FilteredEnumerator`1.Reset">
	<summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
	<exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
</member><member name="F:Tools.CollectionsT.GenericT.FilteredEnumerator`1.disposedValue">
	<summary>To detect redundant calls</summary>
</member><member name="M:Tools.CollectionsT.GenericT.FilteredEnumerator`1.Dispose(System.Boolean)">
	<summary>This code added by Visual Basic to correctly implement the disposable pattern.</summary>
</member><member name="M:Tools.CollectionsT.GenericT.FilteredEnumerator`1.Dispose">
	<summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
	<remarks>Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.</remarks>
</member><member name="T:Tools.CollectionsT.GenericT.FilteredEnumerator`1">
	<summary>Filterg given <see cref="T:System.Collections.Generic.IEnumerator`1"/> with given <see cref="T:System.Predicate`1"/></summary>
</member><member name="M:Tools.CollectionsT.CollectionTools.Last(System.Collections.IEnumerable)">
	<summary>Gets last item in collection</summary>
	<param name="Collection">Collection to obtain item from</param>
	<returns>Last item in <paramref name="Collection"/>, or null if <paramref name="Collection"/> is empty</returns>
	<remarks>This function have to iterate through whole <paramref name="Collection"/></remarks>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.CollectionTools.Last(System.Collections.IList)">
	<summary>Gets last item in collection</summary>
	<param name="Collection">Collection to obtain item from</param>
	<returns>Last item in <paramref name="Collection"/> (item at highest index), or null if <paramref name="Collection"/> is empty</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.CollectionTools.IsEmpty(System.Collections.IEnumerable)">
	<summary>Gets value indicationg if given colection is empty</summary>
	<param name="collection">Collection to examine</param>
	<returns>True if <paramref name="collection"/>.<see cref="M:System.Collections.IEnumerable.GetEnumerator">GetEnumerator</see>.<see cref="M:System.Collections.IEnumerator.MoveNext">MoveNext</see> returns false.</returns>
</member><member name="T:Tools.CollectionsT.CollectionTools">
	<summary>Extension methods for working with type-unsafe collections</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.SOI">
	<summary>Start Of Image marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.EOI">
	<summary>End Of Image marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.SOS">
	<summary>Start Of Stream marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.APP0">
	<summary>APP0 (JFIF) marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.APP1">
	<summary>APP1 marker (used for Exif and XMP)</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.APP2">
	<summary>APP2 marker (used for Exif extension)</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.APP3">
	<summary>APP3 marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.APP4">
	<summary>APP4 marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.APP5">
	<summary>APP5 marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.APP6">
	<summary>APP6 marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.APP7">
	<summary>APP7 marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.APP8">
	<summary>APP8 marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.APP9">
	<summary>APP9 marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.APP10">
	<summary>APP10 marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.APP11">
	<summary>APP11 marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.APP12">
	<summary>APP12 marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.APP13">
	<summary>APP13 marker (used for PhoroShop 8BIM which contains EXIF)</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.APP14">
	<summary>APP14 marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.APP15">
	<summary>APP15 marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.DQT">
	<summary>Define Quantization Table marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.DHT">
	<summary>Define Huffman Table marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.Comment">
	<summary>JPEG comment marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.SOF">
	<summary>Start Of Frame marker</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.Unknown">
	<summary>Unknown marker (not recognized by this application)</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.DRI">
	<summary>Define Restart Interoperability marker</summary>
</member><member name="T:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers">
	<summary>Known types of JPEG markers</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader._Code">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Code"/>property</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader._Length">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Length"/> property</summary>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader._Data">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Data"/> property</summary>
</member><member name="M:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.#ctor(System.IO.Stream,System.Int64)">
	<summary>CTor - constructs JPEG marker from data present at given offset of given <see cref="T:System.IO.Stream"/></summary>
	<param name="Stream"><see cref="T:System.IO.Stream"/> to read data from, should be stream of whole JPEG file</param>
	<param name="Offset">Offset to start reading data at</param>
	<exception cref="T:System.IO.InvalidDataException">
 Marker code doesn's start with FFh -or-
 Marker which's Lenght is set to 0 or 1 found (doesn't applly to SOI and EOI)
 </exception>
	<exception cref="T:System.IO.IOException">IO error while reding <paramref name="Stream"/></exception>
	<exception cref="T:System.IO.EndOfStreamException">End of stream <paramref name="Stream"/> reached unexpectedly</exception>
</member><member name="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader._Offset">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Offset"/> property</summary>
</member><member name="P:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Offset">
	<summary>Offset of marker in stream it was constructed of</summary>
</member><member name="P:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Code">
	<summary>2 Bytes code of marker</summary>
</member><member name="P:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Length">
	<summary>Lenght of marker exluding marker code, including size specification</summary>
	<remarks>Actual length of whole segment including marker code is always 2 bytes more</remarks>
</member><member name="P:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Data">
	<summary>Stream of marker's data</summary>
</member><member name="P:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.MarkerCode">
	<summary>Code of marker</summary>
	<returns>Code of marker if marker was recognized a known marker, <see cref="F:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Markers.Unknown"/> otherwise</returns>
	<remarks>See <see cref="P:Tools.DrawingT.IO.JPEG.JPEGMarkerReader.Code"/> property for full code</remarks>
</member><member name="T:Tools.DrawingT.IO.JPEG.JPEGMarkerReader">
	<summary>Represernts marker (block of JPEG file)</summary>
</member><member name="F:Tools.IOt.ConstrainedReadOnlyStream.Stream">
	<summary><see cref="T:System.IO.Stream"/> being constrained</summary>
</member><member name="F:Tools.IOt.ConstrainedReadOnlyStream.StartPosition">
	<summary>Minimum position for seek (0-based)</summary>
</member><member name="F:Tools.IOt.ConstrainedReadOnlyStream.ConstrainedLenght">
	<summary>Number of bytes allowed to read starting at <see cref="F:Tools.IOt.ConstrainedReadOnlyStream.StartPosition"/></summary>
</member><member name="M:Tools.IOt.ConstrainedReadOnlyStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
	<summary>CTor</summary>
	<param name="BaseStream">Stream to be constrained</param>
	<param name="StartPosition">Minimum position for seek (0-based)</param>
	<param name="Lenght">Number of bytes allowed to read starting at <paramref name="StartPosition"/></param>
	<exception cref="T:System.NotSupportedException"><paramref name="Stream"/> doesn't support read or seek (the <see cref="P:System.IO.Stream.CanRead"/> or <see cref="P:System.IO.Stream.CanSeek"/> returns false)</exception>
	<exception cref="T:System.ArgumentException">
		<paramref name="Lenght"/> is less than zero -or-
 Position of end of constraint is after end of <paramref name="BaseStream"/> and <paramref name="Lenght"/> is greater than zero
 </exception>
</member><member name="P:Tools.IOt.ConstrainedReadOnlyStream.CanRead">
	<summary>Gets a value indicating whether the current stream supports reading.</summary>
	<returns>Always true</returns>
</member><member name="P:Tools.IOt.ConstrainedReadOnlyStream.CanSeek">
	<summary>Gets a value indicating whether the current stream supports seeking.</summary>
	<returns>Always true</returns>
</member><member name="P:Tools.IOt.ConstrainedReadOnlyStream.CanWrite">
	<summary>Gets a value indicating whether the current stream supports writing.</summary>
	<returns>Always false</returns>
</member><member name="M:Tools.IOt.ConstrainedReadOnlyStream.Flush">
	<summary>This is readonly stream, does nothing</summary>
</member><member name="P:Tools.IOt.ConstrainedReadOnlyStream.Length">
	<summary>Gets the length in bytes of the constrained stream</summary>
	<returns>A long value representing the length of the sconstrained tream in bytes.</returns>
	<exception cref="T:System.ObjectDisposedException">Methods were called after the base stream was closed.</exception>
</member><member name="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream">
	<summary>Stream being constrained</summary>
</member><member name="P:Tools.IOt.ConstrainedReadOnlyStream.ConstraintStart">
	<summary>Offset of start of <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> where constrainment starts</summary>
</member><member name="P:Tools.IOt.ConstrainedReadOnlyStream.Position">
	<summary>Gets or sets the position within the current stream.</summary>
	<value>Sets postion in base stream to new position assigned plus <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.ConstraintStart"/>. When new value exceeds constrainment limits then it is set too edge values. Position can be set 1 byte after end of stream to determine EOF</value>
	<returns>The current position within the stream. Returns 0 if position of <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> if before <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.ConstraintStart"/>, returns <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.Length"/> if position of <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> is after end of constraint</returns>
	<exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
	<exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed</exception>
</member><member name="M:Tools.IOt.ConstrainedReadOnlyStream.Read(System.Byte[],System.Int32,System.Int32)">
	<summary>Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
	<param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
	<param name="count">The maximum number of bytes to be read from the current stream.</param>
	<param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
	<returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
	<exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length.</exception>
	<exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
	<exception cref="T:System.ArgumentNullException">buffer is null.</exception>
	<exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
	<exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative.</exception>
</member><member name="M:Tools.IOt.ConstrainedReadOnlyStream.Seek(System.Int64,System.IO.SeekOrigin)">
	<summary>Sets the position within the current stream.</summary>
	<param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
	<param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
	<returns>The new position within the current stream.</returns>
	<exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
	<exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
</member><member name="M:Tools.IOt.ConstrainedReadOnlyStream.SetLength(System.Int64)">
	<summary>Throws <see cref="T:System.NotSupportedException"/></summary>
	<param name="value">Ignored</param>
	<exception cref="T:System.NotSupportedException">Always: The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.</exception>
</member><member name="M:Tools.IOt.ConstrainedReadOnlyStream.Write(System.Byte[],System.Int32,System.Int32)">
	<summary>Throws <see cref="T:System.NotSupportedException"/></summary>
	<param name="offset">Ignored</param>
	<param name="count">Ignored</param>
	<param name="buffer">Ignored</param>
	<exception cref="T:System.NotSupportedException">Always: The stream does not support writing.</exception>
</member><member name="M:Tools.IOt.ConstrainedReadOnlyStream.GetEnumerator">
	<summary>Returns an enumerator that iterates through the collection.</summary>
	<returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
</member><member name="M:Tools.IOt.ConstrainedReadOnlyStream.GetEnumerator1">
	<summary>Returns an enumerator that iterates through a collection.</summary>
	<returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
</member><member name="P:Tools.IOt.ConstrainedReadOnlyStream.Item(System.Int64)">
	<summary>Gets value on specified index</summary>
	<param name="index">Index to obtain value</param>
	<returns>value lying on specified <paramref name="index"/></returns>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="P:Tools.IOt.ConstrainedReadOnlyStream.Maximum">
	<summary>Maximal valid value for index</summary>
</member><member name="P:Tools.IOt.ConstrainedReadOnlyStream.Minimum">
	<summary>Minimal valid value for index</summary>
</member><member name="P:Tools.IOt.ConstrainedReadOnlyStream.TruePosition">
	<summary>Returns <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.Position"/> translated into <see cref="P:System.IO.Stream.Position"/> in <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> or into <see cref="P:System.IO.Stream.Position"/> in its <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/></summary>
	<returns>
		<see cref="P:Tools.IOt.ConstrainedReadOnlyStream.Position"/> in this <see cref="T:Tools.IOt.ConstrainedReadOnlyStream"/> + <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.ConstraintStart"/> if <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> is not <see cref="T:Tools.IOt.ConstrainedReadOnlyStream"/>.
 If <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> is <see cref="T:Tools.IOt.ConstrainedReadOnlyStream"/> returns <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.Position"/> in <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/>'s <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> recursively.
 </returns>
</member><member name="M:Tools.IOt.ConstrainedReadOnlyStream.TranslatePosition(System.Int64)">
	<summary>Returns <paramref name="Position"/> translated into <see cref="P:System.IO.Stream.Position"/> in <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> or into <see cref="P:System.IO.Stream.Position"/> in its <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/></summary>
	<returns>
		<see cref="P:Tools.IOt.ConstrainedReadOnlyStream.Position"/> in this <see cref="T:Tools.IOt.ConstrainedReadOnlyStream"/> + <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.ConstraintStart"/> if <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> is not <see cref="T:Tools.IOt.ConstrainedReadOnlyStream"/>.
 If <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> is <see cref="T:Tools.IOt.ConstrainedReadOnlyStream"/> returns <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.Position"/> in <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/>'s <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> recursively.
 </returns>
</member><member name="M:Tools.IOt.ConstrainedReadOnlyStream.ToString">
	<summary>String representation</summary>
</member><member name="T:Tools.IOt.ConstrainedReadOnlyStream">
	<summary>Implements stream that reads only part of base stream</summary>
</member><member name="F:Tools.IOt.Path._Path">
	<summary>Contains value of the <see cref="P:Tools.IOt.Path.Path"/> property</summary>
</member><member name="M:Tools.IOt.Path.#ctor(System.String)">
	<summary>CTor from String</summary>
	<param name="Path">Addres in file system from which create the path</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Path"/> is null</exception>
	<exception cref="T:System.ArgumentException">
		<paramref name="Path"/> is an empty string or consists only of whitespace characters
 -or-
 <paramref name="Path"/> contains invalid character as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>
	</exception>
</member><member name="M:Tools.IOt.Path.#ctor(Tools.IOt.Path)">
	<summary>Copy CTor</summary>
	<param name="a">Instance which's copy to create</param>
</member><member name="P:Tools.IOt.Path.Path">
	<summary>String representaion of path</summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null</exception>
	<exception cref="T:System.ArgumentException">
		<paramref name="value"/> is an empty string or consists only of whitespace characters
 -or-
 <paramref name="value"/> contains invalid character as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>
	</exception>
</member><member name="M:Tools.IOt.Path.ToString">
	<summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="P:Tools.IOt.Path.Path"/>.</summary>
	<returns>A <see cref="T:System.String"/> that represents the current <see cref="P:Tools.IOt.Path.Path"/></returns>
</member><member name="M:Tools.IOt.Path.op_Addition(Tools.IOt.Path,Tools.IOt.Path)">
	<summary>Conbines to paths - Left and right part</summary>
	<param name="Left">Left part of path</param>
	<param name="Right">Right part of path (should be relative to <paramref name="Left"/></param>
	<returns>Paths combined according to rules of current operating system</returns>
	<remarks>
		<para><see cref="T:System.ArgumentException"/> caused by empty, null or invalid <see cref="P:Tools.IOt.Path.Path"/> should occure only due to wildcart, because other cases are made impossible by setter of <see cref="P:Tools.IOt.Path.Path"/></para>
		<para>See also <seealso cref="M:System.IO.Path.Combine(System.String,System.String)"/></para>
	</remarks>
	<exception cref="T:System.ArgumentNullException">
		<see cref="P:Tools.IOt.Path.Path"/> of <paramref name="Left"/> or of <paramref name="Right"/> is null</exception>
	<exception cref="T:System.ArgumentException">
		<see cref="P:Tools.IOt.Path.Path"/> of <paramref name="Left"/> or of <paramref name="Right"/> contain one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.</exception>
	<exception cref="T:System.NullReferenceException">
		<paramref name="Left"/> or <paramref name="Right"/> is null</exception>
</member><member name="M:Tools.IOt.Path.op_Addition(Tools.IOt.Path,System.String)">
	<summary>Conbines to paths - Left and right part</summary>
	<param name="Left">Left part of path</param>
	<param name="Right">Right part of path (should be relative to <paramref name="Left"/></param>
	<returns>Paths combined according to rules of current operating system</returns>
	<remarks>
		<para><see cref="T:System.ArgumentException"/> caused by empty, null or invalid <see cref="P:Tools.IOt.Path.Path"/> should occure only due to wildcart, because other cases are made impossible by setter of <see cref="P:Tools.IOt.Path.Path"/></para>
		<para>See also <seealso cref="M:System.IO.Path.Combine(System.String,System.String)"/></para>
	</remarks>
	<exception cref="T:System.ArgumentNullException">
		<see cref="P:Tools.IOt.Path.Path"/> of <paramref name="Left"/> or <paramref name="Right"/> is null</exception>
	<exception cref="T:System.ArgumentException">
		<see cref="P:Tools.IOt.Path.Path"/> of <paramref name="Left"/> or <paramref name="Right"/> contain one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.</exception>
	<exception cref="T:System.NullReferenceException">
		<paramref name="Left"/> is null</exception>
</member><member name="M:Tools.IOt.Path.op_Addition(System.String,Tools.IOt.Path)">
	<summary>Conbines to paths - Left and right part</summary>
	<param name="Left">Left part of path</param>
	<param name="Right">Right part of path (should be relative to <paramref name="Left"/></param>
	<returns>Paths combined according to rules of current operating system</returns>
	<remarks>
		<para><see cref="T:System.ArgumentException"/> caused by empty, null or invalid <see cref="P:Tools.IOt.Path.Path"/> should occure only due to wildcart, because other cases are made impossible by setter of <see cref="P:Tools.IOt.Path.Path"/></para>
		<para>See also <seealso cref="M:System.IO.Path.Combine(System.String,System.String)"/></para>
	</remarks>
	<exception cref="T:System.ArgumentNullException">
		<paramref name="Left"/> or <see cref="P:Tools.IOt.Path.Path"/> of <paramref name="Right"/> is null</exception>
	<exception cref="T:System.ArgumentException">
		<paramref name="Left"/> or <see cref="P:Tools.IOt.Path.Path"/> of <paramref name="Right"/> contain one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.</exception>
	<exception cref="T:System.NullReferenceException">
		<paramref name="Right"/> is null</exception>
</member><member name="M:Tools.IOt.Path.op_Explicit(System.String)~Tools.IOt.Path">
	<summary>Converts <see cref="T:System.String"/> into <see cref="T:System.IO.Path"/></summary>
	<param name="a"><see cref="T:System.String"/> to be converted</param>
	<returns>A new instance of <see cref="P:Tools.IOt.Path.Path"/> initialized with <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
	<exception cref="T:System.ArgumentException">
		<paramref name="a"/> is an empty string or consists only of whitespace characters
 -or-
 <paramref name="a"/> contains invalid character as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>
	</exception>
</member><member name="M:Tools.IOt.Path.op_Implicit(Tools.IOt.Path)~System.String">
	<summary>Converts <see cref="T:System.IO.Path"/> into <see cref="T:System.String"/></summary>
	<param name="a"><see cref="T:System.IO.Path"/> to be converted</param>
	<returns>Value of <see cref="P:Tools.IOt.Path.Path"/> property of <paramref name="a"/></returns>
</member><member name="P:Tools.IOt.Path.DirectoryName">
	<summary>Directory information of <see cref="T:System.IO.Path"/></summary>
	<returns>A <see cref="T:System.String"/> containing directory information for path, or null if path denotes a root directory, is the empty string (""), or is null. Returns <see cref="F:System.String.Empty"/> if path does not contain directory information.</returns>
	<exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> contains invalid characters, is empty, or contains only white spaces, or contains a wildcard character.</exception>
	<exception cref="T:System.IO.PathTooLongException"><see cref="P:Tools.IOt.Path.Path"/> is longer than the system-defined maximum length</exception>
	<remarks>
		<para><see cref="T:System.ArgumentException"/> caused by empty, null or invalid <see cref="P:Tools.IOt.Path.Path"/> should occure only due to wildcart, because other cases are made impossible by setter of <see cref="P:Tools.IOt.Path.Path"/></para>
		<para>See also<seealso cref="M:System.IO.Path.GetDirectoryName(System.String)"/></para>
	</remarks>
</member><member name="P:Tools.IOt.Path.Extension">
	<summary>Returns the extension of the <see cref="T:System.IO.Path"/>.</summary>
	<returns>A <see cref="T:System.String"/> containing the extension of the specified path (including the "."), null, or <see cref="F:System.String.Empty"/>. If <see cref="P:Tools.IOt.Path.Path"/> is null, <see cref="P:Tools.IOt.Path.Extension"/> returns null. If <see cref="P:Tools.IOt.Path.Path"/> does not have extension information, <see cref="P:Tools.IOt.Path.Extension"/> returns <see cref="T:System.String"/>.</returns>
	<value>The new extension (with a leading period). Specify null to remove an existing extension from <see cref="T:System.IO.Path"/></value>
	<exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.</exception>
	<remarks>
		<para><see cref="T:System.ArgumentException"/> caused by empty, null or invalid <see cref="P:Tools.IOt.Path.Path"/> should occure only due to wildcart, because other cases are made impossible by setter of <see cref="P:Tools.IOt.Path.Path"/></para>
		<para>See also <seealso cref="M:System.IO.Path.GetExtension(System.String)"/>, <seealso cref="M:System.IO.Path.ChangeExtension(System.String,System.String)"/></para>
	</remarks>
</member><member name="P:Tools.IOt.Path.FileName">
	<summary>Returns the file name and extension of the <see cref="T:System.IO.Path"/>.</summary>
	<returns>A <see cref="T:System.String"/> consisting of the characters after the last directory character in <see cref="P:Tools.IOt.Path.Path"/>. If the last character of <see cref="P:Tools.IOt.Path.Path"/> is a directory or volume separator character, this property returns <see cref="F:System.String.Empty"/>. If <see cref="P:Tools.IOt.Path.Path"/> is null, this method returns null.</returns>
	<exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.</exception>
	<remarks>
		<para><see cref="T:System.ArgumentException"/> caused by empty, null or invalid <see cref="P:Tools.IOt.Path.Path"/> should occure only due to wildcart, because other cases are made impossible by setter of <see cref="P:Tools.IOt.Path.Path"/></para>
		<para>See also <seealso cref="M:System.IO.Path.GetFileName(System.String)"/></para>
	</remarks>
</member><member name="P:Tools.IOt.Path.FileNameWithoutExtension">
	<summary>Returns the file name of the <see cref="T:System.IO.Path"/> without the extension.</summary>
	<returns>A <see cref="T:System.String"/> containing the string returned by <see cref="P:Tools.IOt.Path.FileName"/>, minus the last period (.) and all characters following it.</returns>
	<exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.</exception>
	<remarks>
		<para><see cref="T:System.ArgumentException"/> caused by empty, null or invalid <see cref="P:Tools.IOt.Path.Path"/> should occure only due to wildcart, because other cases are made impossible by setter of <see cref="P:Tools.IOt.Path.Path"/></para>
		<para>See also <seealso cref="M:System.IO.Path.GetFileNameWithoutExtension(System.String)"/></para>
	</remarks>
</member><member name="M:Tools.IOt.Path.GetFullPath">
	<summary>Returns the absolute path for the <see cref="T:System.IO.Path"/>.</summary>
	<returns>A string containing the fully qualified location of <see cref="T:System.IO.Path"/>, such as <example>"C:\MyFile.txt"</example>.</returns>
	<exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
	<exception cref="T:System.ArgumentNullException"><see cref="P:Tools.IOt.Path.Path"/> is null.</exception>
	<exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.-or- The system could not retrieve the absolute path.</exception>
	<exception cref="T:System.NotSupportedException"><see cref="P:Tools.IOt.Path.Path"/> contains a colon (":").</exception>
	<exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters</exception>
	<remarks>
		<para>Looks at file system</para>
		<para><see cref="T:System.ArgumentException"/> caused by empty, or invalid <see cref="P:Tools.IOt.Path.Path"/> should occure only due to wildcart, because other cases are made impossible by setter of <see cref="P:Tools.IOt.Path.Path"/>, <see cref="T:System.ArgumentNullException"/> should not occure due to same reason.</para>
		<para>See also <seealso cref="M:System.IO.Path.GetFullPath(System.String)"/></para>
	</remarks>
</member><member name="P:Tools.IOt.Path.ContainsInvalidPathChar">
	<summary>Gets value indicating wheather <see cref="P:Tools.IOt.Path.Path"/> contains¨character not allowed in path as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/></summary>
	<returns>Should always retrun false because invalid path chars are vlocked by the <see cref="P:Tools.IOt.Path.Path"/> setter</returns>
	<exception cref="T:System.NullReferenceException"><see cref="P:Tools.IOt.Path.Path"/> is Null - Should not occure because null values fo <see cref="P:Tools.IOt.Path.Path"/> are invalid</exception>
</member><member name="P:Tools.IOt.Path.PathRoot">
	<summary>Gets the root directory information of the <see cref="T:System.IO.Path"/>.</summary>
	<returns>A string containing the root directory of <see cref="T:System.IO.Path"/>, such as "C:\", or null if path is null, or an empty string if path does not contain root directory information.</returns>
	<exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.-or- <see cref="F:System.String.Empty"/> was passed to path. <para>This exception should occure only due to wildcards because other invalid values or blocked by <see cref="P:Tools.IOt.Path.Path"/>'s setter.</para></exception>
	<remarks>See also <seealso cref="M:System.IO.Path.GetPathRoot(System.String)"/></remarks>
</member><member name="M:Tools.IOt.Path.Random">
	<summary>Returns random path</summary>
	<remarks>See also <seealso cref="M:System.IO.Path.GetRandomFileName"/></remarks>
</member><member name="M:Tools.IOt.Path.TempFile">
	<summary>Returns path of a uniquely named, zero-byte temporary file on disk</summary>
	<exception cref="T:System.IO.IOException">An I/O error occurs, such as no unique temporary file name is available.- or -This method was unable to create a temporary file.</exception>
	<remarks>See also <seealso cref="M:System.IO.Path.GetTempFileName"/></remarks>
</member><member name="P:Tools.IOt.Path.HasExtension">
	<summary>Determines whether a path includes a file name extension.</summary>
	<returns>true if the characters that follow the last directory separator (\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, false.</returns>
	<exception cref="T:System.ArgumentException">path contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.<para>This exception should occure only due to wildcards because another invalid characters are blocked by the <see cref="P:Tools.IOt.Path.Path"/> setter</para></exception>
	<remarks>See also <seealso cref="M:System.IO.Path.HasExtension(System.String)"/></remarks>
</member><member name="P:Tools.IOt.Path.IsRooted">
	<summary>Gets a value indicating whether the specified <see cref="T:System.IO.Path"/> contains absolute or relative path information.</summary>
	<returns>true if <see cref="T:System.IO.Path"/> contains an absolute path; otherwise, false.</returns>
	<exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.<para>This exception should occure only due to wildcards becouse another invalid characters are blocked by the <see cref="P:Tools.IOt.Path.Path"/> setter.</para></exception>
	<remarks>See also <seealso cref="M:System.IO.Path.IsPathRooted(System.String)"/></remarks>
</member><member name="M:Tools.IOt.Path.SystemPaths.#ctor">
	<summary>Protected CTor</summary>
	<remarks>Protected in order not this class to be instantiable but in order to be deriveable</remarks>
</member><member name="P:Tools.IOt.Path.SystemPaths.Temp">
	<summary>Returns the path of the current users's temporary folder.</summary>
	<exception cref="T:System.Security.SecurityException">The caller does not have the required permissions</exception>
</member><member name="P:Tools.IOt.Path.SystemPaths.AllUserAppDataCurrent">
	<summary>Gets path of directory specific for current application taht should be used to store shared data</summary>
	<remarks>This is application-specific directory</remarks>
	<exception cref="T:System.IO.DirectoryNotFoundException">Path is empty usually because the operation systems doesn't support the directory</exception>
</member><member name="P:Tools.IOt.Path.SystemPaths.UserAppDataCurrent">
	<summary>Gets path of directory specific for current application taht should be used to store user specific data</summary>
	<remarks>This is application-specific directory</remarks>
	<exception cref="T:System.IO.DirectoryNotFoundException">Path is empty usually because the operation systems doesn't support the directory</exception>
</member><member name="P:Tools.IOt.Path.SystemPaths.Desktop">
	<summary>Gets path of Desktop of current user</summary>
	<exception cref="T:System.IO.DirectoryNotFoundException">Path is empty usually because the operation systems doesn't support the directory</exception>
</member><member name="P:Tools.IOt.Path.SystemPaths.Documments">
	<summary>Gets path of current user's Documents directory</summary>
	<exception cref="T:System.IO.DirectoryNotFoundException">Path is empty usually because the operation systems doesn't support the directory</exception>
</member><member name="P:Tools.IOt.Path.SystemPaths.Music">
	<summary>Gets path of My Music directory of current user</summary>
	<exception cref="T:System.IO.DirectoryNotFoundException">Path is empty usually because the operation systems doesn't support the directory</exception>
</member><member name="P:Tools.IOt.Path.SystemPaths.Pictures">
	<summary>Gets path of MyMy Pictures directory of current user</summary>
	<exception cref="T:System.IO.DirectoryNotFoundException">Path is empty usually because the operation systems doesn't support the directory</exception>
</member><member name="P:Tools.IOt.Path.SystemPaths.ProgramFiles">
	<summary>Gets path of the Program Files directory</summary>
	<exception cref="T:System.IO.DirectoryNotFoundException">Path is empty usually because the operation systems doesn't support the directory</exception>
</member><member name="P:Tools.IOt.Path.SystemPaths.Programs">
	<summary>Gets path of Programs directory (In the Start menu) of current user</summary>
	<exception cref="T:System.IO.DirectoryNotFoundException">Path is empty usually because the operation systems doesn't support the directory</exception>
</member><member name="P:Tools.IOt.Path.SystemPaths.OS">
	<summary>Gets path of operating system directory (typically C:\Windows)</summary>
</member><member name="P:Tools.IOt.Path.SystemPaths.System">
	<summary>Gets path of system directory (typically C:\Windows\System32)</summary>
</member><member name="P:Tools.IOt.Path.SystemPaths.Cookies">
	<summary>Gets path of user directory for Cookies</summary>
</member><member name="P:Tools.IOt.Path.SystemPaths.DesktopLogical">
	<summary>Gets path of logical desktop (possibly same as <see cref="P:Tools.IOt.Path.SystemPaths.Desktop"/>)</summary>
</member><member name="P:Tools.IOt.Path.SystemPaths.Favorites">
	<summary>Gets path of user directory for Favorites</summary>
</member><member name="P:Tools.IOt.Path.SystemPaths.History">
	<summary>Gets path of user directory for History</summary>
</member><member name="P:Tools.IOt.Path.SystemPaths.InternetCache">
	<summary>Gets path of user directory for Internet cache</summary>
</member><member name="P:Tools.IOt.Path.SystemPaths.ApplicationData">
	<summary>Gets path of the directory that serves as a common repository for application-specific data that is used by the current, non-roaming user.</summary>
</member><member name="P:Tools.IOt.Path.SystemPaths.AllUsersApplicationData">
	<summary>The directory that serves as a common repository for application-specific data that is used by all users.</summary>
</member><member name="P:Tools.IOt.Path.SystemPaths.MyComputer">
	<summary>Path of the My Computer</summary>
	<exception cref="T:System.ArgumentException"> When path is invalid, eg. empty which is common for Windows systems</exception>
</member><member name="P:Tools.IOt.Path.SystemPaths.Recent">
	<summary>Gets path of recent files directory</summary>
</member><member name="P:Tools.IOt.Path.SystemPaths.SendTo">
	<summary>Gets path of sent to directory</summary>
</member><member name="P:Tools.IOt.Path.SystemPaths.Start">
	<summary>Gets path of Start menu directory</summary>
</member><member name="P:Tools.IOt.Path.SystemPaths.Startup">
	<summary>Gets path of startup directory</summary>
</member><member name="P:Tools.IOt.Path.SystemPaths.Templates">
	<summary>Gets path of templates directory</summary>
</member><member name="T:Tools.IOt.Path.SystemPaths">
	<summary>Returns various system path as instance of <see cref="T:System.IO.Path"/></summary>
</member><member name="M:Tools.IOt.Path.Normalize(System.Boolean)">
	<summary>Normalizes path to use only one type of directory separators</summary>
	<param name="ToAlternative">If set to true the alternative directory separator (/ on Windows) is used instead of primary (\ on Windows)</param>
	<remarks>See also <seealso cref="F:System.IO.Path.DirectorySeparatorChar"/>, <seealso cref="F:System.IO.Path.AltDirectorySeparatorChar"/></remarks>
</member><member name="P:Tools.IOt.Path.Segments">
	<summary>Gets segmnents (directories) of path</summary>
	<returns>Normalized (see <see cref="M:Tools.IOt.Path.Normalize(System.Boolean)"/>) paht's <see cref="P:Tools.IOt.Path.Path"/> splitted by <see cref="F:System.IO.Path.DirectorySeparatorChar"/></returns>
	<remarks>In order to be able co re-construct path in <see cref="M:Tools.IOt.Path.Join(System.Collections.Generic.IEnumerable{System.String})"/> function the paths is splitted by all occurences of the <see cref="F:System.IO.Path.DirectorySeparatorChar"/>. This means that path like \\Dzonny\C\ hase 5 elements ("","","Dzonny","C","")</remarks>
</member><member name="M:Tools.IOt.Path.Up(System.Int32)">
	<summary>Removes <paramref name="Levels"/> parts from end of path</summary>
	<param name="Levels">Number of levels to be removed</param>
	<remarks>Note that if path ends with <see cref="F:System.IO.Path.DirectorySeparatorChar"/> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> (Like C:/Temp/) then result is only removal of this char (C:\Temp)</remarks>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Levels"/> is less then zero -or- <paramref name="Levels"/> is greater or equal to number of segments in current path</exception>
</member><member name="M:Tools.IOt.Path.op_Subtraction(Tools.IOt.Path,System.Int32)">
	<summary>Removes <paramref name="Levels"/> parts from end of <paramref name="Path"/></summary>
	<param name="Levels">Number of levels to be removed</param>
	<param name="Path">The <see cref="T:System.IO.Path"/> to remove levels from</param>
	<returns>New instance of <see cref="T:System.IO.Path"/> with segments removed</returns>
	<remarks>Note that if path ends with <see cref="F:System.IO.Path.DirectorySeparatorChar"/> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> (Like C:/Temp/) then result is only removal of this char (C:\Temp)</remarks>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Levels"/> is less then zero -or- <paramref name="Levels"/> is greater or equal to number of segments in current path</exception>
</member><member name="P:Tools.IOt.Path.Depth">
	<summary>Number of segments of current path</summary>
	<remarks>Note that number of segments is such path on Windows \\Dzonny\C\ if 5. See <see cref="P:Tools.IOt.Path.Segments"/></remarks>
</member><member name="M:Tools.IOt.Path.Join(System.Collections.Generic.IEnumerable{System.String})">
	<summary>Creates path from its segments</summary>
	<param name="Segments">Parts to maked path of</param>
	<exception cref="T:System.ArgumentNullException">Segments is null</exception>
</member><member name="M:Tools.IOt.Path.CreateDirectory">
	<summary>Creates all directories and subdirectories as specified by <see cref="T:System.IO.Path"/>.</summary>
	<returns>A <see cref="T:System.IO.DirectoryInfo"/> as specified by <see cref="T:System.IO.Path"/>.</returns>
	<exception cref="T:System.ArgumentNullException"><see cref="P:Tools.IOt.Path.Path"/> is null. Shouldn't occure.</exception>
	<exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
	<exception cref="T:System.IO.IOException">The directory specified by path is read-only or is not empty.-or-A file with the same name and location specified by <see cref="T:System.IO.Path"/> exists.</exception>
	<exception cref="T:System.NotSupportedException">An attempt was made to create a directory with only the colon character (:).</exception>
	<exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. Should not occure.</exception>
	<exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
	<exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
</member><member name="M:Tools.IOt.Path.op_GreaterThan(Tools.IOt.Path,Tools.IOt.Path)">
	<summary>Gets value indicating if <paramref name="Child"/> is child address of <paramref name="Parent"/></summary>
	<param name="Parent">Possibly parent address</param>
	<param name="Child">Possibly child address</param>
	<returns>True if <paramref name="Child"/> is subdirecrory of <paramref name="Parent"/> or file lying there</returns>
	<remarks>This operator works with no touch to file system - only string comparison is done</remarks>
</member><member name="M:Tools.IOt.Path.op_LessThan(Tools.IOt.Path,Tools.IOt.Path)">
	<summary>Gets value indicating if <paramref name="Child"/> is child address of <paramref name="Parent"/></summary>
	<param name="Parent">Possibly parent address</param>
	<param name="Child">Possibly child address</param>
	<returns>True if <paramref name="Child"/> is subdirecrory of <paramref name="Parent"/> or file lying there</returns>
	<remarks>This operator works with no touch to file system - only string comparison is done</remarks>
</member><member name="M:Tools.IOt.Path.op_Equality(Tools.IOt.Path,Tools.IOt.Path)">
	<summary>Compares two <see cref="P:Tools.IOt.Path.Path"/>s for equivalence</summary>
	<param name="a">First path to be combared</param>
	<param name="b">Second path to be compared</param>
	<returns>True if both paths are equivalent</returns>
	<remarks>Only string comparison is done</remarks>
</member><member name="M:Tools.IOt.Path.op_Inequality(Tools.IOt.Path,Tools.IOt.Path)">
	<summary>Compares two <see cref="P:Tools.IOt.Path.Path"/>s for inequivalence</summary>
	<param name="a">First path to be combared</param>
	<param name="b">Second path to be compared</param>
	<returns>True if path aren't equivalent</returns>
	<remarks>Only string comparison is done</remarks>
</member><member name="M:Tools.IOt.Path.Equals(System.Object)">
	<summary>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.IO.Path"/>.</summary>
	<param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.IO.Path"/>.</param>
	<returns>True if <paramref name="obj"/> represents <see cref="P:Tools.IOt.Path.Path"/> or <see cref="T:System.String"/> equivalent to current instance or </returns>
</member><member name="M:Tools.IOt.Path.IsChildOf(Tools.IOt.Path)">
	<summary>Indicates wheather current instance is sub-path of passed instance</summary>
	<param name="Parent">Possible parent of current instace</param>
	<returns>True if <paramref name="Parent"/> is parent of current instance</returns>
</member><member name="M:Tools.IOt.Path.IsparentOf(Tools.IOt.Path)">
	<summary>Indicates wheather current instance is parent of passed instance</summary>
	<param name="Child">Posiible child of current instance</param>
	<returns>True if <paramref name="Child"/> is sub-path of current instace</returns>
</member><member name="P:Tools.IOt.Path.IsDirectory">
	<summary>Checks wheather path represented by current instance exists and is directory</summary>
</member><member name="M:Tools.IOt.Path.GetDirectory">
	<summary>Gets directory represented by current instance (if exists)</summary>
	<exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</exception>
	<exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> contains invalid characters such as ", &lt;, &gt;, or |. This exception should not occure because invalid characters are filtered by the <see cref="P:Tools.IOt.Path.Path"/> setter</exception>
	<exception cref="T:System.ArgumentNullException"><seealso cref="P:Tools.IOt.Path.Path"/> is null. Should not occure.</exception>
	<exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
</member><member name="P:Tools.IOt.Path.IsFile">
	<summary>Check wheather path represented by current instace exists and is file</summary>
</member><member name="M:Tools.IOt.Path.GetFile">
	<summary>Gets file represented by current instance (if exists)</summary>
	<exception cref="T:System.UnauthorizedAccessException">Access to file is denied.</exception>
	<exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
	<exception cref="T:System.ArgumentNullException"><see cref="P:Tools.IOt.Path.Path"/> is null. Should not occure.</exception>
	<exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
	<exception cref="T:System.NotSupportedException"><see cref="P:Tools.IOt.Path.Path"/> contains a colon (:) in the middle of the string.</exception>
	<exception cref="T:System.ArgumentException">The <see cref="P:Tools.IOt.Path.Path"/> is empty, contains only white spaces, or contains invalid characters. Should not occure because the <see cref="P:Tools.IOt.Path.Path"/> setter blocks such values.</exception>
</member><member name="P:Tools.IOt.Path.Exists">
	<summary>Checks wheather path represented by current instance exists</summary>
	<returns>True if <see cref="P:Tools.IOt.Path.IsFile"/> or <see cref="P:Tools.IOt.Path.IsDirectory"/> returns True</returns>
</member><member name="M:Tools.IOt.Path.Delete">
	<summary>Deletes item represented by <see cref="T:System.IO.Path"/> Directories are deleted recursivelly</summary>
	<exception cref="T:System.IO.IOException">The specified file is in use.</exception>
	<exception cref="T:System.NotSupportedException">path is in an invalid format.</exception>
	<exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. -or- path specified a read-only file.</exception>
</member><member name="M:Tools.IOt.Path.Copy(Tools.IOt.Path,System.Boolean)">
	<summary>Copies file or directory from one location to another</summary>
	<param name="Target">Target location</param>
	<param name="SkipErrors">Applies only when copying directory. Suppresses exceptions occuring when copying individual items. It may result not exact copy.</param>
	<returns>When copying file always True, when copying directory and <paramref name="SkipErrors"/> is True returns true if no error occured during procces if <paramref name="SkipErrors"/> is false returns True or throws an exception.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Target"/> is null</exception>
	<exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="Target"/> is invalid (for example, it is on an unmapped drive).</exception>
	<exception cref="T:System.ArgumentException"><paramref name="Target"/> specifies a directory when copying file</exception>
	<exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
	<exception cref="T:System.NotSupportedException"><see cref="P:Tools.IOt.Path.Path"/> of curent instance or of <paramref name="Target"/> is in an invalid format when copying file -or-
 An attempt was made to create a directory with only the colon character (:) when coping directory.</exception>
	<exception cref="T:System.IO.IOException">An I/O error has occurred when copying file. -or-
 The directory specified by <paramref name="Target"/> or one of its subdirectories is read-only or is not empty or a file with the same name and location specified by <paramref name="Target"/> or one of its subdirectories exists while copying directory.</exception>
	<exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
	<exception cref="T:System.IO.FileNotFoundException">Source file was not found.</exception>
</member><member name="M:Tools.IOt.Path.Move(Tools.IOt.Path,System.Boolean)">
	<summary>Moves file or directory from one location to another</summary>
	<param name="Target">Target location</param>
	<param name="SkipErrors">Applies only when moving directory. Suppresses exceptions occuring when moving individual items. It may result not exact copy.</param>
	<returns>When moving file always True, when moving directory and <paramref name="SkipErrors"/> is True returns true if no error occured during procces if <paramref name="SkipErrors"/> is false returns True or throws an exception.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Target"/> is null</exception>
	<exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="Target"/> is invalid (for example, it is on an unmapped drive).</exception>
	<exception cref="T:System.ArgumentException"><paramref name="Target"/> specifies a directory when copying file</exception>
	<exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
	<exception cref="T:System.NotSupportedException"><see cref="P:Tools.IOt.Path.Path"/> of curent instance or of <paramref name="Target"/> is in an invalid format when copying file -or-
 An attempt was made to create a directory with only the colon character (:) when coping directory.</exception>
	<exception cref="T:System.IO.IOException">An I/O error has occurred when copying file. -or-
 The directory specified by <paramref name="Target"/> or one of its subdirectories is read-only or is not empty or a file with the same name and location specified by <paramref name="Target"/> or one of its subdirectories exists while copying directory.</exception>
	<exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
	<exception cref="T:System.IO.FileNotFoundException">Sorce file was not found.</exception>
</member><member name="M:Tools.IOt.Path.GetEnumerator">
	<summary>Returns an enumerator that iterates through the all files and folder under current folder recursivelly. Current folder is included in enumeration. Files are listed before folders at each level.</summary>
	<returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the file system recursivelly.</returns>
	<remarks>If current instance points to file instead of folder then return enumerator thet enumerates throught array of exactly one item - current path; otherwise <see cref="T:Tools.IOt.FileSystemEnumerator"/> is returned.</remarks>
</member><member name="M:Tools.IOt.Path.GetEnumerator(System.Boolean)">
	<summary>Returns an enumerator that iterates through the all files and folders under current folder recursivelly. Current folder is not included in enumeration.</summary>
	<returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterates through the file system recursivelly.</returns>
	<param name="FoldersFirst">True to list Folders before files at each level.</param>
	<remarks>If current instance points to file instead of folder then return enumerator thet enumerates throught array of exactly one item - current path; otherwise <see cref="T:Tools.IOt.FileSystemEnumerator"/> is returned.</remarks>
</member><member name="M:Tools.IOt.Path.GetEnumerator1">
	<summary>Returns an enumerator that iterates through the file system.</summary>
	<returns><see cref="M:Tools.IOt.Path.GetEnumerator()"/></returns>
	<remarks>Use type-safe <see cref="M:Tools.IOt.Path.GetEnumerator()"/>instead</remarks>
</member><member name="T:Tools.IOt.Path">
	<summary>Wraps <see cref="T:System.String"/> into separet class representing path and allows operation with it</summary>
	<remarks>There are no check of validity of paths in current file system during operations, so you can operate with nonexisting paths (unless specified otherwise)</remarks>
</member><member name="F:Tools.Box`1._Item">
	<summary>Contains value of the <see cref="P:Tools.Box`1.Item"/> property</summary>
</member><member name="P:Tools.Box`1.Item">
	<summary>The value of boxed type</summary>
	<returns>Current boxed value</returns>
	<value>New boxed value</value>
</member><member name="M:Tools.Box`1.#ctor(`0)">
	<summary>CTor</summary>
	<param name="item">Initial value of boxed type</param>
</member><member name="M:Tools.Box`1.op_Implicit(Tools.Box{`0})~`0">
	<summary>Unboxes boxed value</summary>
	<param name="a">Boxed value</param>
	<returns>Unboxed value</returns>
	<remarks><seealso cref="P:Tools.Box`1.Item"/></remarks>
</member><member name="M:Tools.Box`1.op_Implicit(`0)~Tools.Box{`0}">
	<summary>Boxes value</summary>
	<param name="a">Not boxed value</param>
	<returns>New instance of <see cref="T:Tools.Box`1"/> that boxes value <paramref name="a"/></returns>
</member><member name="M:Tools.Box`1.Clone">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
	<remarks>If <see cref="T"/> implements <see cref="T:System.ICloneable"/> then also boxed object is cloned (deep copy), othervise only reference is passed to the new instance.</remarks>
</member><member name="M:Tools.Box`1.ToString">
	<summary>String representationm of current instance</summary>
</member><member name="T:Tools.Box`1">
	<summary>This class can wrap everything to be class</summary>
	<remarks>This removes limitation of <see cref="T:System.Nullable`1"/> that limits wrapped object to be structure</remarks>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._DefaultImplementation">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> property</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation">
	<summary>Gets or sets default implementation used for messageboxes shown by static <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(Tools.WindowsT.IndependentT.MessageBox,Tools.WindowsT.IndependentT.MessageBox,System.Windows.Forms.IWin32Window)"/> methods of this class</summary>
	<returns>Type currently used as default implementation of message box</returns>
	<value>Sets application-wide default implementation of message box</value>
	<exception cref="T:System.ArgumentNullException">Value being set is null</exception>
	<exception cref="T:System.ArgumentException">Value being set represents type that either does not derive from <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/>, is abstract, is generic non-closed or hasn't parameter-less contructor.</exception>
	<remarks>Default implementation used is <see cref="T:Tools.WindowsT.FormsT.MessageBox"/> which uses WinForms technology.
 You can use this static poperty to change implementation of messagebox that is globaly used in your application. This property does not involve direct calls to derived classes, only calls of static methods on <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/>.</remarks>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._Buttons">
	<summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._DefaultButton">
	<summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultButton"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._CloseResponse">
	<summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._Prompt">
	<summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Prompt"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._Title">
	<summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Title"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._Icon">
	<summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Icon"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._Options">
	<summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Options"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._CheckBoxes">
	<summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CheckBoxes"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._ComboBox">
	<summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._Radios">
	<summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._TopControl">
	<summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._MidControl">
	<summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MidControl"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._BottomControl">
	<summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._Timer">
	<summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Timer"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._TimeButton">
	<summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TimeButton"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._AllowClose">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.AllowClose"/> property</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.AllowClose">
	<summary>Gets or sets value indicating if dialog can be closed without clicking any of buttons</summary>
	<remarks>This does not affacet possibility to close message box programatically using the <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Close"/> method.</remarks>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.Buttons">
	<summary>Defines buttons displayed on message box</summary>
	<remarks>This collection reports event. You can use them to track changed of the collection either via events of the collection itself or via the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.ButtonsChanged"/> event.
 <para>Do not store nulls in the collection. It won't accept them and <see cref="T:System.OperationCanceledException"/> will be thrown.</para></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ShouldSerializeButtons">
	<summary>gets value indicating if value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> property have been changed and sou it should be serialized</summary>
	<returns>Ture if <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> should be serialized, false if it has its default value</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ResetButtons">
	<summary>Resets the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> to its initial value</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.DefaultButton">
	<summary>Indicates 0-based index of button that has focus when message box is shown and that is default button for message box</summary>
	<remarks>Default button is treated as being clicked when user presses Enter. If value is set outside of range of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> (i.e. -1), message box has no default button.
 <para>If messagebox implementation supports changes of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> collection when displayed, this property is changed on buttom insert/removal and it points strill to the same physical button.</para>
	</remarks>
	<seealso cref="P:System.Windows.Forms.Form.AcceptButton"/>
	<seealso cref="P:System.Windows.Controls.Button.IsDefault"/>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse">
	<summary>Gets or sets value returned by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(Tools.WindowsT.IndependentT.MessageBox,Tools.WindowsT.IndependentT.MessageBox,System.Windows.Forms.IWin32Window)"/> function when user closes the message box by closing window or by pressin escape</summary>
	<remarks>Values that are not members of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DialogResult"/> enumeration can be safely used.
 <para>If <see cref="P:Tools.WindowsT.IndependentT.MessageBox.AllowClose"/> is false this property ahs effect only when mapped to one of buttons (has same value as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> of one buttons) and user presses escape.</para></remarks>
	<seealeo cref="P:Tools.WindowsT.IndependentT.MessageBox.DialogResult"/><seealso cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(Tools.WindowsT.IndependentT.MessageBox,Tools.WindowsT.IndependentT.MessageBox,System.Windows.Forms.IWin32Window)"/>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ShouldSerializeCloseResponse">
	<summary>gets value idicating if the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> property should be serialuzed</summary>
	<returns>True when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> differs from <see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetDefaultCloseResponse"/></returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ResetCloseResponse">
	<summary>Resets value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> property to <see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetDefaultCloseResponse"/></summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.UseDefaultCloseResponse">
	<summary>Gets value indicating if the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> property has its default value</summary>
	<returns>True when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> equals to <see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetDefaultCloseResponse"/>; false otherwise</returns>
	<value>Setting value of the property to true causes reseting value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> to its default value (<see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetDefaultCloseResponse"/>). Setting the property to false is ignored.</value>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.GetDefaultCloseResponse">
	<summary>Gets default value for the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> property. The value depends on current content of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> collection.</summary>
	<returns>Default value for the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> property</returns>
	<remarks>Following rules apply in given order:
 <list type="list">
			<item>If <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> is empty, returns <see cref="F:System.Windows.Forms.DialogResult.None"/></item>
			<item>If <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> has only one element, returns <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result">Result</see> of that button</item>
			<item>If any button with <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result">Result</see>
				<see cref="F:System.Windows.Forms.DialogResult.Cancel"/> exists returns <see cref="F:System.Windows.Forms.DialogResult.Cancel"/></item>
			<item>If any button with <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result">Result</see>
				<see cref="F:System.Windows.Forms.DialogResult.No"/> exists returns <see cref="F:System.Windows.Forms.DialogResult.No"/></item>
			<item>If any button with <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result">Result</see>
				<see cref="F:System.Windows.Forms.DialogResult.Abort"/> exists returns <see cref="F:System.Windows.Forms.DialogResult.Abort"/></item>
			<item>If any button with <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result">Result</see>
				<see cref="F:System.Windows.Forms.DialogResult.Ignore"/> exists returns <see cref="F:System.Windows.Forms.DialogResult.Ignore"/></item>
			<item>In all other cases returns <see cref="F:System.Windows.Forms.DialogResult.None"/></item>
		</list>
	</remarks>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.Prompt">
	<summary>Gets or sets text of prompt of message box.</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.Title">
	<summary>Gets or sets title text of message box</summary>
	<remarks>If value of thsi property is null or an empty string, application title is used (see <see cref="P:Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Title"/>)</remarks>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.Icon">
	<summary>Gets or sets icon image to display on the message box</summary>
	<remarks>Expected image size is 64×64px. Image is resized proportionaly to fit this size. This may be changed by derived class.</remarks>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.Options">
	<summary>Gets or sets options of the message box</summary>
	<remarks>Text align applies only to prompt part of message box. In right-to-left reading text align has oposite meaning - <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignLeft"/> aligns to right and <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignRight"/> aligns to left.</remarks>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.CheckBoxes">
	<summary>Check boxes displayed in messaqge box</summary>
	<remarks>This collection reports event. You can use them to track changes of the collection either via handling events of the collection or via the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.CheckBoxesChanged"/> event.
 <para>Do not store nulls in the collection. It won't accept them and <see cref="T:System.OperationCanceledException"/> will be thrown.</para></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ShouldSerializeCheckBoxes">
	<summary>Gets value indicating if the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CheckBoxes"/> property has changed and thus should be serialized</summary>
	<returns>True when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CheckBoxes"/>.<see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Count">Count</see> is non-zero</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ResetCheckBoxes">
	<summary>Resets value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CheckBoxes"/> property to its default value (clears it)</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox">
	<summary>Gets or sets combo box (drop down list) displayed in message box</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.Radios">
	<summary>Radio buttons displayed on message box</summary>
	<remarks>This collection reports event. You can use them to track changes of the collection either via handling events of the collection or via the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.RadiosChanged"/> event.
 <para>Do not store nulls in the collection. It won't accept them and <see cref="T:System.OperationCanceledException"/> will be thrown.</para></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ShouldSerializeRadios">
	<summary>Gets value idiciating if the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios"/> property should be serialized</summary>
	<returns>True if count of items of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios"/> is greater than zero</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ResetRadios">
	<summary>Resets value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios"/> property to its default value (an empty list)</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.TopControl">
	<summary>Gets or sets additional control displayed at top of the message box (above message)</summary>
	<remarks>Implementation of message box (derived class) may accept only controls of specified type(s) like <see cref="T:System.Windows.Forms.Control"/> or <see cref="T:System.Windows.FrameworkElement"/> and ignore any other types.</remarks>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MidControl">
	<summary>Gets or sets additional control displayed in the middle of the message box (above buttons)</summary>
	<remarks>Implementation of message box (derived class) may accept only controls of specified type(s) like <see cref="T:System.Windows.Forms.Control"/> or <see cref="T:System.Windows.FrameworkElement"/> and ignore any other types.</remarks>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl">
	<summary>Gets or sets additional control displayed at bottom of the message box (below buttons)</summary>
	<remarks>Implementation of message box (derived class) may accept only controls of specified type(s) like <see cref="T:System.Windows.Forms.Control"/> or <see cref="T:System.Windows.FrameworkElement"/> and ignore any other types.</remarks>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.Timer">
	<summary>Gets or sets value indicating for how long the message box will be displayed before it closes with <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> as result.</summary>
	<remarks><see cref="F:System.TimeSpan.Zero"/> or less vaklue meand then no count-down takes effect</remarks>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.TimeButton">
	<summary>Gets or sets value indicating 0-based index of button when count-down time is displayed</summary>
	<remarks>Following values has special meaning:
 <list type="table"><listheader><term>value</term><description>efect</description></listheader>
			<item><term>-1</term><description>Button is chosed automatically depending on <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> property (if there are more buttons with same <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> first is used)</description></item>
			<item><term>&lt; -1</term><description>Count down time is displayed in message box title</description></item>
			<item><term>&gt;= <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons">Buttons</see>.<see cref="P:System.Collections.Generic.List`1.Count">Count</see></term><description>Count down is not displayed</description></item>
		</list>
 Count down is displayed as time in format h:mm:ss, m:ss or s depending on current value of time remaining (always the shortest possible format is used).</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.AddHandlers">
	<summary>Adds event handlers to collections</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.#ctor">
	<summary>Default CTor - creates messagebox with just one button <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.OK"/></summary>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.AllowCloseChanged">
	<summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.AllowClose"/> property changes</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnAllowCloseChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Boolean})">
	<summary>Raises tha <see cref="E:Tools.WindowsT.IndependentT.MessageBox.AllowCloseChanged"/> event. Calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event arguments</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.Changed">
	<summary>Raised when value of member changes</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Event information. For changes of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/>, <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CheckBoxes"/> and <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios"/> collections event argument of <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged"/> is passed instead of argument of <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Changed"/>.</param>
	<remarks><paramref name="e"/>Should contain additional information that can be used in event-handling code (e.g. use <see cref="T:Tools.IReportsChange.ValueChangedEventArgs`1"/> class)</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.Changed"/> event</summary>
	<param name="e">Event parameters</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.DefaultButtonChanged">
	<summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultButton"/> property changes</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnDefaultButtonChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Int32})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.DefaultButtonChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event arguments</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.CloseResponseChanged">
	<summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> property changes</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnCloseResponseChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Windows.Forms.DialogResult})">
	<summary>Raises the <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnCloseResponseChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Windows.Forms.DialogResult})"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event arguments</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.PromptChanged">
	<summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Prompt"/> property changes</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnPromptChanged(Tools.IReportsChange.ValueChangedEventArgs{System.String})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.PromptChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event arguments</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.TitleChanged">
	<summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Title"/> property changes</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnTitleChanged(Tools.IReportsChange.ValueChangedEventArgs{System.String})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.TitleChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event arguments</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.IconChanged">
	<summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Icon"/> property changes</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnIconChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Drawing.Image})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.IconChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event arguments</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.OptionsChanged">
	<summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Options"/> property changes</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnOptionsChanged(Tools.IReportsChange.ValueChangedEventArgs{Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.OptionsChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event arguments</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.CheckBoxesChanged">
	<summary>Raised when content of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CheckBoxes"/> collection changes</summary>
	<param name="sender">Source of the event - always this instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></param>
	<param name="e">Event arguments. Argument e of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios">Radios</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged"/> is passed directly here.</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnCheckBoxesChanged(Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox},Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox}.ListChangedEventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.CheckBoxesChanged"/> event. Handles <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios">Radios</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged">CollectionChanged</see> event. Calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/>.</summary>
	<param name="sender">Source ot the event - <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios"/></param>
	<param name="e">Event arguments. Those arguemnts are directly passed to <see cref="E:Tools.WindowsT.IndependentT.MessageBox.RadiosChanged"/> and <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.ComboBoxChanged">
	<summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/> property changes</summary>
	<remarks>This event tracks only changes of value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/> property itsels. It does not track changes of values of its inner properties.</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnComboBoxChanged(Tools.IReportsChange.ValueChangedEventArgs{Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.ComboBoxChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event arguments</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.TopControlChanged">
	<summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/> property changes</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnTopControlChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Object})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.TopControlChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event arguments</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.MidControlChanged">
	<summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MidControl"/> property changes</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnMidControlChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Object})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MidControlChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event arguments</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.BottomControlChanged">
	<summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl"/> property changes</summary>
</member><member name="T:Tools.WindowsT.IndependentT.MessageBox.ControlChangedEventHandler">
	<summary>Delegate for events <see cref="E:Tools.WindowsT.IndependentT.MessageBox.BottomControlChanged"/>, <see cref="E:Tools.WindowsT.IndependentT.MessageBox.TopControlChanged"/> and <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MidControlChanged"/></summary>
	<param name="sender">Source of the event</param>
	<param name="e">Event arguments</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnBottomControlChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Object})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.BottomControlChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event arguments</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.TimerChanged">
	<summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Timer"/> property changes</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnTimerChanged(Tools.IReportsChange.ValueChangedEventArgs{System.TimeSpan})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.TimerChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event arguments</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.TimeButtonChanged">
	<summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TimeButton"/> property changes</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnTimeButtonChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Int32})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.TimeButtonChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event arguments</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.RadiosChanged">
	<summary>Raised when content of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios"/> collection changes</summary>
	<param name="sender">Source of the event - always this instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></param>
	<param name="e">Event arguments. Argument e of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios">Radios</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged"/> is passed directly here.</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnRadiosChanged(Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton},Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton}.ListChangedEventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.RadiosChanged"/> event. Handles <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios">Radios</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged">CollectionChanged</see> event. Calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/>.</summary>
	<param name="sender">Source ot the event - <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios"/></param>
	<param name="e">Event arguments. Those arguemnts are directly passed to <see cref="E:Tools.WindowsT.IndependentT.MessageBox.RadiosChanged"/> and <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.ButtonsChanged">
	<summary>Raised when content of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> collection changes</summary>
	<param name="sender">Source of the event - always this instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></param>
	<param name="e">Event arguments. Argument e of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons">Radios</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged"/> is passed directly here.</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnButtonsChanged(Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton},Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton}.ListChangedEventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.ButtonsChanged"/> event. Handles <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons">Radios</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged">CollectionChanged</see> event. Calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/>.</summary>
	<param name="sender">Source ot the event - <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/></param>
	<param name="e">Event arguments. Those arguemnts are directly passed to <see cref="E:Tools.WindowsT.IndependentT.MessageBox.ButtonsChanged"/> and <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></param>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl._Text">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl._ToolTip">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTip"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl._Enabled">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Enabled"/> property</summary>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.TextChanged">
	<summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/> property changes</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Information about old and new value</param>
	<remarks>If derived control is editable, user can cause this event to be fired.</remarks>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTipChanged">
	<summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTip"/> property changes</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Information about old and new value</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.EnabledChanged">
	<summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Enabled"/> property changes</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Information about old and new value</param>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text">
	<summary>Gets or sets text displayed on control</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTip">
	<summary>Gets or sets tool tip text for the button</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Enabled">
	<summary>Gets or sets value indicating if button is enabled (accessible) or not</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnTextChanged(Tools.IReportsChange.ValueChangedEventArgs{System.String})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.TextChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event parameters</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnEnabledChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Boolean})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.EnabledChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event parameters</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnToolTipChanged(Tools.IReportsChange.ValueChangedEventArgs{System.String})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTipChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event parameters</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Changed">
	<summary>Raised when value of member changes</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Event information</param>
	<remarks><paramref name="e"/>Additionla information - is <see cref="T:Tools.IReportsChange.ValueChangedEventArgs`1"/> or <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeEventArgs`1"/></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Changed"/> event</summary>
	<param name="e">Event parameters - should be <see cref="T:Tools.IReportsChange.ValueChangedEventArgs`1"/> or <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeEventArgs`1"/></param>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl._Control">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Control"/> property</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Control">
	<summary>Gets or sets physical control that currently implements this control</summary>
	<remarks>
 This property is intended to be used by GUI implementation to store instance of for example <see cref="T:System.Windows.Forms.Button"/> that currently represents the control.
 Its up to implementation how and if it will use this property. Caller should not rely on content of the property.
 </remarks>
</member><member name="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl">
	<summary>Common base for predefined message box controls</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton._Result">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton._Button">
	<summary>Contains value of the <see cref="T:System.Windows.Forms.Button"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton._AccessKey">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKey"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton._HasChanged">
	<summary>Contains value of the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Changed"/> property</summary>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.ClickPreview">
	<summary>Raised when button is clicked, before action associated with the button is taken. This event can be canceled.</summary>
	<param name="e">Event arguments. Can be used to cancel the event. <paramref name="e"/>.<see cref="P:System.ComponentModel.CancelEventArgs.Cancel">Cancel</see> false means tha message box will be closed; false means the message box will remain open.</param>
	<param name="sender">Instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/> that have raised the event</param>
	<remarks>If <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.HelpDialogResult"/>
		<paramref name="e"/>.<see cref="P:System.ComponentModel.CancelEventArgs.Cancel">Cancel</see> is pre-set to true. That means that if it is not set to false, message box is not closed when help button is clicked.</remarks>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.ResultChanged">
	<summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> property changes</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Information about old and new value</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKeyChanged">
	<summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKey"/> property changes</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Information about old and new value</param>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result">
	<summary>Gets or sets result produced by this button</summary>
	<remarks>In case you need to define your own buttons you can use this property and set it to value thet is not member of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DialogResult"/> enumeration.
 <para>Special result value <see cref="F:Tools.WindowsT.IndependentT.MessageBox.HelpDialogResult"/> defines help button. The <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> class does not pefrom any help-providing actions for that button, only, by default, thius button does not cause the messagebox to be closed.</para>
	</remarks>
	<seealso cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Help"/>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKey">
	<summary>Gets or sets access key (access character for the button)</summary>
	<value>Should be one of letters contained in <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>, otherwise it is not guaranted that accesskey will work.</value>
	<remarks>
 As <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> is underlaying-technology independent, mnemonics for accesskeys (such as &amp; in WinForms and _ in WPF) should not be used. You should rather use this property.
 When you do not want to use accesskey for your button, set his property to 0 (null char, <see cref="F:Microsoft.VisualBasic.Constants.vbNullChar"/>).
 </remarks>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.HasChanged">
	<summary>Gets value indicating if any property of this instance have been changed since its construction</summary>
	<remarks>Changing this property does not cause the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Changed"/> event to be raised</remarks>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.IsConstructing">
	<summary>Ture indicates that this instance is currently being constructed</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor">
	<summary>CTor - creates new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/> class</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String)">
	<summary>CTor from button text</summary>
	<param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,System.Char)">
	<summary>CTor from button text and access key</summary>
	<param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
	<param name="AccessKey">Character used as button shortcut (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKey"/>)</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,System.String)">
	<summary>CTor from text and tool tip text</summary>
	<param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
	<param name="ToolTip">Tool tip (help) text for button (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTip"/>)</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,System.String,System.Char)">
	<summary>CTor from text, tool tip text and access key</summary>
	<param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
	<param name="ToolTip">Tool tip (help) text for button (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTip"/>)</param>
	<param name="AccessKey">Character used as button shortcut (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKey"/>)</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,System.Windows.Forms.DialogResult)">
	<summary>CTor from text and dialog result</summary>
	<param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
	<param name="Result">Result returned by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(Tools.WindowsT.IndependentT.MessageBox,Tools.WindowsT.IndependentT.MessageBox,System.Windows.Forms.IWin32Window)"/> function when the button is clicked (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>)</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,System.Windows.Forms.DialogResult,System.Char)">
	<summary>CTor from text, dialog result and access key</summary>
	<param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
	<param name="Result">Result returned by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(Tools.WindowsT.IndependentT.MessageBox,Tools.WindowsT.IndependentT.MessageBox,System.Windows.Forms.IWin32Window)"/> function when the button is clicked (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>)</param>
	<param name="AccessKey">Character used as button shortcut (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKey"/>)</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,System.String,System.Windows.Forms.DialogResult)">
	<summary>CTor from text, tool tip text and dialog result</summary>
	<param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
	<param name="Result">Result returned by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(Tools.WindowsT.IndependentT.MessageBox,Tools.WindowsT.IndependentT.MessageBox,System.Windows.Forms.IWin32Window)"/> function when the button is clicked (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>)</param>
	<param name="ToolTip">Tool tip (help) text for button (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTip"/>)</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,System.String,System.Windows.Forms.DialogResult,System.Char)">
	<summary>CTor from text, tool tip text, dialog result and access key</summary>
	<param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
	<param name="Result">Result returned by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(Tools.WindowsT.IndependentT.MessageBox,Tools.WindowsT.IndependentT.MessageBox,System.Windows.Forms.IWin32Window)"/> function when the button is clicked (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>)</param>
	<param name="ToolTip">Tool tip (help) text for button (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTip"/>)</param>
	<param name="AccessKey">Character used as button shortcut (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKey"/>)</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,System.Boolean)">
	<summary>CTor from text and enabled value</summary>
	<param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
	<param name="Enabled">Initial value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Enabled"/> property</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,System.Windows.Forms.DialogResult,System.Boolean,System.String)">
	<summary>CTor from text, dialog result, tool tip text and enabled value</summary>
	<param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
	<param name="Enabled">Initial value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Enabled"/> property</param>
	<param name="Result">Result returned by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(Tools.WindowsT.IndependentT.MessageBox,Tools.WindowsT.IndependentT.MessageBox,System.Windows.Forms.IWin32Window)"/> function when the button is clicked (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>)</param>
	<param name="ToolTip">Tool tip (help) text for button (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTip"/>)</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.ClickPreviewEventHandler,System.String,System.Windows.Forms.DialogResult,System.Boolean,System.Char)">
	<summary>CTor from text, click event handler and optionally tool tip text, dialog result, access key and enabled value</summary>
	<param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
	<param name="ClickPreview">Delegate handler for <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.ClickPreview"/> event</param>
	<param name="ToolTip">Tool tip (help) text for button (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTip"/>)</param>
	<param name="Result">Result returned by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(Tools.WindowsT.IndependentT.MessageBox,Tools.WindowsT.IndependentT.MessageBox,System.Windows.Forms.IWin32Window)"/> function when the button is clicked (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>)</param>
	<param name="Enabled">Initial value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Enabled"/> property</param>
	<param name="AccessKey">Character used as button shortcut (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKey"/>)</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.OnClick">
	<summary>Called by owner window when appropriate button is clicked. Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.ClickPreview"/> event</summary>
	<returns>True if action associated with button can be performed. False when event was canceled</returns>
	<remarks>This function should be called only by class derived from <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> which owns the button.</remarks>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.OK">
	<summary>Default OK button</summary>
	<returns>On each call retirns another (newly created instance) of button</returns>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Cancel">
	<summary>Default Cancle button</summary>
	<returns>On each call retirns another (newly created instance) of button</returns>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Yes">
	<summary>Default Yes button</summary>
	<returns>On each call retirns another (newly created instance) of button</returns>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.No">
	<summary>Defaut No button</summary>
	<returns>On each call retirns another (newly created instance) of button</returns>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Abort">
	<summary>Default Abort button</summary>
	<returns>On each call retirns another (newly created instance) of button</returns>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Retry">
	<summary>Default Retry button</summary>
	<returns>On each call retirns another (newly created instance) of button</returns>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Ignore">
	<summary>Default Ignore button</summary>
	<returns>On each call retirns another (newly created instance) of button</returns>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Help">
	<summary>Default Help button</summary>
	<returns>On each call retirns another (newly created instance) of button</returns>
	<remarks>
		<see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> of this button is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.HelpDialogResult"/>.
 The only difference between treating button with <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> set to <see cref="F:Tools.WindowsT.IndependentT.MessageBox.HelpDialogResult"/> and other buttons is that by default dialog is not closed when help button is clicked.
 <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> does not take any help-providing action. See the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.ClickPreview"/> event in order to see how is controlled if dialog closes when button is clicked or not.
 </remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.GetButtons(System.Windows.Forms.MessageBoxButtons)">
	<summary>Gets buttons specified by WinForms enumeration value</summary>
	<param name="Buttons">Buttons to get</param>
	<returns>Array of buttons as specified in <paramref name="Buttons"/></returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/></exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.GetButtons(System.Windows.MessageBoxButton)">
	<summary>Gets buttons specified by WPF enumeration value</summary>
	<param name="Buttons">Buttons to get</param>
	<returns>Array of buttons as specified in <paramref name="Buttons"/></returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Buttons"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/></exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.GetButtons(Microsoft.VisualBasic.MsgBoxStyle)">
	<summary>Gets buttons specified by Visual Basic enumeration value</summary>
	<param name="Buttons">Buttons to get</param>
	<returns>Array of buttons as specified in <paramref name="Buttons"/></returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Bitwise and of <paramref name="Buttons"/> and 7 is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> enumeration (values 0÷5)</exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.GetButtons(Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons)">
	<summary>Gets buttons by bit aray</summary>
	<param name="Buttons">Bit mask of buttons to get</param>
	<returns>Array of buttons according to bit array <paramref name="Buttons"/></returns>
	<remarks>Order of buttons is Yes - No - OK - Abort - Retry - Ignore - Cancel - Help</remarks>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons.OK">
	<summary>OK button</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons.Cancel">
	<summary>Cancel button</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons.Yes">
	<summary>Yes button</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons.No">
	<summary>No button</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons.Abort">
	<summary>Abort button</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons.Retry">
	<summary>Retry button</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons.Ignore">
	<summary>Ignore button</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons.Help">
	<summary>Help button</summary>
</member><member name="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons">
	<summary>Bit aray for predefined buttons</summary>
</member><member name="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton">
	<summary>Represents button for <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></summary>
	<completionlist cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.HelpDialogResult">
	<summary>Value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> property for predefined <see cref="T:System.Windows.Forms.Help">Help</see> button</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox._ThreeState">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.ThreeState"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox._State">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.State"/> property</summary>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.ThreeStateChanged">
	<summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.ThreeState"/> property changes</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Information about old and new value</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.StateChanged">
	<summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.State"/> property changes</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Information about old and new value</param>
	<remarks><see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.State"/> can be changed by user or programatically</remarks>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.ThreeState">
	<summary>Gets or sets value indicating if user can change state of checkbox between 3 or 2 states</summary>
	<remarks>2-state CheckBox allows user to change state only to <see cref="F:System.Windows.Forms.CheckState.Checked"/> or <see cref="F:System.Windows.Forms.CheckState.Unchecked"/></remarks>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.State">
	<summary>Gets or sets current state of check box</summary>
	<remarks>If <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.ThreeState"/> is false user cannot set checkbox to <see cref="F:System.Windows.Forms.CheckState.Indeterminate"/>, however you can achieve it programatically</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.#ctor">
	<summary>CTor - initializes new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/> class</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.#ctor(System.String)">
	<summary>CTor - initializes new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/> class with text</summary>
	<param name="Text">Initial text of the control (<see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/> property)</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.#ctor(System.String,System.Windows.Forms.CheckState)">
	<summary>CTor - initializes new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/> class with text and check state</summary>
	<param name="Text">Initial text of the control (<see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/> property)</param>
	<param name="State">Initial state of the control (<see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.State"/> property)</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.OnStateChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Windows.Forms.CheckState})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.StateChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event parameters</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.OnThreeStateChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Boolean})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.ThreeStateChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event parameters</param>
</member><member name="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox">
	<summary>Represents check box control for <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox._Editable">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Editable"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox._Items">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox._DisplayMember">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.DisplayMember"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox._SelectedItem">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedItem"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox._SelectedIndex">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedIndex"/> property</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Editable">
	<summary>gets or sets value indicating if user can type any text to combo box</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items">
	<summary>Itels in drop down of combo box</summary>
	<remarks>Register handlers with events of <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> returned by this property or use <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.ItemsChanged"/> event in order to track changes of the collection.</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.ShouldSerializeItems">
	<summary>Gets value indicating if the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items"/> property should be serialized</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.ResetItems">
	<summary>Resets the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items"/> property to its decault value - removes all items.</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.DisplayMember">
	<summary>Indicates member (property or field) used to obtain text displayed in drop down for each item.</summary>
	<seealso cref="P:System.Windows.Forms.ListControl.DisplayMember"/>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedItem">
	<summary>Gets or sets value indicating currently selected item</summary>
	<seealso cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedIndex"/>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedIndex">
	<summary>Indicates 0-based index of item diaplyed in combo box</summary>
	<seealso cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedItem"/>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.EditableChanged">
	<summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Editable"/> property changes</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Information about old and new value</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.OnEditableChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Boolean})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.EditableChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event parameters</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.DisplayMemberChanged">
	<summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.DisplayMember"/> property changes</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Information about old and new value</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.OnDisplayMemberChanged(Tools.IReportsChange.ValueChangedEventArgs{System.String})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.DisplayMemberChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event parameters</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedItemChanged">
	<summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedItem"/> property changes</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Information about old and new value</param>
	<remarks><see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedItem"/> can be changed by user or programatically</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.OnSelectedItemChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Object})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedItemChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event parameters</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedIndexChanged">
	<summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedIndex"/> property changes</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Information about old and new value</param>
	<remarks><see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedIndex"/> can be changed by user or programatically</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.OnSelectedIndexChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Int32})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedIndexChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event parameters</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.ItemsChanged">
	<summary>Raised when something happens to the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items"/> collection (when it raises the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged"/> event).</summary>
	<param name="sender">Source of event (this instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox"/>)</param>
	<param name="e">Event arguments (originally passesd by <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items">Items</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged">CollectionChanged</see></param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.OnItemsChanged(Tools.CollectionsT.GenericT.ListWithEvents{System.Object},Tools.CollectionsT.GenericT.ListWithEvents{System.Object}.ListChangedEventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.ItemsChanged"/> event. Handles <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items">Items</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged">CollectionChanged</see> event.</summary>
	<param name="sender"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items"/> (event source)</param>
	<param name="e">Event arguments</param>
	<remarks>This method (after the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.ItemsChanged"/> event is raised) also calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/> with <paramref name="e"/> as argument.</remarks>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.TextChanged">
	<summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/> is changed</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Event arguments</param>
	<remarks>This event shadows <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.TextChanged"/> event only in order to change it's <see cref="T:System.ComponentModel.BrowsableAttribute"/> and <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.OnTextChanged(Tools.IReportsChange.ValueChangedEventArgs{System.String})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.TextChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/> base class method</summary>
	<param name="e">Event argumernts</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.#ctor">
	<summary>CTor - initializes new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox"/> class</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.#ctor(System.String,System.Object[])">
	<summary>CTor - initializes new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox"/> class with combo box items and display member</summary>
	<param name="DisplayMember">Initial value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.DisplayMember"/> property - name of member used to display items</param>
	<param name="Items">Initial items in combo box</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.#ctor(System.Object[])">
	<summary>CTor - initializes new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox"/> class with items</summary>
	<param name="Items">Initial items in combo box</param>
</member><member name="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox">
	<summary>Represents combo box (drop down list) control for <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></summary>
	<remarks>This class inherits implementation of <see cref="T:Tools.IReportsChange"/> from <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl"/>. The <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Changed"/> event when raised for change of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items"/> collection, reports event arguments of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items">Items</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged">CollectionChanged</see> event (instead of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Changed">Changed</see>).</remarks>
	<seealco cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.OnItemsChanged(Tools.CollectionsT.GenericT.ListWithEvents{System.Object},Tools.CollectionsT.GenericT.ListWithEvents{System.Object}.ListChangedEventArgs)"/>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton._Checked">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.Checked"/> property</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.Checked">
	<summary>Gets or sets value indicating if control is checked or not</summary>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.CheckedChanged">
	<summary>raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.Checked"/> property changes</summary>
	<param name="sender">Source of the event</param>
	<param name="e">Event arguments containing infomation about new and old value</param>
	<remarks>The <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.Checked"/> property can be changed programatically or by user</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.OnCheckedChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Boolean})">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.CheckedChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
	<param name="e">Event parameters</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.#ctor">
	<summary>CTor - initializes new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> class</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.#ctor(System.String)">
	<summary>CTor - initializes new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> class with text</summary>
	<param name="Text">Text of control</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.#ctor(System.String,System.Boolean)">
	<summary>CTor - initializes new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> class with text and check state</summary>
	<param name="Text">Text of control</param>
	<param name="Checked">Initial check state</param>
</member><member name="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton">
	<summary>Represents radio button (one from many check box) for <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignLeft">
	<summary>Text is aligned left (default). In rtl reading aligns text to right.</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignRight">
	<summary>Text is aligned right. In rtl reading aligns text to left.</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignCenter">
	<summary>Text is aligned center</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignJustify">
	<summary>Text is aligned to block. If target technology does not support <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignJustify"/> treats it as <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignLeft"/>.</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignMask">
	<summary>Bitwise mask for AND-ing text alignment</summary>
	<remarks>This is actually not walue of enumeration.</remarks>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.Ltr">
	<summary>Left-to-right reading (default)</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.Rtl">
	<summary>Right-to-left reading</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.BringToFront">
	<summary>Force shows message box to the user even if application is not currently active</summary>
</member><member name="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions">
	<summary>Options for <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></summary>
	<remarks>Values of this enumeration can be combined as long as they fall to different groups. There are three groups of values -
 Align (<see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignCenter"/>,<see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignJustify"/>, <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignLeft"/>, <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignRight"/>),
 Text flow (<see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.Ltr"/>, <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.Rtl"/>) and
 Focus (<see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.BringToFront"/>).</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptionsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
	<summary>Performs conversion from type <see cref="T:System.String"/> to type <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions"/></summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
	<param name="value">Value to be converted to type <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions"/></param>
	<returns>Value of type <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions"/> initialized by <paramref name="value"/></returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptionsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions)">
	<summary>Performs conversion from type <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions"/> to type <see cref="T:System.String"/></summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="value">Value to be converted</param>
	<returns>Representation of <paramref name="value"/> in type <see cref="T:System.String"/></returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ShowDialog">
	<summary>Shows modal dialog (and waits until the dialog is closed)</summary>
	<returns>Dialog result (<see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> of clicked button)</returns>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Shown"/></exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ShowDialog(System.Windows.Forms.IWin32Window)">
	<summary>Show modal dialog (and waits until the dialog is closed)</summary>
	<param name="Owner">Parent window of dialog (may be null)</param>
	<returns>Dialog result (<see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> of clicked button)</returns>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Shown"/></exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.DisplayBox">
	<summary>Displays the dialog non-modally (execution continues immediatelly)</summary>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Shown"/></exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.DisplayBox(System.Windows.Forms.IWin32Window)">
	<summary>Displays the dialog non-modally (execution continues immediatelly)</summary>
	<param name="Owner">Parent window of dialog (may be null)</param>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Shown"/></exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.PerformDialog(System.Boolean,System.Windows.Forms.IWin32Window)">
	<summary>If overriden in derived class shows the dialog</summary>
	<param name="Modal">Indicates if dialog should be shown modally (true) or modells (false)</param>
	<param name="Owner">Parent window of dialog (may be null)</param>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is not <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Created"/>. Overriding method shall check this condition and thrown an exception if condition is vialoted.</exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.PrePerformDialog(System.Boolean,System.Windows.Forms.IWin32Window)">
	<summary>Calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Recycle"/> if necessary, then calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.PerformDialog(System.Boolean,System.Windows.Forms.IWin32Window)"/></summary>
	<param name="Modal">Indicates if dialog should be shown modally (true) or modells (false)</param>
	<param name="Owner">Parent window of dialog (may be null)</param>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Shown"/></exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Close">
	<summary>Closes message box with <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/></summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Close(System.Windows.Forms.DialogResult)">
	<summary>If overriden in derived class closes the message box with given response</summary>
	<param name="Response">Response returned by the <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(Tools.WindowsT.IndependentT.MessageBox,Tools.WindowsT.IndependentT.MessageBox,System.Windows.Forms.IWin32Window)"/> function</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnClosed(System.EventArgs)">
	<summary>raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.Closed"/> event</summary>
	<param name="e">Event arguments</param>
	<remarks>Derived class should call this method when dialog is closed</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnShown">
	<summary>Called when dialog is shown. Performs some initialization (timer). Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.Shown"/> event.</summary>
	<remarks>Derived class should call this method after dialog is shown.</remarks>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.States.Created">
	<summary>Instance have been created, but message box have not been shown yet. You can modify message box properties.</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.States.Shown">
	<summary>Message bos was shown to user and waits for user action. Only some properties can be modificated with effect.</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed">
	<summary>Message box was closed</summary>
</member><member name="T:Tools.WindowsT.IndependentT.MessageBox.States">
	<summary>Possible state of the message box class instance</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._State">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> property</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.State">
	<summary>Gets or sets value indicating current state of the message box</summary>
	<remarks>Value of this property is set by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnShown"/> and <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnClosed(System.EventArgs)"/> methods</remarks>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.DialogResult">
	<summary>Gets result of dialog (<see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> of button user has clicked on)</summary>
	<returns><see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> of button user have clicked to or <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> when message box was closed by pressing escape, closing the window or timer.</returns>
	<value>Should be set by derived class when dialog is closed</value>
	<remarks>Value of this property is valid only when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed"/></remarks>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._DialogResult">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DialogResult"/> property</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.ClickedButton">
	<summary>Gets button user have clicked on</summary>
	<returns>Button user have clicked on (or null if dialog was closed by window close button, pressing escape or timer)</returns>
	<remarks>Value of this property is valid only when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed"/></remarks>
	<value>Should be set by derived class when dialog is closed</value>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._ClickedButton">
	<summary>Contaisn value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ClickedButton"/> property</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._ClosedByTimer">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ClosedByTimer"/> property</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.ClosedByTimer">
	<summary>Gets value indicationg if the message box was closed automatically after the time specified in <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Timer"/> elapsed</summary>
	<returns>True if the message box was closed due to time elapsed, false otherwise</returns>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.IsCountDown">
	<summary>Gets value indicationg if counting down is curently in progress</summary>
	<remarks>In order to cahnge value of this prioperty use <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ResumeCountDown"/> and <see cref="M:Tools.WindowsT.IndependentT.MessageBox.StopCountDown"/> methods</remarks>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.CountDownTimer">
	<summary>Timer that performs count downs</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnCountDown(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.CountDown"/> event</summary>
	<param name="e">Event argument</param>
	<remarks>Derived class should override this method in order to catch change of count down remaining time and call base class method.</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnCountDownStopped">
	<summary>Called when count-down is stopped by calling <see cref="M:Tools.WindowsT.IndependentT.MessageBox.StopCountDown"/></summary>
	<remarks>Derived class should override this method in order to catch count-down stoped event and react somehow (hide count down text).<para>This implementation does nothing.</para></remarks>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._CurrentTimer">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CurrentTimer"/> property</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.CurrentTimer">
	<summary>Gets or sets current remaining time of count-down timer</summary>
	<remarks>If value id <see cref="F:System.TimeSpan.Zero"/> or less, count down ends and dialog is about to be closed</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.StopCountDown">
	<summary>Stops count-down timer ticking</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ResumeCountDown">
	<summary>Resumes previously stopped count down timer</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ResumeCountDown(System.TimeSpan)">
	<summary>Resumes previouskly stopped count down timer with new timer value</summary>
	<param name="TimeLeft">Count down timer time (after which the message box is closed)</param>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.CountDown">
	<summary>Raised when count-down timer ticks</summary>
	<remarks>Count down timer ticks each second once. First the event is raised immediatelly after the dialog is shown or count-down is resumed</remarks>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.Shown">
	<summary>Raised after dialog is shown</summary>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.Closed">
	<summary>Raised after dialog is closed</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Recycle">
	<summary>Switches <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> from <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed"/> to <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Created"/>
		<see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/></summary>
	<remarks>This method cannot be overriden. Override <see cref="M:Tools.WindowsT.IndependentT.MessageBox.RecycleInternal"/> instead which is called only when necessary.
 <para>Calling this method has no effect when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Created"/> and causes <see cref="T:System.InvalidOperationException"/> when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Shown"/>.</para>
		<para><see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(Tools.WindowsT.IndependentT.MessageBox,Tools.WindowsT.IndependentT.MessageBox,System.Windows.Forms.IWin32Window)"/> and <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Display(Tools.WindowsT.IndependentT.MessageBox,Tools.WindowsT.IndependentT.MessageBox,System.Windows.Forms.IWin32Window)"/> instance methods call <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Recycle"/> if necessary.</para>
		<para>When re-cycling message boxex, you should keep in mind that youre can change state of it (check boxes, radio buttons, combo boxes, custom controls)</para></remarks>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Shown"/> or <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is not member of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.States"/></exception>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBox.Recycled">
	<summary>Raised when instance recycling process is completed</summary>
	<seealso cref="M:Tools.WindowsT.IndependentT.MessageBox.Recycle"/>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.OnRecycled(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.Recycled"/> event</summary>
	<param name="e">Event arguments</param>
	<remarks>Called by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Recycle"/> after call of <see cref="M:Tools.WindowsT.IndependentT.MessageBox.RecycleInternal"/></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.RecycleInternal">
	<summary>Performs all operations needed to switch <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> form <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/>
		<see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed"/> to <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Created"/></summary>
	<remarks>Called by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Recycle"/>.
 <para>Note to inheritors: Always call base-class method <see cref="M:Tools.WindowsT.IndependentT.MessageBox.RecycleInternal"/>.</para></remarks>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is not <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed"/>. This exception never occures in this implementation because <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Recycle"/> ensures that <see cref="M:Tools.WindowsT.IndependentT.MessageBox.RecycleInternal"/> is caled only when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed"/>.</exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.GetDefault">
	<summary>Gets instance of default implementation of message box</summary>
	<returns>Instance of type which specified by the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> property</returns>
	<exception cref="T:System.ArgumentException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> is not <see cref="T:System.RuntimeType"/></exception>
	<exception cref="T:System.NotSupportedException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder"/> .-or- Creation of <see cref="T:System.TypedReference"/>, <see cref="T:System.ArgIterator"/>, <see cref="T:System.Void"/>, and <see cref="T:System.RuntimeArgumentHandle"/> types, or arrays of those types, is not supported.</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception.</exception>
	<exception cref="T:System.MethodAccessException">The caller does not have permission to call default constructor of type which is specified in <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/>.</exception>
	<exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or member was invoked with a late-binding mechanism.</exception>
	<exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through Overload:<see cref="M:System.Type.GetTypeFromProgID(System.String)"/> or Overload:<see cref="M:System.Type.GetTypeFromCLSID(System.Guid)"/>.</exception>
	<exception cref="T:System.MissingMethodException">No matching public constructor was found.</exception>
	<exception cref="T:System.Runtime.InteropServices.COMException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</exception>
	<exception cref="T:System.TypeLoadException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> is not a valid type.</exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.FakeBox.Close(System.Windows.Forms.DialogResult)">
	<summary>If overriden in derived class closes the message box with given response</summary>
	<param name="Response">Response returned by the <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(Tools.WindowsT.IndependentT.MessageBox,Tools.WindowsT.IndependentT.MessageBox,System.Windows.Forms.IWin32Window)"/> function</param>
	<exception cref="T:System.NotImplementedException">Always</exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.FakeBox.PerformDialog(System.Boolean,System.Windows.Forms.IWin32Window)">
	<summary>If overriden in derived class shows the dialog</summary>
	<param name="Modal">Indicates if dialog should be shown modally (true) or modells (false)</param>
	<param name="Owner">Parent window of dialog (may be null)</param>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is not <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Created"/>. Overriding method shall check this condition and thrown an exception if condition is vialoted.</exception>
	<exception cref="T:System.NotImplementedException">Always</exception>
</member><member name="T:Tools.WindowsT.IndependentT.MessageBox.FakeBox">
	<summary>Does not implement <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/>. Used for initializing messageboxes using <see cref="M:Tools.WindowsT.IndependentT.MessageBox.InitializeFrom(Tools.WindowsT.IndependentT.MessageBox)"/>.</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.InitializeDafault(Tools.WindowsT.IndependentT.MessageBox)">
	<summary>Initializes instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> obtained via <see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetDefault"/> using <see cref="M:Tools.WindowsT.IndependentT.MessageBox.InitializeFrom(Tools.WindowsT.IndependentT.MessageBox)"/></summary>
	<param name="Other">Instance properties of which will be used to initialize returned instance</param>
	<returns>Initialized instance of default implementation</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.InitializeFrom(Tools.WindowsT.IndependentT.MessageBox)">
	<summary>Initializes current instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> with setting of another <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></summary>
	<param name="Other"><see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> to initialize this instance with</param>
	<remarks>Do not use this method for vloning message boxes. This method is mainly intended for internal use. The <paramref name="Other"/>
		<see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> should be only used for initializing this instance and should be never shown.
 This is because values of properties are simply copied form <paramref name="Other"/> to this instance ant thus both instances then shares same buttons and other controls which can cause instability when both instances are shown.</remarks>
	<exception cref="T:System.ArgumentNullException"><paramref name="Other"/> is null</exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(Tools.WindowsT.IndependentT.MessageBox,Tools.WindowsT.IndependentT.MessageBox,System.Windows.Forms.IWin32Window)">
	<summary>Shows given modal message box initialized with given instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></summary>
	<param name="Instance">Instance to be show</param>
	<param name="InitializeFrom">Instance to initialize <paramref name="Instance"/> with</param>
	<param name="Owner">Owner window (can be null)</param>
	<returns>Message box result</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Instance"/> or <paramref name="InitializeFrom"/> is null</exception>
	<remarks>For same reason as <see cref="M:Tools.WindowsT.IndependentT.MessageBox.InitializeFrom(Tools.WindowsT.IndependentT.MessageBox)"/>, do not use <paramref name="InitializeFrom"/> to clonning live message boxes</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Display(Tools.WindowsT.IndependentT.MessageBox,Tools.WindowsT.IndependentT.MessageBox,System.Windows.Forms.IWin32Window)">
	<summary>Display given message box initialized with given instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> modeless</summary>
	<param name="Instance">Instance to be show</param>
	<param name="InitializeFrom">Instance to initialize <paramref name="Instance"/> with</param>
	<param name="Owner">Owner window (can be null)</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Instance"/> or <paramref name="InitializeFrom"/> is null</exception>
	<remarks>For same reason as <see cref="M:Tools.WindowsT.IndependentT.MessageBox.InitializeFrom(Tools.WindowsT.IndependentT.MessageBox)"/>, do not use <paramref name="InitializeFrom"/> to clonning live message boxes</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(Tools.WindowsT.IndependentT.MessageBox,System.Windows.Forms.IWin32Window)">
	<summary>Shows default (<see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetDefault"/>) modal message box initialized with given instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></summary>
	<param name="InitializeFrom">Instance to initialize default message box with</param>
	<param name="Owner">Owner window (can be null)</param>
	<returns>Message box result</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="InitializeFrom"/> is null</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">Ther was an error obtainin default implementation instance via <see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetDefault"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
	<remarks>For same reason as <see cref="M:Tools.WindowsT.IndependentT.MessageBox.InitializeFrom(Tools.WindowsT.IndependentT.MessageBox)"/>, do not use <paramref name="InitializeFrom"/> to clonning live message boxes</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Display(Tools.WindowsT.IndependentT.MessageBox,System.Windows.Forms.IWin32Window)">
	<summary>Display default (<see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetDefault"/>) message box initialized with given instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> modeless</summary>
	<param name="InitializeFrom">Instance to initialize default message box with</param>
	<param name="Owner">Owner window (can be null)</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="InitializeFrom"/> is null</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">Ther was an error obtainin default implementation instance via <see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetDefault"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
	<remarks>For same reason as <see cref="M:Tools.WindowsT.IndependentT.MessageBox.InitializeFrom(Tools.WindowsT.IndependentT.MessageBox)"/>, do not use <paramref name="InitializeFrom"/> to clonning live message boxes</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.GetIcon(Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
	<summary>Default function used for converting enumeration values to icons for message box</summary>
	<param name="code">Code of icon to be obtained</param>
	<returns>Appropriate icon to code or null if no icon is associated with code</returns>
	<remarks>You can change which function <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> globaly uses for obtaining icons by setting the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/> static property</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ConvertIconConstant(System.Windows.Forms.MessageBoxIcon)">
	<summary>Converts <see cref="T:System.Windows.Forms.MessageBoxIcon"/> to <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value</summary>
	<param name="code">A <see cref="T:System.Windows.Forms.MessageBoxIcon"/></param>
	<returns>Appropriate <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value. If <paramref name="code"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/> returns <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.None"/></returns>
	<remarks>Several <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values are converted to the same <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value because they have same numerical values and it is not possible to distinguish between them. You'd better using <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> directly</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ConvertIconConstant(Microsoft.VisualBasic.MsgBoxStyle)">
	<summary>Converts <see cref="T:Microsoft.VisualBasic.MsgBoxStyle"/> to <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value</summary>
	<param name="code">A <see cref="T:Microsoft.VisualBasic.MsgBoxStyle"/></param>
	<returns>Appropriate <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value. If <paramref name="code"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/> returns <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.None"/></returns>
	<remarks>Only bits masked with 0x70 mask are considered for conversion</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ConvertIconConstant(System.Windows.MessageBoxImage)">
	<summary>Converts <see cref="T:System.Windows.MessageBoxImage"/> to <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value</summary>
	<param name="code">A <see cref="T:System.Windows.MessageBoxImage"/></param>
	<returns>Appropriate <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value. If <paramref name="code"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/> returns <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.None"/></returns>
	<remarks>Several <see cref="T:System.Windows.MessageBoxImage"/> values are converted to the same <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value because they have same numerical values and it is not possible to distinguish between them. You'd better using <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> directly</remarks>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox._GetIconDelegate">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/> property</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate">
	<summary>Gets or sets delegate which is used for converting enumeration values to icons for message box</summary>
	<value>New delegate to be shared by all messageboxes for converting enumeration members to icons</value>
	<returns>Current delegate that converts enumeration values to icons for message box</returns>
	<exception cref="T:System.ArgumentNullException">Value being set is null</exception>
	<remarks>Default value is <see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetIcon(Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)"/> function</remarks>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Asterisk">
	<summary>By default represented by a yellow bulb</summary>
	<seealso cref="F:System.Windows.Forms.MessageBoxIcon.Asterisk"/>
	<seealso cref="P:Tools.ResourcesT.Icons.Asterisk"/>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Error">
	<summary>By default represented by white X in red circle</summary>
	<seealso cref="F:System.Windows.Forms.MessageBoxIcon.Error"/>
	<seealso cref="P:Tools.ResourcesT.Icons.ErrorIcon"/>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Exclamation">
	<summary>By default represented by black exclamation mark (!) in yellow triangle</summary>
	<seealso cref="F:System.Windows.Forms.MessageBoxIcon.Exclamation"/>
	<seealso cref="P:Tools.ResourcesT.Icons.Exclamation"/>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Hand">
	<summary>By default represented by white hand in red circle</summary>
	<seealso cref="F:System.Windows.Forms.MessageBoxIcon.Hand"/>
	<seealso cref="P:Tools.ResourcesT.Icons.Hand"/>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Information">
	<summary>By default represented by white lowercase i in blue circle</summary>
	<seealso cref="F:System.Windows.Forms.MessageBoxIcon.Information"/>
	<seealso cref="P:Tools.ResourcesT.Icons.Information"/>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Question">
	<summary>By default represented by white question mark (?) in blue circle</summary>
	<seealso cref="F:System.Windows.Forms.MessageBoxIcon.Question"/>
	<seealso cref="P:Tools.ResourcesT.Icons.Question"/>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Stop">
	<summary>By default represented by default represented by no-entry (one way) traffic sign</summary>
	<seealso cref="F:System.Windows.Forms.MessageBoxIcon.Stop"/>
	<seealso cref="P:Tools.ResourcesT.Icons.StopIcon"/>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Warning">
	<summary>By default represented by black exclamation mark (!) in yellow circle</summary>
	<seealso cref="F:System.Windows.Forms.MessageBoxIcon.Warning"/>
	<seealso cref="P:Tools.ResourcesT.Icons.Warning"/>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.OK">
	<summary>By default represented by white check mark (✔) in green circle</summary>
	<seealso cref="P:Tools.ResourcesT.Icons.OK"/>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.SecurityError">
	<summary>By default represented by white X in red shield</summary>
	<seealso cref="P:Tools.ResourcesT.Icons.SecurityError"/>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.SecurityInformation">
	<summary>By default represented by shield with for fields - red, green, blue and yellow</summary>
	<seealso cref="P:Tools.ResourcesT.Icons.SecurityInformation"/>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.SecurityWarning">
	<summary>By default represented by black exclamation mark (!) in yellow shield</summary>
	<seealso cref="P:Tools.ResourcesT.Icons.SecurityWarning"/>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.SecurityOK">
	<summary>By default represented by white check mark (✔) in green shield</summary>
	<seealso cref="P:Tools.ResourcesT.Icons.SecurityOK"/>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.SecurityQuestion">
	<summary>By default represented by black quastion mark (?) in yellow shield</summary>
	<seealso cref="P:Tools.ResourcesT.Icons.SecurityQuestion"/>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.None">
	<summary>Represents no icon</summary>
	<seealso cref="F:System.Windows.Forms.MessageBoxIcon.None"/>
</member><member name="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons">
	<summary>Enumeration of built-in icons for <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></summary>
	<remarks>The <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> API allows you to pass any <see cref="T:System.Drawing.Image"/> as your own icon</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.WPFWindow.#ctor(System.IntPtr)">
	<summary>CTor</summary>
	<param name="handle">Handle new instance will point to</param>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBox.WPFWindow._handle">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.WPFWindow.Handle"/> property</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBox.WPFWindow.Handle">
	<summary>Gets the handle to the window represented by the implementer.</summary>
	<returns>A handle to the window represented by the implementer.</returns>
</member><member name="T:Tools.WindowsT.IndependentT.MessageBox.WPFWindow">
	<summary>The simplies possible implementation of <see cref="T:System.Windows.Forms.IWin32Window"/></summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.IsValidMessageBoxButton(System.Windows.MessageBoxButton)">
	<summary>Gets value indicating if given value is valid <see cref="T:System.Windows.MessageBoxButton"/></summary>
	<param name="value">Value to test</param>
	<returns>Ture if <paramref name="value"/> is valid <see cref="T:System.Windows.MessageBoxButton"/></returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.IsValidMessageBoxImage(System.Windows.MessageBoxImage)">
	<summary>Gets value indicating if given value is valid <see cref="T:System.Windows.MessageBoxImage"/></summary>
	<param name="value">Value to test</param>
	<returns>Ture if <paramref name="value"/> is valid <see cref="T:System.Windows.MessageBoxImage"/></returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.IsValidMessageBoxOptions(System.Windows.MessageBoxOptions)">
	<summary>Gets value indicating if given value is valid <see cref="T:System.Windows.MessageBoxOptions"/></summary>
	<param name="value">Value to test</param>
	<returns>Ture if <paramref name="value"/> is valid <see cref="T:System.Windows.MessageBoxOptions"/></returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.IsValidMessageBoxResult(System.Windows.MessageBoxResult)">
	<summary>Gets value indicating if given value is valid <see cref="T:System.Windows.MessageBoxResult"/></summary>
	<param name="value">Value to test</param>
	<returns>Ture if <paramref name="value"/> is valid <see cref="T:System.Windows.MessageBoxResult"/></returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ShowWPF(System.String)">
	<summary>Displays a message box that has a message and that returns a result.</summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<remarks>This function is provided for compatibility with <see cref="T:System.Windows.MessageBox"/></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ShowWPF(System.String,System.String)">
	<summary>Displays a message box that has a message and title bar caption; and that returns a result.</summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
	<remarks>This function is provided for compatibility with <see cref="T:System.Windows.MessageBox"/></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Window,System.String)">
	<summary>Displays a message box in front of the specified window. The message box displays a message and returns a result.</summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)"/> function but provides </remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton)">
	<summary>Displays a message box that has a message, title bar caption, and button; and that returns a result.</summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
	<param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/></exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)"/> function but provides </remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Window,System.String,System.String)">
	<summary>Displays a message box in front of the specified window. The message box displays a message and title bar caption; and it returns a result.</summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)"/> function but provides </remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
	<summary>Displays a message box that has a message, title bar caption, button, and icon; and that returns a result.</summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
	<param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
	<param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or = <paramref name="icon"/> is not member of <see cref="T:System.Windows.MessageBoxImage"/></exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function is provided mainly for compatibility with <see cref="T:System.Windows.MessageBox"/>. You'd bete use overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/>. See <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ConvertIconConstant(System.Windows.Forms.MessageBoxIcon)"/> for explanation.</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
	<summary>Displays a message box that has a message, title bar caption, button, and icon; and that returns a result.</summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
	<param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
	<param name="icon">A <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value that specifies the icon to display.</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/></exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)"/> function but provides the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton)">
	<summary>Displays a message box in front of the specified window. The message box displays a message, title bar caption, and button; and it also returns a result.</summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
	<param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/></exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)"/> function</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
	<summary>Displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result and returns a result.</summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
	<param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
	<param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
	<param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
	<remarks>This function is provided mainly for compatibility with <see cref="T:System.Windows.MessageBox"/>. You'd bete use overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/>. See <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ConvertIconConstant(System.Windows.Forms.MessageBoxIcon)"/> for explanation.</remarks>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="defaultResult"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/>
 =or = <paramref name="icon"/> is not member of <see cref="T:System.Windows.MessageBoxImage"/></exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.MessageBoxResult)">
	<summary>Displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result and returns a result.</summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
	<param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
	<param name="icon">A <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value that specifies the icon to display.</param>
	<param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="defaultResult"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/>
	</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)"/> function but provides the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
	<summary>Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and it also returns a result.</summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
	<param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
	<param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
	<remarks>This function is provided mainly for compatibility with <see cref="T:System.Windows.MessageBox"/>. You'd bete use overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/>. See <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ConvertIconConstant(System.Windows.Forms.MessageBoxIcon)"/> for explanation.</remarks>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or = <paramref name="icon"/> is not member of <see cref="T:System.Windows.MessageBoxImage"/></exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
	<summary>Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and it also returns a result.</summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
	<param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
	<param name="icon">A <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value that specifies the icon to display.</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
	</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)"/> function but provides the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)">
	<summary>Displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result, complies with the specified options, and returns a result.</summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
	<param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
	<param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
	<param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
	<param name="options">A <see cref="T:System.Windows.MessageBoxOptions"/> value object that specifies the options.</param>
	<remarks>This function is provided mainly for compatibility with <see cref="T:System.Windows.MessageBox"/>. You'd bete use overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/>. See <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ConvertIconConstant(System.Windows.Forms.MessageBoxIcon)"/> for explanation.</remarks>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="defaultResult"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/>
 =or= <paramref name="options"/> is not valid <see cref="T:System.Windows.MessageBoxOptions"/> value
 =or = <paramref name="icon"/> is not member of <see cref="T:System.Windows.MessageBoxImage"/></exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)">
	<summary>Displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result, complies with the specified options, and returns a result.</summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
	<param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
	<param name="icon">A <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value that specifies the icon to display.</param>
	<param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
	<param name="options">A <see cref="T:System.Windows.MessageBoxOptions"/> value object that specifies the options.</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="defaultResult"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/>
 =or= <paramref name="options"/> is not valid <see cref="T:System.Windows.MessageBoxOptions"/> value
</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)"/> function but provides the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
	<summary>Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result and returns a result.</summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
	<param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
	<param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
	<param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
	<remarks>This function is provided mainly for compatibility with <see cref="T:System.Windows.MessageBox"/>. You'd bete use overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/>. See <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ConvertIconConstant(System.Windows.Forms.MessageBoxIcon)"/> for explanation.</remarks>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="options"/> is not valid <see cref="T:System.Windows.MessageBoxOptions"/> value
 =or = <paramref name="icon"/> is not member of <see cref="T:System.Windows.MessageBoxImage"/></exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.MessageBoxResult)">
	<summary>Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result and returns a result.</summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
	<param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
	<param name="icon">A <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value that specifies the icon to display.</param>
	<param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="defaultResult"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/>
	</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)"/> function but provides the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)">
	<summary>Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result, complies with the specified options, and returns a result.</summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
	<param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
	<param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
	<param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
	<param name="options">A <see cref="T:System.Windows.MessageBoxOptions"/> value object that specifies the options.</param>
	<remarks>This function is provided mainly for compatibility with <see cref="T:System.Windows.MessageBox"/>. You'd bete use overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/>. See <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ConvertIconConstant(System.Windows.Forms.MessageBoxIcon)"/> for explanation.</remarks>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="defaultResult"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/>
 =or= <paramref name="options"/> is not valid <see cref="T:System.Windows.MessageBoxOptions"/> value
 =or = <paramref name="icon"/> is not member of <see cref="T:System.Windows.MessageBoxImage"/></exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)">
	<summary>Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result, complies with the specified options, and returns a result.</summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
	<param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
	<param name="icon">A <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value that specifies the icon to display.</param>
	<param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
	<param name="options">A <see cref="T:System.Windows.MessageBoxOptions"/> value object that specifies the options.</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="defaultResult"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/>
 =or= <paramref name="options"/> is not valid <see cref="T:System.Windows.MessageBoxOptions"/> value
 </exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)"/> function but provides the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ShowCore(System.IntPtr,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)">
	<summary>Performs WPF-like message box with <see cref="T:System.Windows.MessageBoxImage"/></summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
	<param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
	<param name="icon">A <see cref="T:System.Windows.MessageBoxImage"/> value that specifies the icon to display.</param>
	<param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
	<param name="options">A <see cref="T:System.Windows.MessageBoxOptions"/> value object that specifies the options.</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="defaultResult"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/>
 =or= <paramref name="options"/> is not valid <see cref="T:System.Windows.MessageBoxOptions"/> value
 =or = <paramref name="icon"/> is not member of <see cref="T:System.Windows.MessageBoxImage"/></exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ShowCore(System.IntPtr,System.String,System.String,System.Windows.MessageBoxButton,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)">
	<summary>Performs WPF-like message box with <see cref="T:System.Windows.Forms.MessageBoxIcon"/></summary>
	<returns>A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies which message box button is clicked by the user.</returns>
	<param name="owner">A <see cref="T:System.Windows.Window"/> that represents the owner window of the message box.</param>
	<param name="messageBoxText">A <see cref="T:System.String"/> that specifies the text to display.</param>
	<param name="caption">A <see cref="T:System.String"/> that specifies the title bar caption to display.</param>
	<param name="button">A <see cref="T:System.Windows.MessageBoxButton"/> value that specifies which button or buttons to display.</param>
	<param name="icon">A <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value that specifies the icon to display.</param>
	<param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult"/> value that specifies the default result of the message box.</param>
	<param name="options">A <see cref="T:System.Windows.MessageBoxOptions"/> value object that specifies the options.</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="defaultResult"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/>
 =or= <paramref name="options"/> is not valid <see cref="T:System.Windows.MessageBoxOptions"/> value</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String)">
	<summary>Displays a message box with specified text.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
	<param name="text">The text to display in the message box. </param>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean)"/> function</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String)">
	<summary>Displays a message box with specified text and caption.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
	<param name="caption">The text to display in the title bar of the message box. </param>
	<param name="text">The text to display in the message box. </param>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean)"/> function</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String)">
	<summary>Displays a message box in front of the specified object and with the specified text.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
	<param name="Text">The text to display in the message box. </param>
	<param name="Owner">An implementation of <see cref="T:System.Windows.Forms.IWin32Window"></see> that will own the modal dialog box. </param>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean)"/> function</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
	<summary>Displays a message box with specified text, caption, and buttons.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
	<param name="caption">The text to display in the title bar of the message box. </param>
	<param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
	<param name="text">The text to display in the message box. </param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		<paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 </exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean)"/> function</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String)">
	<summary>Displays a message box in front of the specified object and with the specified text and caption.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
	<param name="owner">An implementation of <see cref="T:System.Windows.Forms.IWin32Window"></see> that will own the modal dialog box.</param>
	<param name="caption">The text to display in the title bar of the message box. </param>
	<param name="text">The text to display in the message box. </param>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean)"/> function</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
	<summary>Displays a message box with specified text, caption, buttons, and icon.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
	<param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. </param>
	<param name="caption">The text to display in the title bar of the message box. </param>
	<param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
	<param name="text">The text to display in the message box. </param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		<paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/>
	</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This overload is provided mainly for compatibility with <see cref="T:System.Windows.Forms.MessageBox"/>. You'd better use
 <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></see>.</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
	<summary>Displays a message box with specified text, caption, buttons, and icon.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
	<param name="icon">One of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"></see> values that specifies which icon to display in the message box. </param>
	<param name="caption">The text to display in the title bar of the message box. </param>
	<param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
	<param name="text">The text to display in the message box. </param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		<paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/>
	</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean)"/> function, but the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
	<summary>Displays a message box in front of the specified object and with the specified text, caption, and buttons.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
	<param name="Owner">An implementation of <see cref="T:System.Windows.Forms.IWin32Window"></see> that will own the modal dialog box.</param>
	<param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
	<param name="Caption">The text to display in the title bar of the message box. </param>
	<param name="text">The text to display in the message box. </param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		<paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/>
	</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean)"/> function</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
	<summary>Displays a message box with the specified text, caption, buttons, icon, and default button.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
	<param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. </param>
	<param name="caption">The text to display in the title bar of the message box. </param>
	<param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
	<param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box. </param>
	<param name="text">The text to display in the message box. </param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		<paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
	</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This overload is provided mainly for compatibility with <see cref="T:System.Windows.Forms.MessageBox"/>. You'd better use
 <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.Forms.MessageBoxDefaultButton)">overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></see>.</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.Forms.MessageBoxDefaultButton)">
	<summary>Displays a message box with the specified text, caption, buttons, icon, and default button.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
	<param name="icon">One of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"></see> values that specifies which icon to display in the message box. </param>
	<param name="caption">The text to display in the title bar of the message box. </param>
	<param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
	<param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box. </param>
	<param name="text">The text to display in the message box. </param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		<paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
	</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean)"/> function, but the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
	<summary>Displays a message box in front of the specified object and with the specified text, caption, buttons, and icon.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
	<param name="Text">The text to display in the message box. </param>
	<param name="Icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. </param>
	<param name="Owner">An implementation of <see cref="T:System.Windows.Forms.IWin32Window"></see> that will own the modal dialog box.</param>
	<param name="Buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
	<param name="Caption">The text to display in the title bar of the message box. </param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		<paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/>
	</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This overload is provided mainly for compatibility with <see cref="T:System.Windows.Forms.MessageBox"/>. You'd better use
 <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></see>.</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
	<summary>Displays a message box in front of the specified object and with the specified text, caption, buttons, and icon.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
	<param name="Text">The text to display in the message box. </param>
	<param name="Icon">One of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"></see> values that specifies which icon to display in the message box. </param>
	<param name="Owner">An implementation of <see cref="T:System.Windows.Forms.IWin32Window"></see> that will own the modal dialog box.</param>
	<param name="Buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
	<param name="Caption">The text to display in the title bar of the message box. </param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		<paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/>
	</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean)"/> function, but the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
	<summary>Displays a message box with the specified text, caption, buttons, icon, default button, and options.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
	<param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. </param>
	<param name="options">One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"></see> values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
	<param name="caption">The text to display in the title bar of the message box. </param>
	<param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
	<param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box. </param>
	<param name="text">The text to display in the message box. </param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		<paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
	</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This overload is provided mainly for compatibility with <see cref="T:System.Windows.Forms.MessageBox"/>. You'd better use
 <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></see>.</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
	<summary>Displays a message box with the specified text, caption, buttons, icon, default button, and options.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
	<param name="icon">One of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"></see> values that specifies which icon to display in the message box. </param>
	<param name="options">One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"></see> values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
	<param name="caption">The text to display in the title bar of the message box. </param>
	<param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
	<param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box. </param>
	<param name="text">The text to display in the message box. </param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		<paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
	</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean)"/> function, but the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
	<summary>Displays a message box in front of the specified object and with the specified text, caption, buttons, icon, and default button.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
	<param name="Icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. </param>
	<param name="Owner">An implementation of <see cref="T:System.Windows.Forms.IWin32Window"></see> that will own the modal dialog box.</param>
	<param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box. </param>
	<param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
	<param name="Caption">The text to display in the title bar of the message box. </param>
	<param name="text">The text to display in the message box. </param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		<paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
	</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This overload is provided mainly for compatibility with <see cref="T:System.Windows.Forms.MessageBox"/>. You'd better use
 <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.Forms.MessageBoxDefaultButton)">overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></see>.</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.Forms.MessageBoxDefaultButton)">
	<summary>Displays a message box in front of the specified object and with the specified text, caption, buttons, icon, and default button.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
	<param name="Icon">One of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"></see> values that specifies which icon to display in the message box. </param>
	<param name="Owner">An implementation of <see cref="T:System.Windows.Forms.IWin32Window"></see> that will own the modal dialog box.</param>
	<param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box. </param>
	<param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
	<param name="Caption">The text to display in the title bar of the message box. </param>
	<param name="text">The text to display in the message box. </param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		<paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
	</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean)"/> function, but the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
	<summary>Displays a message box in front of the specified object and with the specified text, caption, buttons, icon, default button, and options.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
	<param name="Text">The text to display in the message box. </param>
	<param name="Icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. </param>
	<param name="Options">One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"></see> values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
	<param name="Owner">An implementation of <see cref="T:System.Windows.Forms.IWin32Window"></see> that will own the modal dialog box.</param>
	<param name="Buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
	<param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values the specifies the default button for the message box. </param>
	<param name="Caption">The text to display in the title bar of the message box. </param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		<paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
	</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This overload is provided mainly for compatibility with <see cref="T:System.Windows.Forms.MessageBox"/>. You'd better use
 <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></see>.</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
	<summary>Displays a message box in front of the specified object and with the specified text, caption, buttons, icon, default button, and options.</summary>
	<returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
	<param name="Text">The text to display in the message box. </param>
	<param name="Icon">One of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"></see> values that specifies which icon to display in the message box. </param>
	<param name="Options">One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"></see> values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
	<param name="Owner">An implementation of <see cref="T:System.Windows.Forms.IWin32Window"></see> that will own the modal dialog box.</param>
	<param name="Buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
	<param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values the specifies the default button for the message box. </param>
	<param name="Caption">The text to display in the title bar of the message box. </param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		<paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
	</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean)"/> function, but the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ShowCore(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
	<summary>Performs modal dialog for WinForms-like functions with <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></summary>
	<param name="Text">The text to display in the message box. </param>
	<param name="Icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. </param>
	<param name="Options">One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"></see> values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
	<param name="Owner">An implementation of <see cref="T:System.Windows.Forms.IWin32Window"></see> that will own the modal dialog box.</param>
	<param name="Buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
	<param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values the specifies the default button for the message box. </param>
	<param name="Caption">The text to display in the title bar of the message box. </param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		<paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
	</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ShowCore(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
	<summary>Performs modal dialog for WinForms-like functions with <see cref="T:System.Windows.Forms.MessageBoxIcon"/></summary>
	<param name="Text">The text to display in the message box. </param>
	<param name="Icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. </param>
	<param name="Options">One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"></see> values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
	<param name="Owner">An implementation of <see cref="T:System.Windows.Forms.IWin32Window"></see> that will own the modal dialog box.</param>
	<param name="Buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
	<param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values the specifies the default button for the message box. </param>
	<param name="Caption">The text to display in the title bar of the message box. </param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
		<paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
	</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error worink working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/></exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)">
	<summary>Displays a message in a dialog box, waits for the user to click a button, and then returns an integer indicating which button the user clicked.</summary>
	<param name="Prompt">Required. String expression displayed as the message in the dialog box.</param>
	<param name="Buttons">Optional. Numeric expression that is the sum of values specifying the number and type of buttons to display, the icon style to use, the identity of the default button, and the modality of the message box. If you omit Buttons, the default value is zero.</param>
	<param name="Title">Optional. String expression displayed in the title bar of the dialog box. If you omit Title, the application name is placed in the title bar.</param>
	<returns>The result of message box indicatin pressed button.</returns>
	<exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
	<remarks>This function mimisc behaviour of the <see cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)"/> function</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal(System.String)">
	<summary>Displays modal message box with given prompt</summary>
	<param name="Prompt">Prompt to be shown</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal(System.String,System.String)">
	<summary>Displays modal message box with given prompt and title</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF(System.String,System.Object[])">
	<summary>Displays modal message box with formated prompt</summary>
	<param name="Prompt">Format string for promt to be shown to user</param>
	<param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF(System.String,System.String,System.Object[])">
	<summary>Displays modal message box with formated prompt and given title</summary>
	<param name="Prompt">Format string for promt to be shown to user</param>
	<param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
	<param name="Title">Message box title</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons)">
	<summary>Displays modal message box with given promt, title and buttons</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal(System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons)">
	<summary>Displays modal message box with given prompt and buttons</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Object[])">
	<summary>Displays modal message box with formate prompt, given title an buttons</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
	<summary>Displays modal message box with given prompt, title and icon</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
	<summary>Displays modal message with given prompt, title, buttons and icon</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Object[])">
	<summary>Displays modal message box with formated prompt, given title and icon</summary>
	<param name="Prompt">Format string for promt to be shown to user</param>
	<param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
	<param name="Title">Message box title</param>
	<param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Object[])">
	<summary>Displays modal message with formated prompt, given title, buttons and icon</summary>
	<param name="Prompt">Format string for promt to be shown to user</param>
	<param name="Title">Message box title</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
	<returns>Indicates button clicked by user</returns>
	<param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
	<summary>Displays modal message box with given prompt, tile and options. Optinally also buttons and icon.</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
	<param name="Options">Options that controls messagebox layout and behaviour</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Object[])">
	<summary>Displays modal message box with formated prompt, given title and options </summary>
	<param name="Prompt">Format string for promt to be shown to user</param>
	<param name="Title">Message box title</param>
	<param name="Options">Options that controls messagebox layout and behaviour</param>
	<param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Object[])">
	<summary>Displays modal message box with formated prompt, given title, options and buttons</summary>
	<param name="Prompt">Format string for promt to be shown to user</param>
	<param name="Title">Message box title</param>
	<param name="Options">Options that controls messagebox layout and behaviour</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Object[])">
	<summary>Displays modal message box with formated prompt, given title, options and predefined icon</summary>
	<param name="Prompt">Format string for promt to be shown to user</param>
	<param name="Title">Message box title</param>
	<param name="Options">Options that controls messagebox layout and behaviour</param>
	<param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
	<param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Object[])">
	<summary>Displays modal message box with formated prompt, given title, options, buttons and predefined icon</summary>
	<param name="Prompt">Format string for promt to be shown to user</param>
	<param name="Title">Message box title</param>
	<param name="Options">Options that controls messagebox layout and behaviour</param>
	<param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Drawing.Image)">
	<summary>Displays modal message with given prompt, title, buttons and custom icon</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF(System.String,System.String,System.Drawing.Image,System.Object[])">
	<summary>Displays modal message box with formated prompt, given title and custom icon</summary>
	<param name="Prompt">Format string for promt to be shown to user</param>
	<param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
	<param name="Title">Message box title</param>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Drawing.Image,System.Object[])">
	<summary>Displays modal message with formated prompt, given title, buttons and custom  icon</summary>
	<param name="Prompt">Format string for promt to be shown to user</param>
	<param name="Title">Message box title</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<returns>Indicates button clicked by user</returns>
	<param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons)">
	<summary>Displays modal message box with given prompt, tile and options and custom icon. Optinally also buttons.</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<param name="Options">Options that controls messagebox layout and behaviour</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Drawing.Image,System.Object[])">
	<summary>Displays modal message box with formated prompt, given title, options and custom icon</summary>
	<param name="Prompt">Format string for promt to be shown to user</param>
	<param name="Title">Message box title</param>
	<param name="Options">Options that controls messagebox layout and behaviour</param>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Drawing.Image,System.Object[])">
	<summary>Displays modal message box with formated prompt, given title, options, buttons and custom icon</summary>
	<param name="Prompt">Format string for promt to be shown to user</param>
	<param name="Title">Message box title</param>
	<param name="Options">Options that controls messagebox layout and behaviour</param>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal(System.String,System.String,System.Drawing.Image)">
	<summary>Displays modal message box with given prompt, title and custom icon</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal(System.String,System.String,System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton[])">
	<summary>Displays modal message box with given prompt, title, custom icon and custom buttons</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<param name="Buttons">Custom buttons. Each button should have different <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>, so you can distinguish which button was clicked.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Buttons"/> is null</exception>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton[])">
	<summary>Displays modal message box with given prompt, title, options, custom icon and custom buttons</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<param name="Buttons">Custom buttons. Each button should have different <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>, so you can distinguish which button was clicked.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Buttons"/> is null</exception>
	<param name="Options">Options that controls messagebox layout and behaviour</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal(System.String,System.String,System.Windows.Forms.IWin32Window,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions)">
	<summary>Display modal message box with given prompt, title and owner. Optionally specifies buttons, icon and options</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<param name="Options">Options that controls messagebox layout and behaviour</param>
	<returns>Indicates button clicked by user</returns>
	<param name="Owner">The window message box window will be modal to (can be null)</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF(System.String,System.String,System.Windows.Forms.IWin32Window,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Drawing.Image,System.Object[])">
	<summary>Display modal message box with formated promt, given title, owner, buttons, icon</summary>
	<param name="Prompt">Format string for promt to be shown to user</param>
	<param name="Title">Message box title</param>
	<param name="Owner">The window message box window will be modal to (can be null)</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF(System.String,System.String,System.Windows.Forms.IWin32Window,System.Object[])">
	<summary>Dsiplays modal message box with formated prompt, given title and owner</summary>
	<param name="Prompt">Format string for promt to be shown to user</param>
	<param name="Title">Message box title</param>
	<param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
	<param name="Owner">The window message box window will be modal to (can be null)</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal(System.String,System.String,System.TimeSpan,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Windows.Forms.IWin32Window)">
	<summary>Displays autoclosing modal message box</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Timer">Time after which the message box will close automatically</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<param name="Options">Options that controls messagebox layout and behaviour</param>
	<param name="Owner">The window message box window will be modal to (can be null)</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal(System.String,System.String,System.Int32,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Windows.Forms.IWin32Window)">
	<summary>Displays autoclosing modal message box</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Timer">Time (in seconds) after which the message box will close automatically</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<param name="Options">Options that controls messagebox layout and behaviour</param>
	<param name="Owner">The window message box window will be modal to (can be null)</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Windows.Forms.IWin32Window,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs})">
	<summary>Displays modal messagebox with given prompt, title, items and optionally icon, options, owner, timer and show handler</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Items">Items to be shown in message box. Place items of type <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> and <see cref="T:System.String"/> here. <see cref="T:System.String"/> items are placed inside <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/>. Items of other types are ignored.</param>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<param name="Options">Options that controls messagebox layout and behaviour</param>
	<param name="Owner">The window message box window will be modal to (can be null)</param>
	<param name="Timer">Time (in seconds) after which the message box will close automatically</param>
	<param name="ShownHandler">Delegate that will handle the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.Shown"/> event of message box</param>
	<returns>Instance of message box. The instance is alredy closed when this function returns.</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx(System.String,System.String,System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Windows.Forms.IWin32Window,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs},System.Object[])">
	<summary>Displays modal messagebox with given prompt, title, items, icon, options, owner, timer and show handler</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Items">Items to be shown in message box. Place items of type <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> and <see cref="T:System.String"/> here. <see cref="T:System.String"/> items are placed inside <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/>. Items of other types are ignored.</param>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<param name="Options">Options that controls messagebox layout and behaviour</param>
	<param name="Owner">The window message box window will be modal to (can be null)</param>
	<param name="Timer">Time (in seconds) after which the message box will close automatically</param>
	<param name="ShownHandler">Delegate that will handle the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.Shown"/> event of message box</param>
	<returns>Instance of message box. The instance is alredy closed when this function returns.</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx(System.String,System.String,System.Drawing.Image,System.Windows.Forms.IWin32Window,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs},System.Object[])">
	<summary>Displays modal message box with given prompt, title, icon, owner, timer, show ahndler and items</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Items">Items to be shown in message box. Place items of type <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> and <see cref="T:System.String"/> here. <see cref="T:System.String"/> items are placed inside <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/>. Items of other types are ignored.</param>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<param name="Owner">The window message box window will be modal to (can be null)</param>
	<param name="Timer">Time (in seconds) after which the message box will close automatically</param>
	<param name="ShownHandler">Delegate that will handle the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.Shown"/> event of message box</param>
	<returns>Instance of message box. The instance is alredy closed when this function returns.</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx(System.String,System.String,System.Drawing.Image,System.Windows.Forms.IWin32Window,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs},Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton[])">
	<summary>Displays modal message box with given prompt, title, icon, owner, timer, show ahndler and buttons</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Buttons">Custom buttons. Each button should have different <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>, so you can distinguish which button was clicked.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Buttons"/> is null</exception>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<param name="Owner">The window message box window will be modal to (can be null)</param>
	<param name="Timer">Time (in seconds) after which the message box will close automatically</param>
	<param name="ShownHandler">Delegate that will handle the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.Shown"/> event of message box</param>
	<returns>Instance of message box. The instance is alredy closed when this function returns.</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx(System.String,System.String,System.Drawing.Image,System.Windows.Forms.IWin32Window,System.Object[])">
	<summary>Displays modal message box with given prompt, title, icon, owner and items</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Items">Items to be shown in message box. Place items of type <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> and <see cref="T:System.String"/> here. <see cref="T:System.String"/> items are placed inside <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/>. Items of other types are ignored.</param>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<param name="Owner">The window message box window will be modal to (can be null)</param>
	<returns>Instance of message box. The instance is alredy closed when this function returns.</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx(System.String,System.String,System.Drawing.Image,System.Windows.Forms.IWin32Window,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton[])">
	<summary>Displays modal message box with given prompt, title, icon and owner and buttons</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Buttons">Custom buttons. Each button should have different <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>, so you can distinguish which button was clicked.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Buttons"/> is null</exception>
	<param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
	<param name="Owner">The window message box window will be modal to (can be null)</param>
	<returns>Instance of message box. The instance is alredy closed when this function returns.</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx(System.String,System.String,System.Object[])">
	<summary>Displays modal message box with given prompt, title and items</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Items">Items to be shown in message box. Place items of type <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> and <see cref="T:System.String"/> here. <see cref="T:System.String"/> items are placed inside <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/>. Items of other types are ignored.</param>
	<returns>Instance of message box. The instance is alredy closed when this function returns.</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton[])">
	<summary>Displays modal message box with given prompt, title and buttons</summary>
	<param name="Prompt">Prompt to be shown</param>
	<param name="Title">Message box title</param>
	<param name="Buttons">Custom buttons. Each button should have different <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>, so you can distinguish which button was clicked.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Buttons"/> is null</exception>
	<returns>Instance of message box. The instance is alredy closed when this function returns.</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Error(System.Exception)">
	<summary>Displays modal message box with information about <see cref="T:System.Exception"/></summary>
	<param name="ex">Exception to show <see cref="P:System.Exception.Message"/> of</param>
	<returns>Indicates button clicked by user</returns>
	<remarks>Title will contain <see cref="P:System.Reflection.MemberInfo.Name"/> of exception</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Error(System.Exception,System.String)">
	<summary>Displays modal message box with information about <see cref="T:System.Exception"/> and custom title</summary>
	<param name="ex">Exception to show <see cref="P:System.Exception.Message"/> of</param>
	<param name="Title">Message box title</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Error(System.Exception,System.String,System.Windows.Forms.IWin32Window)">
	<summary>Displays modal message box with information about <see cref="T:System.Exception"/> with given title and owner</summary>
	<param name="ex">Exception to show <see cref="P:System.Exception.Message"/> of</param>
	<param name="Title">Message box title</param>
	<param name="Owner">The window message box window will be modal to (can be null)</param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Error(System.Exception,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
	<summary>Displays modal message box with information about <see cref="T:System.Exception"/></summary>
	<param name="ex">Exception to show <see cref="P:System.Exception.Message"/> of</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Error(System.Exception,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
	<summary>Displays modal message box with information about <see cref="T:System.Exception"/></summary>
	<param name="ex">Exception to show <see cref="P:System.Exception.Message"/> of</param>
	<param name="Title">Message box title</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
	<returns>Indicates button clicked by user</returns>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Error(System.Exception,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Windows.Forms.IWin32Window,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
	<summary>Displays modal message box with information about <see cref="T:System.Exception"/></summary>
	<param name="ex">Exception to show <see cref="P:System.Exception.Message"/> of</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
	<returns>Indicates button clicked by user</returns>
	<param name="Owner">The window message box window will be modal to (can be null)</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Error(System.Exception,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Windows.Forms.IWin32Window,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
	<summary>Displays modal message box with information about <see cref="T:System.Exception"/></summary>
	<param name="ex">Exception to show <see cref="P:System.Exception.Message"/> of</param>
	<param name="Title">Message box title</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
	<returns>Indicates button clicked by user</returns>
	<param name="Owner">The window message box window will be modal to (can be null)</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.Error(System.Exception,System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Windows.Forms.IWin32Window,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions)">
	<summary>Displays modal message box with information about <see cref="T:System.Exception"/></summary>
	<param name="ex">Exception to show <see cref="P:System.Exception.Message"/> of</param>
	<param name="Title">Message box title</param>
	<param name="Buttons">Defines which buttons will be available to user</param>
	<param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
	<returns>Indicates button clicked by user</returns>
	<param name="Owner">The window message box window will be modal to (can be null)</param>
	<param name="Prompt">Prompt to be shown</param>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.SetButtons(Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton[])">
	<summary>Replaces <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> with given buttons</summary>
	<param name="Buttons">New buttons</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Buttons"/> is null</exception>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBox.SetButtons(Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons)">
	<summary>Replaces <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> with buttons created from their <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons"/> specification</summary>
	<param name="Buttons">Indicates buttons to create</param>
</member><member name="T:Tools.WindowsT.IndependentT.MessageBox">
	<summary>Provides technology-independent managed base class for WinForms and WPF message boxes</summary>
	<remarks>
 This class implements <see cref="T:Tools.IReportsChange"/> and has plenty of events fo reporting changes of property values. Also types of some properties reports events when their properties are changed.
 The aim of such behavior is to provide dynamic message box which can be changed as it is displayd.
 However it is up to derived class which changes it will track and interpret as changes of dialog.
 <para>After message box is closed, it can be shown again (so called re-cycling; see <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Recycle"/>).</para>
	</remarks>
</member><member name="M:Tools.CollectionsT.GenericT.CollectionTools.GetTypedEnumerator``1(``0[])">
	<summary>Gets type-safe bidirectional enumerator of an array</summary>
	<param name="Array">Array to get enumerator for</param>
	<typeparam name="T">Type of elements in array</typeparam>
	<returns>New <see cref="T:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1"/></returns>
</member><member name="M:Tools.CollectionsT.GenericT.CollectionTools.GetTypedEnumerator``1(``0[],System.Boolean)">
	<summary>Gets type-safe bidirectional enumerator of an array</summary>
	<param name="Array">Array to get enumerator for</param>
	<typeparam name="T">Type of elements in array</typeparam>
	<param name="Inverse">Makes enumerator to nemumerated from last to first item using <see cref="M:System.Collections.IEnumerator.MoveNext"/>.</param>
	<returns>New <see cref="T:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1"/></returns>
</member><member name="M:Tools.CollectionsT.GenericT.CollectionTools.Last``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>Gets last item in collection</summary>
	<param name="Collection">Collection to obtain item from</param>
	<typeparam name="T">Type of items in collection</typeparam>
	<returns>Last item in <paramref name="Collection"/>, or null if <paramref name="Collection"/> is empty</returns>
	<remarks>This function have to iterate through whole <paramref name="Collection"/></remarks>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.GenericT.CollectionTools.Last``1(System.Collections.Generic.IList{``0})">
	<summary>Gets last item in collection</summary>
	<param name="Collection">Collection to obtain item from</param>
	<typeparam name="T">Type of items in collection</typeparam>
	<returns>Last item in <paramref name="Collection"/> (item at highest index), or null if <paramref name="Collection"/> is empty</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.GenericT.CollectionTools.Last``1(``0[])">
	<summary>Gets last item in collection</summary>
	<param name="Collection">Collection to obtain item from</param>
	<typeparam name="T">Type of items in collection</typeparam>
	<returns>Last item in <paramref name="Collection"/> (item at highest index), or null if <paramref name="Collection"/> is empty</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="T:Tools.CollectionsT.GenericT.CollectionTools">
	<summary>Extension methods for working with generic collections</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.CollectionTools.Last(System.Windows.Forms.Control.ControlCollection)">
	<summary>Gets last <see cref="T:System.Windows.Forms.Control"/> in <see cref="T:System.Windows.Forms.Control.ControlCollection"/></summary>
	<param name="Collection">Collection to get last item from</param>
	<returns>Last item in <paramref name="Collection"/>, null if <paramref name="Collection"/> is empty.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.CollectionTools.Last(System.Collections.BitArray)">
	<summary>Gets last item in <see cref="T:System.Collections.BitArray"/></summary>
	<param name="Collection">Collection to get last item from</param>
	<returns>Last item in <paramref name="Collection"/>, false if <paramref name="Collection"/> is empty.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.CollectionTools.Last(System.Collections.Specialized.StringCollection)">
	<summary>Gets last <see cref="T:System.String"/> in <see cref="T:System.Collections.Specialized.StringCollection"/></summary>
	<param name="Collection">Collection to get last item from</param>
	<returns>Last item in <paramref name="Collection"/>, null if <paramref name="Collection"/> is empty.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.CollectionTools.Last(System.ComponentModel.AttributeCollection)">
	<summary>Gets last <see cref="T:System.Attribute"/> in <see cref="T:System.ComponentModel.AttributeCollection"/></summary>
	<param name="Collection">Collection to get last item from</param>
	<returns>Last item in <paramref name="Collection"/>, null if <paramref name="Collection"/> is empty.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.CollectionTools.Insert(System.Windows.Forms.Control.ControlCollection,System.Int32,System.Windows.Forms.Control)">
	<summary>Inserts control at particulare position in collection</summary>
	<param name="Collection">Collection to insert control into</param>
	<param name="index">Index to insert control at</param>
	<param name="Control">Control to be inserted</param>
	<remarks>This method requires removal of all following controls from collection. Removed controls are then placed back.</remarks>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> or <paramref name="Control"/> is null</exception>
	<exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is less than zero of greater than <paramref name="Collection"/>.<see cref="P:System.Windows.Forms.Layout.ArrangedElementCollection.Count">Count</see>.</exception>
	<seealso cref="M:Tools.CollectionsT.SpecializedT.CollectionTools.Replace(System.Windows.Forms.Control.ControlCollection,System.Int32,System.Windows.Forms.Control)"/>
</member><member name="M:Tools.CollectionsT.SpecializedT.CollectionTools.Replace(System.Windows.Forms.Control.ControlCollection,System.Int32,System.Windows.Forms.Control)">
	<summary>Replaces <see cref="T:System.Windows.Forms.Control"/> at specified index of <see cref="T:System.Windows.Forms.Control.ControlCollection"/></summary>
	<param name="Collection">Collection to replace item in</param>
	<param name="index">Index to replace item at</param>
	<param name="Control">Control that will be placed at <paramref name="index"/>. If null, old control is removed at <paramref name="index"/> and nothing is inserted instead of it (so <paramref name="Collection"/> gets shorter).</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
	<exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is less tha zero or greater than or equal to <paramref name="Collection"/>.<see cref="P:System.Windows.Forms.Layout.ArrangedElementCollection.Count">Count</see>.</exception>
	<remarks>Using this method requires all controls following control being replaced to be removed from collection and reinserted back.
 <para>Raplacing control in collection does not necesarily mean that control will be visualy placed at the same postition in parent control. It is not true for any controls without layout model, such as <see cref="T:System.Windows.Forms.Form"/> or <see cref="T:System.Windows.Forms.Panel"/> and for for example <see cref="T:System.Windows.Forms.TableLayoutPanel"/>. It is true for <see cref="T:System.Windows.Forms.FlowLayoutPanel"/>.</para></remarks>
	<seealso cref="M:Tools.CollectionsT.SpecializedT.CollectionTools.Insert(System.Windows.Forms.Control.ControlCollection,System.Int32,System.Windows.Forms.Control)"/>
	<seealso cref="M:Tools.WindowsT.FormsT.UtilitiesT.Misc.ReplaceControl(System.Windows.Forms.TableLayoutPanel,System.Windows.Forms.Control,System.Windows.Forms.Control)"/>
</member><member name="T:Tools.CollectionsT.SpecializedT.CollectionTools">
	<summary>Extension methods for working with specialized collections</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IIPTCGetter.GetIPTCStream">
	<summary>Gets stream of IPTC data</summary>
	<remarks>
		<para>Stream content must start with first tag marker 1Ch of IPTC stream</para>
		<para>If there is no IPTC data in file stream can be null or have zero length</para>
		<para>Stream must support reading and seeking</para>
	</remarks>
</member><member name="T:Tools.DrawingT.MetadataT.IIPTCGetter">
	<summary>Represents provider that provides stream of IPTC data</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IIPTCWriter.IPTCEmbed(System.Byte[])">
	<summary>Writes IPTC data into container</summary>
	<param name="IPTCData">Data to be written</param>
</member><member name="T:Tools.DrawingT.MetadataT.IIPTCWriter">
	<summary>Represents provider that provides method to writed IPTC data into container</summary>
</member><member name="P:Tools.DrawingT.SystemColorsExtension.BrowserLink">
	<summary>Color of non visited non hovered hyperlink in web browser</summary>
</member><member name="P:Tools.DrawingT.SystemColorsExtension.BrowserVisitedLink">
	<summary>Color of visited hyperlink in web browser</summary>
</member><member name="P:Tools.DrawingT.SystemColorsExtension.BrowserActiveLink">
	<summary>Color as active (hovered) hyperlink in web browser</summary>
</member><member name="T:Tools.DrawingT.SystemColorsExtension">
	<summary>Gives access to aditional system-defined colors</summary>
</member><member name="P:Tools.My.Resources.ObjectImages.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Tools.My.Resources.ObjectImages.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:Tools.My.Resources.ObjectImages">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:Tools.ReflectionT.ReflectionTools.GetNamespaces(System.Reflection.Module,System.Boolean,System.Boolean)">
	<summary>Gets namespaces in given module</summary>
	<param name="Module">Module to get namespaces in</param>
	<returns>Array of namespaces in <paramref name="Module"/></returns>
	<param name="IncludeGlobal">True to include global namespace (with empty name)</param>
	<param name="Flat">True to list all namespaces even if their name contains dot (.), False to list only top-level namespaces</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Module"/> is null</exception>
	<exception cref="T:System.Reflection.ReflectionTypeLoadException">One or more classes in a module could not be loaded.</exception>
	<exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
</member><member name="M:Tools.ReflectionT.ReflectionTools.GetNamespaces(System.Reflection.Module,System.Predicate{System.Type},System.Boolean,System.Boolean)">
	<summary>Gets namespaces in given module</summary>
	<param name="Module">Module to get namespaces in</param>
	<returns>Array of namespaces in <paramref name="Module"/></returns>
	<param name="TypeFilter">Predicate. Onyl those types for which the predicate returns true will be observed for namespaces.</param>
	<param name="IncludeGlobal">True to include global namespace (with empty name)</param>
	<param name="Flat">True to list all namespaces even if their name contains dot (.), False to list only top-level namespaces</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Module"/> or <paramref name="TypeFilter"/> is null</exception>
	<exception cref="T:System.Reflection.ReflectionTypeLoadException">One or more classes in a module could not be loaded.</exception>
	<exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
</member><member name="M:Tools.ReflectionT.ReflectionTools.GetTypes(System.Reflection.Module,System.Boolean)">
	<summary> defined in given module</summary>
	<param name="Module">Module to get types from</param>
	<param name="FromNamespaces">True to get only types from global namespace. False to get all types (same as <see cref="M:System.Reflection.Module.GetTypes"/>)</param>
	<returns>Array of types from module <paramref name="Module"/>.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Module"/> is null</exception>
	<exception cref="T:System.Reflection.ReflectionTypeLoadException">One or more classes in a module could not be loaded.</exception>
	<exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
</member><member name="M:Tools.ReflectionT.ReflectionTools.IsPublic(System.Reflection.MemberInfo)">
	<summary>For <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MethodBase"/> (<see cref="T:System.Reflection.MethodInfo"/> or <see cref="T:System.Reflection.ConstructorInfo"/>), <see cref="T:System.Reflection.PropertyInfo"/>, <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.FieldInfo"/> indicates its accessibility</summary>
	<param name="Member">Member to indicate accesibility of</param>
	<returns>True if accessibility of member is public</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
	<exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is either <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
</member><member name="M:Tools.ReflectionT.ReflectionTools.IsPrivate(System.Reflection.MemberInfo)">
	<summary>For <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MethodBase"/> (<see cref="T:System.Reflection.MethodInfo"/> or <see cref="T:System.Reflection.ConstructorInfo"/>), <see cref="T:System.Reflection.PropertyInfo"/>, <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.FieldInfo"/> indicates its accessibility</summary>
	<param name="Member">Member to indicate accesibility of</param>
	<returns>True if accessibility of member is private</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
	<exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is either <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
</member><member name="M:Tools.ReflectionT.ReflectionTools.IsAssembly(System.Reflection.MemberInfo)">
	<summary>For <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MethodBase"/> (<see cref="T:System.Reflection.MethodInfo"/> or <see cref="T:System.Reflection.ConstructorInfo"/>), <see cref="T:System.Reflection.PropertyInfo"/>, <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.FieldInfo"/> indicates its accessibility</summary>
	<param name="Member">Member to indicate accesibility of</param>
	<returns>True if accessibility of member is assembly (friend, internal)</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
	<exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is either <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
</member><member name="M:Tools.ReflectionT.ReflectionTools.IsFamilyAndAssembly(System.Reflection.MemberInfo)">
	<summary>For <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MethodBase"/> (<see cref="T:System.Reflection.MethodInfo"/> or <see cref="T:System.Reflection.ConstructorInfo"/>), <see cref="T:System.Reflection.PropertyInfo"/>, <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.FieldInfo"/> indicates its accessibility</summary>
	<param name="Member">Member to indicate accesibility of</param>
	<returns>True if accessibility of member is family-and-assembly</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
	<exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is either <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
</member><member name="M:Tools.ReflectionT.ReflectionTools.IsFamilyOrAssembly(System.Reflection.MemberInfo)">
	<summary>For <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MethodBase"/> (<see cref="T:System.Reflection.MethodInfo"/> or <see cref="T:System.Reflection.ConstructorInfo"/>), <see cref="T:System.Reflection.PropertyInfo"/>, <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.FieldInfo"/> indicates its accessibility</summary>
	<param name="Member">Member to indicate accesibility of</param>
	<returns>True if accessibility of member is family-or-assembly (protected friend)</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
	<exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is either <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
</member><member name="M:Tools.ReflectionT.ReflectionTools.IsFamily(System.Reflection.MemberInfo)">
	<summary>For <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MethodBase"/> (<see cref="T:System.Reflection.MethodInfo"/> or <see cref="T:System.Reflection.ConstructorInfo"/>), <see cref="T:System.Reflection.PropertyInfo"/>, <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.FieldInfo"/> indicates its accessibility</summary>
	<param name="Member">Member to indicate accesibility of</param>
	<returns>True if accessibility of member is family (protected)</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
	<exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is either <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
</member><member name="M:Tools.ReflectionT.ReflectionTools.GetAccessibility(System.Reflection.PropertyInfo)">
	<summary>Gets maximum visibility of getter and setter of property</summary>
	<param name="prp">Property to check accessibility of</param>
	<returns>Accessibility that is union of accessibilities of getter and setter</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="prp"/> is null</exception>
	<exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods.</exception>
</member><member name="M:Tools.ReflectionT.ReflectionTools.GetAccessibility(System.Reflection.EventInfo)">
	<summary>Gets maximum visibility of adder, remover and raiser of event</summary>
	<param name="ev">Event to check accessibility of</param>
	<returns>Accessibility that is union of accessibilities of adder, remover and raiser</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="ev"/> is null</exception>
	<exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods.</exception>
</member><member name="M:Tools.ReflectionT.ReflectionTools.MaxVisibility(System.Reflection.MethodAttributes[])">
	<summary>Gets maximum visibility from visibilities of methods</summary>
	<param name="Visibility">Array of visibilities to test (it can contain any valid value of <see cref="T:System.Reflection.MethodAttributes"/>, non-visibity part will be ignored)</param>
	<returns>Maximum visibility as union of all visibilities in <paramref name="Visibility"/></returns>
</member><member name="M:Tools.ReflectionT.ReflectionTools.IsStatic(System.Reflection.MemberInfo)">
	<summary>Gets value indicating if member should be considered static</summary>
	<param name="Member">Member to check</param>
	<returns>True if member should or can be considered static</returns>
	<remarks>For <see cref="T:System.Type"/> always returns true. For <see cref="T:System.Reflection.PropertyInfo"/> and <see cref="T:System.Reflection.MethodInfo"/> returns true only if all non-other accessors are static</remarks>
	<exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
	<exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
</member><member name="M:Tools.ReflectionT.ReflectionTools.IsFinal(System.Reflection.MemberInfo)">
	<summary>Gets value indicating if member should be considered final (it cannot be overriden or inherited)</summary>
	<param name="Member">Member to check</param>
	<returns>True if memberis final</returns>
	<remarks>For <see cref="T:System.Reflection.FieldInfo"/> always returns true. For <see cref="T:System.Reflection.EventInfo"/> and <see cref="T:System.Reflection.PropertyInfo"/> all non-other members must be final to return true.</remarks>
	<exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
	<exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
</member><member name="M:Tools.ReflectionT.ReflectionTools.GetProperty(System.Reflection.MethodInfo,System.Boolean,System.Boolean)">
	<summary>Searches for property given method belongs to</summary>
	<param name="Method">Method to search property for</param>
	<param name="GetSetOnly">Search only for getters and setters</param>
	<param name="Inherit">Search within methods of base types</param>
	<returns>First property that has <paramref name="Method"/> as one of its accessors</returns>
	<remarks>Search is done only within type where <paramref name="Method"/> is declared and optionally within it's base types</remarks>
	<exception cref="T:System.ArgumentNullException"><paramref name="Method"/> is null</exception>
</member><member name="M:Tools.ReflectionT.ReflectionTools.GetEvent(System.Reflection.MethodInfo,System.Boolean,System.Boolean)">
	<summary>Searches for event given method belongs to</summary>
	<param name="Method">Method to search event for</param>
	<param name="StandardOnly">Search only for addres, removers and raisers</param>
	<param name="Inherit">Search within methods of base types</param>
	<returns>First event that has <paramref name="Method"/> as one of its accessors</returns>
	<remarks>Search is done only within type where <paramref name="Method"/> is declared and optionally within it's base types</remarks>
	<exception cref="T:System.ArgumentNullException"><paramref name="Method"/> is null</exception>
</member><member name="M:Tools.ReflectionT.ReflectionTools.IsOperator(System.Reflection.MethodInfo,System.Boolean)">
	<summary>Gets value indicating whether and if which the function is operator</summary>
	<param name="Method">Method to investigate</param>
	<param name="NonStandard">Also include operators that are not part of CLI standard (currently VB \, ^ and &amp; operators are supported)</param>
	<returns>If function is operator returns one of <see cref="T:Tools.ReflectionT.Operators"/> constants. If function is not operator (or it seems to be a operator but does not fit to operator it pretends to be) returns <see cref="F:Tools.ReflectionT.Operators.no"/>.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Method"/> is null</exception>
</member><member name="M:Tools.ReflectionT.ReflectionTools.NumberOfOperands(Tools.ReflectionT.Operators)">
	<summary>Gets number of operands of given operator</summary>
	<param name="Operator">Operator to get number of operands of</param>
	<returns>And-combination of <paramref name="Operator"/> and <see cref="F:Tools.ReflectionT.Operators_masks.NoOfOperands"/></returns>
</member><member name="M:Tools.ReflectionT.ReflectionTools.IsStandard(Tools.ReflectionT.Operators)">
	<summary>Gets value indicating if given operator is standard CLI operator</summary>
	<param name="Operator">Operator to get information for</param>
	<returns>Negation of and-combination of <paramref name="Operator"/> and <see cref="F:Tools.ReflectionT.Operators_masks.NonStandard"/></returns>
</member><member name="M:Tools.ReflectionT.ReflectionTools.IsAssignment(Tools.ReflectionT.Operators)">
	<summary>Gets value indicating if operator is sassignment operator</summary>
	<param name="Operator">Operator to get information for</param>
	<returns>And-combination of <paramref name="Operator"/> and <see cref="F:Tools.ReflectionT.Operators_masks.Assignment"/></returns>
</member><member name="M:Tools.ReflectionT.ReflectionTools.GetImplementedInterfaces(System.Type,System.Boolean)">
	<summary>Gets interfaces implemented by given type</summary>
	<param name="Type">Type to get interfaces from</param>
	<param name="Inherit">True to get all interfaces, false to get only interfaces implemented by this type directly</param>
	<returns>Interfaces inplemented by this type. Whether all or only those implemented by this type directly depends on <paramref name="Inherit"/>.</returns>
</member><member name="M:Tools.ReflectionT.ReflectionTools.GetNamespace(System.Type)">
	<summary>Gets namespace of given <see cref="T:System.Type"/> as instance of <see cref="T:Tools.ReflectionT.NamespaceInfo"/></summary>
	<param name="Type">Type to get namespace of</param>
	<returns><see cref="T:Tools.ReflectionT.NamespaceInfo"/> constructed from <paramref name="Type"/>.<see cref="P:System.Type.Module">Module</see> and <paramref name="Type"/>.<see cref="P:System.Type.Namespace">Namespace</see>.</returns>
	<remarks>Each type has namespace even when name of the namespace is an empty <see cref="T:System.String"/>.</remarks>
</member><member name="T:Tools.ReflectionT.ReflectionTools">
	<summary>Various reflection tools</summary>
</member><member name="F:Tools.ReflectionT.NamespaceInfo._Module">
	<summary>Contains value of the <see cref="P:Tools.ReflectionT.NamespaceInfo.Module"/> property</summary>
</member><member name="F:Tools.ReflectionT.NamespaceInfo._Name">
	<summary>Contains value of the <see cref="P:Tools.ReflectionT.NamespaceInfo.Name"/> property</summary>
</member><member name="P:Tools.ReflectionT.NamespaceInfo.Module">
	<summary>Module the namespace is located in</summary>
</member><member name="P:Tools.ReflectionT.NamespaceInfo.Name">
	<summary>Name of namespace. Can be an empty string for global namespace</summary>
</member><member name="P:Tools.ReflectionT.NamespaceInfo.ShortName">
	<summary>Short name of namespace - only part after last dot (.).</summary>
</member><member name="M:Tools.ReflectionT.NamespaceInfo.#ctor(System.Reflection.Module,System.String)">
	<summary>CTor</summary>
	<param name="Module">Module the namespace is defined in</param>
	<param name="Name">Name of namespace</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Module"/> or <paramref name="Name"/> is null</exception>
</member><member name="M:Tools.ReflectionT.NamespaceInfo.GetTypes(System.Boolean)">
	<summary>s located within current namespace</summary>
	<returns>Array of types defined in this namespace</returns>
	<exception cref="T:System.Reflection.ReflectionTypeLoadException">One or more classes in a module could not be loaded.</exception>
	<exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
</member><member name="M:Tools.ReflectionT.NamespaceInfo.Equals(System.Object)">
	<summary>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</summary>
	<returns>True if <paramref name="obj"/> is <see cref="T:Tools.ReflectionT.NamespaceInfo"/> and its <see cref="P:Tools.ReflectionT.NamespaceInfo.Module"/> equals to <see cref="P:Tools.ReflectionT.NamespaceInfo.Module"/> of current <see cref="T:Tools.ReflectionT.NamespaceInfo"/> and also <see cref="P:Tools.ReflectionT.NamespaceInfo.Name">Names</see> or current <see cref="T:Tools.ReflectionT.NamespaceInfo"/> and <paramref name="obj"/> equals.</returns>
	<param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
	<exception cref="T:System.NullReferenceException">The 
 <paramref name="obj"/> parameter is null.</exception>
</member><member name="M:Tools.ReflectionT.NamespaceInfo.op_Equality(Tools.ReflectionT.NamespaceInfo,Tools.ReflectionT.NamespaceInfo)">
	<summary>Compares two <see cref="T:Tools.ReflectionT.NamespaceInfo">NamespaceInfos</see> for equality</summary>
	<param name="a">A <see cref="T:Tools.ReflectionT.NamespaceInfo"/></param>
	<param name="b">A <see cref="T:Tools.ReflectionT.NamespaceInfo"/></param>
	<returns>True if <paramref name="a"/> equals to <paramref name="b"/>.</returns>
</member><member name="M:Tools.ReflectionT.NamespaceInfo.op_Inequality(Tools.ReflectionT.NamespaceInfo,Tools.ReflectionT.NamespaceInfo)">
	<summary>Compares two <see cref="T:Tools.ReflectionT.NamespaceInfo">NamespaceInfos</see> for inequality</summary>
	<param name="a">A <see cref="T:Tools.ReflectionT.NamespaceInfo"/></param>
	<param name="b">A <see cref="T:Tools.ReflectionT.NamespaceInfo"/></param>
	<returns>False if <paramref name="a"/> equals to <paramref name="b"/>.</returns>
</member><member name="P:Tools.ReflectionT.NamespaceInfo.Parent">
	<summary>Gets parent namespace of current namespace</summary>
	<returns>If <see cref="P:Tools.ReflectionT.NamespaceInfo.Name"/> of current namespace contains no dot an namespace with empty name is returned. If <see cref="P:Tools.ReflectionT.NamespaceInfo.Name"/> of current namespace is an empty string, null is returned.</returns>
</member><member name="M:Tools.ReflectionT.NamespaceInfo.GetNamespaces">
	<summary>Gets all namespaces immediately contained in this namespace</summary>
	<returns>Array of namespaces in this namespace</returns>
	<remarks>Whe looking for namespaces all types in curret namespace are considered (even non-public). 
 If you want filer some types use overloaded <see cref="M:Tools.ReflectionT.NamespaceInfo.GetNamespaces(System.Predicate`1[System.Type])"/>.</remarks>
</member><member name="M:Tools.ReflectionT.NamespaceInfo.GetNamespaces(System.Predicate{System.Type})">
	<summary>Gets namespaces immediatelly contained in this namespace when considering only selected types</summary>
	<param name="TypeFiler">This function returns only such namespaces which contain at leas one type for which delegate function <paramref name="TypeFiler"/> returns true</param>
	<returns>Array of namespaces in this namespace</returns>
</member><member name="T:Tools.ReflectionT.NamespaceInfo">
	<summary>Represents reflection namespace</summary>
</member><member name="F:Tools.ReflectionT.Operators.no">
	<summary>No operator</summary>
</member><member name="F:Tools.ReflectionT.Operators.Decrement">
	<summary>Decrement (unary, like C++/C# --)</summary>
</member><member name="F:Tools.ReflectionT.Operators.Increment">
	<summary>Increment (unary, like C++/C# ++)</summary>
</member><member name="F:Tools.ReflectionT.Operators.UnaryNegation">
	<summary>Unary negation (unary minus operator like C++/C#/VB -)</summary>
</member><member name="F:Tools.ReflectionT.Operators.UnaryPlus">
	<summary>Unary plus (like C++/C#/VB +)</summary>
</member><member name="F:Tools.ReflectionT.Operators.LogicalNot">
	<summary>Logical not (unary, like C++/C# !, VB Not)</summary>
</member><member name="F:Tools.ReflectionT.Operators.True">
	<summary>True operator - if value should be treated as True (unary, like VB IsTrue)</summary>
</member><member name="F:Tools.ReflectionT.Operators.False">
	<summary>False operator - if value should be treated as False (unary, like VB IsFalse)</summary>
</member><member name="F:Tools.ReflectionT.Operators.AddressOf">
	<summary>Reference operator (unary, like C++ &amp;)</summary>
</member><member name="F:Tools.ReflectionT.Operators.OnesComplement">
	<summary>Bitwise not operator (unary, like C++/C# ~, VB Not)</summary>
</member><member name="F:Tools.ReflectionT.Operators.PointerDereference">
	<summary>Pointer dereference (unary, like C++ *)</summary>
</member><member name="F:Tools.ReflectionT.Operators.Addition">
	<summary>Addition (binary, like C++/C#/VB +)</summary>
</member><member name="F:Tools.ReflectionT.Operators.Subtraction">
	<summary>Subtraction (binary, like C++/C#/VB -)</summary>
</member><member name="F:Tools.ReflectionT.Operators.Multiply">
	<summary>Multiplication (binary, like C++/C#/VB *)</summary>
</member><member name="F:Tools.ReflectionT.Operators.Division">
	<summary>Division (binary, like C++/C#/VB /)</summary>
</member><member name="F:Tools.ReflectionT.Operators.Modulus">
	<summary>Modulus (division remainder, binary, like C++/C# %, VB Mod)</summary>
</member><member name="F:Tools.ReflectionT.Operators.ExclusiveOr">
	<summary>Bitwise xor (exclusive or, binary, like C++/C# ^, VB Xor)</summary>
</member><member name="F:Tools.ReflectionT.Operators.BitwiseAnd">
	<summary>Bitwise and (binary, like C++/C# &amp;, VB And)</summary>
</member><member name="F:Tools.ReflectionT.Operators.BitwiseOr">
	<summary>Bitwise or (binary, like C++/C# |, VB Or)</summary>
</member><member name="F:Tools.ReflectionT.Operators.LogicalAnd">
	<summary>Logical and (binary, like C++/C# &amp;&amp;, VB AndAlso)</summary>
</member><member name="F:Tools.ReflectionT.Operators.LogicalOr">
	<summary>Logical or (binary, like C++/C# ||, VB OrElse)</summary>
</member><member name="F:Tools.ReflectionT.Operators.Assign">
	<summary>Assignment(binary, like C++/C#/VB =)</summary>
</member><member name="F:Tools.ReflectionT.Operators.LeftShift">
	<summary>Left shift (binary, like C++/C#/VB &lt;&lt;)</summary>
</member><member name="F:Tools.ReflectionT.Operators.RightShift">
	<summary>Right shift (binary, like C++/C#/VB &gt;&gt;)</summary>
</member><member name="F:Tools.ReflectionT.Operators.SignedRightShif">
	<summary>Signed right shift (binary)</summary>
</member><member name="F:Tools.ReflectionT.Operators.UnsignedRightShift">
	<summary>Unsigned right shift (binary)</summary>
</member><member name="F:Tools.ReflectionT.Operators.Equality">
	<summary>Equality comparison (binary, like C++/C# ==, VB =)</summary>
</member><member name="F:Tools.ReflectionT.Operators.GreaterThan">
	<summary>Greater than comparison (binary, like C++/C#/VB &gt;)</summary>
</member><member name="F:Tools.ReflectionT.Operators.LessThan">
	<summary>Less than comparison (binary, like C++/C#/VB &lt;)</summary>
</member><member name="F:Tools.ReflectionT.Operators.Inequality">
	<summary>Inequality comparison (binary, like C++/C# !=; VB &lt;&gt;)</summary>
</member><member name="F:Tools.ReflectionT.Operators.GreaterThanOrEqual">
	<summary>Greater than or equal comparison (binary, like C++/C#/VB &gt;=)</summary>
</member><member name="F:Tools.ReflectionT.Operators.LessThanOrEqual">
	<summary>Less than or equal comparison (binary, like C++/C#/VB &lt;=)</summary>
</member><member name="F:Tools.ReflectionT.Operators.UnsignedRightShiftAssignment">
	<summary>Self-assignment of unsigned right shift (binary)</summary>
</member><member name="F:Tools.ReflectionT.Operators.MemberSelection">
	<summary>Member selection (binary, like C++ -&gt;)</summary>
</member><member name="F:Tools.ReflectionT.Operators.RightShifAssignment">
	<summary>Self-assignment of right shift (binary, like C++/C#/VB &gt;&gt;=)</summary>
</member><member name="F:Tools.ReflectionT.Operators.MultiplicationAssignment">
	<summary>Self-assigment of multiplication (binary, like C++/C#/VB *=)</summary>
</member><member name="F:Tools.ReflectionT.Operators.PointerToMemberSelection">
	<summary>Selection of pointer to member (binary, like C++ -&gt;*)</summary>
</member><member name="F:Tools.ReflectionT.Operators.SubtractionAssignment">
	<summary>Self-assignment of subtraction (binary, like C++/C#/VB -=)</summary>
</member><member name="F:Tools.ReflectionT.Operators.ExclusiveOrAssignment">
	<summary>Bitwise exclusive or self-assigment (binary, like C++/C# ^=)</summary>
</member><member name="F:Tools.ReflectionT.Operators.LeftShiftAssignment">
	<summary>Self-assigment of left shift (binary, like C++/C#/VB &lt;&lt;=)</summary>
</member><member name="F:Tools.ReflectionT.Operators.ModulusAssignment">
	<summary>Modulus (division remainder) self-assignment (binary, like C++/C# %=)</summary>
</member><member name="F:Tools.ReflectionT.Operators.AditionAssignment">
	<summary>Self-assigmment of addition (binary, like C++/C#/VB +=)</summary>
</member><member name="F:Tools.ReflectionT.Operators.BitwiseAndAssignment">
	<summary>Self-assignment of witwise and (binary, like C++/C# &amp;=)</summary>
</member><member name="F:Tools.ReflectionT.Operators.BitwiseOrAssignment">
	<summary>Self-assignment of bitwise or (binary, like C++/C# |=)</summary>
</member><member name="F:Tools.ReflectionT.Operators.Comma">
	<summary>Comma (operation grouping, binary, like C++ ,)</summary>
</member><member name="F:Tools.ReflectionT.Operators.DivisionAssignment">
	<summary>Self-assignment of division (binary, like C++/C#/VB /=)</summary>
</member><member name="F:Tools.ReflectionT.Operators.Concatenate">
	<summary>String contactenation (VB specific, binary, like VB &amp;)</summary>
</member><member name="F:Tools.ReflectionT.Operators.Exponent">
	<summary>Exponent (VB specific, binary, like VB ^)</summary>
</member><member name="F:Tools.ReflectionT.Operators.IntegerDivision">
	<summary>Force-integral division (VB specific, binary, like VB \, C++/C# / on integers)</summary>
</member><member name="F:Tools.ReflectionT.Operators.Implicit">
	<summary>Implicit conversion (unary, like C# implicit, VB Narrowing CType)</summary>
</member><member name="F:Tools.ReflectionT.Operators.Explicit">
	<summary>Explicit conversion (unary, like C# explicit, VB Widening CType)</summary>
</member><member name="T:Tools.ReflectionT.Operators">
	<summary>Operators supported by CLI</summary>
	<remarks>High order byte (exluding its MSB) is number that uniquely identifies the operator.
 Low-order half-byte represents number of operands of the operator (1 or 2).
 If MSB of low-order byte is set then operator is non-standard.
 If LSB of high-order half-byle of low-order byte (9th LSB bit in whole number) is set then operator is assignment.
 See <seealso cref="T:Tools.ReflectionT.Operators_masks"/>.
 Names of items of the enumeration are names of operator methods without 'op_' prefix.</remarks>
</member><member name="F:Tools.ReflectionT.Operators_masks.OperatorID">
	<summary>Masks operator number. This number is unique within <see cref="T:Tools.ReflectionT.Operators"/>, but has no relation to anything in CLI.</summary>
</member><member name="F:Tools.ReflectionT.Operators_masks.NoOfOperands">
	<summary>Masks number of operands</summary>
</member><member name="F:Tools.ReflectionT.Operators_masks.NonStandard">
	<summary>Masks if operator is standard (0) or non-standard (1)</summary>
</member><member name="F:Tools.ReflectionT.Operators_masks.Assignment">
	<summary>Masks if operator is assignment (1) or not (0)</summary>
</member><member name="T:Tools.ReflectionT.Operators_masks">
	<summary>Masks for the <see cref="T:Tools.ReflectionT.Operators"/> enumeration</summary>
</member><member name="F:Tools.WindowsT.FormsT.DataBoundToolStripLabel._context">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.DataBoundToolStripLabel.BindingContext"/> property</summary>
</member><member name="F:Tools.WindowsT.FormsT.DataBoundToolStripLabel._bindings">
	<summary>Contains value of the<see cref="P:Tools.WindowsT.FormsT.DataBoundToolStripLabel.DataBindings"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.DataBoundToolStripLabel.BindingContext">
	<summary>Gets or sets the collection of currency managers for the <see cref="T:System.Windows.Forms.IBindableComponent"/>.</summary>
	<returns>The collection of <see cref="T:System.Windows.Forms.BindingManagerBase"/> objects for this <see cref="T:Tools.WindowsT.FormsT.DataBoundToolStripLabel"/>.</returns>
</member><member name="P:Tools.WindowsT.FormsT.DataBoundToolStripLabel.DataBindings">
	<summary>Gets the collection of data-binding objects for this <see cref="T:System.Windows.Forms.IBindableComponent"/>.</summary>
	<returns>The <see cref="T:System.Windows.Forms.ControlBindingsCollection"/> for this <see cref="T:Tools.WindowsT.FormsT.DataBoundToolStripLabel"/>.</returns>
</member><member name="P:Tools.WindowsT.FormsT.DataBoundToolStripLabel.Text">
	<summary>Gets or sets the text that is to be displayed on the item.</summary>
	<returns>A string representing the item's text. The default value is the empty string ("").</returns>
</member><member name="M:Tools.WindowsT.FormsT.DataBoundToolStripLabel.OnBindingContextChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.DataBoundToolStripLabel.BindingContextChanged"/> event</summary>
	<param name="e">Event parameters</param>
	<remarks>Note for inheritors: Always call base class's method in order event to be raised</remarks>
</member><member name="E:Tools.WindowsT.FormsT.DataBoundToolStripLabel.BindingContextChanged">
	<summary>Fired when <see cref="E:System.Windows.Forms.Control.BindingContextChanged"/> of <see cref="T:System.Windows.Forms.ComboBox"/> occures</summary>
	<param name="sender">Source of the event - rhis isntance of <see cref="T:Tools.WindowsT.FormsT.DataBoundToolStripComboBox"/></param>
	<param name="e">Event parameters</param>
</member><member name="T:Tools.WindowsT.FormsT.DataBoundToolStripLabel">
	<summary><see cref="T:System.Windows.Forms.ToolStripLabel"/> that allows databinding</summary>
	<remarks><seealso>http://forums.devx.com/archive/index.php/t-153607.html</seealso></remarks>
</member><member name="M:Tools.MathT.LEBE(System.Int16)">
	<summary>Converts <see cref="T:System.Int16"/> from Little Endian to Big Endian or vice versa</summary>
	<param name="value">value to be converted</param>
	<returns><paramref name="value"/> with reversed byte order</returns>
</member><member name="M:Tools.MathT.LEBE(System.UInt16)">
	<summary>Converts <see cref="T:System.UInt16"/> from Little Endian to Big Endian or vice versa</summary>
	<param name="value">value to be converted</param>
	<returns><paramref name="value"/> with reversed byte order</returns>
</member><member name="M:Tools.MathT.LEBE(System.Int32)">
	<summary>Converts <see cref="T:System.Int32"/> from Little Endian to Big Endian or vice versa</summary>
	<param name="value">value to be converted</param>
	<returns><paramref name="value"/> with reversed byte order</returns>
</member><member name="M:Tools.MathT.LEBE(System.UInt32)">
	<summary>Converts <see cref="T:System.UInt32"/> from Little Endian to Big Endian or vice versa</summary>
	<param name="value">value to be converted</param>
	<returns><paramref name="value"/> with reversed byte order</returns>
</member><member name="M:Tools.MathT.LEBE(System.Int64)">
	<summary>Converts <see cref="T:System.Int64"/> from Little Endian to Big Endian or vice versa</summary>
	<param name="value">value to be converted</param>
	<returns><paramref name="value"/> with reversed byte order</returns>
</member><member name="M:Tools.MathT.LEBE(System.UInt64)">
	<summary>Converts <see cref="T:System.UInt64"/> from Little Endian to Big Endian or vice versa</summary>
	<param name="value">value to be converted</param>
	<returns><paramref name="value"/> with reversed byte order</returns>
</member><member name="F:Tools.Chars.Cr">
	<summary>Carriage return (CR) character (\r, code 13 = 0xD)</summary>
	<seealso cref="F:Microsoft.VisualBasic.Constants.vbCrLf"/>
</member><member name="F:Tools.Chars.Lf">
	<summary>Line feed (LF) caharcter (\n, code 10 = 0xA)</summary>
	<seealso cref="F:Microsoft.VisualBasic.Constants.vbLf"/>
</member><member name="F:Tools.Chars.NullChar">
	<summary>Null character (code 0)</summary>
	<seeaso cref="F:Microsoft.VisualBasic.Constants.vbNullChar"/>
</member><member name="F:Tools.Chars.Tab">
	<summary>Horizontal tabulator character (\t, code 9)</summary>
	<seeaso cref="F:Microsoft.VisualBasic.Constants.vbTab"/>
</member><member name="F:Tools.Chars.VerticalTab">
	<summary>Vertical tabulator character (code 11 = 0xB)</summary>
	<seealso cref="F:Microsoft.VisualBasic.Constants.vbVerticalTab"/>
</member><member name="F:Tools.Chars.Back">
	<summary>Backspace character (code 8)</summary>
	<seealso cref="F:Microsoft.VisualBasic.Constants.vbBack"/>
</member><member name="T:Tools.Chars">
	<summary>Contains character constants</summary>
</member><member name="M:Tools.WindowsT.WPF.ConvertersT.NotBooleanValueConverter.Convert(System.Boolean,System.Object,System.Globalization.CultureInfo)">
	<summary>Converts a value - makes boolean negation of it.</summary>
	<param name="value">The value produced by the binding source.</param>
	<param name="parameter">The converter parameter to use. Ignored.</param>
	<param name="culture">The culture to use in the converter. Ignored.</param>
	<returns>Boolean negation of <paramref name="value"/></returns>
</member><member name="M:Tools.WindowsT.WPF.ConvertersT.NotBooleanValueConverter.ConvertBack(System.Boolean,System.Object,System.Globalization.CultureInfo)">
	<summary>Converts a value - makes boolean negation of it.</summary>
	<param name="value">The value that is produced by the binding target.</param>
	<param name="parameter">The converter parameter to use. Ignored.</param>
	<param name="culture">The culture to use in the converter. Ignored.</param>
	<returns>Boolean negation of <paramref name="value"/>.</returns>
</member><member name="T:Tools.WindowsT.WPF.ConvertersT.NotBooleanValueConverter">
	<summary>Implements <see cref="T:System.Windows.Data.IValueConverter"/> which negates <see cref="T:System.Boolean"/> value</summary>
</member><member name="M:Tools.WindowsT.WPF.ConvertersT.HalfConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
	<summary>Converts a value. </summary>
	<returns>A converted value. If the method returns null, the valid null value is used.</returns>
	<param name="value">The value produced by the binding source.</param>
	<param name="targetType">The type of the binding target property.</param>
	<param name="parameter">The converter parameter to use.</param>
	<param name="culture">The culture to use in the converter.</param>
	<exception cref="T:System.ArgumentException"><paramref name="value"/> or <paramref name="targetType"/> is not supported.
 Supported types are <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.UInt64"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/> and <see cref="T:System.Decimal"/>
	</exception>
</member><member name="M:Tools.WindowsT.WPF.ConvertersT.HalfConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
	<summary>Converts a value. </summary>
	<returns>A converted value. If the method returns null, the valid null value is used.</returns>
	<param name="value">The value produced by the binding source.</param>
	<param name="targetType">The type of the binding target property.</param>
	<param name="parameter">The converter parameter to use.</param>
	<param name="culture">The culture to use in the converter.</param>
	<exception cref="T:System.ArgumentException"><paramref name="value"/> or <paramref name="targetType"/> is not supported.
 Supported types are <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.UInt64"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/> and <see cref="T:System.Decimal"/>
	</exception>
</member><member name="M:Tools.WindowsT.WPF.ConvertersT.HalfConverter.Convert(System.Object,System.Type,System.Single)">
	<summary>Performs a conversion</summary>
	<param name="value">Value to be converted</param>
	<param name="targetType">Type of return value</param>
	<param name="param">Multiplication constant</param>
	<returns><paramref name="value"/> * <paramref name="param"/> in type <paramref name="targetType"/></returns>
	<exception cref="T:System.ArgumentException"><paramref name="value"/>is of unsupported type or <paramref name="targetType"/> is unsupported</exception>
</member><member name="T:Tools.WindowsT.WPF.ConvertersT.HalfConverter">
	<summary>Implements <see cref="T:System.Windows.Data.IValueConverter"/> for converting numeric values to halfs of them</summary>
</member><member name="F:Tools.WindowsT.FormsT.ProgressBarWithText._tlb">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ProgressBarWithText.Label"/> properzy</summary>
</member><member name="P:Tools.WindowsT.FormsT.ProgressBarWithText.Label">
	<summary>gets or sets internal <see cref="T:Tools.WindowsT.FormsT.TransparentLabel"/> used to display text</summary>
</member><member name="M:Tools.WindowsT.FormsT.ProgressBarWithText.InitLabel">
	<summary>Initializes the <see cref="P:Tools.WindowsT.FormsT.ProgressBarWithText.Label"/> property</summary>
</member><member name="M:Tools.WindowsT.FormsT.ProgressBarWithText.#ctor">
	<summary>CTor</summary>
</member><member name="F:Tools.WindowsT.FormsT.ProgressBarWithText._AutoText">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ProgressBarWithText.AutoText"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ProgressBarWithText.AutoText">
	<summary>Get or sets value indicating if text automatically displays value of progress bar</summary>
</member><member name="F:Tools.WindowsT.FormsT.ProgressBarWithText._AutoTextFormat">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ProgressBarWithText.AutoTextFormat"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ProgressBarWithText.AutoTextFormat">
	<summary>Format string used to format value when displayed as text of control automatically.</summary>
	<remarks><seealso cref="T:System.Int32"/></remarks>
</member><member name="M:Tools.WindowsT.FormsT.ProgressBarWithText.WndProc(System.Windows.Forms.Message@)">
	<summary>Processes Windows messages.</summary>
	<param name="m">The Windows <see cref="T:System.Windows.Forms.Message"/> to process</param>
</member><member name="E:Tools.WindowsT.FormsT.ProgressBarWithText.ValueChanged">
	<summary>Occurs when <see cref="P:System.Windows.Forms.ProgressBar.Value"/> changes</summary>
</member><member name="E:Tools.WindowsT.FormsT.ProgressBarWithText.AutoTextChanged">
	<summary>Ocuurs when <see cref="P:Tools.WindowsT.FormsT.ProgressBarWithText.AutoText"/> changes</summary>
</member><member name="E:Tools.WindowsT.FormsT.ProgressBarWithText.AutoTextFormatChanged">
	<summary>Ocuurs when <see cref="P:Tools.WindowsT.FormsT.ProgressBarWithText.AutoTextFormat"/> changes</summary>
</member><member name="M:Tools.WindowsT.FormsT.ProgressBarWithText.OnValueChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.ProgressBarWithText.ValueChanged"/> event</summary>
	<param name="e">Property data</param>
</member><member name="M:Tools.WindowsT.FormsT.ProgressBarWithText.OnAutoTextChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.ProgressBarWithText.AutoTextChanged"/> event</summary>
</member><member name="M:Tools.WindowsT.FormsT.ProgressBarWithText.OnAutoTextFormatChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.ProgressBarWithText.AutoTextFormatChanged"/> event</summary>
</member><member name="M:Tools.WindowsT.FormsT.ProgressBarWithText.OnForeColorChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:System.Windows.Forms.Control.ForeColorChanged"/> event.</summary>
	<param name="e">An <see cref="T:System.EventArgs"/> that contains the event data</param>
</member><member name="M:Tools.WindowsT.FormsT.ProgressBarWithText.OnTextChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:System.Windows.Forms.ProgressBar.TextChanged"/> event.</summary>
	<param name="e">An <see cref="T:System.EventArgs"/> that contains the event data</param>
</member><member name="M:Tools.WindowsT.FormsT.ProgressBarWithText.CreateAutoText">
	<summary>Formats <see cref="P:System.Windows.Forms.ProgressBar.Value"/> by <see cref="P:Tools.WindowsT.FormsT.ProgressBarWithText.AutoTextFormat"/></summary>
</member><member name="P:Tools.WindowsT.FormsT.ProgressBarWithText.Text">
	<summary>Gets or sets text of control.</summary>
</member><member name="P:Tools.WindowsT.FormsT.ProgressBarWithText.TextAlign">
	<summary>Gets or sets the alignment of text in the label.</summary>
	<returns>One of the <see cref="T:System.Drawing.ContentAlignment"/> values. The default is <see cref="F:System.Drawing.ContentAlignment.MiddleCenter"/>.</returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value assigned is not one of the <see cref="T:System.Drawing.ContentAlignment"/> values. </exception>
</member><member name="P:Tools.WindowsT.FormsT.ProgressBarWithText.ForeColor">
	<summary>Gets or sets the foreground color of the control.</summary>
	<returns>The foreground System.Drawing.Color of the control. The default is the value of the System.Windows.Forms.Control.DefaultForeColor property.</returns>
</member><member name="P:Tools.WindowsT.FormsT.ProgressBarWithText.Font">
	<summary>Gets or sets the font of text in the <see cref="T:Tools.WindowsT.FormsT.ProgressBarWithText"/>.</summary>
	<returns>The <see cref="T:System.Drawing.Font"/> of the text. The default is the font set by the container</returns>
</member><member name="P:Tools.WindowsT.FormsT.ProgressBarWithText.BackColor">
	<summary>Gets or sets the background color for the control.</summary>
	<returns>A <see cref="T:System.Drawing.Color"/> that represents the background color of the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultBackColor"/> property.</returns>
</member><member name="T:Tools.WindowsT.FormsT.ProgressBarWithText">
	<summary>Implements <see cref="T:System.Windows.Forms.ProgressBar"/> with overlay text</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.ControlState.Enabled">
	<summary>Enabled and visible</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.ControlState.Disabled">
	<summary>Disabled and visible</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.ControlState.Hidden">
	<summary>Disabled and hidden</summary>
</member><member name="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState">
	<summary>Staes of controls</summary>
</member><member name="P:Tools.WindowsT.FormsT.UtilitiesT.Misc.ControlState(System.Windows.Forms.Control)">
	<summary>Applyes <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState"/> on given <see cref="T:System.Windows.Forms.Control"/> or gets its state</summary>
	<param name="Control">Control to get or set value for</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState"/></exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="Control"/> is null</exception>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.Misc.Remove(System.Windows.Forms.Control)">
	<summary>Removes control from parent its control</summary>
	<param name="Control">Control to be removed</param>
	<remarks>If <paramref name="Control"/>.<see cref="P:System.Windows.Forms.Control.Parent">Parent</see> is null, nozhing happens</remarks>
	<exception cref="T:System.ArgumentNullException"><paramref name="Control"/> is null</exception>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.Misc.ReplaceControl(System.Windows.Forms.TableLayoutPanel,System.Windows.Forms.Control,System.Windows.Forms.Control)">
	<summary>Replaces one <see cref="T:System.Windows.Forms.Control"/> in <see cref="T:System.Windows.Forms.TableLayoutPanel"/> with another</summary>
	<param name="tlp">A <see cref="T:System.Windows.Forms.TableLayoutPanel"/> to perform replacement in</param>
	<param name="OldControl">A <see cref="T:System.Windows.Forms.Control"/> to be replaced</param>
	<param name="NewControl">A <see cref="T:System.Windows.Forms.Control"/> to replace <paramref name="OldControl"/> with. If null <paramref name="OldControl"/> is just removed from <paramref name="tlp"/></param>
	<remarks>
		<paramref name="OldControl"/> is replaced with <paramref name="NewControl"/>.
 <paramref name="NewControl"/> inherits <see cref="M:System.Windows.Forms.TableLayoutPanel.GetRow(System.Windows.Forms.Control)">Row</see>, <see cref="M:System.Windows.Forms.TableLayoutPanel.GetColumn(System.Windows.Forms.Control)">Column</see>, <see cref="M:System.Windows.Forms.TableLayoutPanel.GetColumnSpan(System.Windows.Forms.Control)">ColumnSpan</see>, <see cref="M:System.Windows.Forms.TableLayoutPanel.GetRowSpan(System.Windows.Forms.Control)">RowSpan</see> and <see cref="P:System.Windows.Forms.Control.TabIndex"/> from <paramref name="OldControl"/>.
 <paramref name="OldControl"/> is removed from <paramref name="tlp"/>.<see cref="P:System.Windows.Forms.TableLayoutPanel.Controls">Controls.</see>.
 <paramref name="NewControl"/> is removed from its old <see cref="P:System.Windows.Forms.Control.Parent">Parent</see>.
 </remarks>
	<exception cref="T:System.ArgumentNullException"><paramref name="tlp"/> is null -or- <paramref name="OldControl"/> is null</exception>
	<exception cref="T:System.InvalidOperationException"><paramref name="OldControl"/> is not contained within <paramref name="tlp"/>.<see cref="P:System.Windows.Forms.TableLayoutPanel.Controls">Controls</see>.</exception>
</member><member name="T:Tools.WindowsT.FormsT.UtilitiesT.Misc">
	<summary>Miscaleneous small Windows Forms realetd tools</summary>
</member><member name="M:Tools.CollectionsT.GenericT.IBiDirEnumerator`1.MovePrevious">
	<summary>Moves internal pointer of enumerator to previos member of collection</summary>
	<returns>True when pointer was succesfully mowed to item inside the collection. False if it was moved before start of collection or if it already was before start of collection. If pointer was after end of collection, it is moved to last item of collection and return value is true.</returns>
</member><member name="T:Tools.CollectionsT.GenericT.IBiDirEnumerator`1">
	<summary>Provides interface of bidirectional type-safe enumerator</summary>
	<typeparam name="T">Type of items to enumerate</typeparam>
</member><member name="M:Tools.CollectionsT.GenericT.IBiDirEnumerable`1.GetEnumerator">
	<summary>Gets <see cref="T:Tools.CollectionsT.GenericT.IBiDirEnumerator`1"/> for the collection</summary>
</member><member name="T:Tools.CollectionsT.GenericT.IBiDirEnumerable`1">
	<summary>Provides interface for collections that has bidirectional enumerator</summary>
	<typeparam name="T">Type of element in collection</typeparam>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
	<summary>CTor with parent custom type descriptor</summary>
	<param name="parent">The parent custom type descriptor.</param>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetAttributes">
	<summary>Returns a collection of custom attributes for the type represented by this type descriptor.</summary>
	<returns>An <see cref="T:System.ComponentModel.AttributeCollection"/> containing the attributes for the type.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetClassName">
	<summary>Returns the fully qualified name of the class represented by this type descriptor.</summary>
	<returns>A <see cref="T:System.String"/> containing the fully qualified class name of the type this type descriptor is describing. The default is null.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetComponentName">
	<summary>Returns the name of the class represented by this type descriptor.</summary>
	<returns>A <see cref="T:System.String"/> containing the name of the component instance this type descriptor is describing. The default is null.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetConverter">
	<summary>Returns a type converter for the type represented by this type descriptor.</summary>
	<returns>A <see cref="T:System.ComponentModel.TypeConverter"/> for the type represented by this type descriptor. The default is a newly created <see cref="T:System.ComponentModel.TypeConverter"/>.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetDefaultEvent">
	<summary>Returns the event descriptor for the default event of the object represented by this type descriptor.</summary>
	<returns>The <see cref="T:System.ComponentModel.EventDescriptor"/> for the default event on the object represented by this type descriptor. The default is null.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetDefaultProperty">
	<summary>Returns the property descriptor for the default property of the object represented by this type descriptor.</summary>
	<returns>A <see cref="T:System.ComponentModel.PropertyDescriptor"/> for the default property on the object represented by this type descriptor. The default is null.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetEditor(System.Type)">
	<summary>Returns an editor of the specified type that is to be associated with the class represented by this type descriptor.</summary>
	<returns>An editor of the given type that is to be associated with the class represented by this type descriptor. The default is null.</returns>
	<param name="editorBaseType">The base type of the editor to retrieve.</param>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetEvents">
	<summary>Returns a collection of event descriptors for the object represented by this type descriptor.</summary>
	<returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> containing the event descriptors for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty"/>.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetEvents(System.Attribute[])">
	<summary>Returns a collection of event descriptors for the object represented by this type descriptor.</summary>
	<returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> containing the event descriptors for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty"/>.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetProperties">
	<summary>Returns a collection of property descriptors for the object represented by this type descriptor.</summary>
	<returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> containing the property descriptions for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty"/>.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetProperties(System.Attribute[])">
	<summary>Returns a collection of property descriptors for the object represented by this type descriptor.</summary>
	<returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> containing the property descriptions for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty"/>.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
	<summary>Returns an object that contains the property described by the specified property descriptor.</summary>
	<returns>An <see cref="T:System.Object"/> that owns the given property specified by the type descriptor. The default is null.</returns>
	<param name="pd">The property descriptor for which to retrieve the owning object.</param>
</member><member name="T:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase">
	<summary>Provides abstract base class for custom type descriptors</summary>
</member><member name="F:Tools.ComponentModelT.CustomTypeDescriptorBase`1._instance">
	<summary>Contains value of the <see cref="P:Tools.ComponentModelT.CustomTypeDescriptorBase`1.Instance"/> property</summary>
</member><member name="P:Tools.ComponentModelT.CustomTypeDescriptorBase`1.Instance">
	<summary>Instance of type <see cref="T"/> described by this instance of <see cref="T:Tools.ComponentModelT.CustomTypeDescriptorBase`1"/></summary>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.#ctor(`0)">
	<summary>CTor</summary>
	<param name="instance">Instance to be described</param>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetAttributes">
	<summary>Returns a collection of custom attributes for the type represented by this type descriptor.</summary>
	<returns>An <see cref="T:System.ComponentModel.AttributeCollection"/> containing the attributes for the type.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetClassName">
	<summary>Returns the fully qualified name of the class represented by this type descriptor.</summary>
	<returns>A <see cref="T:System.String"/> containing the fully qualified class name of the type this type descriptor is describing. The default is null.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetComponentName">
	<summary>Returns the name of the class represented by this type descriptor.</summary>
	<returns>A <see cref="T:System.String"/> containing the name of the component instance this type descriptor is describing. The default is null.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetConverter">
	<summary>Returns a type converter for the type represented by this type descriptor.</summary>
	<returns>A <see cref="T:System.ComponentModel.TypeConverter"/> for the type represented by this type descriptor. The default is a newly created <see cref="T:System.ComponentModel.TypeConverter"/>.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetDefaultEvent">
	<summary>Returns the event descriptor for the default event of the object represented by this type descriptor.</summary>
	<returns>The <see cref="T:System.ComponentModel.EventDescriptor"/> for the default event on the object represented by this type descriptor. The default is null.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetDefaultProperty">
	<summary>Returns the property descriptor for the default property of the object represented by this type descriptor.</summary>
	<returns>A <see cref="T:System.ComponentModel.PropertyDescriptor"/> for the default property on the object represented by this type descriptor. The default is null.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetEditor(System.Type)">
	<summary>Returns an editor of the specified type that is to be associated with the class represented by this type descriptor.</summary>
	<returns>An editor of the given type that is to be associated with the class represented by this type descriptor. The default is null.</returns>
	<param name="editorBaseType">The base type of the editor to retrieve.</param>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetEvents">
	<summary>Returns a collection of event descriptors for the object represented by this type descriptor.</summary>
	<returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> containing the event descriptors for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty"/>.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetEvents(System.Attribute[])">
	<summary>Returns a collection of event descriptors for the object represented by this type descriptor.</summary>
	<returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> containing the event descriptors for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty"/>.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetProperties">
	<summary>Returns a collection of property descriptors for the object represented by this type descriptor.</summary>
	<returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> containing the property descriptions for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty"/>.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetProperties(System.Attribute[])">
	<summary>Returns a collection of property descriptors for the object represented by this type descriptor.</summary>
	<returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> containing the property descriptions for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty"/>.</returns>
</member><member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
	<summary>Returns an object that contains the property described by the specified property descriptor.</summary>
	<returns>An <see cref="T:System.Object"/> that owns the given property specified by the type descriptor. The default is null.</returns>
	<param name="pd">The property descriptor for which to retrieve the owning object.</param>
</member><member name="T:Tools.ComponentModelT.CustomTypeDescriptorBase`1">
	<summary>Provides base class for "top-level" custom type descriptors</summary>
	<remarks>All method in this class, if not overriden in derived class, uses <see cref="T:System.ComponentModel.TypeDescriptor"/> to obtain information about instance.</remarks>
	<typeparam name="T">Type the descriptor is implemented for. Use <see cref="T:System.Object"/> to create univarsal one.</typeparam>
</member><member name="F:Tools.ComponentModelT.LDescriptionAttribute._Resource">
	<summary>Contains value of the <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.Resource"/> property</summary>
</member><member name="F:Tools.ComponentModelT.LDescriptionAttribute._PropertyName">
	<summary>Contains value of the <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.PropertyName"/> property</summary>
</member><member name="M:Tools.ComponentModelT.LDescriptionAttribute.#ctor(System.Type,System.String,System.String)">
	<summary>CTor</summary>
	<param name="Resource"><see cref="T:System.Type"/> of type that contains property with name specified in the <paramref name="PropertyName"/> parameter. Though it is assumed that type is resource, it is not necessary.</param>
	<param name="PropertyName">Name of Static (Shared in Visual Basic) property of type specified in <paramref name="Resource"/>. It is not necessary for the property to be public. Return type must be <see cref="T:System.String"/>.</param>
	<param name="AlternativeValue">Alternative value used when property cannot be invoked</param>
</member><member name="P:Tools.ComponentModelT.LDescriptionAttribute.Description">
	<summary>Gets the description stored in this attribute.</summary>
	<returns>The description stored in property with name stored in <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.PropertyName"/> of type stored in <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.Resource"/>. If this failt returns alternative value if specified.</returns>
</member><member name="P:Tools.ComponentModelT.LDescriptionAttribute.Resource">
	<summary>Data type that contains property with name specified in the <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.PropertyName"/> property.</summary>
	<remarks>Theere is no need for the data type to be public.</remarks>
</member><member name="P:Tools.ComponentModelT.LDescriptionAttribute.PropertyName">
	<summary>Name of Static (Shared in Visual Basic) property of type specified in <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.Resource"/></summary>
	<remarks>
 The property doesn't need to pe public.
 Return type of the property must be <see cref="T:System.String"/>
	</remarks>
</member><member name="T:Tools.ComponentModelT.LDescriptionAttribute">
	<summary>Localizable version of <see cref="T:System.ComponentModel.DescriptionAttribute"/>. Defines description shown in <see cref="T:System.Windows.Forms.PropertyGrid"/>.</summary>
	<remarks>Localizable means that value can be loaded from resources (any Public Static (Shared in Visual Basic) Property).</remarks>
</member><member name="F:Tools.ComponentModelT.LDisplayNameAttribute._Resource">
	<summary>Contains value of the <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.Resource"/> property</summary>
</member><member name="F:Tools.ComponentModelT.LDisplayNameAttribute._PropertyName">
	<summary>Contains value of the <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.PropertyName"/> property</summary>
</member><member name="M:Tools.ComponentModelT.LDisplayNameAttribute.#ctor(System.Type,System.String,System.String)">
	<summary>CTor</summary>
	<param name="Resource"><see cref="T:System.Type"/> of type that contains property with name specified in the <paramref name="PropertyName"/> parameter. Though it is assumed that type is resource, it is not necessary.</param>
	<param name="PropertyName">Name of Static (Shared in Visual Basic) property of type specified in <paramref name="Resource"/>. It is not necessary for the property to be public. Return type must be <see cref="T:System.String"/>.</param>
	<param name="AlternativeValue">Alternative value used when property cannot be invoked</param>
</member><member name="P:Tools.ComponentModelT.LDisplayNameAttribute.DisplayName">
	<summary>Gets the display name for a property, event, or public void method that takes no arguments stored in this attribute.</summary>
	<returns>The display name  stored in property with name stored in <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.PropertyName"/> of type stored in <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.Resource"/>. If this failt returns alternative value if specified.</returns>
</member><member name="P:Tools.ComponentModelT.LDisplayNameAttribute.Resource">
	<summary>Data type that contains property with name specified in the <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.PropertyName"/> property.</summary>
	<remarks>Theere is no need for the data type to be public.</remarks>
</member><member name="P:Tools.ComponentModelT.LDisplayNameAttribute.PropertyName">
	<summary>Name of Static (Shared in Visual Basic) property of type specified in <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.Resource"/></summary>
	<remarks>
 The property doesn't need to pe public.
 Return type of the property must be <see cref="T:System.String"/>
	</remarks>
</member><member name="T:Tools.ComponentModelT.LDisplayNameAttribute">
	<summary>Localizable version of <see cref="T:System.ComponentModel.DisplayNameAttribute"/>. Defines name shown in <see cref="T:System.Windows.Forms.PropertyGrid"/>.</summary>
	<remarks>
		<para>Localizable means that value can be loaded from resources.</para>
		<para>This attribute can be also used with fields in place of <see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/></para>
	</remarks>
</member><member name="F:Tools.ComponentModelT.LCategoryAttribute._Resource">
	<summary>Contains value of the <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/> property</summary>
</member><member name="F:Tools.ComponentModelT.LCategoryAttribute._PropertyName">
	<summary>Contains value of the <see cref="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName"/> property</summary>
</member><member name="F:Tools.ComponentModelT.LCategoryAttribute._LookUpOrder">
	<summary>Contains value of the <see cref="P:Tools.ComponentModelT.LCategoryAttribute.LookUpOrder"/> property</summary>
</member><member name="F:Tools.ComponentModelT.LCategoryAttribute._AlternativeValue">
	<summary>Stores alternative value to be returned when getting value from <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/> fails.</summary>
</member><member name="M:Tools.ComponentModelT.LCategoryAttribute.#ctor(System.Type,System.String,System.String,Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder)">
	<summary>CTor</summary>
	<param name="Resource"><see cref="T:System.Type"/> of type that contains property with name specified in the <paramref name="PropertyName"/> parameter. Though it is assumed that type is resource, it is not necessary.</param>
	<param name="PropertyName">Name of Static (Shared in Visual Basic) property of type specified in <paramref name="Resource"/>. It is not necessary for the property to be public. Return type must be <see cref="T:System.String"/>. The property shouldn't return an empty string.</param>
	<param name="AlternativeValue">
 Alternative value used when property cannot be invoked.
 This value is also used when lookup order <see cref="F:Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder.NETFirst"/> (or <see cref="F:Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder.ResourceFirst"/> and no resource is found) as value to be localized by the .NET Framework.
 </param>
	<param name="LookupOrder">Defines order of sources of localized string</param>
</member><member name="F:Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder.ResourceFirst">
	<summary>
 The <see cref="M:Tools.ComponentModelT.LCategoryAttribute.GetLocalizedString(System.String)"/> function looks in resource specified in the <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/> first.
 If Static (Shared in Visual Basic) <see cref="T:System.String"/> property with name <see cref="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName"/> is not found then return result of <see cref="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)"/>.
 </summary>
</member><member name="F:Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder.NETFirst">
	<summary>
 The <see cref="M:Tools.ComponentModelT.LCategoryAttribute.GetLocalizedString(System.String)"/> function first calls <see cref="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)"/>.
 If the result is an empty string then looks for Static (Shared in Visual Basic) <see cref="T:System.String"/> property with name spacifiedn in <see cref="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName"/> of type specified in <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/> and returns its value of found or an empty string if not.
 </summary>
</member><member name="F:Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder.ResourceOnly">
	<summary>The <see cref="M:Tools.ComponentModelT.LCategoryAttribute.GetLocalizedString(System.String)"/> function looks only for Static (Shared in Visual Basic) <see cref="T:System.String"/> property with name specified in <see cref="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName"/> of type specified in <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/>. If the property is found then returns its value otherwise returns an empty string.</summary>
</member><member name="T:Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder">
	<summary>Possible orders of source of localized string</summary>
	<remarks>Determines the behavior of the <see cref="M:Tools.ComponentModelT.LCategoryAttribute.GetLocalizedString(System.String)"/> function.</remarks>
</member><member name="M:Tools.ComponentModelT.LCategoryAttribute.GetLocalizedString(System.String)">
	<summary>Looks up the localized name of the specified category.</summary>
	<param name="value">The identifer for the category to look up.</param>
	<returns>The localized name of the category, or null if a localized name does not exist.</returns>
	<remarks>
 The behavior of this function is affected by value of the <see cref="P:Tools.ComponentModelT.LCategoryAttribute.LookUpOrder"/> property.
 The <paramref name="value"/> must have the same value as alternative value passed to the CTor otherwise <see cref="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)"/> is returned.
 <list>
			<item>
 If <see cref="P:Tools.ComponentModelT.LCategoryAttribute.LookUpOrder"/> is <see cref="F:Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder.NETFirst"/> then
 Function returns value of <see cref="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)"/> if it is not an empty string. Othervise returns value of property specified by <see cref="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName"/> of type specified by <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/>. If obtaining this value fails returns an empty string.
 </item>
			<item>
 If <see cref="P:Tools.ComponentModelT.LCategoryAttribute.LookUpOrder"/> is <see cref="F:Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder.ResourceOnly"/> then
 Function returns value of property specified by <see cref="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName"/> of type specified by <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/>. If obtaining this value failf an empty string is returned.
 </item>
			<item>
 If <see cref="P:Tools.ComponentModelT.LCategoryAttribute.LookUpOrder"/> is <see cref="F:Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder.ResourceFirst"/> (or other value not mentioned here) then
 Function returns value of property specified by <see cref="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName"/> of type specified by <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/>. If obraining this value fails the resilt of <see cref="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)"/> is returned.
 </item>
		</list>
 If this function is going to return an empty string (eg. because of resource lookup failure) it returns alternative value specified in CTor instead.
 </remarks>
</member><member name="P:Tools.ComponentModelT.LCategoryAttribute.Resource">
	<summary>Data type that contains property with name specified in the <see cref="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName"/> property.</summary>
	<remarks>Theere is no need for the data type to be public.</remarks>
</member><member name="P:Tools.ComponentModelT.LCategoryAttribute.LookUpOrder">
	<summary>Defines the order of sources for looking for value of this property</summary>
</member><member name="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName">
	<summary>Name of Static (Shared in Visual Basic) property of type specified in <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/></summary>
	<remarks>
 The property doesn't need to pe public.
 Return type of the property must be <see cref="T:System.String"/>.
 The property should not return an empty string becose empty string is treated as failure of the property by the <see cref="M:Tools.ComponentModelT.LCategoryAttribute.GetLocalizedString(System.String)"/> function.
 </remarks>
</member><member name="T:Tools.ComponentModelT.LCategoryAttribute">
	<summary>Localizable version of <see cref="T:System.ComponentModel.CategoryAttribute"/>. Defines category shown in <see cref="T:System.Windows.Forms.PropertyGrid"/>.</summary>
	<remarks>
 Localizable means that value can be loaded from resources (any Public Static (Shared in Visual Basic) Property).
 Note that some categories can be localized by .NET Framework itself.
 </remarks>
</member><member name="F:Tools.ComponentModelT.LDefaultValueAttribute._Resource">
	<summary>Contains value of the <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.Resource"/> property</summary>
</member><member name="F:Tools.ComponentModelT.LDefaultValueAttribute._Property">
	<summary>Contains value of the <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.Property"/> property</summary>
</member><member name="F:Tools.ComponentModelT.LDefaultValueAttribute.Type">
	<summary>Type of default value</summary>
</member><member name="M:Tools.ComponentModelT.LDefaultValueAttribute.#ctor(System.Type,System.String,System.String)">
	<summary>CTor - only for default values of <see cref="T:System.String"/> type</summary>
	<param name="Resource">Type that contains property with name spacified in <paramref name="Property"/></param>
	<param name="Property">Name of Static (Shared in Visual Basic) Public property of type specified in <paramref name="Resource"/>. This property cannot be indexed.</param>
	<param name="Alternative">Alternative value used when obrainin from <paramref name="Resource"/> fails</param>
</member><member name="M:Tools.ComponentModelT.LDefaultValueAttribute.#ctor(System.Type,System.String,System.Type,System.String)">
	<summary>CTor - only for default values of any type</summary>
	<param name="Resource">Type that contains property with name spacified in <paramref name="Property"/></param>
	<param name="Property">Name of Static (Shared in Visual Basic) Public property of type specified in <paramref name="Resource"/>. This property cannot be indexed.</param>
	<param name="Type">Type of default value</param>
	<param name="Alternative">Alternative value used when obrainin from <paramref name="Resource"/> fails</param>
</member><member name="P:Tools.ComponentModelT.LDefaultValueAttribute.Resource">
	<summary>Gets or sets type tah contains property named with name specified in the <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.Property"/> property</summary>
</member><member name="P:Tools.ComponentModelT.LDefaultValueAttribute.Property">
	<summary>Specifies name of Static (Shared in Visual Basic) Public property of type specified in the <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.Resource"/> property. This property returns the default value returned.</summary>
	<remarks>Property cannot be indexed (event with optional index)</remarks>
</member><member name="P:Tools.ComponentModelT.LDefaultValueAttribute.Value">
	<summary>Gets the default value of the property this attribute is bound to.</summary>
	<returns>An <see cref="T:System.Object"/> that represents the default value of the property this attribute is bound to.</returns>
</member><member name="T:Tools.ComponentModelT.LDefaultValueAttribute">
	<summary>Localizable version of <see cref="T:System.ComponentModel.DefaultValueAttribute"/>. Defines default value of property. Used by <see cref="T:System.Windows.Forms.PropertyGrid"/> to visually indicate user that value was changed and by Windows Forms Designer to determine if property should be serialized or not.</summary>
	<remarks>
 Localizable means that value can be loaded from resources (any Public Static (Shared in Visual Basic) Property).
 This attribute can be used in simple cases. In more complicated cases use ShouldSerialize... and Reset... methods. <seealso>http://msdn2.microsoft.com/en-us/library/53b8022e.aspx</seealso>
	</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.UnsignedBinaryNumber">
	<summary>Unsigned binary number of unknown length (represented by <see cref="T:System.UInt64"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.Boolean_Binary">
	<summary>Binary stored boolean value (can be stored in multiple bytes. If any of bytes is nonzero, value is true) (represented by <see cref="T:System.Boolean"/></summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.Byte_Binary">
	<summary>Binary stored 1 byte long unsigned integer (represented by <see cref="T:System.Byte"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.UShort_Binary">
	<summary>Binary stored 2 byte long unsigned integer (represented by <see cref="T:System.UInt16"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.NumericChar">
	<summary>Number of variable length stored as string.</summary>
	<remarks>
		<list type="table"><listheader><term>Length up to characters</term><description>Represented by</description></listheader>
			<item><term>2</term><description><see cref="T:System.Byte"/></description></item>
			<item><term>4</term><description><see cref="T:System.Int16"/></description></item>
			<item><term>9</term><description><see cref="T:System.Int32"/></description></item>
			<item><term>19</term><description><see cref="T:System.Int64"/></description></item>
			<item><term>29</term><description><see cref="T:System.Decimal"/></description></item>
			<item><term>unknown</term><description><see cref="T:System.Decimal"/></description></item>
		</list>
	</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.GraphicCharacters">
	<summary>Grahic characters (no whitespaces, no control characters) (represented by <see cref="T:System.String"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.TextWithSpaces">
	<summary>Graphic characters and spaces (no tabs, no CR, no LF, no control characters) (represented by <see cref="T:System.String"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.Text">
	<summary>Printable text (no tabs, no control characters) (represented by <see cref="T:System.String"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.BW460">
	<summary>Black and white bitmap with width 460px (represented <see cref="T:System.Drawing.Bitmap"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.Enum_Binary">
	<summary>Enumeration stored as binary number (represented by various enums)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.Enum_NumChar">
	<summary>Enumeration stored as numeric string (represented by various enums)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.CCYYMMDD">
	<summary>Date stored as numeric characters in the YYYYMMDD format (represented by <see cref="T:System.DateTime"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.CCYYMMDDOmmitable">
	<summary>Date stored as numeric characters in the YYYYMMDD format (represented by <see cref="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate"/>) Each component YYYY, MM and DD can be set to 0 is unknown</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.HHMMSS_HHMM">
	<summary>Time stored as numeric characters (and the ± sign) in format HHMMSS±HHMM (with time-zone offset from UTC) (represented by <see cref="T:Tools.DrawingT.MetadataT.IPTC.Time"/></summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.ByteArray">
	<summary>Generic array of bytes (represented by array of <see cref="T:System.Byte"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.UNO">
	<summary>Unique Object Identifier (represented by <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.UNO"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.Num2_Str">
	<summary>Combination of 2-digits number and optional <see cref="T:System.String"/> (represented by <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr2"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.Num3_Str">
	<summary>Combination of 3-digits number and optional <see cref="T:System.String"/> (represented by <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr3"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.SubjectReference">
	<summary>Subject reference (combination of IPR, subject number and description) (represented by <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.SubjectReference"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.Alpha">
	<summary>Alphabetic characters from latin alphabet (A-Z and a-z) (represented by <see cref="T:System.String"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.StringEnum">
	<summary>Enum which's values are strings (represented by various enums). Actual string value can be obtained via <see cref="T:System.Xml.Serialization.XmlEnumAttribute"/></summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.ImageType">
	<summary>Type of image stored as numeric character and alphabetic character (represented by <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.ImageType"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.AudioType">
	<summary>Type of audio stored as numeric character and alphabetic character (represented by <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.AudioType"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.HHMMSS">
	<summary>Duration in hours, minutes and seconds. Represented by <see cref="T:System.TimeSpan"/></summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.IPTCTypes">
	<summary>Types od data used by IPTC tags</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.IsTextWithSpaces(System.String)">
	<summary>Indicates if given string contains only graphic characters and spaces</summary>
	<param name="Str">String to be verified</param>
	<returns>True if string contains only graphic characters and spaces, false otherwise</returns>
	<remarks>All characters with ASCII code higher than space are considered graphic</remarks>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.IsText(System.String)">
	<summary>Indicates if given string contains only graphic characters, spaces, Crs and Lfs</summary>
	<param name="Str">String to be verified</param>
	<returns>True if string contains only graphic characters, spaces, Crs and Lfs, false otherwise</returns>
	<remarks>All characters with ASCII code higher than space are considered graphic</remarks>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.IsGraphicCharacters(System.String)">
	<summary>Indicates if given string contains only graphic characters</summary>
	<param name="Str">String to be verified</param>
	<returns>True if string contains only graphic characters, false otherwise</returns>
	<remarks>All characters with ASCII code higher than space are considered graphic</remarks>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.IsAlpha(System.String)">
	<summary>Indicates if given string contains only alpha characters</summary>
	<param name="Str">String to be verified</param>
	<returns>True if string contains only alpha characters, false otherwise</returns>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjRefNMask">
	<summary>This masks <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectReferenceNumber"/></summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjMatterMask">
	<summary>Thsi masks <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectMatterNumber"/></summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.IPRLengthLimit">
	<summary>Gets lenght limit for <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/></summary>
	<returns>32</returns>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference._SubjectReferenceNumber">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectReferenceNumber"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectReferenceNumber">
	<summary>Provides a numeric code to indicate the Subject Name plus optional Subject Matter and Subject Detail Names in the language of the service.</summary>
	<remarks>Subject Reference Numbers consist of 8 octets in the range 01000000 to 17999999 and represent a language independent international reference to a Subject. A Subject is identified by its Reference Number and corresponding Names taken from a standard lists given in Appendix H,I &amp; J.These lists are the English language reference versions.</remarks>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is member neither of <see cref="T:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers"/> nor of <see cref="T:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers"/> nor of <see cref="T:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail"/> nor it is 0</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectNumber">
	<summary>Subject component of <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectReferenceNumber"/></summary>
	<remarks>The Subject identifies the general content of the objectdata as determined by the provider.</remarks>
	<value>New value for subject number. Setting this property resets <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectMatterNumber"/> and <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectDetailNumber"/> to zero</value>
	<returns>Subject number value or zero if none specified</returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.SubjectReferenceNumbers"/> and it is not zero</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectMatterNumber">
	<summary>Matter component of <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectReferenceNumber"/></summary>
	<remarks>A Subject Matter further refines the Subject of a News Object.</remarks>
	<value>New value for subject matter number. Setting this properry resets <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectDetailNumber"/> to zero</value>
	<returns>Subject matter number value or zero if none specified</returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Valůue being set is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.SubjectMatterNumbers"/> and it is not zero</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectDetailNumber">
	<summary>Detail component of <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectReferenceNumber"/></summary>
	<remarks>A Subject Detail further refines the Subject Matter of a News Object.</remarks>
	<value>New value for subject detail number</value>
	<returns>Subject detail number value or zero if none specified</returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.EconomySubjectDetail"/> and it is not zero</exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference._SubjectName">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectName"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectName">
	<summary>A text representation of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectNumber"/> (maximum 64 octets) consisting of graphic characters plus spaces either in English, as defined in Appendix H, or in the language of the service as indicated in DataSet <see cref="P:Tools.DrawingT.MetadataT.IPTC.LanguageIdentifier"/> (2:135)</summary>
	<remarks>The Subject identifies the general content of the objectdata as determined by the provider.</remarks>
	<exception cref="T:System.ArgumentException">Value being set is longer than 64 characters -or- value being set contains non-graphic character or * or ? or :</exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference._SubjectMatterName">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectMatterName"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectMatterName">
	<summary>A text representation of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectMatterNumber"/></summary>
	<remarks>Maximum 64 octets consisting of graphic characters plus spaces either in English, as defined in Appendix I, or in the language of the service as indicated in DataSet <see cref="P:Tools.DrawingT.MetadataT.IPTC.LanguageIdentifier"/> (2:135). A Subject Matter further refines the Subject of a News Object.</remarks>
	<exception cref="T:System.ArgumentException">Value being set is longer than 64 characters -or- value being set contains non-graphic character or * or ? or :</exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference._SubjectDetailName">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectDetailName"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectDetailName">
	<summary>A text representation of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectDetailNumber"/></summary>
	<remarks>
 Maximum 64 octets consisting of graphic characters plus spaces either in English, as defined in Appendix J, or in the language of the service as indicated in DataSet <see cref="P:Tools.DrawingT.MetadataT.IPTC.LanguageIdentifier"/> (2:135)
 <para>A Subject Detail further refines the Subject Matter of a News Object. A registry of Subject Reference Numbers, Subject Matter Names and Subject Detail Names, descriptions (if available) and their corresponding parent Subjects will be held by the IPTC in different languages, with translations as supplied by members. See Appendices I and J.</para></remarks>
	<exception cref="T:System.ArgumentException">Value being set is longer than 64 characters -or- value being set contains non-graphic character or * or ? or :</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.ToString">
	<summary>String representation if form <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/>:<see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectReferenceNumber"/>:<see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectName"/>:<see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectMatterName"/>:<see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectDetailName"/></summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.#ctor(System.Byte[],System.Text.Encoding)">
	<summary>CTor from array of bytes</summary>
	<param name="Bytes">Bytes to construct new instance from</param>
	<param name="Encoding">Encoding used to decode names</param>
	<exception cref="T:System.IndexOutOfRangeException">There are more than 5 :-separated parts in <paramref name="Bytes"/></exception>
	<exception cref="T:System.ArgumentException">There are less or more :-separated parts in <paramref name="Bytes"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.ToBytes(System.Text.Encoding)">
	<summary>Serializes current instance into array of bytes</summary>
	<param name="Encoding">Encoding used to encode names</param>
	<returns>Array of bytes containing serialization of this instance according to the IPTC standard</returns>
	<exception cref="T:System.InvalidOperationException">Length of any serialized part violates IPTC specification (that is <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/> must serialize to array of 1÷32 items, <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference.SubjectReferenceNumber"/> must serialize into array of 8 items and names must serialize into array of 0 to 64 items)</exception>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.iptcSubjectReference">
	<summary>IPTC Subject Reference (IPTC type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.SubjectReference"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.WithIPR._IPR">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR">
	<summary>Information Provider Reference A name, registered with the IPTC/NAA, identifying the provider that guarantees the uniqueness of the UNO</summary>
	<remarks>A name, registered with the IPTC/NAA, identifying the provider that guarantees the uniqueness of the UNO</remarks>
	<value>A minimum of one and a maximum of 32 octets. A string of graphic characters, except colon ‘:’ solidus ‘/’, asterisk ‘*’ and question mark ‘?’, registered with, and approved by, the IPTC.</value>
	<exception cref="T:System.ArgumentException">Value being set contains unallowed characters (white space, *, :, /, ? or control characters) -or- value being set is an empty <see cref="T:System.String"/> or its <see cref="T:System.String"/> if more than 32 -or- length of value being set exceeds <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPRLengthLimit"/> -or- value being set contains character with code higher than 127</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.ListedIPR">
	<summary>Gets or sets value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/> property as member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.InformationProviders"/></summary>
	<value>Value that is member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.InformationProviders"/></value>
	<returns>Value that is member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.InformationProviders"/> if <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/> can be represented as member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.InformationProviders"/>, -1 otherwise</returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Setting value that is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.InformationProviders"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPRValue">
	<summary>Value of either <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/> or <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.ListedIPR"/> depending on if <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/> is one of <see cref="T:Tools.DrawingT.MetadataT.IPTC.InformationProviders"/> members</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPRLengthLimit">
	<summary>When overriden in derived class gets actual lenght limit for <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/></summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.WithIPR">
	<summary>Common base for classes that have the <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.iptcUNO._UCD">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.UCD"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.UCD">
	<summary>UNO Creation Date Specifies a 24 hour period in which the further elements of the UNO have to be unique.</summary>
	<remarks>It also provides a search facility.</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.IPRLengthLimit">
	<summary>Actual length limit of <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/></summary>
	<returns>61 - (1 + length of <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/>)</returns>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.iptcUNO._ODE">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/> property</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.#ctor(System.DateTime,Tools.DrawingT.MetadataT.IPTC.StringEnum{Tools.DrawingT.MetadataT.IPTC.InformationProviders},System.Collections.Generic.IEnumerable{System.String},System.String)">
	<summary>CTor</summary>
	<param name="UCD">UNO Creation Date</param>
	<param name="IPR">Information Provider Reference</param>
	<param name="ODE">Object Descriptor element</param>
	<param name="OVI">Object Variant Indicator</param>
	<exception cref="T:System.ArgumentException">
		<paramref name="IPR"/> contains unallowed characters (white space, *, :, /, ? or control characters or over code 127) -or- <paramref name="IPR"/> set is an empty <see cref="T:System.String"/> or its <see cref="T:System.String"/> if more than 32 -or- length of <paramref name="IPR"/> exceeds <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.IPRLengthLimit"/> -or-
 <paramref name="OVI"/> contains unallowed characters (white space, *, :, /, ? or control characters or over code 127) -or- <paramref name="OVI"/> is an empty <see cref="T:System.String"/> or its lenght is larger than 9
 </exception>
	<exception cref="T:System.OperationCanceledException">
		<paramref name="ODE"/> contains and invalid item (containing invalid characters (?,:,?,* or code over 127), too long or an empty string) or accumulated lenght of <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/> and <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/> (including <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/>-<see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/> separator and separators of items of <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/>) is greater than 61 -or- <paramref name="ODE"/> contains no item</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.#ctor(System.Byte[])">
	<summary>CTor from byte array</summary>
	<param name="Bytes">Bytes to initialize new instance by</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Bytes"/> is null or empty</exception>
	<exception cref="T:System.ArgumentException">IPR or OVI part is invalid: contains unallowed charactes (white space, *, :, /, ? or over code 127), is empty or violates lenght constraint. See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.OVI"/> and <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/> for more information -or- UCD component is to short or contains invalid date</exception>
	<exception cref="T:System.IndexOutOfRangeException">There is not enough (4) parts separated by : in <paramref name="Bytes"/></exception>
	<exception cref="T:System.InvalidCastException">UCD component contains non-numeric character</exception>
	<exception cref="T:System.OperationCanceledException">ODE part is invalid. See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/> for more information.</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.Init(System.String)">
	<summary>Pseudo-CTor from string</summary>
	<param name="Text"><see cref="T:System.String"/> to initialize instance with</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Text"/> is null or empty</exception>
	<exception cref="T:System.ArgumentException">IPR or OVI part is invalid: contains unallowed charactes (white space, *, :, /, ? or over code 127), is empty or violates lenght constraint. See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.OVI"/> and <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/> for more information -or- UCD component is to short or contains invalid date</exception>
	<exception cref="T:System.IndexOutOfRangeException">There is not enough (4) parts separated by : in <paramref name="Bytes"/></exception>
	<exception cref="T:System.InvalidCastException">UCD component contains non-numeric character</exception>
	<exception cref="T:System.OperationCanceledException">ODE part is invalid. See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/> for more information.</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.op_Implicit(Tools.DrawingT.MetadataT.IPTC.iptcUNO)~System.String">
	<summary>Converts <see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcUNO"/> to <see cref="T:System.String"/></summary>
	<param name="From"><see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcUNO"/> to be converted</param>
	<returns><see cref="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ToString"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.op_Explicit(System.String)~Tools.DrawingT.MetadataT.IPTC.iptcUNO">
	<summary>Converts <see cref="T:System.String"/> to <see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcUNO"/></summary>
	<param name="Text"><see cref="T:System.String"/> to create <see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcUNO"/> from</param>
	<returns>New instance of <see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcUNO"/> initialized by <paramref name="Text"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Text"/> is null or empty</exception>
	<exception cref="T:System.ArgumentException">IPR or OVI part is invalid: contains unallowed charactes (white space, *, :, /, ? or over code 127), is empty or violates lenght constraint. See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.OVI"/> and <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/> for more information -or- UCD component is to short or contains invalid date</exception>
	<exception cref="T:System.IndexOutOfRangeException">There is not enough (4) parts separated by : in <paramref name="Bytes"/></exception>
	<exception cref="T:System.InvalidCastException">UCD component contains non-numeric character</exception>
	<exception cref="T:System.OperationCanceledException">ODE part is invalid. See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/> for more information.</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.#ctor(System.String)">
	<summary>CTor from string</summary>
	<param name="Text"><see cref="T:System.String"/> to create instance from</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Text"/> is null or empty</exception>
	<exception cref="T:System.ArgumentException">IPR or OVI part is invalid: contains unallowed charactes (white space, *, :, /, ? or over code 127), is empty or violates lenght constraint. See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.OVI"/> and <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/> for more information -or- UCD component is to short or contains invalid date</exception>
	<exception cref="T:System.IndexOutOfRangeException">There is not enough (4) parts separated by : in <paramref name="Bytes"/></exception>
	<exception cref="T:System.InvalidCastException">UCD component contains non-numeric character</exception>
	<exception cref="T:System.OperationCanceledException">ODE part is invalid. See <seealso cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/> for more information.</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE_Removing(Tools.CollectionsT.GenericT.ListWithEvents{System.String},Tools.CollectionsT.GenericT.ListWithEvents{System.String}.CancelableItemIndexEventArgs)">
	<summary>Block <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/>'s last item from being removed</summary>
	<param name="sender"><see cref="F:Tools.DrawingT.MetadataT.IPTC.iptcUNO._ODE"/></param>
	<param name="e">Event parameters</param>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE_Clearing(Tools.CollectionsT.GenericT.ListWithEvents{System.String},Tools.ComponentModelT.CancelMessageEventArgs)">
	<summary>Block <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/> from being cleared</summary>
	<param name="sender"><see cref="F:Tools.DrawingT.MetadataT.IPTC.iptcUNO._ODE"/></param>
	<param name="e">Event parameters</param>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE_Adding(Tools.CollectionsT.GenericT.ListWithEvents{System.String},Tools.CollectionsT.GenericT.ListWithEvents{System.String}.CancelableItemIndexEventArgs)">
	<summary>Controls if item added to <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/> are valid</summary>
	<param name="sender"><see cref="F:Tools.DrawingT.MetadataT.IPTC.iptcUNO._ODE"/></param>
	<param name="e">parameters of event</param>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE">
	<summary>Object Descriptor Element In conjunction with the UCD and the IPR, a string of characters ensuring the uniqueness of the UNO.</summary>
	<value>A minimum of one and a maximum of 60 minus the number of IPR octets, consisting of graphic characters, except colon ‘:’ asterisk ‘*’ and question mark ‘?’. The provider bears the responsibility for the uniqueness of the ODE within a 24 hour cycle.</value>
	<exception cref="T:System.OperationCanceledException">
 The <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Add(`0)"/> and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/>'s setter can throw an <see cref="T:System.OperationCanceledException"/> when trying to add invalid item (containing invalid characters (?,:,?,* or with code over 127), too long or an empty string) or accumulated lenght of <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/> and <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/> (including <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/>-<see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/> separator and separators of items of <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/>) is greater than 61
 -and- <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Remove(`0)"/> and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveAt(System.Int32)"/> throws <see cref="T:System.OperationCanceledException"/> when trying to remove last item from <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/>
 -and- <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Clear"/> throws <see cref="T:System.OperationCanceledException"/> everywhen
 </exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODEDesign">
	<summary>Provides design-time support for editing the <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/> property</summary>
	<exception cref="T:System.OperationCanceledException">
 Trying to array that contains an invalid item(s) (containing invalid characters (?,:,?,* or with code over 127), too long or an empty string) or accumulated lenght of <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/> and <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/> (including <see cref="P:Tools.DrawingT.MetadataT.IPTC.WithIPR.IPR"/>-<see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/> separator and separators of items of <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ODE"/>) is greater than 61 -or-
 Trying to set an empty array
 </exception>
	<exception cref="T:System.ArgumentNullException">Value being set is null</exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.iptcUNO._OVI">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.OVI"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcUNO.OVI">
	<summary>Object Variant Indicator A string of characters indicating technical variants of the object such as partial objects, or changes of file formats, and coded character sets.</summary>
	<value>A minimum of one and a maximum of 9 octets, consisting of graphic characters, except colon ‘:’, asterisk ‘*’ and question mark ‘?’. To indicate a technical variation of the object as so far identified by the first three elements. Such variation may be required, for instance, for the indication of part of the object, or variations of the file format, or coded character set. The default value is a single ‘0’ (zero) character indicating no further use of the OVI.</value>
	<exception cref="T:System.ArgumentException">Value being set contains unallowed characters (white space, *, :, /, ? or control characters) -or- value being set is an empty <see cref="T:System.String"/> or its lenght is larger than 9 -or- value being set contains character with code higher than 127</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.ToString">
	<summary>String representation in form UCD:IPR:ODE1/ODE2/ODE3:OVI</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
	<summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
	<returns>True is <paramref name="destinationType"/> is <see cref="T:System.String"/> otherwise calls <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
	<summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="destinationType">The <see cref="T:System.Type"/> to convert the value parameter to.</param>
	<param name="value">The <see cref="T:System.Object"/> to convert.</param>
	<returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
	<exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
	<exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null.</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
	<summary>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
	<returns>True if <paramref name="sourceType"/> is <see cref="T:System.String"/> otherwice callse <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
	<summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
	<param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="value">The <see cref="T:System.Object"/> to convert.</param>
	<returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
	<exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Returns whether changing a value on this object requires a call to System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary) to create a new value, using the specified context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<returns>True</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
	<summary>Creates an instance of the type that this System.ComponentModel.TypeConverter is associated with, using the specified context, given a set of property values for the object.</summary>
	<param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<returns>New instance of <see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcUNO"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.Converter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<returns>True if <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> of <see cref="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor"/> of <paramref name="context"/> is null</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.Converter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an exclusive list of possible values, using the specified context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<returns>True</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcUNO.Converter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
	<returns>Instance of <see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcUNO"/> if <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> of <see cref="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor"/> of <paramref name="context"/> is null; null otherwise</returns>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.iptcUNO.Converter">
	<summary><see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="P:Tools.DrawingT.MetadataT.IPTC.UNO"/></summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.iptcUNO">
	<summary>Represents IPTC UNO unique object identifier (IPTC type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.UNO"/>)</summary>
	<remarks>
		<para>The first three elements of the UNO (the UCD, the IPR and the ODE) together are allocated to the editorial content of the object.</para>
		<para>Any technical variants or changes in the presentation of an object, e.g. a picture being presented by a different file format, does not require the allocation of a new ODE but can be indicated by only generating a new OVI.</para>
		<para>Links may be set up to the complete UNO but the structure provides for linking to selected elements, e.g. to all objects of a specified provider.</para>
	</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.NumStr._Number">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.NumStr.Number"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.NumStr._String">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.NumStr.String"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.NumStr.NumberDigits">
	<summary>If overriden in derived class returns number of digits in number. Should not be zero.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.NumStr.Number">
	<summary>Number in this <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/></summary>
	<exception cref="T:System.ArgumentException">Number being set converted to string is longer than <see cref="P:Tools.DrawingT.MetadataT.IPTC.NumStr.NumberDigits"/></exception>
	<exception cref="T:System.ArgumentOutOfRangeException">Number beign set is negative</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.NumStr.String">
	<summary>Text of this <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/></summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.NumStr.ToString">
	<summary>String representation in format number;string</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.NumStr.Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
	<summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
	<returns>True if <paramref name="destinationType"/> is <see cref="P:Tools.DrawingT.MetadataT.IPTC.NumStr.String"/> otherwise calls <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.NumStr.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
	<summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="destinationType">The <see cref="T:System.Type"/> to convert the value parameter to.</param>
	<param name="value">The <see cref="T:System.Object"/> to convert.</param>
	<returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
	<exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
	<exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null.</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.NumStr.Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Returns whether changing a value on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> to create a new value, using the specified context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<returns>True if <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/> of <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> of <paramref name="context"/> is not null and is subclass of <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/> (not <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/> itself)</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.NumStr.Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
	<summary>Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.</summary>
	<param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<returns>Instance of subclass of <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/> is type of property can be obtained from <paramref name="context"/> and it's subclass of <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/>; null otherwise</returns>
	<exception cref="T:System.ArgumentException">Number property converted to string is longer than <see cref="P:Tools.DrawingT.MetadataT.IPTC.NumStr.NumberDigits"/></exception>
	<exception cref="T:System.ArgumentOutOfRangeException">Number property is negative</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Type of property is constrained to enumerations and has <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> with <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True or it has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> and Number property is not member of the enumeration</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.NumStr.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
	<summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
	<param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="value">The <see cref="T:System.Object"/> to convert.</param>
	<returns>Converted insvance of <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/> if <see cref="M:Tools.DrawingT.MetadataT.IPTC.NumStr.Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)"/> returns true and <paramref name="value"/> consists of 2 ;-separated components or <paramref name="value"/> consists of 3 or 4 components; calls <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)"/> otherwise.</returns>
	<exception cref="T:System.IndexOutOfRangeException"><paramref name="value"/> does not repsesent <see cref="P:Tools.DrawingT.MetadataT.IPTC.NumStr.String"/> consisting of 2 ;-separated parts</exception>
	<exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
	<exception cref="T:System.ArgumentException">Numeric (1st) part of <paramref name="value"/> converted to string is longer than <see cref="P:Tools.DrawingT.MetadataT.IPTC.NumStr.NumberDigits"/> -or-  Name of type (in 3 or 4 components-consisting string) is invalid, for example if it contains invalid characters, or if it is a zero-length string. -or- error when creating generic type from 4 components</exception>
	<exception cref="T:System.ArgumentOutOfRangeException">Numeric (1st) part of <paramref name="value"/> is negative</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Type of property is constrained to enumerations and has <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> with <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True or it has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> and first part of <paramref name="value"/> is not member of the enumeration</exception>
	<exception cref="T:System.InvalidCastException">First part of <see cref="T:System.ValueType"/> cannot be converted to <see cref="T:System.Int32"/></exception>
	<exception cref="T:System.InvalidOperationException">There are neither 3 nor 4 components in <paramref name="context"/> and <paramref name="context"/> or any of it's values leading to <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/> or thet value itself is null -or- There are 4 components in <paramref name="value"/> but first component is not generic type definition</exception>
	<remarks>
 If <paramref name="value"/> consists of 2 ;-separated components <paramref name="context"/> is needed to be non-null to obtain type of propery that will be instantiated.
 If <paramref name="value"/> consists of 3 components then first components denotes type. If it consists of 4 components then second componend is passed as typeparameter to first component. Types are expected as full names.
 </remarks>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.NumStr.Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
	<summary>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
	<returns>True if <paramref name="sourceType"/> is <see cref="T:System.String"/>; otherwice calls <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)"/></returns>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.NumStr.Converter">
	<summary><see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/></summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.NumStr.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.NumStr.#ctor(System.Int32,System.String)">
	<summary>CTor from number and string</summary>
	<param name="Num">Number</param>
	<param name="Str"><see cref="T:System.String"/></param>
	<exception cref="T:System.ArgumentException"><paramref name="Num"/> converted to string is longer than <see cref="P:Tools.DrawingT.MetadataT.IPTC.NumStr.NumberDigits"/></exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Num"/> beign set is negative</exception>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.NumStr">
	<summary>Represents combination of number and string</summary>
	<remarks>This class is abstract, derived class mus specify number of digits of <see cref="P:Tools.DrawingT.MetadataT.IPTC.NumStr.Number"/></remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.NumStr2.NumberDigits">
	<summary>Number of digits in number</summary>
	<returns>2</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.NumStr2.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.NumStr2.#ctor(System.Int32,System.String)">
	<summary>CTor from number and string</summary>
	<param name="Num">Number</param>
	<param name="Str"><see cref="T:System.String"/></param>
	<exception cref="T:System.ArgumentException"><paramref name="Num"/> converted to string is longer than <see cref="P:Tools.DrawingT.MetadataT.IPTC.NumStr2.NumberDigits"/> (2)</exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Num"/> beign set is negative</exception>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.NumStr2">
	<summary>Represents combination of 2-digits numer and string (IPTC type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.Num2_Str"/>)</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.NumStr2`1.EnumNumber">
	<summary>Number in this <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr2`1"/></summary>
	<exception cref="T:System.ArgumentException">Number being set converted to string is longer than 2 <see cref="P:Tools.DrawingT.MetadataT.IPTC.NumStr2.NumberDigits"/> -or- <see cref="T"/> is not <see cref="T:System.Enum"/></exception>
	<exception cref="T:System.ArgumentOutOfRangeException">Number beign set is negative</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="T"/> has <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> with <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True or it has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> and value being set is not member of <see cref="T"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.NumStr2`1.Number">
	<summary>Number in this <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/></summary>
	<exception cref="T:System.ArgumentException">Number being set converted to string is longer than 2 <see cref="P:Tools.DrawingT.MetadataT.IPTC.NumStr2.NumberDigits"/> -or- <see cref="T"/> is not <see cref="T:System.Enum"/></exception>
	<exception cref="T:System.ArgumentOutOfRangeException">Number beign set is negative</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="T"/> has <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> with <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True or it has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> and value being set is not member of <see cref="T"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.NumStr2`1.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.NumStr2`1.#ctor(`0,System.String)">
	<summary>CTor from number and string</summary>
	<param name="Num">Number</param>
	<param name="Str"><see cref="T:System.String"/></param>
	<exception cref="T:System.ArgumentException"><paramref name="Num"/> converted to string is longer than <see cref="P:Tools.DrawingT.MetadataT.IPTC.NumStr2.NumberDigits"/> (2)</exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Num"/> beign set is negative</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="T"/> has <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> with <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True or it has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> and <paramref name="Num"/> is not member of <see cref="T"/></exception>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.NumStr2`1">
	<summary><see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr2"/> with numbers from enum</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.NumStr3`1.EnumNumber">
	<summary>Number in this <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr3`1"/></summary>
	<exception cref="T:System.ArgumentException">Number being set converted to string is longer than 3 <see cref="P:Tools.DrawingT.MetadataT.IPTC.NumStr3.NumberDigits"/> -or- <see cref="T"/> is not <see cref="T:System.Enum"/></exception>
	<exception cref="T:System.ArgumentOutOfRangeException">Number beign set is negative</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="T"/> has <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> with <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True or it has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> and value being set is not member of <see cref="T"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.NumStr3`1.Number">
	<summary>Number in this <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/></summary>
	<exception cref="T:System.ArgumentException">Number being set converted to string is longer than 3 <see cref="P:Tools.DrawingT.MetadataT.IPTC.NumStr3.NumberDigits"/> -or- <see cref="T"/> is not <see cref="T:System.Enum"/></exception>
	<exception cref="T:System.ArgumentOutOfRangeException">Number beign set is negative</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="T"/> has <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> with <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True or it has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> and value being set is not member of <see cref="T"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.NumStr3`1.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.NumStr3`1.#ctor(`0,System.String)">
	<summary>CTor from number and string</summary>
	<param name="Num">Number</param>
	<param name="Str"><see cref="T:System.String"/></param>
	<exception cref="T:System.ArgumentException"><paramref name="Num"/> converted to string is longer than <see cref="P:Tools.DrawingT.MetadataT.IPTC.NumStr3.NumberDigits"/> (3)</exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Num"/> beign set is negative</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="T"/> has <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> with <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True or it has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> and <paramref name="Num"/> is not member of <see cref="T"/></exception>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.NumStr3`1">
	<summary><see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr3"/> with numbers from enum</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.NumStr3.NumberDigits">
	<summary>Number of digits in number</summary>
	<returns>3</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.NumStr3.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.NumStr3.#ctor(System.Int32,System.String)">
	<summary>CTor from number and string</summary>
	<param name="Num">Number</param>
	<param name="Str"><see cref="T:System.String"/></param>
	<exception cref="T:System.ArgumentException"><paramref name="Num"/> converted to string is longer than <see cref="P:Tools.DrawingT.MetadataT.IPTC.NumStr3.NumberDigits"/> (3)</exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Num"/> beign set is negative</exception>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.NumStr3">
	<summary>Represents combination of 3-digits numer and string (IPTC type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.Num3_Str"/>)</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.IMediaType`2.Count">
	<summary>Count fo components</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.IMediaType`2.Code">
	<summary>Type code</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.IMediaType`2.CodeString">
	<summary>Type code as character</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.IMediaType`2">
	<summary>Represents common interface for media types</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.OmmitableDate._Year">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.Year"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.OmmitableDate._Day">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.Day"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.OmmitableDate._Month">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.Month"/> property</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.#ctor(System.Int16,System.Byte,System.Byte)">
	<summary>CTor</summary>
	<param name="Year">Year (or 0 if unknown)</param>
	<param name="Month">Month (or 0 if unknown)</param>
	<param name="Day">Day (or 0 if unknown)</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Year"/> is less than zero or greater than 9999 -or- <paramref name="Month"/> is greater than 12 -or- <paramref name="Day"/> is greater than 31</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.#ctor(System.DateTime)">
	<summary>CTor from date</summary>
	<param name="Date"><see cref="T:System.DateTime"/> to initialize this instance with</param>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.op_Implicit(System.DateTime)~Tools.DrawingT.MetadataT.IPTC.OmmitableDate">
	<summary>Converts <see cref="T:System.DateTime"/> into <see cref="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate"/></summary>
	<param name="From"><see cref="T:System.DateTime"/> to be converted</param>
	<returns><see cref="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate"/> initialized with <paramref name="From"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.op_Explicit(Tools.DrawingT.MetadataT.IPTC.OmmitableDate)~System.DateTime">
	<summary>Converts <see cref="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate"/> into <see cref="T:System.DateTime"/></summary>
	<param name="From"><see cref="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate"/> to be converted</param>
	<returns><see cref="T:System.DateTime"/> with same <see cref="P:System.DateTime.Year"/>, <see cref="P:System.DateTime.Month"/> and <see cref="P:System.DateTime.Day"/> properties as this instance</returns>
	<exception cref="T:System.InvalidCastException">This instance cannot be converted to <see cref="T:System.DateTime"/> because it contains invalid date or 0 in some propery</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.Year">
	<summary>Year component of date</summary>
	<exception cref="T:System.ArgumentOutOfRangeException">Value being set is less than zero or greater than 9999</exception>
	<value>Value of year component or zero if unknown</value>
	<returns>Year component or zero if unknown</returns>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.Day">
	<summary>Day component of date</summary>
	<value>Value of day component or zero if unknown</value>
	<returns>Day component or zero if unknown</returns>
	<exception cref="T:System.ArgumentOutOfRangeException">Setting value to value greater than 31</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.Month">
	<summary>Month component of date</summary>
	<exception cref="T:System.ArgumentOutOfRangeException">Setting value to value greater than 12</exception>
	<value>Value of month component or zero if unknown</value>
	<returns>Month component or zero if unknown</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.ToString">
	<summary>String representation in YYYYMMDD format</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.op_Explicit(System.String)~Tools.DrawingT.MetadataT.IPTC.OmmitableDate">
	<summary>Converts <see cref="T:System.String"/> to <see cref="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate"/></summary>
	<param name="From"><see cref="T:System.String"/> to be converted</param>
	<returns><see cref="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate"/> created from <paramref name="From"/> in form YYYYMMDD</returns>
	<exception cref="T:System.InvalidCastException">Conversion cannot be performed</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.op_Implicit(Tools.DrawingT.MetadataT.IPTC.OmmitableDate)~System.String">
	<summary>Converts <see cref="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate"/> to <see cref="T:System.String"/></summary>
	<param name="From"><see cref="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate"/> to be converted</param>
	<returns><see cref="M:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.ToString"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
	<summary>Performs conversion from <see cref="T:System.String"/> to <see cref="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate"/></summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
	<param name="value">Value to be converted to <see cref="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate"/></param>
	<returns><see cref="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate"/> initialized by <paramref name="value"/></returns>
	<exception cref="T:System.InvalidCastException">Conversion cannot be performed</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.DrawingT.MetadataT.IPTC.OmmitableDate)">
	<summary>Performs conversion from <see cref="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate"/> to <see cref="T:System.String"/></summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="value">Value to be converted</param>
	<returns>Representation of <paramref name="value"/> in <see cref="T:System.String"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.DateTime)">
	<summary>Performs conversion from <see cref="T:System.DateTime"/> to <see cref="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate"/></summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
	<param name="value">Value to be converted to <see cref="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate"/></param>
	<returns><see cref="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate"/> initialized by <paramref name="value"/></returns>
	<exception cref="T:System.InvalidCastException">Conversion cannot be performed</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.Converter.ConvertToDate(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.DrawingT.MetadataT.IPTC.OmmitableDate)">
	<summary>Performs conversion from <see cref="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate"/> to <see cref="T:System.DateTime"/></summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="value">Value to be converted</param>
	<returns>Representation of <paramref name="value"/> in <see cref="T:System.DateTime"/></returns>
	<exception cref="T:System.InvalidCastException">This instance cannot be converted to <see cref="T:System.DateTime"/> because it contains invalid date or 0 in some propery</exception>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate.Converter">
	<summary><see cref="T:System.ComponentModel.TypeConverter"/> of <see cref="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate"/> to and from <see cref="T:System.String"/> and <see cref="T:System.DateTime"/></summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.OmmitableDate">
	<summary>Represents date (Year, Month and Day) which's parts can be ommited by setting value to 0 (IPTC type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.CCYYMMDDOmmitable"/>)</summary>
	<remarks>Date represented by this structure can be invalid (e.g. 31.2.2008)</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time._Time">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Time"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time._Offset">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Offset"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.MinOffset">
	<summary>Minimal allowed value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Offset"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.MaxOffset">
	<summary>Maximal allowed value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Offset"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.Maximum">
	<summary>Minimal allowed value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Time"/> property</summary>
	<remarks>It's 23:59:59</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.Minimum">
	<summary>maximal allowed value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Time"/> property</summary>
	<remarks>It's zero</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Time.Time">
	<summary>Local time</summary>
	<value>Sub-second part of value is ignored (truncated)</value>
	<exception cref="T:System.ArgumentOutOfRangeException">Settign value otside of range <see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.Minimum"/>÷<see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.Maximum"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Time.Offset">
	<summary>Time zone offset of <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Time"/></summary>
	<exception cref="T:System.ArgumentException">Setting offset to time with non-zero sub-minute component</exception>
	<exception cref="T:System.ArgumentOutOfRangeException">Setting offset outside of range <see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.MinOffset"/>÷<see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.MaxOffset"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Time.Hours">
	<summary>Hour component of <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Time"/></summary>
	<exception cref="T:System.ArgumentOutOfRangeException">setting such value that <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Time"/> leves range <see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.Minimum"/>÷<see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.Maximum"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Time.Minutes">
	<summary>Hour component of <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Time"/></summary>
	<exception cref="T:System.ArgumentOutOfRangeException">setting such value that <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Time"/> leves range <see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.Minimum"/>÷<see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.Maximum"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Time.Seconds">
	<summary>Second component of <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Time"/></summary>
	<exception cref="T:System.ArgumentOutOfRangeException">setting such value that <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Time"/> leves range <see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.Minimum"/>÷<see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.Maximum"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Time.OffsetHourAbs">
	<summary>Absolute value of hour component of <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Offset"/></summary>
	<exception cref="T:System.ArgumentOutOfRangeException">Setting value such that <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Offset"/> leaves range <see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.MinOffset"/>÷<see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.MaxOffset"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Time.NegativeOffset">
	<summary>Sign of <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Offset"/></summary>
	<exception cref="T:System.ArgumentOutOfRangeException">Setting value such that <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Offset"/> leaves range <see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.MinOffset"/>÷<see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.MaxOffset"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Time.OffsetMinuteAbs">
	<summary>Absolute value of minute part of <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Offset"/></summary>
	<exception cref="T:System.ArgumentOutOfRangeException">Setting value such that <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Offset"/> leaves range <see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.MinOffset"/>÷<see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.MaxOffset"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.Time.ToString">
	<summary>String representation in the HHMMSS±HHMM format</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.Time.#ctor(System.Byte,System.Byte,System.Byte,System.SByte,System.Byte)">
	<summary>CTor</summary>
	<param name="Hours">Hour component</param>
	<param name="Minutes">Minute component</param>
	<param name="Seconds">Second component</param>
	<param name="HourOffset">Hour component of offset</param>
	<param name="MinuteOffset">Minute component of offset</param>
	<exception cref="T:System.ArgumentOutOfRangeException">Time component exceeds range <see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.Minimum"/>÷<see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.Maximum"/> -or- offset component exceds range <see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.MinOffset"/>÷<see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.MaxOffset"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.Time.#ctor(System.TimeSpan)">
	<summary>CTor from <see cref="T:System.TimeSpan"/></summary>
	<param name="Time"><see cref="T:System.TimeSpan"/> to initialize this instance (time local in UTC+0:00)</param>
	<remarks>Offset is initialized to <see cref="F:System.TimeSpan.Zero"/></remarks>
	<exception cref="T:System.ArgumentOutOfRangeException">Time component exceeds range <see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.Minimum"/>÷<see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.Maximum"/> -or- offset component exceds range <see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.MinOffset"/>÷<see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.MaxOffset"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.Time.#ctor(System.TimeSpan,System.TimeSpan)">
	<summary>CTor from <see cref="T:System.TimeSpan"/></summary>
	<param name="Time"><see cref="T:System.TimeSpan"/> to initialize this instance (local time)</param>
	<param name="Offset">Time zone offset</param>
	<exception cref="T:System.ArgumentOutOfRangeException">Time component exceeds range <see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.Minimum"/>÷<see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.Maximum"/> -or- offset component exceds range <see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.MinOffset"/>÷<see cref="F:Tools.DrawingT.MetadataT.IPTC.Time.MaxOffset"/></exception>
	<exception cref="T:System.ArgumentException"><paramref name="Offset"/> contains non-zero sub-minute component</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.Time.#ctor(System.DateTime)">
	<summary>CTor from <see cref="T:System.DateTime"/></summary>
	<param name="Date"><see cref="T:System.DateTime"/> which time path will be used to initialize this instance</param>
	<remarks>Offset is initialized to <see cref="F:System.TimeSpan.Zero"/> (UTC+0:00)</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.Converter.ParseAutomat.H1">
	<summary>*HH:MM:SS±HH:MM</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.Converter.ParseAutomat.H2">
	<summary>H*H:MM:SS±HH:MM</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.Converter.ParseAutomat.H3">
	<summary>HH*:MM:SS±HH:MM</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.Converter.ParseAutomat.M1">
	<summary>HH:*MM:SS±HH:MM</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.Converter.ParseAutomat.M2">
	<summary>HH:M*M:SS±HH:MM</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.Converter.ParseAutomat.M3">
	<summary>HH:MM*:SS±HH:MM</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.Converter.ParseAutomat.S1">
	<summary>HH:MM:*SS±HH:MM</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.Converter.ParseAutomat.S2">
	<summary>HH:MM:S*S±HH:MM</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.Converter.ParseAutomat.S3">
	<summary>HH:MM:SS*±HH:MM</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.Converter.ParseAutomat.OH1">
	<summary>HH:MM:SS±*HH:MM</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.Converter.ParseAutomat.OH2">
	<summary>HH:MM:SS±H*H:MM</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.Converter.ParseAutomat.OH3">
	<summary>HH:MM:SS±HH*:MM</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.Converter.ParseAutomat.OM1">
	<summary>HH:MM:SS±HH:*MM</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.Converter.ParseAutomat.OM2">
	<summary>HH:MM:SS±HH:M*M</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.Time.Converter.ParseAutomat.All">
	<summary>HH:MM:SS±HH:MM*</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.Time.Converter.ParseAutomat">
	<summary>State of automat that parses string</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.Time.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
	<summary>Performs conversion from <see cref="T:System.String"/> to <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Time"/></summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
	<param name="value">Value to be converted to <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Time"/></param>
	<returns>Value of type <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Time"/> initialized by <paramref name="value"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.Time.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.DrawingT.MetadataT.IPTC.Time)">
	<summary>Performs conversion from <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Time"/> to <see cref="T:System.String"/></summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="value">Value to be converted</param>
	<returns>Representation of <paramref name="value"/> in <see cref="T:System.String"/></returns>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.Time.Converter">
	<summary>Converter of <see cref="P:Tools.DrawingT.MetadataT.IPTC.Time.Time"/> values</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.Time">
	<summary>Contains time as hours, minutes and seconds and offset to UTC in hours and minutes (IPTC type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.HHMMSS_HHMM"/>)</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcImageType.#ctor(System.Byte,System.Char)">
	<summary>CTor</summary>
	<param name="TypeCode"><see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcImageType.Type"/> as <see cref="T:System.Char"/></param>
	<param name="Components">Number of components</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Components"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.ImageTypeComponents"/> -or- <paramref name="TypeCode"/> cannot be interpreted as member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents"/></exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.iptcImageType._Type">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcImageType.Type"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.iptcImageType._Components">
	<summary>Contains value of the <see cref="T:System.ComponentModel.Component"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcImageType.Type">
	<summary>Type of components</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcImageType.Components">
	<summary>Number of components</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.ImageTypeComponents"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcImageType.TypeCode">
	<summary>Gets or sets <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcImageType.Type"/> as <see cref="T:System.String"/></summary>
	<exception cref="T:System.ArgumentException">Value being set cannot be interpreted member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcImageType.ToString">
	<summary>String representation in form 0T (components, type)</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcImageType.Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Returns whether changing a value on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> to create a new value, using the specified context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<returns>True if <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/> of <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> of <paramref name="context"/> is not null and is subclass of <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/> (not <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/> itself)</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcImageType.Converter.CreateInstance(System.Collections.IDictionary,System.ComponentModel.ITypeDescriptorContext)">
	<summary>Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.</summary>
	<param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<returns>Instance of <see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcAudioType"/> initialized by given property values</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcImageType.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
	<summary>Performs conversion from <see cref="T:System.String"/> to <see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcImageType"/></summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
	<param name="value">Value to be converted to type <see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcAudioType"/></param>
	<returns>Value of <see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcAudioType"/> initialized by <paramref name="value"/></returns>
	<exception cref="T:System.ArgumentException">Length of <paramref name="value"/> differs from 2</exception>
	<exception cref="T:System.InvalidCastException">Second character cannot be interpreted as number</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">First character cannot be interpreted as <see cref="T:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents"/> or second character cannot be interpreted as <see cref="T:Tools.DrawingT.MetadataT.IPTC.ImageTypeComponents"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcImageType.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.DrawingT.MetadataT.IPTC.iptcImageType)">
	<summary>Performs conversion from type <see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcImageType"/> to type <see cref="T:System.String"/></summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="value">Value to be converted</param>
	<returns>Representation of <paramref name="value"/> in type <see cref="T:System.String"/></returns>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.iptcImageType.Converter">
	<summary><see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcImageType"/></summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.iptcImageType">
	<summary>IPTC image type (IPTC type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.ImageType"/>)</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcAudioType.#ctor(System.Byte,System.Char)">
	<summary>CTor</summary>
	<param name="Components">Number of components</param>
	<param name="TypeCode">
		<see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcAudioType.Type"></see> as <see cref="T:System.Char"></see></param>
	<exception cref="T:System.ArgumentOutOfRangeException">
		<paramref name="Components"></paramref> is not within range 0÷9</exception>
	<exception cref="T:System.ArgumentException">Cannot be interpreted as <see cref="T:Tools.DrawingT.MetadataT.IPTC.AudioDataType"></see></exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.iptcAudioType._Type">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcAudioType.Type"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.iptcAudioType._Components">
	<summary>Contains value of the <see cref="T:System.ComponentModel.Component"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcAudioType.Type">
	<summary>Type of components</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.ImageTypeContents"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcAudioType.Components">
	<summary>Number of components</summary>
	<exception cref="T:System.ArgumentOutOfRangeException">Value being set is ot of range 0÷9</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.iptcAudioType.TypeCode">
	<summary>Gets or sets <see cref="P:Tools.DrawingT.MetadataT.IPTC.iptcAudioType.Type"/> as <see cref="T:System.String"/></summary>
	<exception cref="T:System.ArgumentException">Value being set cannot be interpreted member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.AudioDataType"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcAudioType.ToString">
	<summary>String representation in form 0T (components, type)</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcAudioType.Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Returns whether changing a value on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> to create a new value, using the specified context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<returns>True if <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/> of <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> of <paramref name="context"/> is not null and is subclass of <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/> (not <see cref="T:Tools.DrawingT.MetadataT.IPTC.NumStr"/> itself)</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcAudioType.Converter.CreateInstance(System.Collections.IDictionary,System.ComponentModel.ITypeDescriptorContext)">
	<summary>Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.</summary>
	<param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<returns>Instance of <see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcAudioType"/> initialized by given property values</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcAudioType.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
	<summary>Performs conversion from <see cref="T:System.String"/> to <see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcAudioType"/></summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
	<param name="value">Value to be converted to type <see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcAudioType"/></param>
	<returns>Value of <see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcAudioType"/> initialized by <paramref name="value"/></returns>
	<exception cref="T:System.ArgumentException">First character be interpreted as <see cref="T:Tools.DrawingT.MetadataT.IPTC.AudioDataType"/> -or- length of <paramref name="value"/> differs from 2</exception>
	<exception cref="T:System.InvalidCastException">Second character cannot be interpreted as number</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.iptcAudioType.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.DrawingT.MetadataT.IPTC.iptcAudioType)">
	<summary>Performs conversion from type <see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcAudioType"/> to type <see cref="T:System.String"/></summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="value">Value to be converted</param>
	<returns>Representation of <paramref name="value"/> in type <see cref="T:System.String"/></returns>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.iptcAudioType.Converter">
	<summary><see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Tools.DrawingT.MetadataT.IPTC.iptcAudioType"/></summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.iptcAudioType">
	<summary>IPTC audio type (IPTC type <see cref="F:Tools.DrawingT.MetadataT.IPTC.IPTCTypes.AudioType"/>)</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum.#ctor">
	<summary>CTor</summary>
	<remarks>Nobody else can inherit this class</remarks>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum.ToString">
	<summary>String representation</summary>
	<returns><see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.StringValue"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum.Clone1">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
	<remarks>Use type-safe <see cref="M:System.Globalization.CultureInfo.Clone"/> instead</remarks>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum.Swap">
	<summary>Swaps values <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.DecimalValue"/> and <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.StringValue"/></summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.DecimalValue">
	<summary>Gets or sets enumerated value as <see cref="T:System.Decimal"/></summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.EnumType"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.StringValue">
	<summary>Gets or sets string value</summary>
	<exception cref="T:System.ArgumentNullException">Value being set is null</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set cannot be represented in underlying enumeration and underlying enumeration is restricted (has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> or <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> is True)</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.EnumType">
	<summary>Gets type of enumeration derived class contains</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.containsImpl(System.Type)">
	<summary>Gets value indicating if this instance contains value of specified type</summary>
	<returns>True oif derived class's <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.contains(System.Type)"/> returns true for <paramref name="T"/> or if <paramref name="T"/> is <see cref="T:System.Decimal"/> and derived class's <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.contains(System.Type)"/> returns true for <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.EnumType"/></returns>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.contains(System.Type)">
	<summary>Gets value indicating if derived class contains value of givent type</summary>
	<param name="T">Type of value to be contained</param>
	<remarks>It can return false for <see cref="T:System.Decimal"/> even if <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.ContainsEnum"/> returns true</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.ContainsEnum">
	<summary>Gets value indicating if derived class contains enumerated value</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.ContainsString">
	<summary>Gets value indicating if derived class contains <see cref="T:System.String"/> value</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.IsEmpty">
	<summary>Gets value indicating if derived class is empty</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum.objValue">
	<summary>Gets value containde in derived class in type-unsafe way</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum.CloneDec">
	<summary>Clones instance of derived class as <see cref="T:Tools.DataStructuresT.GenericT.IPair`2"/></summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum.GetInstance(System.Type,System.String)">
	<summary>Creates instance <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum`1"/> with TEnum set to given <see cref="T:System.Type"/> and initialized with given <see cref="T:System.String"/></summary>
	<param name="Type">Type to pass to generic type parameter TEnum of <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum`1"/></param>
	<param name="Value"><see cref="T:System.String"/> to initialize new instance with</param>
	<returns>New instance of <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum`1"/> where TEnum is <paramref name="Type"/> initialized with <paramref name="Value"/></returns>
	<exception cref="T:System.ArgumentException">Error while creating generic instance</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="Value"/> or <paramref name="Type"/> is null</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
	<summary>Performs conversion from <see cref="T:System.String"/> to <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum"/></summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
	<param name="value">Value to be converted to <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum"/></param>
	<returns><see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum"/> initialized by <paramref name="value"/></returns>
	<exception cref="T:System.NullReferenceException"><paramref name="context"/> is null</exception>
	<exception cref="T:System.MissingMethodException">Cannot create an instance of generic class <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum`1"/>. The constructor is missing.</exception>
	<exception cref="T:System.MemberAccessException">Cannot create an instance of generic class <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum`1"/>. E.g. the class is abstract.</exception>
	<exception cref="T:System.Reflection.TargetInvocationException">Constructor of <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum`1"/> has thrown an exception.</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.DrawingT.MetadataT.IPTC.StringEnum)">
	<summary>Performs conversion from <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum"/> to <see cref="T:System.String"/></summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="value">Value to be converted</param>
	<returns>Representation of <paramref name="value"/> in <see cref="T:System.String"/></returns>
	<remarks>Calls <see cref="M:Tools.DrawingT.MetadataT.IPTC.StringEnum.StringValue"/></remarks>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum.Converter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<returns>True when <paramref name="context"/>'s <see cref="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor"/>'s <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/> is <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum`1"/></returns>
	<exception cref="T:System.NullReferenceException"><paramref name="context"/> is null</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum.Converter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Returns whether the collection of standard values returned from <see cref="M:Tools.DrawingT.MetadataT.IPTC.StringEnum.Converter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"/> is an exclusive list of possible values, using the specified context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<returns>True when underlying enumeration of <paramref name="context"/>'s <see cref="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor"/>'s <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/> has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> or its <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> has <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True</returns>
	<exception cref="T:System.NullReferenceException"><paramref name="context"/> is null</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum.Converter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter should not be null.</param>
	<returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set of valid values obtained from underlying enumeration of <paramref name="context"/>'s <see cref="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor"/>'s <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/> as values of <see cref="T:System.Xml.Serialization.XmlEnumAttribute"/> (preffred) or names of items</returns>
	<exception cref="T:System.NullReferenceException"><paramref name="context"/> is null</exception>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.StringEnum.Converter">
	<summary><see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum`1"/>'s</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.StringEnum">
	<summary>Common base for all <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum`1"/>s</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.StringEnum`1._StringValue">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.StringValue"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.StringEnum`1._EnumValue">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.EnumValue"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.StringEnum`1._ContainsEnum">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.ContainsEnum"/> property</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.CloneEnum">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.CloneDec">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.Swap">
	<summary>Swaps values <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.EnumValue"/> and <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.StringValue"/></summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.EnumValue">
	<summary>Gets or sets enumerated value</summary>
	<value>Anything to set enumerated value and delete string value</value>
	<returns>If this instance contains enumerated value then returns it, otherwise return 0</returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="TEnum"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.StringValue">
	<summary>Gets or sets string value</summary>
	<value>Anything non-null to set string value and delete enumerated value (if string value is name of enum item then <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.EnumValue"/> is set instead of <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.StringValue"/>. Value is considered to be name of enum if enum item has <see cref="T:System.Xml.Serialization.XmlEnumAttribute"/> and <see cref="P:System.Xml.Serialization.XmlEnumAttribute.Name"/> equals to value or when enum member has not <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> and it's name is same as value.</value>
	<returns>If this instance contains string value then returns it, otherwise returns name of enum item contained in this instace</returns>
	<exception cref="T:System.ArgumentNullException">Value being set is null</exception>
	<exception cref="T:System.ArgumentException">Value being set contains unallowed character (non-grapic-non-space-non-ASCII)</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set cannot be represented in <see cref="TEnum"/> and <see cref="TEnum"/> is restricted (has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> or <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> is True)</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.contains(System.Type)">
	<summary>Identifies whether this instance contains value of specified type</summary>
	<param name="T">Type to be contained</param>
	<returns>True if this instance contais value of type <paramref name="T"/> otherwise False</returns>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.ContainsEnum">
	<summary>Determines if currrent instance contains enumerated value</summary>
	<value>This property cannot be set</value>
	<returns>True if this instance contains enumerated value</returns>
	<exception cref="T:System.NotSupportedException">An attempt to change value</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.ContainsString">
	<summary>Determines if currrent instance contains string value</summary>
	<value>This property cannot be set</value>
	<returns>Always True</returns>
	<exception cref="T:System.NotSupportedException">An attempt to set value to false</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.IsEmpty">
	<summary>Determines whether instance contains neither string nor enumerated value</summary>
	<returns>True when both values are not present. False if one of values is present (even if it contains null)</returns>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.objValue">
	<summary>Get or sets stored value in type-unsafe way</summary>
	<value>New value to be stored in this instance</value>
	<returns>Value stored in this instance</returns>
	<exception cref="T:System.NullReferenceException">When trying to set null value</exception>
	<exception cref="T:System.ArgumentException">When trying to set value of type other than <see cref="T:System.String"/> and <see cref="T:System.IConvertible"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.op_Implicit(System.String)~Tools.DrawingT.MetadataT.IPTC.StringEnum{`0}">
	<summary>Converts <see cref="T:System.String"/> into <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum`1"/></summary>
	<param name="From">A <see cref="T:System.String"/> to be converted</param>
	<returns>New instance of <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum`1"/> initialized with <paramref name="From"/> as <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.StringValue"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="From"/> is null</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.op_Explicit(`0)~Tools.DrawingT.MetadataT.IPTC.StringEnum{`0}">
	<summary>Converts <see cref="TEnum"/> into <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum`1"/></summary>
	<param name="From">A <see cref="T:System.String"/> to be converted</param>
	<returns>New instance of <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum`1"/> initialized with <paramref name="From"/> as <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.StringValue"/></returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="From"/> is not member of <see cref="TEnum"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.op_Implicit(Tools.DrawingT.MetadataT.IPTC.StringEnum{`0})~System.String">
	<summary>Converts <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum`1"/> to <see cref="T:System.String"/></summary>
	<param name="From">A <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum`1"/> to be converted</param>
	<returns><see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.StringValue"/> of <paramref name="From"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.op_Implicit(Tools.DrawingT.MetadataT.IPTC.StringEnum{`0})~`0">
	<summary>Converts <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum`1"/> to <see cref="TEnum"/></summary>
	<param name="From">A <see cref="T:Tools.DrawingT.MetadataT.IPTC.StringEnum`1"/> to be converted</param>
	<returns><see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.EnumValue"/> of <paramref name="From"/> (it can be 0 if <paramref name="From"/> does not contain enum value)</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.ToString">
	<summary>String representation</summary>
	<returns><see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.StringValue"/></returns>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.DecimalValue">
	<summary>Gets or sets <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.EnumValue"/> as decimal</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="TEnum"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.EnumType">
	<summary>Returns type of <see cref="TEnum"/></summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.StringEnum`1.#ctor(System.String)">
	<summary>CTor from string value</summary>
	<param name="StringValue">String value top initialize new instance</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="StringValue"/> is null</exception>
	<exception cref="T:System.ArgumentException"><paramref name="StringValue"/> contains unallowed character (non-grapic-non-space-non-ASCII)</exception>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.StringEnum`1">
	<summary>Type that can contain value of "string enum" even when such value is not member of this enum</summary>
	<typeparam name="TEnum">Type of <see cref="P:Tools.DrawingT.MetadataT.IPTC.StringEnum`0.EnumValue"/>. Must inherit from <see cref="T:System.Enum"/></typeparam>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.GetUnderlyingType(Tools.DrawingT.MetadataT.IPTC.IPTCTypes)">
	<summary>Returns <see cref="T:System.Type"/> that is used to store values of particular <see cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCTypes">IPTC type</see></summary>
	<param name="IPTCType">IPTC type to get <see cref="T:System.Type"/> for</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="IPTCType"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCTypes"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.GetTag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>Gets details about tag format</summary>
	<param name="Tag">tag to get details for</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Either <see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.RecordNumber"/> of <paramref name="Tag"/> is unknown or <see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.DatasetNumber"/> of <paramref name="Tag"/> is unknown within <see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.RecordNumber"/> of <paramref name="Tag"/></exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.GroupInfo._Tags">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.GroupInfo.Tags"/> Proeprty</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.GroupInfo._Mandatory">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.GroupInfo.Mandatory"/> Proeprty</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.GroupInfo._Repeatable">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.GroupInfo.Repeatable"/> Proeprty</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.GroupInfo._Name">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.GroupInfo.Name"/> Proeprty</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.GroupInfo._HumanName">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.GroupInfo.HumanName"/> Proeprty</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.GroupInfo._Group">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.GroupInfo.Group"/> Proeprty</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.GroupInfo._Category">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.GroupInfo.Category"/> Proeprty</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.GroupInfo._Description">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.GroupInfo.Description"/> Proeprty</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.GroupInfo._Type">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.GroupInfo.Type"/> Proeprty</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.GroupInfo.#ctor(System.String,System.String,Tools.DrawingT.MetadataT.IPTC.Groups,System.Type,System.String,System.String,System.Boolean,System.Boolean,Tools.DrawingT.MetadataT.IPTC.IPTCTag[])">
	<summary>CTor</summary>
	<param name="Name">Name of group used in object structure</param>
	<param name="HumanName">Human-friendly name of group</param>
	<param name="Group">Group number</param>
	<param name="Type">Type that represents this group</param>
	<param name="Category">Category of this group</param>
	<param name="Description">Description</param>
	<param name="Mandatory">Group is mandatory according to IPTC standard</param>
	<param name="Repeatable">Group is repeatable</param>
	<param name="Tags">Tags the group consists of</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Group"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.Groups"/></exception>
	<exception cref="T:System.ArgumentException"><paramref name="Tags"/> is null or have less than 2 items</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.GroupInfo.Type">
	<summary>Type that realizes object representation of this group</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.GroupInfo.Tags">
	<summary>Tags present in this group</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.GroupInfo.Mandatory">
	<summary>True if this group is mandatory according to IPTC standard</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.GroupInfo.Repeatable">
	<summary>True if this group is repeatable</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.GroupInfo.Name">
	<summary>Name of group used in object structure</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.GroupInfo.HumanName">
	<summary>Human-friendly name of this group</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.GroupInfo.Group">
	<summary>Code of this group</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.GroupInfo.Category">
	<summary>Name of category of this group</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.GroupInfo.Description">
	<summary>Description of this group</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.GroupInfo">
	<summary>Information about group of tags</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.Group.GetGroupMap(Tools.DrawingT.MetadataT.IPTC,Tools.DrawingT.MetadataT.IPTC.IPTCTag[])">
	<summary>Gets assignmenst between group indexes of tags and indexes of groups</summary>
	<param name="Tags">Tags contained in this group</param>
	<param name="IPTC"><see cref="T:Tools.DrawingT.MetadataT.IPTC"/> to create map for</param>
	<returns><see cref="T:System.Collections.Generic.List`1"/> where each item of list means one group instance and contains indexes of tags when obtained via tag properties</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Tags"/> is null or contains less then 2 items -or- <paramref name="IPTC"/> is null</exception>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.Group">
	<summary>Common base for all tag groups</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.IntFromBytes(System.Byte,System.Byte[])">
	<summary>Ready signed ingere from byte array</summary>
	<param name="Count">Number of bytes to read (can be 1,2,4,8)</param>
	<param name="Bytes">Byte array to read from</param>
	<returns>Signed integer stored in given byte array</returns>
	<exception cref="T:System.ArgumentException"><paramref name="Count"/> is not 1,2,4 or 8</exception>
	<exception cref="T:System.IO.EndOfStreamException">There are not enough bytes in <paramref name="Bytes"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.UIntFromBytes(System.Byte,System.Byte[])">
	<summary>Ready unsigned ingere from byte array</summary>
	<param name="Count">Number of bytes to read (can be 1,2,4,8)</param>
	<param name="Bytes">Byte array to read from</param>
	<returns>Unsigned integer stored in given byte array</returns>
	<exception cref="T:System.ArgumentException"><paramref name="Count"/> is not 1,2,4 or 8</exception>
	<exception cref="T:System.IO.EndOfStreamException">There are not enough bytes in <paramref name="Bytes"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.NumCharFromBytes(System.Byte[])">
	<summary>Converts array of bytes that contains string to number</summary>
	<param name="Bytes">Bytest to be converted</param>
	<returns>Number that can be converted at least to <see cref="T:System.Int64"/> or <see cref="T:System.UInt64"/></returns>
	<exception cref="T:System.InvalidCastException">Cannot convert string stored in <paramref name="Bytes"/> to <see cref="T:System.Decimal"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ToBytes(System.Byte,System.Decimal,System.Boolean)">
	<summary>Converts number to array of bytes in which the number is stored as ASCII string</summary>
	<param name="Count">Number of bytes to get (0 means no limit)</param>
	<param name="Number">Number to be stored</param>
	<returns>Array of bytes that contains <paramref name="Count"/> bytes consisting of string representation of <paramref name="Number"/></returns>
	<param name="Fixed"><paramref name="Count"/> represents fixed lenght of returned byte array (True) or maximal variable lenght (False)</param>
	<exception cref="T:System.ArgumentException">
		<paramref name="Count"/> is 0 and <paramref name="Fixed"/> is True -or-
 <paramref name="Count"/> is not 0 and number cannot be stored in number of bytes specified in <paramref name="Count"/>
	</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ToBytes(System.Byte,System.Int64)">
	<summary>Converts signed integer to array of bytes</summary>
	<param name="Count">Length of integral value and returned array (can be 1,2,4,8)</param>
	<param name="Int">Value to be converted</param>
	<returns>Array of bytes representing <paramref name="Int"/></returns>
	<exception cref="T:System.ArgumentException"><paramref name="Count"/> is not 1,2,4 or 8</exception>
	<exception cref="T:System.Diagnostics.OverflowAction"><paramref name="Int"/>'s value does not fit into integral value of <paramref name="Count"/> bytes</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ToBytes(System.Byte,System.UInt64)">
	<summary>Converts unsigned integer to array of bytes</summary>
	<param name="Count">Length of integral value and returned array (can be 1,2,4,8)</param>
	<param name="Int">Value to be converted</param>
	<returns>Array of bytes representing <paramref name="Int"/></returns>
	<exception cref="T:System.ArgumentException"><paramref name="Count"/> is not 1,2,4 or 8</exception>
	<exception cref="T:System.Diagnostics.OverflowAction"><paramref name="Int"/>'s value does not fit into integral value of <paramref name="Count"/> bytes</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup.ToString">
	<summary>String representation (number of bytes)</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup.Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Returns whether changing a value on this object requires a call to the <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> method to create a new value.</summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<remarks>True</remarks>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup.Converter.CreateInstance(System.Collections.IDictionary,System.ComponentModel.ITypeDescriptorContext)">
	<summary>Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.</summary>
	<param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<returns>New instance of <see cref="T:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup"/> initialized from <paramref name="propertyValues"/></returns>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup.Converter">
	<summary><see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Tools.DrawingT.MetadataT.IPTC.ObjectDataPreviewGroup"/></summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ContentLocationGroup.ToString">
	<summary>String representation</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ContentLocationGroup.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ARMGroup.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ARMGroup.Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Returns whether changing a value on this object requires a call to the <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> method to create a new value.</summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<remarks>True</remarks>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.ARMGroup.Converter.CreateInstance(System.Collections.IDictionary,System.ComponentModel.ITypeDescriptorContext)">
	<summary>Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.</summary>
	<param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<returns>New instance of <see cref="T:Tools.DrawingT.MetadataT.IPTC.ARMGroup"/> initialized from <paramref name="propertyValues"/></returns>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.ARMGroup.Converter">
	<summary><see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Tools.DrawingT.MetadataT.IPTC.ARMGroup"/></summary>
</member><member name="M:Tools.misc_.self``1(``0)">
	<summary>Returns given object</summary>
	<param name="obj">Object to return</param>
	<typeparam name="T">Type of <paramref name="obj"/></typeparam>
	<returns><paramref name="obj"/></returns>
	<remarks>Somebody can think taht function that returns object itsekf in nonsense. But it is usefull with languages as VB which have <c>With</c> construct. Using this function, you can objein object itself via <c>.self</c> inside <c>With</c> conetc</remarks>
</member><member name="M:Tools.misc_.Switch``1(System.Collections.Generic.IEnumerable{System.Boolean},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
	<summary>Returns one of results depending on boolean conditions</summary>
	<param name="conditions">Conditions to test</param>
	<param name="results">Results to swich among</param>
	<param name="ThrowOnError">True to throw an <see cref="T:System.ArgumentException"/> when none of <paramref name="conditions"/> is true</param>
	<typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam>
	<returns>Item from <paramref name="results"/> at position of first condition from <paramref name="conditions"/> which is true</returns>
	<exception cref="T:System.ArgumentException"><paramref name="results"/> contains less items than is orinar number of firts condtition which is true (simply: enumeration of <paramref name="results"/> reaches the end of collection before first true condition is found) =or= None of <paramref name="conditions"/> evaluates to true and <paramref name="ThrowOnError"/> is true.</exception>
</member><member name="M:Tools.misc_.Switch``2(``1,System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
	<summary>Returns one of results depending on conditions compared to given value</summary>
	<param name="conditions">Conditions to test agains <paramref name="Value"/></param>
	<param name="value">Value to compare <paramref name="conditions"/> with</param>
	<param name="results">Results to swich among</param>
	<param name="ThrowOnError">True to throw an <see cref="T:System.ArgumentException"/> when none of <paramref name="conditions"/> equals to <paramref name="Value"/></param>
	<typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam>
	<typeparam name="TC">Type of conditions</typeparam>
	<returns>Item from <paramref name="results"/> at position of first condition from <paramref name="conditions"/> which equals to <paramref name="Value"/></returns>
	<exception cref="T:System.ArgumentException"><paramref name="results"/> contains less items than is orinar number of firts condtition which equals to <paramref name="Value"/> (simply: enumeration of <paramref name="results"/> reaches the end of collection before first condition which eqauls to <paramref name="Value"/> is found) =or= None of <paramref name="conditions"/> equals to <paramref name="Value"/> and <paramref name="ThrowOnError"/> is true.</exception>
</member><member name="M:Tools.misc_.Switch``2(``1,System.Collections.Generic.IEnumerable{``0},``1[])">
	<summary>Returns one of results depending on conditions compared to given value</summary>
	<param name="conditions">Conditions to test agains <paramref name="Value"/></param>
	<param name="value">Value to compare <paramref name="conditions"/> with</param>
	<param name="results">Results to swich among</param>
	<typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam>
	<returns>Item from <paramref name="results"/> at position of first condition from <paramref name="conditions"/> which equals to <paramref name="Value"/></returns>
	<exception cref="T:System.ArgumentException"><paramref name="results"/> contains less items than is orinar number of firts condtition which is true (simply: enumeration of <paramref name="results"/> reaches the end of collection before first condition which equals to <paramref name="value"/> is found) =or= None of <paramref name="conditions"/> equals to <paramref name="value"/>.</exception>
</member><member name="M:Tools.misc_.Switch``1(System.Collections.Generic.IEnumerable{``0},System.Boolean[])">
	<summary>Returns one of results depending on boolean conditions</summary>
	<param name="conditions">Conditions to test</param>
	<param name="results">Results to swich among</param>
	<typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam>
	<returns>Item from <paramref name="results"/> at position of first condition from <paramref name="conditions"/> which is true</returns>
	<exception cref="T:System.ArgumentException"><paramref name="results"/> contains less items than is orinar number of firts condtition which is true (simply: enumeration of <paramref name="results"/> reaches the end of collection before first true condition is found) =or= None of <paramref name="conditions"/> evaluates to true.</exception>
</member><member name="M:Tools.misc_.Switch``1(System.Collections.Generic.IEnumerable{System.Boolean},``0[])">
	<summary>Returns one of results depending on boolean conditions</summary>
	<param name="conditions">Conditions to test</param>
	<param name="results">Results to swich among</param>
	<typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam>
	<returns>Item from <paramref name="results"/> at position of first condition from <paramref name="conditions"/> which is true</returns>
	<exception cref="T:System.ArgumentException"><paramref name="results"/> contains less items than is orinar number of firts condtition which is true (simply: enumeration of <paramref name="results"/> reaches the end of collection before first true condition is found) =or= None of <paramref name="conditions"/> evaluates to true.</exception>
</member><member name="M:Tools.misc_.Switch``2(``1,System.Collections.Generic.IEnumerable{``1},``0[])">
	<summary>Returns one of results depending on conditions compared to given value</summary>
	<param name="conditions">Conditions to test agains <paramref name="Value"/></param>
	<param name="value">Value to compare <paramref name="conditions"/> with</param>
	<param name="results">Results to swich among</param>
 ''' <typeparam name="TC">Type of conditions</typeparam>
	<typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam>
	<returns>Item from <paramref name="results"/> at position of first condition from <paramref name="conditions"/> which equals to <paramref name="Value"/></returns>
	<exception cref="T:System.ArgumentException"><paramref name="results"/> contains less items than is orinar number of firts condtition which is true (simply: enumeration of <paramref name="results"/> reaches the end of collection before first condition which equals to <paramref name="value"/> is found) =or= None of <paramref name="conditions"/> equals to <paramref name="value"/>.</exception>
</member><member name="M:Tools.misc_.Switch``1(System.Boolean,System.Boolean,``0,``0,System.Boolean)">
	<summary>Returns one of results depending on boolean conditions (2 conditions condition-condition-result-result order of parameters)</summary>
	<param name="c1">Condition 1</param>
	<param name="c2">Condition 2</param>
	<param name="r1">Result 1 (returned when <paramref name="c1"/> is true)</param>
	<param name="r2">Result 2 (returned when <paramref name="c2"/> is true)</param>
	<typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam>
	<returns>The one of results with number of first condition which is true</returns>
	<exception cref="T:System.ArgumentException">None of <paramref name="conditions"/> evaluates to true and <paramref name="ThrowOnError"/> is true.</exception>
</member><member name="M:Tools.misc_.Switch``1(System.Boolean,System.Boolean,System.Boolean,``0,``0,``0,System.Boolean)">
	<summary>Returns one of results depending on boolean conditions (3 conditions condition-condition-result-result order of parameters)</summary>
	<param name="c1">Condition 1</param>
	<param name="c2">Condition 2</param>
	<param name="c3">Condition 3</param>
	<param name="r1">Result 1 (returned when <paramref name="c1"/> is true)</param>
	<param name="r2">Result 2 (returned when <paramref name="c2"/> is true)</param>
	<param name="r3">Result 3 (returned when <paramref name="c3"/> is true)</param>
	<typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam>
	<returns>The one of results with number of first condition which is true</returns>
	<exception cref="T:System.ArgumentException">None of <paramref name="conditions"/> evaluates to true and <paramref name="ThrowOnError"/> is true.</exception>
</member><member name="M:Tools.misc_.Switch``1(System.Boolean,System.Boolean,System.Boolean,System.Boolean,``0,``0,``0,``0,System.Boolean)">
	<summary>Returns one of results depending on boolean conditions (4 conditions condition-condition-result-result order of parameters)</summary>
	<param name="c1">Condition 1</param>
	<param name="c2">Condition 2</param>
	<param name="c3">Condition 3</param>
	<param name="c4">Condition 4</param>
	<param name="r1">Result 1 (returned when <paramref name="c1"/> is true)</param>
	<param name="r2">Result 2 (returned when <paramref name="c2"/> is true)</param>
	<param name="r3">Result 3 (returned when <paramref name="c3"/> is true)</param>
	<param name="r4">Result 4 (returned when <paramref name="c4"/> is true)</param>
	<typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam>
	<returns>The one of results with number of first condition which is true</returns>
	<exception cref="T:System.ArgumentException">None of <paramref name="conditions"/> evaluates to true and <paramref name="ThrowOnError"/> is true.</exception>
</member><member name="M:Tools.misc_.Switch``1(System.Boolean,``0,System.Boolean,``0,System.Boolean)">
	<summary>Returns one of results depending on boolean conditions (2 conditions condition-result-condition-resul order of parameters)</summary>
	<param name="c1">Condition 1</param>
	<param name="r1">Result 1 (returned when <paramref name="c1"></paramref> is true)</param>
	<param name="c2">Condition 2</param>
	<param name="r2">Result 2 (returned when <paramref name="c2"></paramref> is true)</param>
	<typeparam name="T">Type of <paramref name="results"></paramref> items and return value</typeparam>
	<returns>The one of results with number of first condition which is true</returns>
	<exception cref="T:System.ArgumentException">None of <paramref name="conditions"></paramref> evaluates to true and <paramref name="ThrowOnError"></paramref> is true.</exception>
</member><member name="M:Tools.misc_.Switch``1(System.Boolean,``0,System.Boolean,``0,System.Boolean,``0,System.Boolean)">
	<summary>Returns one of results depending on boolean conditions (3 conditions condition-result-condition-resul order of parameters)</summary>
	<param name="c1">Condition 1</param>
	<param name="r1">Result 1 (returned when <paramref name="c1"></paramref> is true)</param>
	<param name="c2">Condition 2</param>
	<param name="r2">Result 2 (returned when <paramref name="c2"></paramref> is true)</param>
	<param name="c3">Condition 3</param>
	<param name="r3">Result 3 (returned when <paramref name="c3"></paramref> is true)</param>
	<typeparam name="T">Type of <paramref name="results"></paramref> items and return value</typeparam>
	<returns>The one of results with number of first condition which is true</returns>
	<exception cref="T:System.ArgumentException">None of <paramref name="conditions"></paramref> evaluates to true and <paramref name="ThrowOnError"></paramref> is true.</exception>
</member><member name="M:Tools.misc_.Switch``1(System.Boolean,``0,System.Boolean,``0,System.Boolean,``0,System.Boolean,``0,System.Boolean)">
	<summary>Returns one of results depending on boolean conditions (4 conditions condition-result-condition-resul order of parameters)</summary>
	<param name="c1">Condition 1</param>
	<param name="r1">Result 1 (returned when <paramref name="c1"></paramref> is true)</param>
	<param name="c2">Condition 2</param>
	<param name="r2">Result 2 (returned when <paramref name="c2"></paramref> is true)</param>
	<param name="c3">Condition 3</param>
	<param name="r3">Result 3 (returned when <paramref name="c3"></paramref> is true)</param>
	<param name="c4">Condition 4</param>
	<param name="r4">Result 4 (returned when <paramref name="c4"></paramref> is true)</param>
	<typeparam name="T">Type of <paramref name="results"></paramref> items and return value</typeparam>
	<returns>The one of results with number of first condition which is true</returns>
	<exception cref="T:System.ArgumentException">None of <paramref name="conditions"></paramref> evaluates to true and <paramref name="ThrowOnError"></paramref> is true.</exception>
</member><member name="M:Tools.misc_.Switch``2(``1,``1,``1,``0,``0,System.Boolean)">
	<summary>Returns one of results depending on condition compared to given values (2 conditions condition-condition-result-result order of parameters)</summary>
	<param name="c1">Condition 1</param><param name="value">Value to compare conditions with</param>
	<param name="c2">Condition 2</param>
	<param name="r1">Result 1 (returned when <paramref name="c1"/> is true)</param>
	<param name="r2">Result 2 (returned when <paramref name="c2"/> is true)</param>
	<typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam><typeparam name="TC">Type of condition</typeparam>
	<returns>The one of results with number of first condition which is true</returns>
	<exception cref="T:System.ArgumentException">None of <paramref name="conditions"/> evaluates to true and <paramref name="ThrowOnError"/> is true.</exception>
</member><member name="M:Tools.misc_.Switch``2(``1,``1,``1,``1,``0,``0,``0,System.Boolean)">
	<summary>Returns one of results depending on condition compared to given values (3 conditions condition-condition-result-result order of parameters)</summary>
	<param name="c1">Condition 1</param><param name="value">Value to compare conditions with</param>
	<param name="c2">Condition 2</param>
	<param name="c3">Condition 3</param>
	<param name="r1">Result 1 (returned when <paramref name="c1"/> is true)</param>
	<param name="r2">Result 2 (returned when <paramref name="c2"/> is true)</param>
	<param name="r3">Result 3 (returned when <paramref name="c3"/> is true)</param>
	<typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam><typeparam name="TC">Type of condition</typeparam>
	<returns>The one of results with number of first condition which is true</returns>
	<exception cref="T:System.ArgumentException">None of <paramref name="conditions"/> evaluates to true and <paramref name="ThrowOnError"/> is true.</exception>
</member><member name="M:Tools.misc_.Switch``2(``1,``1,``1,``1,``1,``0,``0,``0,``0,System.Boolean)">
	<summary>Returns one of results depending on condition compared to given values (4 conditions condition-condition-result-result order of parameters)</summary>
	<param name="c1">Condition 1</param><param name="value">Value to compare conditions with</param>
	<param name="c2">Condition 2</param>
	<param name="c3">Condition 3</param>
	<param name="c4">Condition 4</param>
	<param name="r1">Result 1 (returned when <paramref name="c1"/> is true)</param>
	<param name="r2">Result 2 (returned when <paramref name="c2"/> is true)</param>
	<param name="r3">Result 3 (returned when <paramref name="c3"/> is true)</param>
	<param name="r4">Result 4 (returned when <paramref name="c4"/> is true)</param>
	<typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam><typeparam name="TC">Type of condition</typeparam>
	<returns>The one of results with number of first condition which is true</returns>
	<exception cref="T:System.ArgumentException">None of <paramref name="conditions"/> evaluates to true and <paramref name="ThrowOnError"/> is true.</exception>
</member><member name="M:Tools.misc_.Switch``2(``1,``1,``0,``1,``0,System.Boolean)">
	<summary>Returns one of results depending on condition compared to given values (2 conditions condition-result-condition-resul order of parameters)</summary>
	<param name="c1">Condition 1</param><param name="value">Value to compare conditions with</param>
	<param name="r1">Result 1 (returned when <paramref name="c1"></paramref> is true)</param>
	<param name="c2">Condition 2</param>
	<param name="r2">Result 2 (returned when <paramref name="c2"></paramref> is true)</param>
	<typeparam name="T">Type of <paramref name="results"></paramref> items and return value</typeparam><typeparam name="TC">Type of condition</typeparam>
	<returns>The one of results with number of first condition which is true</returns>
	<exception cref="T:System.ArgumentException">None of <paramref name="conditions"></paramref> evaluates to true and <paramref name="ThrowOnError"></paramref> is true.</exception>
</member><member name="M:Tools.misc_.Switch``2(``1,``1,``0,``1,``0,``1,``0,System.Boolean)">
	<summary>Returns one of results depending on condition compared to given values (3 conditions condition-result-condition-resul order of parameters)</summary>
	<param name="c1">Condition 1</param><param name="value">Value to compare conditions with</param>
	<param name="r1">Result 1 (returned when <paramref name="c1"></paramref> is true)</param>
	<param name="c2">Condition 2</param>
	<param name="r2">Result 2 (returned when <paramref name="c2"></paramref> is true)</param>
	<param name="c3">Condition 3</param>
	<param name="r3">Result 3 (returned when <paramref name="c3"></paramref> is true)</param>
	<typeparam name="T">Type of <paramref name="results"></paramref> items and return value</typeparam><typeparam name="TC">Type of condition</typeparam>
	<returns>The one of results with number of first condition which is true</returns>
	<exception cref="T:System.ArgumentException">None of <paramref name="conditions"></paramref> evaluates to true and <paramref name="ThrowOnError"></paramref> is true.</exception>
</member><member name="M:Tools.misc_.Switch``2(``1,``1,``0,``1,``0,``1,``0,``1,``0,System.Boolean)">
	<summary>Returns one of results depending on condition compared to given values (4 conditions condition-result-condition-resul order of parameters)</summary>
	<param name="c1">Condition 1</param><param name="value">Value to compare conditions with</param>
	<param name="r1">Result 1 (returned when <paramref name="c1"></paramref> is true)</param>
	<param name="c2">Condition 2</param>
	<param name="r2">Result 2 (returned when <paramref name="c2"></paramref> is true)</param>
	<param name="c3">Condition 3</param>
	<param name="r3">Result 3 (returned when <paramref name="c3"></paramref> is true)</param>
	<param name="c4">Condition 4</param>
	<param name="r4">Result 4 (returned when <paramref name="c4"></paramref> is true)</param>
	<typeparam name="T">Type of <paramref name="results"></paramref> items and return value</typeparam><typeparam name="TC">Type of condition</typeparam>
	<returns>The one of results with number of first condition which is true</returns>
	<exception cref="T:System.ArgumentException">None of <paramref name="conditions"></paramref> evaluates to true and <paramref name="ThrowOnError"></paramref> is true.</exception>
</member><member name="M:Tools.misc_.arr``1(``0[])">
	<summary>Returns given 1D array</summary>
	<param name="items">Array to be returned</param>
	<typeparam name="T">Type of items in array</typeparam>
	<returns><paramref name="items"/></returns>
	<remarks>The aim of this function is to provide syntactically the shortets way of obtaining arrays of given type. For example in visual basic you can obtain array this way:
 <example>Dim arr = New T() {Itme1, Item2, Item3}</example>
 This function shorten this to:
 <example>Dim arr = arr(Item1, Item2, Item3)</example>
	</remarks>
</member><member name="M:Tools.misc_.enm``1(``0[])">
	<summary>Returns given 1D array as <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
	<param name="items">Array to be returned</param>
	<typeparam name="T">Type of items in array</typeparam>
	<returns><paramref name="items"/></returns>
	<remarks>The aim of this function is to provide syntactically the shortets way of obtaining <see cref="T:System.Collections.Generic.IEnumerable`1"/>. For example in visual basic you can obtain <see cref="T:System.Collections.Generic.IEnumerable`1"/> this way:
 <example>Dim arr = DIrectCast(New T() {Itme1, Item2, Item3}, IEnumerable)</example>
 This function shorten this to:
 <example>Dim arr = enm(Item1, Item2, Item3)</example>
	</remarks>
</member><member name="T:Tools.misc_">
	<summary>Misc tools</summary>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.#ctor">
	<summary>CTor - an empty tree with no value</summary>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.#ctor(Tools.DataStructuresT.GenericT.Tree{`0})">
	<summary>Copy CTor - clones instance of tree</summary>
	<param name="a">Instance to clone</param>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.#ctor(`0,System.Collections.Generic.IEnumerable{`0})">
	<summary>CTor - from value and optionally values of nodes</summary>
	<param name="value">value for root</param>
	<param name="Nodes">values for nodes</param>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.#ctor(`0,System.Collections.Generic.IEnumerable{Tools.DataStructuresT.GenericT.Tree{`0}})">
	<summary>CTor - from value and nodes</summary>
	<param name="value">value for root</param>
	<param name="Nodes">node to fill <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> with</param>
</member><member name="F:Tools.DataStructuresT.GenericT.Tree`1._Value">
	<summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Value"/> property</summary>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.Value">
	<summary>Value of this node</summary>
</member><member name="F:Tools.DataStructuresT.GenericT.Tree`1._Nodes">
	<summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> property</summary>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes">
	<summary>Sub-trees of this tree</summary>
	<exception cref="T:System.NullReferenceException">Is thrown by <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> or <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/>'s setter of <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> when null is passed there.</exception>
	<exception cref="T:System.OperationCanceledException">Is thrown by <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> or <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/>'s setter of <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> when: Attempting to pass node which's <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/> is already set to non-null value -or- attempting to pass node which is <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Root"/> of current tree.</exception>
	<remarks>See also <seealso cref="M:Tools.DataStructuresT.GenericT.Tree`1.OnAdding(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.CancelableItemIndexEventArgs)"/>, <seealso cref="M:Tools.DataStructuresT.GenericT.Tree`1.OnItemChanging(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.CancelableItemIndexEventArgs)"/></remarks>
</member><member name="F:Tools.DataStructuresT.GenericT.Tree`1._Parent">
	<summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/> property</summary>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.Parent">
	<summary>Node this node is placed in</summary>
	<returns>parent node of this node or null when this node is root</returns>
	<value>New parent node of this node. Setting root to another value causes moving current node and whole its sub-tree into node specified in <paramref name="value"/>, so it is no longer present in old parent</value>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.ToString">
	<summary>String representation of this instance</summary>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.Clone1">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
	<remarks>Use type-safe <see cref="M:Tools.DataStructuresT.GenericT.Tree`1.Clone"/> instead</remarks>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.Clone">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.Nodes_ItemChanging(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}},Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.CancelableItemIndexEventArgs)">
	<exception cref="T:System.NullReferenceException">Attepmt to assign null reference</exception>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.Nodes_Adding(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}},Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.CancelableItemIndexEventArgs)">
	<exception cref="T:System.NullReferenceException">Attepmt to add null reference</exception>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.OnAdding(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.CancelableItemIndexEventArgs)">
	<summary>Called before adding item to <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/></summary>
	<param name="e">Event parameters. You can use it to cancel the operation.</param>
	<exception cref="T:System.NullReferenceException">Attepmt to add null reference</exception>
	<remarks>When node that is being added has already parent set or this node is root of current tree then <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to true, which causes <see cref="T:System.OperationCanceledException"/> to be thrown by <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Add(`0)"/> or <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Insert(System.Int32,`0)"/></remarks>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.OnAdded(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.ItemIndexEventArgs)">
	<summary>Called when item was added into <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/></summary>
	<param name="e">Event parameters</param>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.OnItemChanging(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.CancelableItemIndexEventArgs)">
	<summary>Called before item of <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> is changed</summary>
	<param name="e">Event parameters. You can use it to cancel the operation.</param>
	<exception cref="T:System.NullReferenceException">Attepmt to assign null reference</exception>
	<remarks>When node that is being passed has already parent set or this node is root of current tree then <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to true, which causes <see cref="T:System.OperationCanceledException"/> to be thrown by <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/>'s setter</remarks>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.OnItemChanged(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.OldNewItemEvetArgs)">
	<summary>Called after item of <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> is changed</summary>
	<param name="e">Event parameters</param>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.OnRemoving(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.CancelableItemIndexEventArgs)">
	<summary>Called before single item is removed from <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/></summary>
	<param name="e">Event parameters. You can use it to cancel the operation.</param>
	<remarks>This method is not called when <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> is to be cleared using <see cref="M:System.Collections.Generic.ICollection`1.Clear"/>. Use <seealso cref="M:Tools.DataStructuresT.GenericT.Tree`1.OnClearing(System.ComponentModel.CancelEventArgs)"/> instead.</remarks>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.OnRemoved(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.ItemIndexEventArgs)">
	<summary>Called after single item is removed from <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/></summary>
	<param name="e">Event parameters</param>
	<remarks>This method is not called after <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> has been cleared using <see cref="M:System.Collections.Generic.ICollection`1.Clear"/>. Use <seealso cref="M:Tools.DataStructuresT.GenericT.Tree`1.OnCleared(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.ItemsEventArgs)"/> instead.</remarks>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.OnClearing(System.ComponentModel.CancelEventArgs)">
	<summary>Called before whole <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> is cleared at once</summary>
	<param name="e">Event parameters. You can use it to cancel the operation.</param>
	<remarks>In case of clearing <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> at once the <see cref="M:Tools.DataStructuresT.GenericT.Tree`1.OnRemoving(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.CancelableItemIndexEventArgs)"/> method is not called.</remarks>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.OnCleared(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.ItemsEventArgs)">
	<summary>Called after whole <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> was cleared at once</summary>
	<param name="e">Event parameters</param>
	<remarks>In case of clearing <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> at once the <see cref="M:Tools.DataStructuresT.GenericT.Tree`1.OnRemoved(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.ItemIndexEventArgs)"/> method is not called.</remarks>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.Adopt(Tools.DataStructuresT.GenericT.Tree{`0})">
	<summary>Adpots specified sub-tree and removes it from its old <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/></summary>
	<param name="Node"><see cref="T:Tools.DataStructuresT.GenericT.Tree`1"/> to be adopted</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Node"/> is null</exception>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.AdoptClone(Tools.DataStructuresT.GenericT.Tree{`0})">
	<summary>Adopts clone of given sub-tree</summary>
	<param name="Node"><see cref="T:Tools.DataStructuresT.GenericT.Tree`1"/> to be adopted</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Node"/> is null</exception>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.IsRoot">
	<summary>Determines if current node is root</summary>
	<returns>True when <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/> is null</returns>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.IsLeaf">
	<summary>determines if current node is leaf</summary>
	<returns>True when current node has no child</returns>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.Root">
	<summary>Finds root of tree</summary>
	<returns><see cref="T:Tools.DataStructuresT.GenericT.Tree`1"/> that doesnt have <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/></returns>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.Depth">
	<summary>Computes depth of this node</summary>
	<returns>Number of nodes above current</returns>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.PreOrder">
	<summary>Gets enumerator that itterates through tree in pre-order manner</summary>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.PostOrder">
	<summary>Gets enumerator that itterates through tree in post-order manner</summary>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.InOrder">
	<summary>Gets enumerator that itterates through tree in in-order manner</summary>
	<remarks>You should use in-order enumerator only on binary trees. Otherwise in-order semantic is ugly: First the bigger half of children from left to right is returned, then parent and then remaining children.</remarks>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.PreOrderBackward">
	<summary>Gets enumerator that itterates through tree in pre-order manner from last to first item (from right to left)</summary>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.PostOrderBackward">
	<summary>Gets enumerator that itterates through tree in post-order manner from last to first item (from right to left)</summary>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.InOrderBackward">
	<summary>Gets enumerator that itterates through tree in in-order manner from last to first item (from right to left)</summary>
	<remarks>You should use in-order enumerator only on binary trees. Otherwise in-order semantic is ugly: First the bigger half of children from right to left is returned, then parent and then remaining children.</remarks>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.LeftMost">
	<summary>Left most node of current sub-tree</summary>
	<returns>The most left (first) leaf of current subtree (the <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.LeftMost"/> property of first item in <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/>) if has any nodes, itself otherwise</returns>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.RightMost">
	<summary>Right most node of current sub-tree</summary>
	<returns>The most right (last) leaf of current subtree (the <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.RightMost"/> property of first item in <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/>) if has any nodes, itself otherwise</returns>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.PreOrderNextRight(Tools.DataStructuresT.GenericT.Tree{`0})">
	<summary>Next node in forward pre-order order</summary>
	<param name="Root">Optional root of subtree being parsed</param>
	<returns>If node has sub-nodes returns first sub-node. Otherwise serches for right neighbour of the nearest parent as possible. Returns null if nothing found.</returns>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.PreOrderNextLeft(Tools.DataStructuresT.GenericT.Tree{`0})">
	<summary>Next node in backward pre-order order</summary>
	<param name="Root">Optional root of subtree being parsed</param>
	<returns>If node has sub-nodes returns last sub-node. Otherwise serches for left neighbour of the nearest parent as possible. Returns null if nothing found.</returns>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.Index">
	<summary>Index of current node in collection of nodes of <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/></summary>
	<returns>Index of the current node in collection of nodes of <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/> if has parent, -1 otherwise</returns>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.RightNeighbour">
	<summary>Next node in collection of nodes of <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/></summary>
	<returns>Next node if any or null</returns>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.LeftNeighbour">
	<summary>Previous node in collection of nodes of <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/></summary>
	<returns>Previous node if any or null</returns>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.InOrderNextChildIndex">
	<summary>Index of next child in forward in-order order (previous in backward in-order)</summary>
	<returns>Index of node or -1</returns>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.InOrderPrevChildIndex">
	<summary>Index of previous child in forward in-order order (next in backward in-order)</summary>
	<returns>Indexd of node or -1</returns>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.Right">
	<summary>Gets nearest node on the right (after) current node at same level of tree (not necessaryly under same parent)</summary>
	<remarks>Node on the same level as current node on the right or null if no node found</remarks>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.Left">
	<summary>Gets nearest node on the left (before) current node at same level of tree (not necessaryly under same parent)</summary>
	<remarks>Node on the same level as current node on the left or null if no node found</remarks>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.Contains(Tools.DataStructuresT.GenericT.Tree{`0})">
	<summary>Gets value indicating if current node contains given node</summary>
	<param name="Node">Node to be found</param>
	<returns>True if current node is <paramref name="Node"/> or <paramref name="Node"/> is sub-node of current node</returns>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.Contains(`0)">
	<summary>Gets value indicating if current node contains given value</summary>
	<param name="Value">Value to be found</param>
	<returns>True if <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Value"/> of current node or one of it'S subnodes returns true for the <see cref="M:System.Object.Equals(System.Object)"/> function.</returns>
	<remarks>If you want to get node that contains such value, use the <see cref="M:Tools.DataStructuresT.GenericT.Tree`1.Find(`0)"/> function</remarks>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.Find(`0)">
	<summary>Searches for given value in current tree</summary>
	<param name="Value">Value to be found</param>
	<returns>First node which's <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Value"/>'s <see cref="M:System.Object.Equals(System.Object)"/> returns true for <paramref name="Value"/></returns>
	<remarks>This function uses <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.PreOrder"/> enumerator.</remarks>
</member><member name="F:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator._Direction">
	<summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Direction"/> property</summary>
</member><member name="F:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator._Order">
	<summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Order"/> property</summary>
</member><member name="F:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator._Root">
	<summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Root"/> property</summary>
</member><member name="F:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Current">
	<summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.CurrentNode"/> property or null when the enumerator is before start or after end of the collection</summary>
</member><member name="F:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Before">
	<summary>If <see cref="F:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Current"/> is null distinguishes between position before start (True) and after end (False) of the collection</summary>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Direction">
	<summary>Direction of enumerating</summary>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Order">
	<summary>Order of enumerating</summary>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Root">
	<summary>The node that is root for this enumerator</summary>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.#ctor(Tools.DataStructuresT.GenericT.Tree{`0},Tools.DataStructuresT.GenericT.Tree.EnumOrders,Tools.DataStructuresT.GenericT.Tree.EnumDirections)">
	<summary>CTor</summary>
	<param name="Root">The node to start and end enumeration with</param>
	<param name="Order">Order of enumerating</param>
	<param name="Direction">Direction of enumerating</param>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.GetValueEnumerator">
	<summary>Returns an enumerator that iterates through the collection.</summary>
	<returns>If this enumerator was not initialized or disposed, returns itself. If it was returns clone of itself.</returns>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.GetNodeEnumerator">
	<summary>Returns an enumerator that iterates through the collection.</summary>
	<returns>If this enumerator was not initialized or disposed, returns itself. If it was returns clone of itself.</returns>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.GetEnumerator1">
	<summary>Returns an enumerator that iterates through a collection.</summary>
	<returns><see cref="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.GetValueEnumerator"/></returns>
	<remarks>Use type-safe <see cref="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.GetValueEnumerator"/> or <see cref="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.GetNodeEnumerator"/> instead</remarks>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.CurrentValue">
	<summary>Gets value of the node in the tree at the current position of the enumerator.</summary>
	<returns>Value of the node in the collection at the current position of the enumerator</returns>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.CurrentNode">
	<summary>Gets or sets current position of the enumerator</summary>
	<returns>The node in the collection at the current position of the enumerator</returns>
	<value>New position of the enumerator. New posotion must be in sub-tree of <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/> or can be null which has same efect as <see cref="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Reset"/></value>
	<exception cref="T:System.ArgumentException">Attempt to set postion otside of current tree</exception>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.CurrentNode1">
	<summary>Gets the node in the tree at the current position of the enumerator.</summary>
	<returns>The node in the collection at the current position of the enumerator</returns>
</member><member name="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.CurrentValue1">
	<summary>Returns <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.CurrentValue"/></summary>
	<remarks>Use type-safe <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.CurrentNode"/> and <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.CurrentValue"/> instead</remarks>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.MoveNext">
	<summary>Advances the enumerator to the next element of the collection.</summary>
	<returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Reset">
	<summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
</member><member name="F:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.disposedValue">
	<summary>To detect redundant calls</summary>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Dispose(System.Boolean)">
	<summary>IDisposable</summary>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Dispose">
	<summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
	<remarks>This code added by Visual Basic to correctly implement the disposable pattern.</remarks>
</member><member name="T:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator">
	<summary>Enumerates through <see cref="T:Tools.DataStructuresT.GenericT.Tree`1"/> (or its sub-tree) in given order</summary>
</member><member name="T:Tools.DataStructuresT.GenericT.Tree`1">
	<summary>Represents tree or sub-tree</summary>
</member><member name="M:Tools.DataStructuresT.GenericT.Tree.#ctor">
	<summary>This class cannot be instantiated</summary>
</member><member name="F:Tools.DataStructuresT.GenericT.Tree.EnumDirections.FirstToLast">
	<summary>Frřom frist to last (left to right)</summary>
</member><member name="F:Tools.DataStructuresT.GenericT.Tree.EnumDirections.LastToFirst">
	<summary>From last to first (right to left)</summary>
</member><member name="T:Tools.DataStructuresT.GenericT.Tree.EnumDirections">
	<summary>Directions of tree enumerationg</summary>
</member><member name="F:Tools.DataStructuresT.GenericT.Tree.EnumOrders.PreOrder">
	<summary>Pre-order: Me, then children</summary>
</member><member name="F:Tools.DataStructuresT.GenericT.Tree.EnumOrders.InOrder">
	<summary>In-order: Me between children. Good only for binary trees. Current node is enumerated after first half of children. In it has only one child the current node is enumerated second</summary>
</member><member name="F:Tools.DataStructuresT.GenericT.Tree.EnumOrders.PostOrder">
	<summary>Post-order: Children, then me</summary>
</member><member name="T:Tools.DataStructuresT.GenericT.Tree.EnumOrders">
	<summary>Tree enumeration orders</summary>
</member><member name="T:Tools.DataStructuresT.GenericT.Tree">
	<summary>Contains shared utilities for all trees</summary>
</member><member name="M:Tools.IOt.StreamTools.InsertInto(System.IO.Stream,System.Int32,System.Int32,System.Byte[],System.Int32)">
	<summary>Replaces given ammount of bytes in <see cref="T:System.IO.Stream"/> with another amount of bytes</summary>
	<param name="Stream">Stream to perform operation on. It must support seking, reading and writing</param>
	<param name="Position">Position where bytes to be replaced starts</param>
	<param name="BytesToReplace">Number of bytes currently in stream to be replaced (can be 0)</param>
	<param name="Data">Bytes to replace old bytes with</param>
	<param name="Chunk">when data are moved from one part of stream to another they are moved in chunks. This defines size of chunk in bytes. Befault is 1024.</param>
	<remarks>If <paramref name="Data"/>'s lenght does not match <paramref name="BytesToReplace"/> the stream is shortened or enlarged and data after replaced block are moved as necessary</remarks>
	<exception cref="T:System.IO.IOException">An IO error occurs</exception>
	<exception cref="T:System.ObjectDisposedException"><paramref name="Stream"/> is closed</exception>
	<exception cref="T:System.NotSupportedException">
		<paramref name="Stream"/> does not support seeking -or-
 <paramref name="Stream"/> does not support writing -or-
 <paramref name="Stream"/> does not suport reading
 </exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="Stream"/> is null -or- <paramref name="Data"/> is null</exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Position"/> is not within range &lt;0; <paramref name="Stream"/>.<see cref="P:System.IO.Stream.Length">Length</see>) -or- <paramref name="BytesToReplace"/> is not within range &lt;0; <paramref name="Stream"/>.<see cref="P:System.IO.Stream.Length">Lenght</see> - <paramref name="Position"/> - or- <paramref name="Chunk"/> is not positive</exception>
</member><member name="T:Tools.IOt.StreamTools">
	<summary>Tools related to IO <see cref="T:System.IO.Stream"/>s</summary>
</member><member name="E:Tools.IReportsChange.Changed">
	<summary>Raised when value of member changes</summary>
	<remarks><paramref name="e"/>Should contain additional information that can be used in event-handling code (e.g. use <see cref="T:Tools.IReportsChange.ValueChangedEventArgs`1"/> class)</remarks>
</member><member name="T:Tools.IReportsChange.ChangedEventHandler">
	<summary>Delegate for the <see cref="E:Tools.IReportsChange.Changed"/> event</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Event information</param>
</member><member name="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName">
	<summary>Name of changed value</summary>
</member><member name="F:Tools.IReportsChange.ValueChangedEventArgsBase._ValueName">
	<summary>Contains value of the<see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> property</summary>
</member><member name="M:Tools.IReportsChange.ValueChangedEventArgsBase.#ctor(System.String)">
	<summary>CTor</summary>
	<param name="ValueName">Value of the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> property</param>
</member><member name="T:Tools.IReportsChange.ValueChangedEventArgsBase">
	<summary>Represents common base for all <see cref="T:Tools.IReportsChange.ValueChangedEventArgs`1"/> generic's instances</summary>
</member><member name="F:Tools.IReportsChange.ValueChangedEventArgs`1._OldValue">
	<summary>Contains value of the<see cref="P:Tools.IReportsChange.ValueChangedEventArgs`1.OldValue"/> property</summary>
</member><member name="F:Tools.IReportsChange.ValueChangedEventArgs`1._NewValue">
	<summary>Contains value of the<see cref="P:Tools.IReportsChange.ValueChangedEventArgs`1.NewValue"/> property</summary>
</member><member name="M:Tools.IReportsChange.ValueChangedEventArgs`1.#ctor(`0,`0,System.String)">
	<summary>CTor</summary>
	<param name="OldValue">Value of item before change</param>
	<param name="NewValue">Value of item after change</param>
	<param name="ValueName">Name of changed value</param>
</member><member name="P:Tools.IReportsChange.ValueChangedEventArgs`1.OldValue">
	<summary>Value of item before change</summary>
</member><member name="P:Tools.IReportsChange.ValueChangedEventArgs`1.NewValue">
	<summary>Current value of item (after chenge)</summary>
</member><member name="T:Tools.IReportsChange.ValueChangedEventArgs`1">
	<summary>Represents information about change of value</summary>
	<typeparam name="T">Type of value contained in old and new value properties</typeparam>
</member><member name="T:Tools.IReportsChange">
	<summary>Represents data type that reports change of values of its members</summary>
</member><member name="T:Tools.WindowsT.FormsT.ComboWithStatus">
	<summary>Note: This control will be removed and replaced with attachable implementation of <see cref="T:Tools.WindowsT.FormsT.StatusMarker"/></summary>
</member><member name="F:Tools.CollectionsT.GenericT.UnionEnumerable`1.Enumerables">
	<summary><see cref="T:System.Collections.Generic.IEnumerable`1"/>s this instance seems to be <see cref="T:System.Collections.Generic.IEnumerable`1"/> of item of</summary>
</member><member name="M:Tools.CollectionsT.GenericT.UnionEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})">
	<summary>CTor</summary>
	<param name="Enumerables"><see cref="T:System.Collections.Generic.IEnumerable`1"/>s to be unionized</param>
</member><member name="M:Tools.CollectionsT.GenericT.UnionEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0}[])">
	<summary>CTor</summary>
	<param name="Enumerables"><see cref="T:System.Collections.Generic.IEnumerable`1"/>s to be unionized</param>
</member><member name="M:Tools.CollectionsT.GenericT.UnionEnumerable`1.GetEnumerator">
	<summary>Returns an enumerator that iterates through the collection.</summary>
	<returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
</member><member name="M:Tools.CollectionsT.GenericT.UnionEnumerable`1._GetEnumerator">
	<summary>Returns an enumerator that iterates through a collection.</summary>
	<returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
	<remarks>Use type-safe GetEnumerator instead</remarks>
</member><member name="T:Tools.CollectionsT.GenericT.UnionEnumerable`1">
	<summary>Performs union operations for <see cref="T:System.Collections.Generic.IEnumerable`1"/>s</summary>
	<typeparam name="T">Type of item</typeparam>
</member><member name="F:Tools.CollectionsT.GenericT.UnionEnumerator`1.Enumerators">
	<summary>Enumerators to unionize are enumerated through this enumerator</summary>
</member><member name="M:Tools.CollectionsT.GenericT.UnionEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0}[])">
	<summary>CTor from array of <see cref="T:System.Collections.Generic.IEnumerator`1"/></summary>
	<param name="Enumerators">Array of enumerators to union</param>
</member><member name="M:Tools.CollectionsT.GenericT.UnionEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerator{`0}})">
	<summary>CTor from any <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
	<param name="Enumerators">Enumerators to union</param>
</member><member name="M:Tools.CollectionsT.GenericT.UnionEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0}[])">
	<summary>CTor from array of <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
	<param name="Enumerables">Array of enumerables to get enumerators from and union them</param>
</member><member name="M:Tools.CollectionsT.GenericT.UnionEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})">
	<summary>CTor from any <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
	<param name="Enumerables">Enumerables to get enumerators from and union them</param>
</member><member name="P:Tools.CollectionsT.GenericT.UnionEnumerator`1.Current">
	<summary>Gets the element in the collection at the current position of the enumerator.</summary>
	<returns>The element in the collection at the current position of the enumerator.</returns>
	<exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.-or- The collection was modified after the enumerator was created.</exception>
</member><member name="P:Tools.CollectionsT.GenericT.UnionEnumerator`1._Current">
	<summary>Gets the current element in the collection.</summary>
	<returns>The current element in the collection.</returns>
	<exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.-or- The collection was modified after the enumerator was created.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.UnionEnumerator`1.MoveNext">
	<summary>Advances the enumerator to the next element of the collection.</summary>
	<returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
	<exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
</member><member name="M:Tools.CollectionsT.GenericT.UnionEnumerator`1.Reset">
	<summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
	<exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
</member><member name="F:Tools.CollectionsT.GenericT.UnionEnumerator`1.disposedValue">
	<summary>To detect redundant calls</summary>
</member><member name="M:Tools.CollectionsT.GenericT.UnionEnumerator`1.Dispose(System.Boolean)">
	<summary>This code added by Visual Basic to correctly implement the disposable pattern.</summary>
</member><member name="M:Tools.CollectionsT.GenericT.UnionEnumerator`1.Dispose">
	<summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
</member><member name="T:Tools.CollectionsT.GenericT.UnionEnumerator`1">
	<summary>Implements <see cref="T:System.Collections.Generic.IEnumerator`1"/> tha unifies more <see cref="T:System.Collections.Generic.IEnumerator`1"/>s</summary>
	<typeparam name="T">Type of item</typeparam>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
	<summary>Copies a range of elements from the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
	<param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
	<param name="count">The number of elements to copy.</param>
	<param name="arrayIndex">The zero-based index in array at which copying begins.</param>
	<param name="index">The zero-based index in the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> at which copying begins.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0. or <paramref name="arrayIndex"/> is less than 0 or <paramref name="count"/> is less than 0.</exception>
	<exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than the <see cref="P:Tools.CollectionsT.GenericT.IReadOnlyList`1.Count"/> of the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> or <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/> or The number of elements from <paramref name="index"/> to the end of the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <see cref="T:System.Array"/>.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.CopyTo(`0[])">
	<summary>Copies the entire <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> to a compatible one-dimensional array, starting at the beginning of the target array.</summary>
	<param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
	<exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> is greater than the number of elements that the destination array can contain.</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.CopyTo(`0[],System.Int32)">
	<summary>Copies the entire <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
	<param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
	<param name="arrayIndex">The zero-based index in array at which copying begins.</param>
	<exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of array or The number of elements in the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.ForEach(System.Action{`0})">
	<summary>Performs the specified action on each element of the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
	<param name="action">The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</param>
	<exception cref="T:System.ArgumentNullException">action is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.Contains(`0)">
	<summary>Determines whether an element is in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
	<returns>true if item is found in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The value can be null for reference types.</param>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.ConvertAll``1(System.Converter{`0,``0})">
	<summary>Converts the elements in the current <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> to another type, and returns a list containing the converted elements.</summary>
	<returns>A <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> of the target type containing the converted elements from the current <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</returns>
	<param name="converter">A <see cref="T:System.Converter`2"/> delegate that converts each element from one type to another type.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="converter"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.Exists(System.Predicate{`0})">
	<summary>Determines whether the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> contains elements that match the conditions defined by the specified predicate.</summary>
	<returns>true if the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to search for.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.Find(System.Predicate{`0})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
	<returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T.</returns>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.FindAll(System.Predicate{`0})">
	<summary>Retrieves the all the elements that match the conditions defined by the specified predicate.</summary>
	<returns>A <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</returns>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to search for.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that starts at the specified index and contains the specified number of elements.</summary>
	<returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, –1.</returns>
	<param name="count">The number of elements in the section to search.</param>
	<param name="startIndex">The zero-based starting index of the search.</param>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.-or-<paramref name="count"/> is less than 0.-or-<paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.FindIndex(System.Int32,System.Predicate{`0})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that extends from the specified index to the last element.</summary>
	<returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, –1.</returns>
	<param name="startIndex">The zero-based starting index of the search.</param>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.FindIndex(System.Predicate{`0})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
	<returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, –1.</returns>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.FindLast(System.Predicate{`0})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
	<returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <see cref="T"/>.</returns>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that contains the specified number of elements and ends at the specified index.</summary>
	<returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, –1.</returns>
	<param name="count">The number of elements in the section to search.</param>
	<param name="startIndex">The zero-based starting index of the backward search.</param>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.-or-count is less than 0.-or-startIndex and count do not specify a valid section in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that extends from the first element to the specified index.</summary>
	<returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
	<param name="startIndex">The zero-based starting index of the backward search.</param>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.FindLastIndex(System.Predicate{`0})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
	<returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.GetRange(System.Int32,System.Int32)">
	<summary>Creates a shallow copy of a range of elements in the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
	<returns>A shallow copy of a range of elements in the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</returns>
	<param name="count">The number of elements in the range.</param>
	<param name="index">The zero-based <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> index at which the range starts.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
	<exception cref="T:System.ArgumentException"><paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.IndexOf(`0)">
	<summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
	<returns>The zero-based index of the first occurrence of item within the entire <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>, if found; otherwise, –1.</returns>
	<param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The value can be null for reference types.</param>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.IndexOf(`0,System.Int32)">
	<summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that extends from the specified index to the last element.</summary>
	<returns>The zero-based index of the first occurrence of item within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that extends from <paramref name="index"/> to the last element, if found; otherwise, –1.</returns>
	<param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The value can be null for reference types.</param>
	<param name="index">The zero-based starting index of the search.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.IndexOf(`0,System.Int32,System.Int32)">
	<summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that starts at the specified index and contains the specified number of elements.</summary>
	<returns>The zero-based index of the first occurrence of item within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that starts at index and contains count number of elements, if found; otherwise, –1.</returns>
	<param name="count">The number of elements in the section to search.</param>
	<param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The value can be null for reference types.</param>
	<param name="index">The zero-based starting index of the search.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.-or-<paramref name="count"/> is less than 0.-or-<paramref name="index"/> and <paramref name="count"/> do not specify a valid section in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.LastIndexOf(`0)">
	<summary>Searches for the specified object and returns the zero-based index of the last occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
	<returns>The zero-based index of the last occurrence of item within the entire the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>, if found; otherwise, –1.</returns>
	<param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The value can be null for reference types.</param>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.LastIndexOf(`0,System.Int32)">
	<summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that extends from the first element to the specified index.</summary>
	<returns>The zero-based index of the last occurrence of item within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that extends from the first element to index, if found; otherwise, –1.</returns>
	<param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The value can be null for reference types.</param>
	<param name="index">The zero-based starting index of the backward search.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. </exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.LastIndexOf(`0,System.Int32,System.Int32)">
	<summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that contains the specified number of elements and ends at the specified index.</summary>
	<returns>The zero-based index of the last occurrence of item within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that contains count number of elements and ends at index, if found; otherwise, –1.</returns>
	<param name="count">The number of elements in the section to search.</param>
	<param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The value can be null for reference types.</param>
	<param name="index">The zero-based starting index of the backward search.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.-or-<paramref name="count"/> is less than 0.-or-<paramref name="index"/> and <paramref name="count"/> do not specify a valid section in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. </exception>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.ToArray">
	<summary>Copies the elements of the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> to a new array.</summary>
	<returns>An array containing copies of the elements of the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</returns>
</member><member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.TrueForAll(System.Predicate{`0})">
	<summary>Determines whether every element in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> matches the conditions defined by the specified predicate.</summary>
	<returns>true if every element in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions to check against the elements.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="P:Tools.CollectionsT.GenericT.IReadOnlyList`1.Count">
	<summary>Gets the number of elements actually contained in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
	<returns>The number of elements actually contained in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</returns>
</member><member name="P:Tools.CollectionsT.GenericT.IReadOnlyList`1.Item(System.Int32)">
	<summary>Gets or sets the element at the specified index.</summary>
	<returns>The element at the specified index.</returns>
	<param name="index">The zero-based index of the element to get or set.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.-or-<paramref name="index"/> is equal to or greater than <see cref="P:Tools.CollectionsT.GenericT.IReadOnlyList`1.Count"/>. </exception>
</member><member name="T:Tools.CollectionsT.GenericT.IReadOnlyList`1">
	<summary>Strongly typed read-only list that provides all applicable methods available in <see cref="T:System.Collections.Generic.List`1"/></summary>
	<typeparam name="T">Type of items in list</typeparam>
</member><member name="M:Tools.DrawingT.DesignT.NewEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.</summary>
	<returns><see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/></returns>
</member><member name="M:Tools.DrawingT.DesignT.NewEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
	<summary>Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
	<param name="value">The object to edit.</param>
	<param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
	<returns>New value of type of property  obtained either via <see cref="T:System.ComponentModel.DefaultValueAttribute"/> or via default CTor</returns>
</member><member name="F:Tools.DrawingT.DesignT.NewEditor.Context">
	<summary>The context parameter of <see cref="M:Tools.DrawingT.DesignT.NewEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> used by <see cref="M:Tools.DrawingT.DesignT.NewEditor.Lbl_Click(System.Object,System.EventArgs)"/></summary>
</member><member name="F:Tools.DrawingT.DesignT.NewEditor.Service">
	<summary>service obtained from provider parameter of <see cref="M:Tools.DrawingT.DesignT.NewEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> used by <see cref="M:Tools.DrawingT.DesignT.NewEditor.Lbl_Click(System.Object,System.EventArgs)"/></summary>
</member><member name="M:Tools.DrawingT.DesignT.NewEditor.Lbl_Click(System.Object,System.EventArgs)">
	<summary>Handles <see cref="E:System.Windows.Forms.Control.Click"/> event of label used to provide drop-down UI</summary>
	<param name="sender">The <see cref="T:System.Windows.Forms.Label"/></param>
	<param name="e">Event params</param>
</member><member name="T:Tools.DrawingT.DesignT.NewEditor">
	<summary><see cref="T:Tools.DrawingT.DesignT.UITypeEditor`1"/> capable of creating new instance either from <see cref="T:System.ComponentModel.DefaultValueAttribute"/> (preffered if available and <see cref="P:System.ComponentModel.DefaultValueAttribute.Value"/> is not null) or by parameterless CTor</summary>
	<remarks>
 The <see cref="T:System.ComponentModel.DefaultValueAttribute"/> used can be applyed either on property (preffered) or on type of the property.
 See also <seealso cref="T:System.ComponentModel.InstanceCreationEditor"/>.
 </remarks>
</member><member name="M:Tools.DrawingT.MetadataT.ExifIFDReader.#ctor(Tools.DrawingT.MetadataT.ExifReader,System.UInt32)">
	<summary>CTor</summary>
	<param name="Exif"><see cref="T:Tools.DrawingT.MetadataT.ExifReader"/> that contains this IFD</param>
	<param name="Offset">Offset of start of this IFD in <paramref name="Stream"/></param>
	<exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
	<exception cref="T:System.IO.EndOfStreamException">The end of the Exif stream is reached unexpectedly.</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Directory entry of unknown data type found</exception>
	<exception cref="T:System.IO.InvalidDataException">Tag data of some are placed otside the tag and cannot be read</exception>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader._Entries">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.ExifIFDReader.Entries"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader._NextIFD">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.ExifIFDReader.NextIFD"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.ExifIFDReader.NextIFD">
	<summary>Offset of following IFD (or 0 if this is last IFD)</summary>
</member><member name="P:Tools.DrawingT.MetadataT.ExifIFDReader.Entries">
	<summary>Entries in this IFD</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader._Offset">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.ExifIFDReader.Offest"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.ExifIFDReader.Offest">
	<summary>Offset of this IFD in Exif data block</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry._Tag">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.Tag"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry._Componets">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.Components"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry._DataIsStoredOutside">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.DataIsStoredOutside"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry._Data">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.Data"/> property</summary>
</member><member name="M:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.#ctor(System.UInt16,Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes,System.UInt32,System.Byte[],Tools.DrawingT.MetadataT.ExifReader)">
	<summary>CTor</summary>
	<param name="Tag">Tag identifier</param>
	<param name="Kind">Data type</param>
	<param name="Components">Number of components</param>
	<param name="Data">Data or offset to data</param>
	<param name="Exif"><see cref="T:Tools.DrawingT.MetadataT.ExifReader"/> to obtain data from when <paramref name="Data"/> doesn't contain data but offset to data</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Kind"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes"/></exception>
	<exception cref="T:System.IO.InvalidDataException">Tag data are placed otside the tag and cannot be read</exception>
</member><member name="M:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ReadData(Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes,System.Byte[],System.Int32,Tools.IOt.BinaryReader.ByteAling)">
	<summary>Reads data of specified type freom given <see cref="T:System.Array"/> of <see cref="T:System.Byte"/>s</summary>
	<param name="Type">Type of data to read</param>
	<param name="Align">Format in whicvh data are stored</param>
	<param name="Buffer">Buffer to read data from</param>
	<param name="Components">Number of components to be read</param>
	<returns>Data read from buffer. If <paramref name="Components"/> is 1 scalar of specified type is returned, <see cref="T:System.Array"/> otherwise with exceptions: 1 component of type <see cref="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes.ASCII"/> resuts to <see cref="T:System.Char"/>, more components results to <see cref="T:System.String"/>; <see cref="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes.NA"/> always results to <see cref="T:System.Array"/> of <see cref="T:System.Byte"/>s</returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Type"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes"/></exception>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes.Byte">
	<summary>Unsigned 1-byte integer (<see cref="T:System.Byte"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes.ASCII">
	<summary>ASCII string</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes.UInt16">
	<summary>Unsigned 2-bytes integer (<see cref="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes.UInt16"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes.UInt32">
	<summary>Unsigned 4-bytes integer (<see cref="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes.UInt32"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes.URational">
	<summary>Unsigned rational (2 4-bytes unsigned integers), first is numerator and second is deniminator</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes.SByte">
	<summary>Singned 1-byte integer (<see cref="T:System.SByte"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes.NA">
	<summary>Unknown data type</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes.Int16">
	<summary>Signed 2-bytes integer (<see cref="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes.Int16"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes.Int32">
	<summary>Signed 4-bytes integer (<see cref="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes.Int32"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes.SRational">
	<summary>Signed rational (2 4-bytes signed integers), first is numerator and second is deniminator</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes.Single">
	<summary>Single floating point number (<see cref="T:System.Single"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes.Double">
	<summary>Double floating point number (<see cref="T:System.Double"/>)</summary>
</member><member name="T:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes">
	<summary>Possible data types for Exif values</summary>
</member><member name="M:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.BytesPerComponent(Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes)">
	<summary>Gets number of bytes per component of specified Exif data type</summary>
	<param name="DataType">Data type to get number of bytes per component of</param>
	<returns>Number of bytes per one component of specified Exif data type</returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="DataType"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.Tag">
	<summary>Identifier of this directory entry (tag)</summary>
</member><member name="P:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.DataType">
	<summary>Kind of data stored in this directory entry</summary>
</member><member name="P:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.Components">
	<summary>Number of components of data stored in this directory entry</summary>
</member><member name="P:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.DataIsStoredOutside">
	<summary>Gets wheather data is store inside directory entry (true) or outside (false)</summary>
</member><member name="P:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.Data">
	<summary>Data of this directory entry</summary>
	<remarks>Actual data type of this property depends on <see cref="P:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.DataType"/></remarks>
</member><member name="T:Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry">
	<summary>Represents read-only directory entry of Exif data</summary>
</member><member name="T:Tools.DrawingT.MetadataT.ExifIFDReader">
	<summary>Provides low level access to stream containing exif IFD (Image File Directory) or SubIFD</summary>
</member><member name="M:Tools.ExtensionsT.Char.NumericValue(System.Char)">
	<summary>Converts the specified numeric Unicode character to a double-precision floating point number.</summary>
	<param name="c">A Unicode character.</param>
	<returns>The numeric value of c if that character represents a number; otherwise, -1.0.</returns>
	<seealso cref="M:System.Char.GetNumericValue(System.Char)"/>
</member><member name="M:Tools.ExtensionsT.Char.UnicodeCategory(System.Char)">
	<summary>Categorizes a specified Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory"/> values.</summary>
	<param name="c">A Unicode character.</param>
	<returns>A <see cref="T:System.Globalization.UnicodeCategory"/> value that identifies the group that contains c.</returns>
	<seealso cref="M:System.Char.GetUnicodeCategory(System.Char)"/>
</member><member name="M:Tools.ExtensionsT.Char.IsControl(System.Char)">
	<summary>Indicates whether the specified Unicode character is categorized as a control character.</summary>
	<param name="c">A Unicode character.</param>
	<returns>true if c is a control character; otherwise, false.</returns>
	<seealso cref="M:System.Char.IsControl(System.Char)"/>
	<seealso cref="M:System.Char.IsControl(System.Char)"/>
</member><member name="M:Tools.ExtensionsT.Char.IsDigit(System.Char)">
	<summary>Indicates whether the specified Unicode character is categorized as a decimal digit.</summary>
	<param name="c">A Unicode character.</param>
	<returns>true if c is a decimal digit; otherwise, false.</returns>
	<seealso cref="M:System.Char.IsDigit(System.Char)"/>
</member><member name="M:Tools.ExtensionsT.Char.IsHighSurrogate(System.Char)">
	<summary>Indicates whether the specified <see cref="T:System.Char"/> object is a high surrogate.</summary>
	<param name="c">A character.</param>
	<returns>true if the numeric value of the c parameter ranges from U+D800 through U+DBFF; otherwise, false.</returns>
	<seealso cref="M:System.Char.IsHighSurrogate(System.Char)"/>
</member><member name="M:Tools.ExtensionsT.Char.IsLetter(System.Char)">
	<summary>Indicates whether the specified Unicode character is categorized as an alphabetic letter.</summary>
	<param name="c">A Unicode character.</param>
	<returns>true if c is an alphabetic letter; otherwise, false.</returns>
	<seealso cref="M:System.Char.IsLetter(System.Char)"/>
</member><member name="M:Tools.ExtensionsT.Char.IsLetterOrDigit(System.Char)">
	<summary>Indicates whether the specified Unicode character is categorized as an alphabetic letter or a decimal digit.</summary>
	<param name="c">A Unicode character.</param>
	<returns>true if c is an alphabetic letter or a decimal digit; otherwise, false.</returns>
	<seealso cref="M:System.Char.IsLetterOrDigit(System.Char)"/>
</member><member name="M:Tools.ExtensionsT.Char.IsLower(System.Char)">
	<summary>Indicates whether the specified Unicode character is categorized as a lowercase letter.</summary>
	<param name="c">A Unicode character.</param>
	<returns>true if c is a lowercase letter; otherwise, false.</returns>
	<seealso cref="M:System.Char.IsLower(System.Char)"/>
</member><member name="M:Tools.ExtensionsT.Char.IsLowSurrogate(System.Char)">
	<summary>Indicates whether the specified <see cref="T:System.Char"/> object is a low surrogate.</summary>
	<param name="c">A character.</param>
	<returns>true if the numeric value of the c parameter ranges from U+DC00 through U+DFFF; otherwise, false.</returns>
	<seealso cref="M:System.Char.IsLowSurrogate(System.Char)"/>
</member><member name="M:Tools.ExtensionsT.Char.IsNumber(System.Char)">
	<summary>Indicates whether the specified Unicode character is categorized as a number.</summary>
	<param name="c">A Unicode character.</param>
	<returns>true if c is a number; otherwise, false.</returns>
	<seealso cref="M:System.Char.IsNumber(System.Char)"/>
</member><member name="M:Tools.ExtensionsT.Char.IsPunctuation(System.Char)">
	<summary>Indicates whether the specified Unicode character is categorized as a punctuation mark.</summary>
	<param name="c">A Unicode character.</param>
	<returns>true if c is a punctuation mark; otherwise, false.</returns>
	<seealso cref="M:System.Char.IsPunctuation(System.Char)"/>
</member><member name="M:Tools.ExtensionsT.Char.IsSeparator(System.Char)">
	<summary>Indicates whether the specified Unicode character is categorized as a separator character.</summary>
	<param name="c">A Unicode character.</param>
	<returns>true if c is a separator character; otherwise, false.</returns>
	<seealso cref="M:System.Char.IsSeparator(System.Char)"/>
</member><member name="M:Tools.ExtensionsT.Char.IsSurrogate(System.Char)">
	<summary>Indicates whether the specified Unicode character is categorized as a surrogate character.</summary>
	<param name="c">A Unicode character.</param>
	<returns>true if c is a surrogate character; otherwise, false.</returns>
	<seealso cref="M:System.Char.IsSurrogate(System.Char)"/>
</member><member name="M:Tools.ExtensionsT.Char.IsUpper(System.Char)">
	<summary>Indicates whether the specified Unicode character is categorized as an uppercase letter.</summary>
	<param name="c">A Unicode character.</param>
	<returns>true if c is an uppercase letter; otherwise, false.</returns>
	<seealso cref="M:System.Char.IsUpper(System.Char)"/>
</member><member name="M:Tools.ExtensionsT.Char.IsWhiteSpace(System.Char)">
	<summary>Indicates whether the specified Unicode character is categorized as white space.</summary>
	<param name="c">A Unicode character.</param>
	<returns>true if c is white space; otherwise, false.</returns>
	<seealso cref="M:System.Char.IsWhiteSpace(System.Char)"/>
</member><member name="M:Tools.ExtensionsT.Char.ToLower(System.Char)">
	<summary>Converts the value of a Unicode character to its lowercase equivalent.</summary>
	<param name="c">A Unicode character.</param>
	<returns>The lowercase equivalent of c, or the unchanged value of c, if c is already lowercase or not alphabetic.</returns>
	<seealso cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)"/>
</member><member name="M:Tools.ExtensionsT.Char.ToLower(System.Char,System.Globalization.CultureInfo)">
	<summary>Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-specific formatting information.</summary>
	<param name="c">A Unicode character.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object that supplies culture-specific casing rules, or null.</param>
	<returns>The lowercase equivalent of c, modified according to culture, or the unchanged value of c, if c is already lowercase or not alphabetic.</returns>
	<exception cref="T:System.ArgumentNullException">culture is null.</exception>
	<seealso cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)"/>
</member><member name="M:Tools.ExtensionsT.Char.ToLowerInvariant(System.Char)">
	<summary>Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.</summary>
	<param name="c">A Unicode character.</param>
	<returns>The lowercase equivalent of the c parameter, or the unchanged value of c, if c is already lowercase or not alphabetic.</returns>
	<seealso cref="M:System.Char.ToLowerInvariant(System.Char)"/>
</member><member name="M:Tools.ExtensionsT.Char.ToUpper(System.Char)">
	<summary>Converts the value of a Unicode character to its uppercase equivalent.</summary>
	<param name="c">A Unicode character.</param>
	<returns>The uppercase equivalent of c, or the unchanged value of c, if c is already uppercase or not alphabetic.</returns>
	<seealso cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)"/>
</member><member name="M:Tools.ExtensionsT.Char.ToUpper(System.Char,System.Globalization.CultureInfo)">
	<summary>Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-specific formatting information.</summary>
	<param name="c">A Unicode character.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object that supplies culture-specific casing rules, or null.</param>
	<returns>The uppercase equivalent of c, modified according to culture, or the unchanged value of c, if c is already uppercase or not alphabetic.</returns>
	<exception cref="T:System.ArgumentNullException">culture is null.</exception>
	<seealso cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)"/>
</member><member name="M:Tools.ExtensionsT.Char.ToUpperInvariant(System.Char)">
	<summary>Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.</summary>
	<param name="c">A Unicode character.</param>
	<returns>The uppercase equivalent of the c parameter, or the unchanged value of c, if c is already uppercase or not alphabetic.</returns>
	<seealso cref="M:System.Char.ToUpperInvariant(System.Char)"/>
</member><member name="T:Tools.ExtensionsT.Char">
	<summary>Contains extension methods for working with <see cref="T:System.Char"/></summary>
</member><member name="M:Tools.TypeTools.InEnum``1(``0)">
	<summary>Checks if specified value is member of an enumeration</summary>
	<param name="value">Value to be chcked</param>
	<returns>True if <paramref name="value"/> is member of <paramref name="T"/></returns>
	<typeparam name="T">Enumeration to be tested</typeparam>
	<exception cref="T:System.ArgumentException"><paramref name="T"/> is not <see cref="T:System.Enum"/></exception>
	<seelaso cref="M:Tools.TypeTools.IsDefined(System.Enum)"/>
</member><member name="M:Tools.TypeTools.GetConstant``1(``0)">
	<summary>Gets <see cref="T:System.Reflection.FieldInfo"/> that represent given constant within an enum</summary>
	<param name="value">Constant to be found</param>
	<returns><see cref="T:System.Reflection.FieldInfo"/> of given <paramref name="value"/> if <paramref name="value"/> is member of <paramref name="T"/></returns>
	<typeparam name="T"><see cref="T:System.Enum"/> to found constant within</typeparam>
	<exception cref="T:System.ArgumentException"><paramref name="T"/> is not <see cref="T:System.Enum"/></exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="value"/> is not member of <paramref name="T"/></exception>
</member><member name="M:Tools.TypeTools.GetAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
	<summary>Gets first <see cref="T:System.Attribute"/> of specified type from specified <see cref="T:System.Reflection.ICustomAttributeProvider"/></summary>
	<param name="From"><see cref="T:System.Reflection.ICustomAttributeProvider"/> to get <see cref="T:System.Attribute"/> from</param>
	<param name="Inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
	<returns>First attribute returned by <see cref="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)"/> or null if no attribute is returned</returns>
	<typeparam name="T">Type of <see cref="T:System.Attribute"/> to get</typeparam>
</member><member name="M:Tools.TypeTools.GetValueInEnumBaseType``1(System.IConvertible)">
	<summary>Converts specified value to underlying type of specified enumeration (type-safe)</summary>
	<param name="value"><see cref="T:System.IConvertible"/> to be converted using invariant culture</param>
	<typeparam name="T">Type of enumeration (must derive from <see cref="T:System.Enum"/>)</typeparam>
	<exception cref="T:System.ArgumentException"><paramref name="T"/> is not an <see cref="T:System.Enum"/> -or- Underlying type of <paramref name="Type"/> is neither <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/> nor <see cref="T:System.UInt64"/></exception>
</member><member name="M:Tools.TypeTools.GetValueInEnumBaseType(System.Type,System.IConvertible)">
	<summary>Converts specified value to underlying type of specified enumeration (type-unsafe)</summary>
	<param name="value"><see cref="T:System.IConvertible"/> to be converted using invariant culture</param>
	<param name="Type">Type of enumeration (must derive from <see cref="T:System.Enum"/>)</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null.</exception>
	<exception cref="T:System.ArgumentException"><paramref name="Type"/> is not an <see cref="T:System.Enum"/> -or- Underlying type of <paramref name="Type"/> is neither <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/> nor <see cref="T:System.UInt64"/></exception>
</member><member name="M:Tools.TypeTools.GetName(System.Enum)">
	<summary>Gets name of given enumeration value</summary>
	<param name="value">Value to get name of</param>
	<returns>Name of value in enumeration or null if there is no constant with given value</returns>
</member><member name="M:Tools.TypeTools.GetConstant(System.Enum)">
	<summary>Gets constant field that represents given enum value</summary>
	<param name="value">Value to get constant of</param>
	<returns><see cref="T:System.Reflection.FieldInfo"/> with constant value equal to <paramref name="value"/> or null if such field does not exist</returns>
</member><member name="M:Tools.TypeTools.GetConstant(System.String,System.Type)">
	<summary>Gets <see cref="T:System.Reflection.FieldInfo"/> representing constant of given name from an enumeration</summary>
	<param name="name">Name of constant to get</param>
	<param name="EnumType">Type of enumeration</param>
	<returns><see cref="T:System.Reflection.FieldInfo"/> that represents constant enum member of type <paramref name="EnumType"/> with name <paramref name="name"/>. Null if such constant doesnot exists.</returns>
	<exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration</exception>
</member><member name="M:Tools.TypeTools.GetConstant``1(System.String)">
	<summary>Gets <see cref="T:System.Reflection.FieldInfo"/> representing constant of given name from an enumeration</summary>
	<param name="name">Name of constant to get</param>
	<typeparam name="T">Type of enumeration</typeparam>
	<returns><see cref="T:System.Reflection.FieldInfo"/> that represents constant enum member of type <paramref name="EnumType"/> with name <paramref name="name"/>. Null if such constant doesnot exists.</returns>
	<exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not enumeration</exception>
</member><member name="M:Tools.TypeTools.GetValue(System.Enum)">
	<summary>Gets value of enum in its unedlying type</summary>
	<param name="value">Enumeration value</param>
	<returns>Value of enum in its underlying type (so it no longer derives from <see cref="T:System.Enum"/>)</returns>
</member><member name="M:Tools.TypeTools.GetValue(System.String,System.Type)">
	<summary>Gets value of enum member</summary>
	<param name="name">Name of enumeration memebr</param>
	<param name="EnumType">Type of enumeration</param>
	<exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration =or= Constant with name <paramref name="name"/> does not exist in enumeration <paramref name="EnumType"/>.</exception>
	<returns>Value of constant with name <paramref name="name"/> in type <paramref name="EnumType"/></returns>
</member><member name="M:Tools.TypeTools.GetValue``1(System.String)">
	<summary>Gets value of enum member</summary>
	<param name="name">Name of enumeration memebr</param>
	<typeparam name="T">Type of enumeration</typeparam>
	<exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not enumeration =or= Constant with name <paramref name="name"/> does not exist in enumeration <typeparamref name="T"/>.</exception>
	<returns>Value of constant with name <paramref name="name"/> in type <typeparamref name="T"/></returns>
</member><member name="M:Tools.TypeTools.GetEnumValue``1(System.IConvertible)">
	<summary>Converts specified <see cref="T:System.IConvertible"/> to specified <see cref="T:System.Enum"/> (type-safe)</summary>
	<param name="value"><see cref="T:System.IConvertible"/> to be converted using invariant culture</param>
	<typeparam name="T">Type of enumeration (must derive from <see cref="T:System.Enum"/>)</typeparam>
	<exception cref="T:System.ArgumentException"><paramref name="T"/> is not an <see cref="T:System.Enum"/> -or- Underlying type of <paramref name="Type"/> is neither <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/> nor <see cref="T:System.UInt64"/></exception>
</member><member name="M:Tools.TypeTools.GetEnumValue(System.Type,System.IConvertible)">
	<summary>Converts specified <see cref="T:System.IConvertible"/> to specified <see cref="T:System.Enum"/> (type-unsafe)</summary>
	<param name="value"><see cref="T:System.IConvertible"/> to be converted using invariant culture</param>
	<param name="Type">Type of enumeration (must derive from <see cref="T:System.Enum"/>)</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null.</exception>
	<exception cref="T:System.ArgumentException"><paramref name="Type"/> is not an <see cref="T:System.Enum"/> -or- Underlying type of <paramref name="Type"/> is neither <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/> nor <see cref="T:System.UInt64"/></exception>
</member><member name="M:Tools.TypeTools.IsDefined(System.Enum)">
	<summary>Gets value idicating if given value is defined as constant in enumeration</summary>
	<param name="value">Value to be checked. Value must be to type of enumeration to be checked in</param>
	<returns>True if <paramref name="value"/> is defined as constant in enumeration of type of <paramref name="value"/></returns>
	<remarks>Assembly Tools IL contains more type-safe generic extension function IsDefined. This is comanion function to <see cref="M:Tools.TypeTools.InEnum``1(``0)"/>.</remarks>
</member><member name="M:Tools.TypeTools.FlagsFromString(System.String,System.Type,System.String)">
	<summary>Converts set of flags separated by separator to value of given enumeration</summary>
	<param name="Flags">Flags to parse. Each flag can be name or number</param>
	<param name="EnumType">Type fo parse flags into</param>
	<param name="Separator">Separator of flags</param>
	<returns>Returns value of type <paramref name="EnumType"/></returns>
	<exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration =or= any flag cannot be found as member of <paramref name="EnumType"/></exception>
</member><member name="M:Tools.TypeTools.FlagsFromString(System.String,System.Type,System.Globalization.CultureInfo)">
	<summary>Converts set of flags separated by separator to value of given enumeration</summary>
	<param name="Flags">Flags to parse. Each flag can be name or number</param>
	<param name="EnumType">Type fo parse flags into</param>
	<param name="Culture">Culture to obtain separator from</param>
	<returns>Returns value of type <paramref name="EnumType"/></returns>
	<exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration =or= any flag cannot be found as member of <paramref name="EnumType"/></exception>
</member><member name="M:Tools.TypeTools.FlagsFromString(System.String,System.Type,System.Globalization.TextInfo)">
	<summary>Converts set of flags separated by separator to value of given enumeration</summary>
	<param name="Flags">Flags to parse. Each flag can be name or number</param>
	<param name="EnumType">Type fo parse flags into</param>
	<param name="TextInfo"><see cref="T:System.Globalization.TextInfo"/> to obtain separator from</param>
	<returns>Returns value of type <paramref name="EnumType"/></returns>
	<exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration =or= any flag cannot be found as member of <paramref name="EnumType"/></exception>
</member><member name="M:Tools.TypeTools.FlagsFromString(System.String,System.Type)">
	<summary>Converts set of flags separated by separator to value of given enumeration</summary>
	<param name="Flags">Flags to parse. Each flag can be name or number</param>
	<param name="EnumType">Type fo parse flags into</param>
	<returns>Returns value of type <paramref name="EnumType"/></returns>
	<exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration =or= any flag cannot be found as member of <paramref name="EnumType"/></exception>
	<remarks>Obtains separator from current culture</remarks>
</member><member name="M:Tools.TypeTools.FlagsFromString``1(System.String,System.String)">
	<summary>Converts set of flags separated by separator to value of given enumeration</summary>
	<param name="Flags">Flags to parse. Each flag can be name or number</param>
	<typeparam name="T">Type fo parse flags into</typeparam>
	<param name="Separator">Separator of flags</param>
	<returns>Returns value of type <paramref name="EnumType"/></returns>
	<exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not enumeration =or= any flag cannot be found as member of <paramref name="EnumType"/></exception>
</member><member name="M:Tools.TypeTools.FlagsFromString``1(System.String,System.Globalization.CultureInfo)">
	<summary>Converts set of flags separated by separator to value of given enumeration</summary>
	<param name="Flags">Flags to parse. Each flag can be name or number</param>
	<typeparam name="T">Type fo parse flags into</typeparam>
	<param name="Culture">Culture to obtain separator from</param>
	<returns>Returns value of type <paramref name="EnumType"/></returns>
	<exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not enumeration =or= any flag cannot be found as member of <paramref name="EnumType"/></exception>
</member><member name="M:Tools.TypeTools.FlagsFromString``1(System.String,System.Globalization.TextInfo)">
	<summary>Converts set of flags separated by separator to value of given enumeration</summary>
	<param name="Flags">Flags to parse. Each flag can be name or number</param>
	<typeparam name="T">Type fo parse flags into</typeparam>
	<param name="TextInfo"><see cref="T:System.Globalization.TextInfo"/> to obtain separator from</param>
	<returns>Returns value of type <paramref name="EnumType"/></returns>
	<exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not enumeration =or= any flag cannot be found as member of <paramref name="EnumType"/></exception>
</member><member name="M:Tools.TypeTools.FlagsFromString``1(System.String)">
	<summary>Converts set of flags separated by separator to value of given enumeration</summary>
	<param name="Flags">Flags to parse. Each flag can be name or number</param>
	<typeparam name="T">Type fo parse flags into</typeparam>
	<returns>Returns value of type <paramref name="EnumType"/></returns>
	<exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not enumeration =or= any flag cannot be found as member of <paramref name="EnumType"/></exception>
	<remarks>Obtains separator from current culture</remarks>
</member><member name="M:Tools.TypeTools.GetToolBoxBitmap(System.Type,System.Boolean,System.Boolean)">
	<summary>Gets toolbox bitmap assciated with given <see cref="T:System.Type"/></summary>
	<param name="Type">Type to get toolbox bitmap for</param>
	<param name="Large">True to obtain large bitmap (32×32), false to obtain small one (16×16))</param>
	<param name="Inherit">True to allow inheriting of toolbox bitmap from base type of <paramref name="Type"/></param>
	<returns>Bitmap assciated with <see cref="T:System.Type"/> if any</returns>
	<remarks>If <paramref name="Type"/> is decorated with <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> then it is used. If not static method <see cref="M:System.Drawing.ToolboxBitmapAttribute.GetImageFromResource(System.Type,System.String,System.Boolean)"/> is used with <see cref="P:System.Reflection.MemberInfo.Name"/> of <paramref name="Type"/>.</remarks>
	<exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
</member><member name="M:Tools.TypeTools.GetDefaltCTor(System.Type,System.Reflection.BindingFlags)">
	<summary>Gets default CTor for given type</summary>
	<param name="Type"><see cref="T:System.Type"/> to get default CTor for</param>
	<param name="Attributes">Optionaly specifies aaccesibility attributes for default constructor. Default is <see cref="F:System.Reflection.BindingFlags.Public"/>.</param>
	<returns><see cref="T:System.Reflection.ConstructorInfo"/> refresenting default CTor of type <paramref name="Type"/>. Null if there is no default (parameter-less) CTor</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
	<seealso cref="M:Tools.TypeTools.HasDefaultCTor(System.Type,System.Reflection.BindingFlags)"/>
</member><member name="M:Tools.TypeTools.HasDefaultCTor(System.Type,System.Reflection.BindingFlags)">
	<summary>Gets value indicationg if given <see cref="T:System.Type"/> has default constructor</summary>
	<param name="Type"><see cref="T:System.Type"/> to check</param>
	<param name="Attributes">Optionaly specifies aaccesibility attributes for default constructor. Default is <see cref="F:System.Reflection.BindingFlags.Public"/>.</param>
	<remarks>True if type has default (parameterless) CTor, fale otherwise.</remarks>
	<seealso cref="M:Tools.TypeTools.GetDefaltCTor(System.Type,System.Reflection.BindingFlags)"/>
	<exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
</member><member name="M:Tools.TypeTools.CanAutomaticallyCreateInstance(System.Type)">
	<summary>Gets value indicating if instance of geven type can be easily created using default CTor</summary>
	<param name="Type"><see cref="T:System.Type"/> to check</param>
	<returns>False if type is either interface, abstract or open; true if type has default contructor or is value type</returns>
	<seealso cref="M:Tools.TypeTools.HasDefaultCTor(System.Type,System.Reflection.BindingFlags)"/>
	<exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser.Assemblies">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.Objects"/> property</summary>
	<remarks>Can be any object</remarks>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser.Initializing">
	<summary>Is set to true when component is being constructed</summary>
	<remarks>It is used to stop some functionality during initialisation</remarks>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.#ctor">
	<summary>CTor</summary>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowInheritedMembers">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInheritedMembers"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInheritedMembers">
	<summary>Gets or sets value indicating if inherited members are shown</summary>
	<value>True to show inherited members, false to hide them</value>
	<returns>Value indicating if inherited members are shown</returns>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowFlatNamespaces">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowFlatNamespaces"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowFlatNamespaces">
	<summary>Gets or sets value indicating if namespaces are show flat or hierachically</summary>
	<value>True to show flat namespaces, false to show hierarchic namespaces</value>
	<returns>Value indicating if namespaces are shown flat or hierarchic</returns>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowNestedTypes">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowNestedTypes"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowNestedTypes">
	<summary>Gets or sets value indicating if nested types are shown</summary>
	<value>True to show nested types, false to hide them</value>
	<returns>Value indicating if nested types are shown</returns>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowPrivateMembers">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowPrivateMembers"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowPrivateMembers">
	<summary>Gets or sets value indicating if private members are shown</summary>
	<value>True to show private members, false to hide them</value>
	<returns>Value indicating if private members are shown</returns>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowInternalMembers">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInternalMembers"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInternalMembers">
	<summary>Gets or sets value indicating if internal members are shown</summary>
	<value>True to show internal members, false to hide them</value>
	<returns>Value indicating if internal members are shown</returns>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowProtectedMembers">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowProtectedMembers"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowProtectedMembers">
	<summary>Gets or sets value indicating if protected members are shown</summary>
	<value>True to show protected members, false to hide them</value>
	<returns>Value indicating if protected members are shown</returns>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowInstanceMembers">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInstanceMembers"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInstanceMembers">
	<summary>Gets or sets value indicating if instance members are shown</summary>
	<value>True to show instance members, false to hide them</value>
	<returns>Value indicating if instance members are shown</returns>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowStaticMembers">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowStaticMembers"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowStaticMembers">
	<summary>Gets or sets value indicating if static members are shown</summary>
	<value>True to show static members, false to hide them</value>
	<returns>Value indicating if static members are shown</returns>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowSpecialMembers">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowSpecialMembers"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowSpecialMembers">
	<summary>Gets or sets value indicating if special members (parts of properties and events) are shown</summary>
	<value>True to show special members, false to hide them</value>
	<returns>Value indicating if special members are shown</returns>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowGlobalMembers">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowGlobalMembers"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowGlobalMembers">
	<summary>Gets or sets value indicating if Global members (parts of properties and events) are shown</summary>
	<value>True to show Global members, false to hide them</value>
	<returns>Value indicating if Global members are shown</returns>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowProperties">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowProperties"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowProperties">
	<summary>Gets or sets value indicating if properties are shown</summary>
	<value>True to show properties  false to hide them</value>
	<returns>Value indicating if properties are shown</returns>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowEvents">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowEvents"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowEvents">
	<summary>Gets or sets value indicating if Events are shown</summary>
	<value>True to show Events  false to hide them</value>
	<returns>Value indicating if Events are shown</returns>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowMethods">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowMethods"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowMethods">
	<summary>Gets or sets value indicating if Methods are shown</summary>
	<value>True to show Methods  false to hide them</value>
	<returns>Value indicating if Methods are shown</returns>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowFields">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowFields"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowFields">
	<summary>Gets or sets value indicating if Fields are shown</summary>
	<value>True to show Fields  false to hide them</value>
	<returns>Value indicating if Fields are shown</returns>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowCTors">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowCTors"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowCTors">
	<summary>Gets or sets value indicating if CTors are shown</summary>
	<value>True to show CTors  false to hide them</value>
	<returns>Value indicating if CTors are shown</returns>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowInitializers">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInitializers"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInitializers">
	<summary>Gets or sets value indicating if Initializers are shown</summary>
	<value>True to show Initializers  false to hide them</value>
	<returns>Value indicating if Initializers are shown</returns>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowgenericArguments">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowGenericArguments"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowGenericArguments">
	<summary>Gets or sets value indicating if generic arguments (type parameters) are shown</summary>
	<value>True to show generic arguments  false to hide them</value>
	<returns>Value indicating if generic arguments are shown</returns>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowReferences">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowReferences"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowReferences">
	<summary>Gets or sets value indicating if references are shown</summary>
	<value>True to show references false to hide them</value>
	<returns>Value indicating if references are shown</returns>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowBaseTypes">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowBaseTypes"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowBaseTypes">
	<summary>Gets or sets value indicating if base types are shown</summary>
	<value>True to show base types  false to hide them</value>
	<returns>Value indicating if base types are shown</returns>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.OnShowChanged">
	<summary>Called after value of property that controls which members are displayed in <see cref="T:System.Windows.Forms.ListView"/> is changed.</summary>
	<remarks>Those properties are:
 <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowCTors"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowEvents"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowFields"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowGenericArguments"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowGlobalMembers"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInheritedMembers"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInitializers"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInstanceMembers"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowMethods"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInternalMembers"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowNestedTypes"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowPrivateMembers"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowProperties"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowProtectedMembers"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowSpecialMembers"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowStaticMembers"/>
	</remarks>
</member><member name="E:Tools.WindowsT.FormsT.ObjectBrowser.ShowChanged">
	<summary>Raised after property that controls which members are displayed in <see cref="T:System.Windows.Forms.ListView"/> was changed.</summary>
	<remarks>See <seealso cref="M:Tools.WindowsT.FormsT.ObjectBrowser.OnShowChanged"/> for list of properties that causes this event to be raised.</remarks>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.ActualizeNode(System.Windows.Forms.TreeNode)">
	<summary>Called recursivelly by <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.OnShowChanged"/> and itself in order to actualize content of each expanded node.</summary>
	<param name="Node">Node to actualize content of</param>
	<remarks>Note for inheritors: After actualizing content of this node, if there are any ünchanged nodes (that is your actualization logic is not delete all nodes and create them again) you should call this method on all the expanded nodes and replace content of all colapsed nodes by only tag-less node.</remarks>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowShowMenu">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowShowMenu"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowShowMenu">
	<summary>Gets or sets value indicating if the Show menu is shown</summary>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowToolbar">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowToolbar"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowToolbar">
	<summary>Gets or sets value indicating if the toolbar is shown</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.Objects">
	<summary>List of assemblies or any other objects listed at top-level of tree-view</summary>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.ShouldSerializeObjects">
	<summary>Gets value indicating if the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.Objects"/> property needs to be serialized</summary>
	<returns>True if the is any item in the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.Objects"/> property</returns>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.ResetObjects">
	<summary>Resets the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.Objects"/> property to it's initial state (empties it)</summary>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.GetNode(System.Object)">
	<summary>Converts any object to <see cref="T:System.Windows.Forms.TreeNode"/></summary>
	<param name="Obj">Object to convert</param>
	<returns><see cref="T:System.Windows.Forms.TreeNode"/> to represent <paramref name="Obj"/></returns>
	<remarks>Note to inheritors: Newly created node must have <paramref name="Obj"/> as its <see cref="P:System.Windows.Forms.TreeNode.Tag"/>. If you call any of <see cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/> methods that returns image with overlay the image is automatically added to <see cref="T:System.Windows.Forms.ImageList"/> used by <see cref="T:System.Windows.Forms.TreeView"/> and <see cref="T:System.Windows.Forms.ListView"/>. You can then set <see cref="P:System.Windows.Forms.TreeNode.ImageKey"/> and <see cref="P:System.Windows.Forms.TreeNode.SelectedImageKey"/> to key in form "{0:d}_{1:d}" (see <see cref="T:System.String"/>) where 0 is numeric representation of <see cref="T:Tools.ReflectionT.CodeImages.Objects"/> and 1 is numeric representation of <see cref="T:Tools.ReflectionT.CodeImages.ObjectModifiers"/>. This key is produced by the <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.Key(Tools.ReflectionT.CodeImages.Objects,Tools.ReflectionT.CodeImages.ObjectModifiers)"/> function. If you want the node to be expandable, but you do not want to fill items right now, place only item without <see cref="P:System.Windows.Forms.TreeNode.Tag"/> into it.</remarks>
	<exception cref="T:System.Exception">An error ocured during creating node (not thrown when <paramref name="Obj"/> is <see cref="T:System.Exception"/>). Note to inheritors: Do not throw any exception when <paramref name="Obj"/> is <see cref="T:System.Exception"/>!</exception>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.GetListItem(System.Object)">
	<summary>Converts any object to <see cref="T:System.Windows.Forms.ListViewItem"/></summary>
	<param name="obj">Object to converts</param>
	<returns><see cref="T:System.Windows.Forms.ListViewItem"/> repersenting <paramref name="obj"/></returns>
	<remarks>Note to inheritors: Newly created item must have <paramref name="Obj"/> as its <see cref="P:System.Windows.Forms.ListViewItem.Tag"/>. If you call any of <see cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/> methods that returns image with overlay the image is automatically added to <see cref="T:System.Windows.Forms.ImageList"/> used by <see cref="T:System.Windows.Forms.TreeView"/> and <see cref="T:System.Windows.Forms.ListView"/>. You can then set <see cref="P:System.Windows.Forms.TreeNode.ImageKey"/> and <see cref="P:System.Windows.Forms.TreeNode.SelectedImageKey"/> to key in form "{0:d}_{1:d}" (see <see cref="T:System.String"/>) where 0 is numeric representation of <see cref="T:Tools.ReflectionT.CodeImages.Objects"/> and 1 is numeric representation of <see cref="T:Tools.ReflectionT.CodeImages.ObjectModifiers"/>. This key is produced by the <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.Key(Tools.ReflectionT.CodeImages.Objects,Tools.ReflectionT.CodeImages.ObjectModifiers)"/> function. If you want the node to be expandable, but you do not want to fill items right now, place only item without <see cref="P:System.Windows.Forms.TreeNode.Tag"/> into it.</remarks>
	<exception cref="T:System.Exception">An error ocured during creating node (not thrown when <paramref name="Obj"/> is <see cref="T:System.Exception"/>). Note to inheritors: Do not throw any exception when <paramref name="Obj"/> is <see cref="T:System.Exception"/>!</exception>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser.LastRequestedKey">
	<summary>Holds key of image that was last passed to <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.ImageRequested(System.Drawing.Image,Tools.ReflectionT.CodeImages.Objects,Tools.ReflectionT.CodeImages.ObjectModifiers)"/></summary>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.ImageRequested(System.Drawing.Image,Tools.ReflectionT.CodeImages.Objects,Tools.ReflectionT.CodeImages.ObjectModifiers)">
	<summary>Handles the <see cref="E:Tools.ReflectionT.CodeImages.ImageRequested"/> event</summary>
	<param name="img">Image requaested</param>
	<param name="ObjectType">Type of object for that request</param>
	<param name="Modifiers">Object modifiers for that request</param>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.Key(Tools.ReflectionT.CodeImages.Objects,Tools.ReflectionT.CodeImages.ObjectModifiers)">
	<summary>Converts object type and modifiers to string key</summary>
	<param name="ObjectType">Type of object</param>
	<param name="Modifiers">Ky modifiers</param>
	<returns>String created using <see cref="T:System.String"/>("{0:d}_{1:d}", <paramref name="ObjectType"/>, <paramref name="Modifiers"/>)</returns>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.OnSelectedItemChanged(System.Windows.Forms.Control,System.Object,System.Object)">
	<summary>Called after selected item changes</summary>
	<param name="Control">Control the item is member of (can be either <see cref="T:System.Windows.Forms.TreeView"/> or <see cref="T:System.Windows.Forms.ListView"/>).</param>
	<param name="Item">Item itself (can be <see cref="T:System.Windows.Forms.TreeNode"/> or <see cref="T:System.Windows.Forms.ListViewItem"/>)</param>
	<param name="ItemTag">Tag of item - selected object</param>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._CurrentSelectedItem">
	<summary>Contains value oft teh <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.CurrentSelectedItem"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.CurrentSelectedItem">
	<summary>Contains item that is currently selected</summary>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.OnSelectedItemChangedInternal(System.Windows.Forms.Control,System.Object,System.Object)">
	<summary>Called after selected item changes or list-control changes. Reduse unnecesary calls of <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.OnSelectedItemChanged(System.Windows.Forms.Control,System.Object,System.Object)"/></summary>
	<param name="Control">Control the item is member of (can be either <see cref="T:System.Windows.Forms.TreeView"/> or <see cref="T:System.Windows.Forms.ListView"/>).</param>
	<param name="Item">Item itself (can be <see cref="T:System.Windows.Forms.TreeNode"/> or <see cref="T:System.Windows.Forms.ListViewItem"/>)</param>
	<param name="ItemTag">Tag of item - selected object</param>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.OnAfterSelect(System.Windows.Forms.TreeViewEventArgs)">
	<summary>selected node in <see cref="T:System.Windows.Forms.TreeView"/> changes</summary>
	<param name="e">Arguments of the <see cref="E:System.Windows.Forms.TreeView.AfterSelect"/> event</param>
	<remarks><see cref="T:System.Windows.Forms.ListView"/> is empty when this method is called</remarks>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.GetShortDesc(System.Object)">
	<summary>Assigns short description of object selected in <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.tvwObjects"/> to <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.rtbShort"/></summary>
	<param name="Obj">Object to get description of (it is <see cref="P:System.Windows.Forms.TreeNode.Tag"/> of selected <see cref="T:System.Windows.Forms.TreeNode"/>)</param>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.GetItems(System.Object)">
	<summary>Gets list of items to show in <see cref="T:System.Windows.Forms.ListView"/>. Called after node in <see cref="T:System.Windows.Forms.TreeView"/> is selected</summary>
	<param name="obj"><see cref="P:System.Windows.Forms.TreeNode.Tag"/> of selected <see cref="T:System.Windows.Forms.TreeNode"/></param>
	<returns>List of object to pas to <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.GetListItem(System.Object)"/> and show</returns>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.OnBeforeExpand(System.Windows.Forms.TreeViewCancelEventArgs)">
	<summary>en node which contain only one sub-node with empty <see cref="P:System.Windows.Forms.TreeNode.Tag">Tag</see> is about to be expanded.</summary>
	<param name="e">Arguments of <see cref="E:System.Windows.Forms.TreeView.BeforeExpand"/> event</param>
	<remarks><para>The empty sub-node is removed from current node before this method is called.</para>
		<para>The default implementation calls <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.GetChildren(System.Object)"/> and passes it's result to <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.GetNode(System.Object)"/> to obtain <see cref="T:System.Windows.Forms.TreeNode"/> which is added to node being expanded</para></remarks>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser.kpBaseTypes">
	<summary>Code for node representing all the base types</summary>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser.kpReferences">
	<summary>Code for node representing all the references</summary>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser.kpBaseType">
	<summary>Code for node representing single base type</summary>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser.kpReference">
	<summary>Code for node representing single referenced assembly</summary>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.GetChildren(System.Object)">
	<summary>This function is called by default implementation of <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.OnBeforeExpand(System.Windows.Forms.TreeViewCancelEventArgs)"/> to obtain childrens of node being expanded.</summary>
	<param name="obj"><see cref="P:System.Windows.Forms.TreeNode.Tag"/> of node being expanded</param>
	<returns>Object to pass to <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.GetNode(System.Object)"/> in order to obtain node to add to current node. Can be null.</returns>
	<remarks>Note to inheritors: Feel free to throw an exception from this function. Default implementation of <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.OnBeforeExpand(System.Windows.Forms.TreeViewCancelEventArgs)"/> catches it and adds exception to tree instead of list of items. Another possibility is to catch exception and add it to list being returned. This way allows you to denote exception but continue enumeration other children.</remarks>
	<exception cref="T:System.Exception">An error ocured while getting children</exception>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.ShouldShowMember(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>Gets value indicating if member with given accesibility and static/instance behavior should be shown</summary>
	<param name="Private">Member is private</param>
	<param name="Family">Member as family (protected)</param>
	<param name="Assembly">Member is assembly (internal, friend)</param>
	<param name="Public">Member is public</param>
	<param name="FamAndAssem">Member is family-and-assembyl</param>
	<param name="FamOrAssem">Member is family-or-assembyl (protected firend)</param>
	<param name="Static">member is static</param>
	<param name="SkipStaticTest"><paramref name="Static"/> will not be tested</param>
	<returns>True if member should be shown</returns>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
	<summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"/> event. Processes key events.</summary>
	<param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data. </param>
	<remarks>This implementation processes keyboard events for this control with <see cref="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreview"/> set to true. Processed keys are:
 <list type="table">
			<listheader><term>Key</term><description>Action</description></listheader>
			<item><term><see cref="F:System.Windows.Forms.Keys.BrowserBack">Browser back</see></term><description>Navigate backward, calls <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.OnNavigateBackward"/>. </description></item>
			<item><term><see cref="F:System.Windows.Forms.Keys.BrowserForward">Browser forward</see></term><description>Navigate forward, calls <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.OnNavigateForward"/>. </description></item>
		</list>
 If the event is processed <paramref name="e"/>.<see cref="P:System.Windows.Forms.KeyEventArgs.Handled">Handled</see> is set to true.
 </remarks>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.OnNavigateForward">
	<summary>Called whne forward navigation is requested. Performs navigation and raises the <see cref="F:Tools.WindowsT.FormsT.ObjectBrowser.NavigateForwardEvent"/></summary>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.OnNavigateBackward">
	<summary>Called whne backward navigation is requested. Performs navigation and raises the <see cref="F:Tools.WindowsT.FormsT.ObjectBrowser.NavigateBackwardEvent"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser._Navigating">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.Navigating"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.Navigating">
	<summary>Gets or sets value indicating if backward/forward navigation is pending</summary>
	<returns>Value indicating if backward/forward navigation is pending</returns>
	<value>True if backward/forward navigation is currently pending and navigation is not automatically tracked because of it</value>
	<remarks>If this property is set to true the <see cref="E:System.Windows.Forms.TreeView.BeforeSelect"/> event of <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.tvwObjects"/> does not track change of node</remarks>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser.ForwardStack">
	<summary>Stack of points for forward navigation</summary>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser.BackwardStack">
	<summary>Stack of points for backward navigation</summary>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint.op_Implicit(System.Windows.Forms.TreeNode)~Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint">
	<summary>Converts <see cref="T:System.Windows.Forms.TreeNode"/> to <see cref="T:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.TreeNode"/></param>
	<returns>INstance of <see cref="T:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint"/> populated with <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint._Tag">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint.Tag"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint.Tag">
	<summary>Tag can contain any additional information for navigation point</summary>
</member><member name="F:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint._Node">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint.Node"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint.Node">
	<summary><see cref="T:System.Windows.Forms.TreeNode"/> that is point of navigation</summary>
	<remarks>Node must be always set but more information can be provided in order to allow navigation whne the node was already removed form <see cref="T:System.Windows.Forms.TreeView"/></remarks>
</member><member name="M:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint.#ctor(System.Windows.Forms.TreeNode)">
	<summary>CTor from <see cref="T:System.Windows.Forms.TreeNode"/></summary>
	<paramref name="Node">Node this navigation point points to. It cannot be null.</paramref>
	<exception cref="T:System.ArgumentNullException"><paramref name="Node"/> is null</exception>
</member><member name="T:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint">
	<summary>Represents point for forward/backward navigation</summary>
</member><member name="E:Tools.WindowsT.FormsT.ObjectBrowser.NavigateForward">
	<summary>Raised after forward navigation ocured</summary>
	<param name="e"><see cref="F:System.EventArgs.Empty"/></param>
</member><member name="E:Tools.WindowsT.FormsT.ObjectBrowser.NavigateBackward">
	<summary>raised after backward navigation ocured</summary>
	<param name="e"><see cref="F:System.EventArgs.Empty"/></param>
</member><member name="T:Tools.WindowsT.FormsT.ObjectBrowser">
	<summary>Control for browsing .NET assemblies</summary>
</member><member name="M:Tools.ResourcesT.SystemResources.#ctor">
	<summary>CTor</summary>
	<remarks>In order not to be possible to create instance</remarks>
</member><member name="P:Tools.ResourcesT.SystemResources.SRType">
	<summary>Gets <see cref="T:System.Type"/> that represents <see cref="T:System.SR"/> class</summary>
</member><member name="P:Tools.ResourcesT.SystemResources.KeyNames">
	<summary>Gets names of all constants in <see cref="T:System.SR"/> class</summary>
	<returns>Array that contains name of all public and private constants in <see cref="T:Syste.SR"/></returns>
</member><member name="P:Tools.ResourcesT.SystemResources.Key(System.String)">
	<summary>Get value of specified field</summary>
	<param name="Name">Name of constant defined in <see cref="T:System.SR"/>. All possible names are returned by the <see cref="P:Tools.ResourcesT.SystemResources.KeyNames"/> property</param>
	<exception cref="T:System.NullReferenceException">Field with name <paramref name="Name"/> is not accessible</exception>
</member><member name="P:Tools.ResourcesT.SystemResources.Value(Tools.ResourcesT.SystemResources.KnownValues)">
	<summary>Gets string value of system resource</summary>
	<returns>Value of given system resource or null when resource is not available.</returns>
	<param name="Key">Key of resource. Possible keys are retruned by the <see cref="P:Tools.ResourcesT.SystemResources.Key(System.String)"/> property</param>
</member><member name="P:Tools.ResourcesT.SystemResources.Value(System.String)">
	<summary>Gets string value of system resource</summary>
	<returns>Value of given system resource or null when resource is not available.</returns>
	<param name="Key">Key of resource. Possible keys are retruned by the <see cref="P:Tools.ResourcesT.SystemResources.Key(System.String)"/> property</param>
	<exception cref="T:System.Reflection.TargetInvocationException">Unknown unexpected error when obtaining resource value</exception>
</member><member name="P:Tools.ResourcesT.SystemResources.ObjValue(System.String)">
	<summary>Gets object value of system resource</summary>
	<returns>Value of given system resource or null when resource is not available.</returns>
	<param name="Key">Key of resource. Possible keys are retruned by the <see cref="P:Tools.ResourcesT.SystemResources.Key(System.String)"/> property</param>
	<exception cref="T:System.Reflection.TargetInvocationException">Unknown unexpected error when obtaining resource value</exception>
</member><member name="P:Tools.ResourcesT.SystemResources.Value(System.String,System.Object[])">
	<summary>Gets formated string value of system resource</summary>
	<param name="Key">Key of resource. Possible keys are retruned by the <see cref="P:Tools.ResourcesT.SystemResources.Key(System.String)"/> property</param>
	<param name="args">Formating arguments</param>
	<returns>Formated value of given system resource or null when resource is not available.</returns>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Value">
	<summary>Key value</summary>
</member><member name="M:Tools.ResourcesT.SystemResources.KnownValues.op_Implicit(Tools.ResourcesT.SystemResources.KnownValues)~System.String">
	<summary>Allows use of <see cref="T:Tools.ResourcesT.SystemResources.KnownValues"/> class as <see cref="T:System.String"/> by converting it to <see cref="T:System.String"/></summary>
	<param name="a">A <see cref="T:Tools.ResourcesT.SystemResources.KnownValues"/> instance to convert</param>
	<returns>Key value contained in <paramref name="a"/></returns>
</member><member name="M:Tools.ResourcesT.SystemResources.KnownValues.op_Implicit(System.String)~Tools.ResourcesT.SystemResources.KnownValues">
	<summary>Allows passings strings where <see cref="T:Tools.ResourcesT.SystemResources.KnownValues"/> is expected</summary>
	<param name="a"><see cref="T:System.String"/> to be converted</param>
	<returns>Instance of <see cref="T:Tools.ResourcesT.SystemResources.KnownValues"/> that contains <paramref name="a"/></returns>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.RTL">
	<summary>Key for resource getting something like "RTL_False"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.DebugLaunchFailed">
	<summary>Key for resource getting something like "Cannot launch the debugger.  Make sure that a Microsoft (R) .NET Framework debugger is properly installed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.DebugLaunchFailedTitle">
	<summary>Key for resource getting something like "Microsoft .NET Framework Debug Launch Failure"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.DebugAssertTitle">
	<summary>Key for resource getting something like "Assertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.DebugAssertBanner">
	<summary>Key for resource getting something like "---- DEBUG ASSERTION FAILED ----"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.DebugAssertShortMessage">
	<summary>Key for resource getting something like "---- Assert Short Message ----"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.DebugAssertLongMessage">
	<summary>Key for resource getting something like "---- Assert Long Message ----"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.DebugMessageTruncated">
	<summary>Key for resource getting something like "{0}...
&lt;truncated&gt;"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ObjectDisposed">
	<summary>Key for resource getting something like "Object {0} has been disposed and can no longer be used."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported">
	<summary>Key for resource getting something like "This operation is not supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ExceptionOccurred">
	<summary>Key for resource getting something like "An exception occurred writing trace output to log file '{0}'. {1}"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MustAddListener">
	<summary>Key for resource getting something like "Only TraceListeners can be added to a TraceListenerCollection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ToStringNull">
	<summary>Key for resource getting something like "(null)"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.EnumConverterInvalidValue">
	<summary>Key for resource getting something like "The value '{0}' is not a valid value for the enum '{1}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ConvertFromException">
	<summary>Key for resource getting something like "{0} cannot convert from {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ConvertToException">
	<summary>Key for resource getting something like "'{0}' is unable to convert '{1}' to '{2}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ConvertInvalidPrimitive">
	<summary>Key for resource getting something like "{0} is not a valid value for {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorMissingPropertyAccessors">
	<summary>Key for resource getting something like "Accessor methods for the {0} property are missing."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorInvalidPropertyType">
	<summary>Key for resource getting something like "Invalid type for the {0} property."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorMissingEventAccessors">
	<summary>Key for resource getting something like "Accessor methods for the {0} event are missing."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorInvalidEventHandler">
	<summary>Key for resource getting something like "Invalid event handler for the {0} event."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorInvalidEventType">
	<summary>Key for resource getting something like "Invalid type for the {0} event."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidMemberName">
	<summary>Key for resource getting something like "Invalid member name."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorBadExtenderType">
	<summary>Key for resource getting something like "The {0} extender provider is not compatible with the {1} type."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NullableConverterBadCtorArg">
	<summary>Key for resource getting something like "The specified type is not a nullable type."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TypeDescriptorExpectedElementType">
	<summary>Key for resource getting something like "Expected types in the collection to be of type {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TypeDescriptorSameAssociation">
	<summary>Key for resource getting something like "Cannot create an association when the primary and secondary objects are the same."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TypeDescriptorAlreadyAssociated">
	<summary>Key for resource getting something like "The primary and secondary objects are already associated with each other."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TypeDescriptorProviderError">
	<summary>Key for resource getting something like "The type description provider {0} has returned null from {1} which is illegal."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TypeDescriptorUnsupportedRemoteObject">
	<summary>Key for resource getting something like "The object {0} is being remoted by a proxy that does not support interface discovery.  This type of remoted object is not supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TypeDescriptorArgsCountMismatch">
	<summary>Key for resource getting something like "The number of elements in the Type and Object arrays must match."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorCreateSystemEvents">
	<summary>Key for resource getting something like "Failed to create system events window thread."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorCreateTimer">
	<summary>Key for resource getting something like "Cannot create timer."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorKillTimer">
	<summary>Key for resource getting something like "Cannot end timer."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorSystemEventsNotSupported">
	<summary>Key for resource getting something like "System event notifications are not supported under the current context. Server processes, for example, may not support global system event notifications."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorGetTempPath">
	<summary>Key for resource getting something like "Cannot get temporary file name"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CHECKOUTCanceled">
	<summary>Key for resource getting something like "The checkout was canceled by the user."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorInvalidServiceInstance">
	<summary>Key for resource getting something like "The service instance must derive from or implement {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorServiceExists">
	<summary>Key for resource getting something like "The service {0} already exists in the service container."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentNull_Key">
	<summary>Key for resource getting something like "Key cannot be null."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_AddingDuplicate">
	<summary>Key for resource getting something like "An entry with the same key already exists."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_InvalidValue">
	<summary>Key for resource getting something like "Argument {0} should be larger than {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_NeedNonNegNum">
	<summary>Key for resource getting something like "Index is less than zero."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_InvalidThreshold">
	<summary>Key for resource getting something like "The specified threshold for creating dictionary is out of range."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_EnumFailedVersion">
	<summary>Key for resource getting something like "Collection was modified after the enumerator was instantiated."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_EnumOpCantHappen">
	<summary>Key for resource getting something like "Enumerator is positioned before the first element or after the last element of the collection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_MultiRank">
	<summary>Key for resource getting something like "Multi dimension array is not supported on this operation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_NonZeroLowerBound">
	<summary>Key for resource getting something like "The lower bound of target array must be zero."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_InsufficientSpace">
	<summary>Key for resource getting something like "Insufficient space in the target location to copy the information."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_EnumeratorReset">
	<summary>Key for resource getting something like "Reset is not supported on the Enumerator."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Invalid_Array_Type">
	<summary>Key for resource getting something like "Target array type is not compatible with the type of items in the collection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Serialization_InvalidOnDeser">
	<summary>Key for resource getting something like "OnDeserialization method was called while the object was not being deserialized."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Serialization_MissingValues">
	<summary>Key for resource getting something like "The values for this collection are missing."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Serialization_MismatchedCount">
	<summary>Key for resource getting something like "The serialized Count information doesn't match the number of items."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ExternalLinkedListNode">
	<summary>Key for resource getting something like "The LinkedList node does not belong to current LinkedList."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LinkedListNodeIsAttached">
	<summary>Key for resource getting something like "The LinkedList node belongs a LinkedList."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LinkedListEmpty">
	<summary>Key for resource getting something like "The LinkedList is empty."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_WrongType">
	<summary>Key for resource getting something like "The value "{0}" isn't of type "{1}" and can't be used in this generic collection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_ItemNotExist">
	<summary>Key for resource getting something like "The specified item does not exist in this KeyedCollection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_ImplementIComparable">
	<summary>Key for resource getting something like "At least one object must implement IComparable."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_EmptyCollection">
	<summary>Key for resource getting something like "This operation is not valid on an empty collection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_EmptyQueue">
	<summary>Key for resource getting something like "Queue empty."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_EmptyStack">
	<summary>Key for resource getting something like "Stack empty."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_CannotRemoveFromStackOrQueue">
	<summary>Key for resource getting something like "Removal is an invalid operation for Stack or Queue."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_Index">
	<summary>Key for resource getting something like "Index was out of range. Must be non-negative and less than the size of the collection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_SmallCapacity">
	<summary>Key for resource getting something like "capacity was less than the current size."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_ArrayPlusOffTooSmall">
	<summary>Key for resource getting something like "Destination array is not long enough to copy all the items in the collection. Check array index and length."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_KeyCollectionSet">
	<summary>Key for resource getting something like "Mutating a key collection derived from a dictionary is not allowed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_ValueCollectionSet">
	<summary>Key for resource getting something like "Mutating a value collection derived from a dictionary is not allowed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_ReadOnlyCollection">
	<summary>Key for resource getting something like "Collection is read-only."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_SortedListNestedWrite">
	<summary>Key for resource getting something like "This operation is not supported on SortedList nested types because they require modifying the original SortedList."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantModifyListSortDescriptionCollection">
	<summary>Key for resource getting something like "Once a ListSortDescriptionCollection has been created it can't be modified."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidPrimitiveType">
	<summary>Key for resource getting something like "Invalid Primitive Type: {0}. Consider using CodeObjectCreateExpression."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CodeGenOutputWriter">
	<summary>Key for resource getting something like "The output writer for code generation and the writer supplied don't match and cannot be used. This is generally caused by a bad implementation of a CodeGenerator derived class."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CodeGenReentrance">
	<summary>Key for resource getting something like "This code generation API cannot be called while the generator is being used to generate something else."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidLanguageIdentifier">
	<summary>Key for resource getting something like "The identifier:"{0}" on the property:"{1}" of type:"{2}" is not a valid language-independent identifier name. Check to see if CodeGenerator.IsValidLanguageIndependentIdentifier allows the identifier name."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidTypeName">
	<summary>Key for resource getting something like "The type name:"{0}" on the property:"{1}" of type:"{2}" is not a valid language-independent type name."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Empty_attribute">
	<summary>Key for resource getting something like "The '{0}' attribute cannot be an empty string."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Invalid_nonnegative_integer_attribute">
	<summary>Key for resource getting something like "The '{0}' attribute must be a non-negative integer."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CodeDomProvider_NotDefined">
	<summary>Key for resource getting something like "There is no CodeDom provider defined for the language."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Language_Names_Cannot_Be_Empty">
	<summary>Key for resource getting something like "You need to specify a non-empty String for a language name in the CodeDom configuration section."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Extension_Names_Cannot_Be_Empty_Or_Non_Period_Based">
	<summary>Key for resource getting something like "An extension name in the CodeDom configuration section must be a non-empty string which starts with a period."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Unable_To_Locate_Type">
	<summary>Key for resource getting something like "The CodeDom provider type "{0}" could not be located."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_CodeDomAPI">
	<summary>Key for resource getting something like "This CodeDomProvider does not support this method."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArityDoesntMatch">
	<summary>Key for resource getting something like "The total arity specified in '{0}' does not match the number of TypeArguments supplied.  There were '{1}' TypeArguments supplied. "</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PartialTrustErrorTextReplacement">
	<summary>Key for resource getting something like "&lt;The original value of this property potentially contains file system information and has been suppressed.&gt;"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PartialTrustIllegalProvider">
	<summary>Key for resource getting something like "When used in partial trust, langID must be C#, VB, J#, or JScript, and the language provider must be in the global assembly cache."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.IllegalAssemblyReference">
	<summary>Key for resource getting something like "Assembly references cannot begin with '-', or contain a '/' or '\'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.AutoGen_Comment_Line1">
	<summary>Key for resource getting something like "auto-generated&gt;"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.AutoGen_Comment_Line2">
	<summary>Key for resource getting something like "This code was generated by a tool."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.AutoGen_Comment_Line3">
	<summary>Key for resource getting something like "Runtime Version:"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.AutoGen_Comment_Line4">
	<summary>Key for resource getting something like "Changes to this file may cause incorrect behavior and will be lost if"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.AutoGen_Comment_Line5">
	<summary>Key for resource getting something like "the code is regenerated."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantContainNullEntries">
	<summary>Key for resource getting something like "Array '{0}' cannot contain null entries."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidPathCharsInChecksum">
	<summary>Key for resource getting something like "The CodeChecksumPragma file name '{0}' contains invalid path characters. "</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidRegion">
	<summary>Key for resource getting something like "The region directive '{0}' contains invalid characters.  RegionText cannot contain any new line characters. "</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MetaExtenderName">
	<summary>Key for resource getting something like "{0} on {1}"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidEnumArgument">
	<summary>Key for resource getting something like "The value of argument '{0}' ({1}) is invalid for Enum type '{2}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidArgument">
	<summary>Key for resource getting something like "'{1}' is not a valid value for '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidNullArgument">
	<summary>Key for resource getting something like "Null is not a valid value for {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidNullEmptyArgument">
	<summary>Key for resource getting something like "Argument {0} cannot be null or zero-length."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LicExceptionTypeOnly">
	<summary>Key for resource getting something like "A valid license cannot be granted for the type {0}. Contact the manufacturer of the component for more information."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LicExceptionTypeAndInstance">
	<summary>Key for resource getting something like "An instance of type '{1}' was being created, and a valid license could not be granted for the type '{0}'. Please,  contact the manufacturer of the component for more information."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LicMgrContextCannotBeChanged">
	<summary>Key for resource getting something like "The CurrentContext property of the LicenseManager is currently locked and cannot be changed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LicMgrAlreadyLocked">
	<summary>Key for resource getting something like "The CurrentContext property of the LicenseManager is already locked by another user."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LicMgrDifferentUser">
	<summary>Key for resource getting something like "The CurrentContext property of the LicenseManager can only be unlocked with the same contextUser."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidElementType">
	<summary>Key for resource getting something like "Element type {0} is not supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidIdentifier">
	<summary>Key for resource getting something like "Identifier '{0}' is not valid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ExecFailedToCreate">
	<summary>Key for resource getting something like "Failed to create file {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ExecTimeout">
	<summary>Key for resource getting something like "Timed out waiting for a program to execute. The command being executed was {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ExecBadreturn">
	<summary>Key for resource getting something like "An invalid return code was encountered waiting for a program to execute. The command being executed was {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ExecCantGetRetCode">
	<summary>Key for resource getting something like "Unable to get the return code for a program being executed. The command that was being executed was '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ExecCantExec">
	<summary>Key for resource getting something like "Cannot execute a program. The command being executed was {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ExecCantRevert">
	<summary>Key for resource getting something like "Cannot execute a program. Impersonation failed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CompilerNotFound">
	<summary>Key for resource getting something like "Compiler executable file {0} cannot be found."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.DuplicateFileName">
	<summary>Key for resource getting something like "The file name '{0}' was already in the collection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CollectionReadOnly">
	<summary>Key for resource getting something like "Collection is read-only."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BitVectorFull">
	<summary>Key for resource getting something like "Bit vector is full."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ISupportInitializeDescr">
	<summary>Key for resource getting something like "Specifies support for transacted initialization. "</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArrayConverterText">
	<summary>Key for resource getting something like "{0} Array"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CollectionConverterText">
	<summary>Key for resource getting something like "(Collection)"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MultilineStringConverterText">
	<summary>Key for resource getting something like "(Text)"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CultureInfoConverterDefaultCultureString">
	<summary>Key for resource getting something like "(Default)"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CultureInfoConverterInvalidCulture">
	<summary>Key for resource getting something like "The {0} culture cannot be converted to a CultureInfo object on this computer."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidPrimitive">
	<summary>Key for resource getting something like "The text {0} is not a valid {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TimerInvalidInterval">
	<summary>Key for resource getting something like "'{0}' is not a valid value for 'Interval'. 'Interval' must be greater than {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TraceSwitchLevelTooHigh">
	<summary>Key for resource getting something like "Attempted to set {0} to a value that is too high.  Setting level to TraceLevel.Verbose"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TraceSwitchLevelTooLow">
	<summary>Key for resource getting something like "Attempted to set {0} to a value that is too low.  Setting level to TraceLevel.Off"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TraceSwitchInvalidLevel">
	<summary>Key for resource getting something like "The Level must be set to a value in the enumeration TraceLevel."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TraceListenerIndentSize">
	<summary>Key for resource getting something like "The IndentSize property must be non-negative."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TraceListenerFail">
	<summary>Key for resource getting something like "Fail:"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TraceAsTraceSource">
	<summary>Key for resource getting something like "Trace"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidLowBoundArgument">
	<summary>Key for resource getting something like "'{1}' is not a valid value for '{0}'. '{0}' must be greater than {2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.DuplicateComponentName">
	<summary>Key for resource getting something like "Duplicate component name '{0}'.  Component names must be unique and case-insensitive."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotImplemented">
	<summary>Key for resource getting something like "{0}: Not implemented"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.OutOfMemory">
	<summary>Key for resource getting something like "Could not allocate needed memory."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.EOF">
	<summary>Key for resource getting something like "End of data stream encountered."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.IOError">
	<summary>Key for resource getting something like "Unknown input/output failure."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BadChar">
	<summary>Key for resource getting something like "Unexpected Character: '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.toStringNone">
	<summary>Key for resource getting something like "(none)"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.toStringUnknown">
	<summary>Key for resource getting something like "(unknown)"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidEnum">
	<summary>Key for resource getting something like "{0} is not a valid {1} value."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.IndexOutOfRange">
	<summary>Key for resource getting something like "Index {0} is out of range."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorPropertyAccessorException">
	<summary>Key for resource getting something like "Property accessor '{0}' on object '{1}' threw the following exception:'{2}'"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation">
	<summary>Key for resource getting something like "Invalid operation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.EmptyStack">
	<summary>Key for resource getting something like "Stack has no items in it."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PerformanceCounterDesc">
	<summary>Key for resource getting something like "Represents a Windows performance counter component."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PCCategoryName">
	<summary>Key for resource getting something like "Category name of the performance counter object."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PCCounterName">
	<summary>Key for resource getting something like "Counter name of the performance counter object."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PCInstanceName">
	<summary>Key for resource getting something like "Instance name of the performance counter object."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PCMachineName">
	<summary>Key for resource getting something like "Specifies the machine from where to read the performance data."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PCInstanceLifetime">
	<summary>Key for resource getting something like "Specifies the lifetime of the instance."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryAction">
	<summary>Key for resource getting something like "Action"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryAppearance">
	<summary>Key for resource getting something like "Appearance"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryAsynchronous">
	<summary>Key for resource getting something like "Asynchronous"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryBehavior">
	<summary>Key for resource getting something like "Behavior"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryData">
	<summary>Key for resource getting something like "Data"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryDDE">
	<summary>Key for resource getting something like "DDE"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryDesign">
	<summary>Key for resource getting something like "Design"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryDragDrop">
	<summary>Key for resource getting something like "Drag Drop"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryFocus">
	<summary>Key for resource getting something like "Focus"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryFont">
	<summary>Key for resource getting something like "Font"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryFormat">
	<summary>Key for resource getting something like "Format"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryKey">
	<summary>Key for resource getting something like "Key"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryList">
	<summary>Key for resource getting something like "List"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryLayout">
	<summary>Key for resource getting something like "Layout"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryDefault">
	<summary>Key for resource getting something like "Misc"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryMouse">
	<summary>Key for resource getting something like "Mouse"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryPosition">
	<summary>Key for resource getting something like "Position"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryText">
	<summary>Key for resource getting something like "Text"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryScale">
	<summary>Key for resource getting something like "Scale"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryWindowStyle">
	<summary>Key for resource getting something like "Window Style"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryConfig">
	<summary>Key for resource getting something like "Configurations"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.OnlyAllowedOnce">
	<summary>Key for resource getting something like "This operation is only allowed once per object."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BeginIndexNotNegative">
	<summary>Key for resource getting something like "Start index cannot be less than 0 or greater than input length."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LengthNotNegative">
	<summary>Key for resource getting something like "Length cannot be less than 0 or exceed input length."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnimplementedState">
	<summary>Key for resource getting something like "Unimplemented state."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnexpectedOpcode">
	<summary>Key for resource getting something like "Unexpected opcode in regular expression generation: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoResultOnFailed">
	<summary>Key for resource getting something like "Result cannot be called on a failed Match."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnterminatedBracket">
	<summary>Key for resource getting something like "Unterminated [] set."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TooManyParens">
	<summary>Key for resource getting something like "Too many )'s."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NestedQuantify">
	<summary>Key for resource getting something like "Nested quantifier {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.QuantifyAfterNothing">
	<summary>Key for resource getting something like "Quantifier {x,y} following nothing."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InternalError">
	<summary>Key for resource getting something like "Internal error in ScanRegex."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.IllegalRange">
	<summary>Key for resource getting something like "Illegal {x,y} with x &gt; y."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotEnoughParens">
	<summary>Key for resource getting something like "Not enough )'s."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BadClassInCharRange">
	<summary>Key for resource getting something like "Cannot include class \{0} in character range."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ReversedCharRange">
	<summary>Key for resource getting something like "[x-y] range in reverse order."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UndefinedReference">
	<summary>Key for resource getting something like "(?({0}) ) reference to undefined group."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MalformedReference">
	<summary>Key for resource getting something like "(?({0}) ) malformed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnrecognizedGrouping">
	<summary>Key for resource getting something like "Unrecognized grouping construct."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnterminatedComment">
	<summary>Key for resource getting something like "Unterminated (?#...) comment."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.IllegalEndEscape">
	<summary>Key for resource getting something like "Illegal \ at end of pattern."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MalformedNameRef">
	<summary>Key for resource getting something like "Malformed \k&lt;...&gt; named back reference."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UndefinedBackref">
	<summary>Key for resource getting something like "Reference to undefined group number {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UndefinedNameRef">
	<summary>Key for resource getting something like "Reference to undefined group name {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TooFewHex">
	<summary>Key for resource getting something like "Insufficient hexadecimal digits."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MissingControl">
	<summary>Key for resource getting something like "Missing control character."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnrecognizedControl">
	<summary>Key for resource getting something like "Unrecognized control character."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnrecognizedEscape">
	<summary>Key for resource getting something like "Unrecognized escape sequence \{0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.IllegalCondition">
	<summary>Key for resource getting something like "Illegal conditional (?(...)) expression."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TooManyAlternates">
	<summary>Key for resource getting something like "Too many | in (?()|)."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MakeException">
	<summary>Key for resource getting something like "parsing "{0}" - {1}"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.IncompleteSlashP">
	<summary>Key for resource getting something like "Incomplete \p{X} character escape."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MalformedSlashP">
	<summary>Key for resource getting something like "Malformed \p{X} character escape."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidGroupName">
	<summary>Key for resource getting something like "Invalid group name: Group names must begin with a word character."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CapnumNotZero">
	<summary>Key for resource getting something like "Capture number cannot be zero."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.AlternationCantCapture">
	<summary>Key for resource getting something like "Alternation conditions do not capture and cannot be named."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.AlternationCantHaveComment">
	<summary>Key for resource getting something like "Alternation conditions cannot be comments."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CaptureGroupOutOfRange">
	<summary>Key for resource getting something like "Capture group numbers must be less than or equal to Int32.MaxValue."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SubtractionMustBeLast">
	<summary>Key for resource getting something like "A subtraction must be the last element in a character class."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnknownProperty">
	<summary>Key for resource getting something like "Unknown property '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ReplacementError">
	<summary>Key for resource getting something like "Replacement pattern error."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CountTooSmall">
	<summary>Key for resource getting something like "Count cannot be less than -1."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.EnumNotStarted">
	<summary>Key for resource getting something like "Enumeration has either not started or has already finished."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_AlreadyOpen">
	<summary>Key for resource getting something like "The file is already open.  Call Close before trying to open the FileObject again."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_Closed">
	<summary>Key for resource getting something like "The FileObject is currently closed.  Try opening it."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_NotWhileWriting">
	<summary>Key for resource getting something like "File information cannot be queried while open for writing."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_FileDoesNotExist">
	<summary>Key for resource getting something like "File information cannot be queried if the file does not exist."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_MustBeClosed">
	<summary>Key for resource getting something like "This operation can only be done when the FileObject is closed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_MustBeFileName">
	<summary>Key for resource getting something like "You must specify a file name, not a relative or absolute path."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_InvalidInternalState">
	<summary>Key for resource getting something like "FileObject's open mode wasn't set to a valid value.  This FileObject is corrupt."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_PathNotSet">
	<summary>Key for resource getting something like "The path has not been set, or is an empty string.  Please ensure you specify some path."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_Reading">
	<summary>Key for resource getting something like "The file is currently open for reading.  Close the file and reopen it before attempting this."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_Writing">
	<summary>Key for resource getting something like "The file is currently open for writing.  Close the file and reopen it before attempting this."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_InvalidEnumeration">
	<summary>Key for resource getting something like "Enumerator is positioned before the first line or after the last line of the file."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_NoReset">
	<summary>Key for resource getting something like "Reset is not supported on a FileLineEnumerator."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.DirectoryObject_MustBeDirName">
	<summary>Key for resource getting something like "You must specify a directory name, not a relative or absolute path."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.DirectoryObjectPathDescr">
	<summary>Key for resource getting something like "The fully qualified, or relative path to the directory you wish to read from. E.g., "c:\temp"."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObjectDetectEncodingDescr">
	<summary>Key for resource getting something like "Determines whether the file will be parsed to see if it has a byte order mark indicating its encoding.  If it does, this will be used rather than the current specified encoding."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObjectEncodingDescr">
	<summary>Key for resource getting something like "The encoding to use when reading the file. UTF-8 is the default."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObjectPathDescr">
	<summary>Key for resource getting something like "The fully qualified, or relative path to the file you wish to read from. E.g., "myfile.txt"."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_RankMultiDimNotSupported">
	<summary>Key for resource getting something like "Only single dimensional arrays are supported for the requested action."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_EnumIllegalVal">
	<summary>Key for resource getting something like "Illegal enum value: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_OutOfRange_NeedNonNegNum">
	<summary>Key for resource getting something like "Non-negative number required."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_InvalidPermissionState">
	<summary>Key for resource getting something like "Invalid permission state."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_InvalidOidValue">
	<summary>Key for resource getting something like "The OID value was invalid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_WrongType">
	<summary>Key for resource getting something like "Operation on type '{0}' attempted with target of incorrect type."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_EmptyOrNullString">
	<summary>Key for resource getting something like "String cannot be empty or null."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_EmptyOrNullArray">
	<summary>Key for resource getting something like "Array cannot be empty or null."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_InvalidClassAttribute">
	<summary>Key for resource getting something like "The value of "class" attribute is invalid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_InvalidNameType">
	<summary>Key for resource getting something like "The value of "nameType" is invalid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_EnumNotStarted">
	<summary>Key for resource getting something like "Enumeration has not started.  Call MoveNext."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_DuplicateItemNotAllowed">
	<summary>Key for resource getting something like "Duplicate items are not allowed in the collection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Asn_MismatchedOidInCollection">
	<summary>Key for resource getting something like "The AsnEncodedData object does not have the same OID for the collection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_Envelope_Empty_Content">
	<summary>Key for resource getting something like "Cannot create CMS enveloped for empty content."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_Invalid_Recipient_Info_Type">
	<summary>Key for resource getting something like "The recipient info type {0} is not valid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_Invalid_Subject_Identifier_Type">
	<summary>Key for resource getting something like "The subject identifier type {0} is not valid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_Invalid_Subject_Identifier_Type_Value_Mismatch">
	<summary>Key for resource getting something like "The subject identifier type {0} does not match the value data type {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_Key_Agree_Date_Not_Available">
	<summary>Key for resource getting something like "The Date property is not available for none KID key agree recipient."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_Key_Agree_Other_Key_Attribute_Not_Available">
	<summary>Key for resource getting something like "The OtherKeyAttribute property is not available for none KID key agree recipient."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_MessageNotSigned">
	<summary>Key for resource getting something like "The CMS message is not signed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_MessageNotSignedByNoSignature">
	<summary>Key for resource getting something like "The CMS message is not signed by NoSignature."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_MessageNotEncrypted">
	<summary>Key for resource getting something like "The CMS message is not encrypted."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_Not_Supported">
	<summary>Key for resource getting something like "The Cryptographic Message Standard (CMS) is not supported on this platform."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_RecipientCertificateNotFound">
	<summary>Key for resource getting something like "The recipient certificate is not specified."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_Sign_Empty_Content">
	<summary>Key for resource getting something like "Cannot create CMS signature for empty content."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_Sign_No_Signature_First_Signer">
	<summary>Key for resource getting something like "CmsSigner has to be the first signer with NoSignature."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_DpApi_InvalidMemoryLength">
	<summary>Key for resource getting something like "The length of the data should be a multiple of 16 bytes."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_InvalidHandle">
	<summary>Key for resource getting something like "{0} is an invalid handle."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_InvalidContextHandle">
	<summary>Key for resource getting something like "The chain context handle is invalid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_InvalidStoreHandle">
	<summary>Key for resource getting something like "The store handle is invalid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Oid_InvalidValue">
	<summary>Key for resource getting something like "The OID value is invalid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Pkcs9_ExplicitAddNotAllowed">
	<summary>Key for resource getting something like "The PKCS 9 attribute cannot be explicitly added to the collection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Pkcs9_InvalidOid">
	<summary>Key for resource getting something like "The OID does not represent a valid PKCS 9 attribute."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Pkcs9_MultipleSigningTimeNotAllowed">
	<summary>Key for resource getting something like "Cannot add multiple PKCS 9 signing time attributes."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Pkcs9_AttributeMismatch">
	<summary>Key for resource getting something like "The parameter should be a PKCS 9 attribute."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_AddFailed">
	<summary>Key for resource getting something like "Adding certificate with index '{0}' failed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_BadEncoding">
	<summary>Key for resource getting something like "Input data cannot be coded as a valid certificate."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_ExportFailed">
	<summary>Key for resource getting something like "The certificate export operation failed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_ExtensionMismatch">
	<summary>Key for resource getting something like "The parameter should be an X509Extension."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_InvalidFindType">
	<summary>Key for resource getting something like "Invalid find type."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_InvalidFindValue">
	<summary>Key for resource getting something like "Invalid find value."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_InvalidEncodingFormat">
	<summary>Key for resource getting something like "Invalid encoding format."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_InvalidContentType">
	<summary>Key for resource getting something like "Invalid content type."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_KeyMismatch">
	<summary>Key for resource getting something like "The public key of the certificate does not match the value specified."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_RemoveFailed">
	<summary>Key for resource getting something like "Removing certificate with index '{0}' failed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Environment_NotInteractive">
	<summary>Key for resource getting something like "The current session is not interactive."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_InvalidKeyImpl">
	<summary>Key for resource getting something like "Only asymmetric keys that implement ICspAsymmetricAlgorithm are supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_KeyAlgorithm">
	<summary>Key for resource getting something like "The certificate key algorithm is not supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_PlatformRequiresNT">
	<summary>Key for resource getting something like "This operation is only supported on Windows 2000, Windows XP, and higher."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_UnreadableStream">
	<summary>Key for resource getting something like "Stream does not support reading."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Security_InvalidValue">
	<summary>Key for resource getting something like "The {0} value was invalid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Unknown_Error">
	<summary>Key for resource getting something like "Unknown error."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_nonClsCompliantException">
	<summary>Key for resource getting something like "A non-CLS Compliant Exception (i.e. an object that does not derive from System.Exception) was thrown."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_illegalConfigWith">
	<summary>Key for resource getting something like "The '{0}' attribute cannot appear when '{1}' is present."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_illegalConfigWithout">
	<summary>Key for resource getting something like "The '{0}' attribute can only appear when '{1}' is present."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_baddate">
	<summary>Key for resource getting something like "The value of the date string in the header is invalid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_writestarted">
	<summary>Key for resource getting something like "This property cannot be set after writing has started."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_clsmall">
	<summary>Key for resource getting something like "The Content-Length value must be greater than or equal to zero."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_reqsubmitted">
	<summary>Key for resource getting something like "This operation cannot be performed after the request has been submitted."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_rspsubmitted">
	<summary>Key for resource getting something like "This operation cannot be performed after the response has been submitted."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_no_http_cmd">
	<summary>Key for resource getting something like "The requested FTP command is not supported when using HTTP proxy."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_invalid_method_name">
	<summary>Key for resource getting something like "FTP Method names cannot be null or empty."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_invalid_renameto">
	<summary>Key for resource getting something like "The RenameTo filename cannot be null or empty."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_no_defaultcreds">
	<summary>Key for resource getting something like "Default credentials are not supported on an FTP request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpnoresponse">
	<summary>Key for resource getting something like "This type of FTP request does not return a response stream."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_response_invalid_format">
	<summary>Key for resource getting something like "The response string '{0}' has invalid format."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_no_offsetforhttp">
	<summary>Key for resource getting something like "Offsets are not supported when sending an FTP request over an HTTP proxy."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_invalid_uri">
	<summary>Key for resource getting something like "The requested URI is invalid for this FTP command."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_invalid_status_response">
	<summary>Key for resource getting something like "The status response ({0}) is not expected in response to '{1}' command."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_server_failed_passive">
	<summary>Key for resource getting something like "The server failed the passive mode request with status response ({0})."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_passive_address_different">
	<summary>Key for resource getting something like "The server returned an address in response to the PASV command that is different than the address to which the FTP connection was made."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_active_address_different">
	<summary>Key for resource getting something like "The data connection was made from an address that is different than the address to which the FTP connection was made."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_proxy_does_not_support_ssl">
	<summary>Key for resource getting something like "SSL cannot be enabled when using a proxy."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_invalid_response_filename">
	<summary>Key for resource getting something like "The server returned the filename ({0}) which is not valid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_unsupported_method">
	<summary>Key for resource getting something like "This method is not supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_resubmitcanceled">
	<summary>Key for resource getting something like "An error occurred on an automatic resubmission of the request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_redirect_perm">
	<summary>Key for resource getting something like "WebPermission demand failed for redirect URI."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_resubmitprotofailed">
	<summary>Key for resource getting something like "Cannot handle redirect from HTTP/HTTPS protocols to other dissimilar ones."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_needchunked">
	<summary>Key for resource getting something like "TransferEncoding requires the SendChunked property to be set to true."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_nochunked">
	<summary>Key for resource getting something like "Chunked encoding must be set via the SendChunked property."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_nochunkuploadonhttp10">
	<summary>Key for resource getting something like "Chunked encoding upload is not supported on the HTTP/1.0 protocol."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_connarg">
	<summary>Key for resource getting something like "Keep-Alive and Close may not be set using this property."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_no100">
	<summary>Key for resource getting something like "100-Continue may not be set using this property."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_fromto">
	<summary>Key for resource getting something like "The From parameter cannot be less than To."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_rangetoosmall">
	<summary>Key for resource getting something like "The From or To parameter cannot be less than 0."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_entitytoobig">
	<summary>Key for resource getting something like "Bytes to be written to the stream exceed the Content-Length bytes size specified."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_invalidversion">
	<summary>Key for resource getting something like "This protocol version is not supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_invalidstatus">
	<summary>Key for resource getting something like "The status code must be exactly three digits."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_toosmall">
	<summary>Key for resource getting something like "The specified value must be greater than 0."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_toolong">
	<summary>Key for resource getting something like "The size of {0} is too long. It cannot be longer than {1} characters."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_connclosed">
	<summary>Key for resource getting something like "The underlying connection was closed: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_headerrestrict">
	<summary>Key for resource getting something like "This header must be modified using the appropriate property."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_headerrestrict_resp">
	<summary>Key for resource getting something like "The '{0}' header cannot be modified directly."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_noseek">
	<summary>Key for resource getting something like "This stream does not support seek operations."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_servererror">
	<summary>Key for resource getting something like "The remote server returned an error: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_nouploadonget">
	<summary>Key for resource getting something like "Cannot send a content-body with this verb-type."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_mutualauthfailed">
	<summary>Key for resource getting something like "The requirement for mutual authentication was not met by the remote server."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_invasync">
	<summary>Key for resource getting something like "Cannot block a call on this socket while an earlier asynchronous call is in progress."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_inasync">
	<summary>Key for resource getting something like "An asynchronous call is already in progress. It must be completed or canceled before you can call this method."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_mustbeuri">
	<summary>Key for resource getting something like "The {0} parameter must represent a valid Uri (see inner exception)."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_format_shexp">
	<summary>Key for resource getting something like "The shell expression '{0}' could not be parsed because it is formatted incorrectly."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cannot_load_proxy_helper">
	<summary>Key for resource getting something like "Failed to load the proxy script runtime environment from the Microsoft.JScript assembly."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_repcall">
	<summary>Key for resource getting something like "Cannot re-call BeginGetRequestStream/BeginGetResponse while a previous call is still in progress."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_wrongversion">
	<summary>Key for resource getting something like "Only HTTP/1.0 and HTTP/1.1 version requests are currently supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_badmethod">
	<summary>Key for resource getting something like "Cannot set null or blank methods on request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_notenoughbyteswritten">
	<summary>Key for resource getting something like "Cannot close stream until all bytes are written."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_timeout_use_ge_zero">
	<summary>Key for resource getting something like "Timeout can be only be set to 'System.Threading.Timeout.Infinite' or a value &gt;= 0."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_timeout_use_gt_zero">
	<summary>Key for resource getting something like "Timeout can be only be set to 'System.Threading.Timeout.Infinite' or a value &gt; 0."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_no_0timeouts">
	<summary>Key for resource getting something like "NetworkStream does not support a 0 millisecond timeout, use a value greater than zero for the timeout instead."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_requestaborted">
	<summary>Key for resource getting something like "The request was aborted: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_tooManyRedirections">
	<summary>Key for resource getting something like "Too many automatic redirections were attempted."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_authmodulenotregistered">
	<summary>Key for resource getting something like "The supplied authentication module is not registered."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_authschemenotregistered">
	<summary>Key for resource getting something like "There is no registered module for this authentication scheme."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_proxyschemenotsupported">
	<summary>Key for resource getting something like "The ServicePointManager does not support proxies with the {0} scheme."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_maxsrvpoints">
	<summary>Key for resource getting something like "The maximum number of service points was exceeded."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_maxbinddelegateretry">
	<summary>Key for resource getting something like "Reached maximum number of BindIPEndPointDelegate retries."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_unknown_prefix">
	<summary>Key for resource getting something like "The URI prefix is not recognized."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_notconnected">
	<summary>Key for resource getting something like "The operation is not allowed on non-connected sockets."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_notstream">
	<summary>Key for resource getting something like "The operation is not allowed on non-stream oriented sockets."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_timeout">
	<summary>Key for resource getting something like "The operation has timed out."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_nocontentlengthonget">
	<summary>Key for resource getting something like "Content-Length cannot be set for an operation that does not write data."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_contentlengthmissing">
	<summary>Key for resource getting something like "When performing a write operation with AllowWriteStreamBuffering set to false, you must either set ContentLength to a non-negative number or set SendChunked to true."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_nonhttpproxynotallowed">
	<summary>Key for resource getting something like "The URI scheme for the supplied IWebProxy has the illegal value '{0}'. Only 'http' is supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_nottoken">
	<summary>Key for resource getting something like "The supplied string is not a valid HTTP token."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_rangetype">
	<summary>Key for resource getting something like "A different range specifier has already been added to this request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_need_writebuffering">
	<summary>Key for resource getting something like "This request requires buffering data to succeed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_securitypackagesupport">
	<summary>Key for resource getting something like "The requested security package is not supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_securityprotocolnotsupported">
	<summary>Key for resource getting something like "The requested security protocol is not supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_nodefaultcreds">
	<summary>Key for resource getting something like "Default credentials cannot be supplied for the {0} authentication scheme."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_stopped">
	<summary>Key for resource getting something like "Not listening. You must call the Start() method before calling this method."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_udpconnected">
	<summary>Key for resource getting something like "Cannot send packets to an arbitrary host while connected."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_readonlystream">
	<summary>Key for resource getting something like "The stream does not support writing."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_writeonlystream">
	<summary>Key for resource getting something like "The stream does not support reading."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_no_concurrent_io_allowed">
	<summary>Key for resource getting something like "The stream does not support concurrent IO read or write operations."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_needmorethreads">
	<summary>Key for resource getting something like "There were not enough free threads in the ThreadPool to complete the operation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_MethodNotImplementedException">
	<summary>Key for resource getting something like "This method is not implemented by this class."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_PropertyNotImplementedException">
	<summary>Key for resource getting something like "This property is not implemented by this class."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_MethodNotSupportedException">
	<summary>Key for resource getting something like "This method is not supported by this class."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_PropertyNotSupportedException">
	<summary>Key for resource getting something like "This property is not supported by this class."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ProtocolNotSupportedException">
	<summary>Key for resource getting something like "The '{0}' protocol is not supported by this class."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_HashAlgorithmNotSupportedException">
	<summary>Key for resource getting something like "The '{0}' hash algorithm not supported by this class."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_QOPNotSupportedException">
	<summary>Key for resource getting something like "The '{0}' quality of service is not supported by this class."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_SelectModeNotSupportedException">
	<summary>Key for resource getting something like "The '{0}' select mode is not supported by this class."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_InvalidSocketHandle">
	<summary>Key for resource getting something like "The socket handle is not valid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_InvalidAddressFamily">
	<summary>Key for resource getting something like "The AddressFamily {0} is not valid for the {1} end point, use {2} instead."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_InvalidSocketAddressSize">
	<summary>Key for resource getting something like "The supplied {0} is an invalid size for the {1} end point."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_invalidAddressList">
	<summary>Key for resource getting something like "None of the discovered or specified addresses match the socket address family."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_invalidPingBufferSize">
	<summary>Key for resource getting something like "The buffer length must not exceed 65500 bytes."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cant_perform_during_shutdown">
	<summary>Key for resource getting something like "This operation cannot be performed while the AppDomain is shutting down."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cant_create_environment">
	<summary>Key for resource getting something like "Unable to create another web proxy script environment at this time."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_completed_result">
	<summary>Key for resource getting something like "This operation cannot be performed on a completed asynchronous result object."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_protocol_invalid_family">
	<summary>Key for resource getting something like "'{0}' Client can only accept InterNetwork or InterNetworkV6 addresses."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_protocol_invalid_multicast_family">
	<summary>Key for resource getting something like "Multicast family is not the same as the family of the '{0}' Client."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_zerolist">
	<summary>Key for resource getting something like "The parameter {0} must contain one or more elements."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_blocking">
	<summary>Key for resource getting something like "The operation is not allowed on a non-blocking Socket."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_useblocking">
	<summary>Key for resource getting something like "Use the Blocking property to change the status of the Socket."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_select">
	<summary>Key for resource getting something like "The operation is not allowed on objects of type {0}. Use only objects of type {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_toolarge_select">
	<summary>Key for resource getting something like "The {0} list contains too many items; a maximum of {1} is allowed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_empty_select">
	<summary>Key for resource getting something like "All lists are either null or empty."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_mustbind">
	<summary>Key for resource getting something like "You must call the Bind method before performing this operation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_mustlisten">
	<summary>Key for resource getting something like "You must call the Listen method before performing this operation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_mustnotlisten">
	<summary>Key for resource getting something like "You may not perform this operation after calling the Listen method."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_mustnotbebound">
	<summary>Key for resource getting something like "The socket must not be bound or connected."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_namedmustnotbebound">
	<summary>Key for resource getting something like "{0}: The socket must not be bound or connected."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_invalid_socketinformation">
	<summary>Key for resource getting something like "The specified value for the socket information in invalid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_invalid_ipaddress_length">
	<summary>Key for resource getting something like "The number of specified IP addresses has to be greater than 0."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_invalid_optionValue">
	<summary>Key for resource getting something like "The specified value is not a valid '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_invalid_optionValue_all">
	<summary>Key for resource getting something like "The specified value is not valid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_disconnectedConnect">
	<summary>Key for resource getting something like "Once the socket has been disconnected, you can only reconnect again asynchronously, and only to a different EndPoint.  BeginConnect must be called on a thread that won't exit until the operation has been completed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_disconnectedAccept">
	<summary>Key for resource getting something like "Once the socket has been disconnected, you can only accept again asynchronously.  BeginAccept must be called on a thread that won't exit until the operation has been completed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_tcplistener_mustbestopped">
	<summary>Key for resource getting something like "The TcpListener must not be listening before performing this operation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_no_duplicate_async">
	<summary>Key for resource getting something like "BeginConnect cannot be called while another asynchronous operation is in progress on the same Socket."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_config_proxy">
	<summary>Key for resource getting something like "Error creating the Web Proxy specified in the 'system.net/defaultProxy' configuration section."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_config_proxy_module_not_public">
	<summary>Key for resource getting something like "The specified proxy module type is not public."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_config_authenticationmodules">
	<summary>Key for resource getting something like "Error creating the modules specified in the 'system.net/authenticationModules' configuration section."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_config_webrequestmodules">
	<summary>Key for resource getting something like "Error creating the modules specified in the 'system.net/webRequestModules' configuration section."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_config_requestcaching">
	<summary>Key for resource getting something like "Error creating the Web Request caching policy specified in the 'system.net/requestCaching' configuration section."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_config_section_permission">
	<summary>Key for resource getting something like "Insufficient permissions for setting the configuration section '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_config_element_permission">
	<summary>Key for resource getting something like "Insufficient permissions for setting the configuration element '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_config_property_permission">
	<summary>Key for resource getting something like "Insufficient permissions for setting the configuration property '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebResponseParseError_InvalidHeaderName">
	<summary>Key for resource getting something like "Header name is invalid"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebResponseParseError_InvalidContentLength">
	<summary>Key for resource getting something like "'Content-Length' header value is invalid"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebResponseParseError_IncompleteHeaderLine">
	<summary>Key for resource getting something like "Invalid header name"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebResponseParseError_CrLfError">
	<summary>Key for resource getting something like "CR must be followed by LF"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebResponseParseError_InvalidChunkFormat">
	<summary>Key for resource getting something like "Response chunk format is invalid"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebResponseParseError_UnexpectedServerResponse">
	<summary>Key for resource getting something like "Unexpected server response received"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebHeaderInvalidControlChars">
	<summary>Key for resource getting something like "Specified value has invalid Control characters."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebHeaderInvalidCRLFChars">
	<summary>Key for resource getting something like "Specified value has invalid CRLF characters."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebHeaderInvalidHeaderChars">
	<summary>Key for resource getting something like "Specified value has invalid HTTP Header characters."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebHeaderInvalidNonAsciiChars">
	<summary>Key for resource getting something like "Specified value has invalid non-ASCII characters."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebHeaderMissingColon">
	<summary>Key for resource getting something like "Specified value does not have a ':' separator."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_Success">
	<summary>Key for resource getting something like "Status success"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_NameResolutionFailure">
	<summary>Key for resource getting something like "The remote name could not be resolved"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_ConnectFailure">
	<summary>Key for resource getting something like "Unable to connect to the remote server"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_ReceiveFailure">
	<summary>Key for resource getting something like "An unexpected error occurred on a receive"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_SendFailure">
	<summary>Key for resource getting something like "An unexpected error occurred on a send"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_PipelineFailure">
	<summary>Key for resource getting something like "A pipeline failure occurred"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_RequestCanceled">
	<summary>Key for resource getting something like "The request was canceled"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_ConnectionClosed">
	<summary>Key for resource getting something like "The connection was closed unexpectedly"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_TrustFailure">
	<summary>Key for resource getting something like "Could not establish trust relationship for the SSL/TLS secure channel"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_SecureChannelFailure">
	<summary>Key for resource getting something like "Could not create SSL/TLS secure channel"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_ServerProtocolViolation">
	<summary>Key for resource getting something like "The server committed a protocol violation"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_KeepAliveFailure">
	<summary>Key for resource getting something like "A connection that was expected to be kept alive was closed by the server"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_ProxyNameResolutionFailure">
	<summary>Key for resource getting something like "The proxy name could not be resolved"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_MessageLengthLimitExceeded">
	<summary>Key for resource getting something like "The message length limit was exceeded"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_CacheEntryNotFound">
	<summary>Key for resource getting something like "The request cache-only policy does not allow a network request and the response is not found in cache"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_RequestProhibitedByCachePolicy">
	<summary>Key for resource getting something like "The request could not be satisfied using a cache-only policy"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_Timeout">
	<summary>Key for resource getting something like "The operation has timed out"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_RequestProhibitedByProxy">
	<summary>Key for resource getting something like "The IWebProxy object associated with the request did not allow the request to proceed"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_InvalidStatusCode">
	<summary>Key for resource getting something like "The server returned a status code outside the valid range of 100-599."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_ServiceNotAvailable">
	<summary>Key for resource getting something like "Service not available, closing control connection"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_CantOpenData">
	<summary>Key for resource getting something like "Can't open data connection"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_ConnectionClosed">
	<summary>Key for resource getting something like "Connection closed; transfer aborted"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_ActionNotTakenFileUnavailableOrBusy">
	<summary>Key for resource getting something like "File unavailable (e.g., file busy)"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_ActionAbortedLocalProcessingError">
	<summary>Key for resource getting something like "Local error in processing"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_ActionNotTakenInsufficentSpace">
	<summary>Key for resource getting something like "Insufficient storage space in system"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_CommandSyntaxError">
	<summary>Key for resource getting something like "Syntax error, command unrecognized"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_ArgumentSyntaxError">
	<summary>Key for resource getting something like "Syntax error in parameters or arguments"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_CommandNotImplemented">
	<summary>Key for resource getting something like "Command not implemented"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_BadCommandSequence">
	<summary>Key for resource getting something like "Bad sequence of commands"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_NotLoggedIn">
	<summary>Key for resource getting something like "Not logged in"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_AccountNeeded">
	<summary>Key for resource getting something like "Need account for storing files"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_ActionNotTakenFileUnavailable">
	<summary>Key for resource getting something like "File unavailable (e.g., file not found, no access)"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_ActionAbortedUnknownPageType">
	<summary>Key for resource getting something like "Page type unknown"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_FileActionAborted">
	<summary>Key for resource getting something like "Exceeded storage allocation (for current directory or data set)"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_ActionNotTakenFilenameNotAllowed">
	<summary>Key for resource getting something like "File name not allowed"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_NoContent">
	<summary>Key for resource getting something like "No Content"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_NonAuthoritativeInformation">
	<summary>Key for resource getting something like "Non Authoritative Information"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_ResetContent">
	<summary>Key for resource getting something like "Reset Content"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_PartialContent">
	<summary>Key for resource getting something like "Partial Content"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_MultipleChoices">
	<summary>Key for resource getting something like "Multiple Choices Redirect"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_Ambiguous">
	<summary>Key for resource getting something like "Ambiguous Redirect"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_MovedPermanently">
	<summary>Key for resource getting something like "Moved Permanently Redirect"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_Moved">
	<summary>Key for resource getting something like "Moved Redirect"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_Found">
	<summary>Key for resource getting something like "Found Redirect"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_Redirect">
	<summary>Key for resource getting something like "Redirect"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_SeeOther">
	<summary>Key for resource getting something like "See Other"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_RedirectMethod">
	<summary>Key for resource getting something like "Redirect Method"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_NotModified">
	<summary>Key for resource getting something like "Not Modified"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_UseProxy">
	<summary>Key for resource getting something like "Use Proxy Redirect"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_TemporaryRedirect">
	<summary>Key for resource getting something like "Temporary Redirect"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_RedirectKeepVerb">
	<summary>Key for resource getting something like "Redirect Keep Verb"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_BadRequest">
	<summary>Key for resource getting something like "Bad Request"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_Unauthorized">
	<summary>Key for resource getting something like "Unauthorized"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_PaymentRequired">
	<summary>Key for resource getting something like "Payment Required"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_Forbidden">
	<summary>Key for resource getting something like "Forbidden"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_NotFound">
	<summary>Key for resource getting something like "Not Found"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_MethodNotAllowed">
	<summary>Key for resource getting something like "Method Not Allowed"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_NotAcceptable">
	<summary>Key for resource getting something like "Not Acceptable"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_ProxyAuthenticationRequired">
	<summary>Key for resource getting something like "Proxy Authentication Required"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_RequestTimeout">
	<summary>Key for resource getting something like "Request Timeout"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_Conflict">
	<summary>Key for resource getting something like "Conflict"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_Gone">
	<summary>Key for resource getting something like "Gone"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_LengthRequired">
	<summary>Key for resource getting something like "Length Required"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_InternalServerError">
	<summary>Key for resource getting something like "Internal Server Error"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_NotImplemented">
	<summary>Key for resource getting something like "Not Implemented"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_BadGateway">
	<summary>Key for resource getting something like "Bad Gateway"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_ServiceUnavailable">
	<summary>Key for resource getting something like "Server Unavailable"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_GatewayTimeout">
	<summary>Key for resource getting something like "Gateway Timeout"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_HttpVersionNotSupported">
	<summary>Key for resource getting something like "Http Version Not Supported"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_BadScheme">
	<summary>Key for resource getting something like "Invalid URI: The URI scheme is not valid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_BadFormat">
	<summary>Key for resource getting something like "Invalid URI: The format of the URI could not be determined."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_BadUserPassword">
	<summary>Key for resource getting something like "Invalid URI: The username:password construct is badly formed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_BadHostName">
	<summary>Key for resource getting something like "Invalid URI: The hostname could not be parsed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_BadAuthority">
	<summary>Key for resource getting something like "Invalid URI: The Authority/Host could not be parsed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_BadAuthorityTerminator">
	<summary>Key for resource getting something like "Invalid URI: The Authority/Host cannot end with a backslash character ('\')."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_BadFileName">
	<summary>Key for resource getting something like "Invalid URI: Can't parse data as a filename."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_EmptyUri">
	<summary>Key for resource getting something like "Invalid URI: The URI is empty."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_BadString">
	<summary>Key for resource getting something like "Invalid URI: There is an invalid sequence in the string."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_MustRootedPath">
	<summary>Key for resource getting something like "Invalid URI: A Dos path must be rooted, for example, 'c:\'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_BadPort">
	<summary>Key for resource getting something like "Invalid URI: A port was expected because of there is a colon (':') present but the port could not be parsed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_SizeLimit">
	<summary>Key for resource getting something like "Invalid URI: The Uri string is too long."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_SchemeLimit">
	<summary>Key for resource getting something like "Invalid URI: The Uri scheme is too long."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_NotAbsolute">
	<summary>Key for resource getting something like "This operation is not supported for a relative URI."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_SpecialUriComponent">
	<summary>Key for resource getting something like "A special Uri parsing request: '{0}' cannot be mixed with other Uri component parsing flags: '{1}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_CustomValidationFailed">
	<summary>Key for resource getting something like "A Uri derived class has refused to accept the input string as a valid absolute Uri."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_PortOutOfRange">
	<summary>Key for resource getting something like "A derived type '{0}' has reported an invalid value for the Uri port '{1}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_UserDrivenParsing">
	<summary>Key for resource getting something like "A derived type '{0}' is responsible for parsing this Uri instance. The base implementation must not be used."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_AlreadyRegistered">
	<summary>Key for resource getting something like "A URI scheme name '{0}' already has a registered custom parser."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_NeedFreshParser">
	<summary>Key for resource getting something like "The URI parser instance passed into 'uriParser' parameter is already registered with the scheme name '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_CannotCreateRelative">
	<summary>Key for resource getting something like "A relative URI cannot be created because the 'uriString' parameter represents an absolute URI."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_InvalidUriKind">
	<summary>Key for resource getting something like "The value '{0}' passed for the UriKind parameter is invalid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_completionportwasbound">
	<summary>Key for resource getting something like "The socket has already been bound to an io completion port."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_writefailure">
	<summary>Key for resource getting something like "Unable to write data to the transport connection: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_readfailure">
	<summary>Key for resource getting something like "Unable to read data from the transport connection: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_connectionclosed">
	<summary>Key for resource getting something like "The connection was closed"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_transportfailure">
	<summary>Key for resource getting something like "Unable to create a transport connection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_internal_bind">
	<summary>Key for resource getting something like "Internal Error: A socket handle could not be bound to a completion port."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_invalidasyncresult">
	<summary>Key for resource getting something like "The IAsyncResult object was not returned from the corresponding asynchronous method on this class."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_invalidnestedcall">
	<summary>Key for resource getting something like "The {0} method cannot be called when another {1} operation is pending."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_invalidendcall">
	<summary>Key for resource getting something like "{0} can only be called once for each asynchronous operation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_must_be_rw_stream">
	<summary>Key for resource getting something like "The stream has to be read/write."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_header_id">
	<summary>Key for resource getting something like "Found a wrong header field {0} read = {1}, expected = {2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_out_range">
	<summary>Key for resource getting something like "The byte count must not exceed {0} bytes for this stream type."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_encrypt">
	<summary>Key for resource getting something like "The encryption operation failed, see inner exception."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_decrypt">
	<summary>Key for resource getting something like "The decryption operation failed, see inner exception."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_read">
	<summary>Key for resource getting something like "The read operation failed, see inner exception."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_write">
	<summary>Key for resource getting something like "The write operation failed, see inner exception."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_eof">
	<summary>Key for resource getting something like "Received an unexpected EOF or 0 bytes from the transport stream."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_async_result">
	<summary>Key for resource getting something like "The parameter: {0} is not valid. Use the object returned from corresponding Begin async call."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_headers_req">
	<summary>Key for resource getting something like "This collection holds response headers and cannot contain the specified request header."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_headers_rsp">
	<summary>Key for resource getting something like "This collection holds request headers and cannot contain the specified response header."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_headers_toolong">
	<summary>Key for resource getting something like "Header values cannot be longer than {0} characters."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_emptystringset">
	<summary>Key for resource getting something like "This property cannot be set to an empty string."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_emptystringcall">
	<summary>Key for resource getting something like "The parameter '{0}' cannot be an empty string."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_listener_mustcall">
	<summary>Key for resource getting something like "Please call the {0} method before calling this method."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_listener_mustcompletecall">
	<summary>Key for resource getting something like "The in-progress method {0} must be completed first."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_listener_callinprogress">
	<summary>Key for resource getting something like "Cannot re-call {0} while a previous call is still in progress."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_listener_scheme">
	<summary>Key for resource getting something like "Only Uri prefixes starting with 'http://' or 'https://' are supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_listener_host">
	<summary>Key for resource getting something like "Only Uri prefixes with a valid hostname are supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_listener_slash">
	<summary>Key for resource getting something like "Only Uri prefixes ending in '/' are allowed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_listener_repcall">
	<summary>Key for resource getting something like "This method cannot be called twice."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_tls_version">
	<summary>Key for resource getting something like "The SSL version is not supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_perm_target">
	<summary>Key for resource getting something like "Cannot cast target permission type."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_perm_both_regex">
	<summary>Key for resource getting something like "Cannot subset Regex. Only support if both patterns are identical."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_perm_none">
	<summary>Key for resource getting something like "There are no permissions to check."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_perm_attrib_count">
	<summary>Key for resource getting something like "The value for '{0}' must be specified."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_perm_invalid_val">
	<summary>Key for resource getting something like "The parameter value '{0}={1}' is invalid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_perm_attrib_multi">
	<summary>Key for resource getting something like "The permission '{0}={1}' cannot be added. Add a separate Attribute statement."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_perm_epname">
	<summary>Key for resource getting something like "The argument value '{0}' is invalid for creating a SocketPermission object."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_perm_invalid_val_in_element">
	<summary>Key for resource getting something like "The '{0}' element contains one or more invalid values."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_invalid_ip_addr">
	<summary>Key for resource getting something like "IPv4 address 0.0.0.0 and IPv6 address ::0 are unspecified addresses that cannot be used as a target address."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.dns_bad_ip_address">
	<summary>Key for resource getting something like "An invalid IP address was specified."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_bad_mac_address">
	<summary>Key for resource getting something like "An invalid physical address was specified."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ping">
	<summary>Key for resource getting something like "An exception occurred during a Ping request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webclient">
	<summary>Key for resource getting something like "An exception occurred during a WebClient request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webclient_ContentType">
	<summary>Key for resource getting something like "The Content-Type header cannot be changed from its default value for this request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webclient_Multipart">
	<summary>Key for resource getting something like "The Content-Type header cannot be set to a multipart type for this request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webclient_no_concurrent_io_allowed">
	<summary>Key for resource getting something like "WebClient does not support concurrent I/O operations."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webclient_invalid_baseaddress">
	<summary>Key for resource getting something like "The specified value is not a valid base address."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_container_add_cookie">
	<summary>Key for resource getting something like "An error occurred when adding a cookie to the container."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cookie_invalid">
	<summary>Key for resource getting something like "Invalid contents for cookie = '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cookie_size">
	<summary>Key for resource getting something like "The value size of the cookie is '{0}'. This exceeds the configured maximum size, which is '{1}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cookie_parse_header">
	<summary>Key for resource getting something like "An error occurred when parsing the Cookie header for Uri '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cookie_attribute">
	<summary>Key for resource getting something like "The '{0}'='{1}' part of the cookie is invalid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cookie_format">
	<summary>Key for resource getting something like "Cookie format error."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cookie_exists">
	<summary>Key for resource getting something like "Cookie already exists."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cookie_capacity_range">
	<summary>Key for resource getting something like "'{0}' has to be greater than '{1}' and less than '{2}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_set_token">
	<summary>Key for resource getting something like "Failed to impersonate a thread doing authentication of a Web Request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_revert_token">
	<summary>Key for resource getting something like "Failed to revert the thread token after authenticating a Web Request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_async_context">
	<summary>Key for resource getting something like "Async context creation failed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_encrypt">
	<summary>Key for resource getting something like "The encryption operation failed, see inner exception."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_decrypt">
	<summary>Key for resource getting something like "The decryption operation failed, see inner exception."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_context_expired">
	<summary>Key for resource getting something like "The security context has expired."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_handshake_start">
	<summary>Key for resource getting something like "The handshake failed. The remote side has dropped the stream."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_handshake">
	<summary>Key for resource getting something like "The handshake failed, see inner exception."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_frame">
	<summary>Key for resource getting something like "The handshake failed due to an unexpected packet format."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_corrupted">
	<summary>Key for resource getting something like "The stream is corrupted due to an invalid SSL version number in the SSL protocol header."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_cert_validation">
	<summary>Key for resource getting something like "The remote certificate is invalid according to the validation procedure."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_invalid_end_call">
	<summary>Key for resource getting something like "{0} can only be called once for each asynchronous operation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_invalid_begin_call">
	<summary>Key for resource getting something like "{0} cannot be called when another {1} operation is pending."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_no_server_cert">
	<summary>Key for resource getting something like "The server mode SSL must use a certificate with the associated private key."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_bad_client_creds">
	<summary>Key for resource getting something like "The server has rejected the client credentials."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_bad_client_creds_or_target_mismatch">
	<summary>Key for resource getting something like "Either the target name is incorrect or the server has rejected the client credentials."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_context_expectation">
	<summary>Key for resource getting something like "A security requirement was not fulfilled during authentication. Required: {0}, negotiated: {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_context_expectation_remote">
	<summary>Key for resource getting something like "A remote side security requirement was not fulfilled during authentication. Try increasing the ProtectionLevel and/or ImpersonationLevel."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_supported_impl_levels">
	<summary>Key for resource getting something like "The supported values are Identification, Impersonation or Delegation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_no_protection_on_win9x">
	<summary>Key for resource getting something like "The current platform only supports ProtectionLevel.None."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_no_anonymous_support">
	<summary>Key for resource getting something like "The TokenImpersonationLevel.Anonymous level is not supported for authentication."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_reauth">
	<summary>Key for resource getting something like "This operation is not allowed on a security context that has already been authenticated."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_noauth">
	<summary>Key for resource getting something like "This operation is only allowed using a successfully authenticated context."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_client_server">
	<summary>Key for resource getting something like "Once authentication is attempted as the client or server, additional authentication attempts must use the same client or server role."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_noencryption">
	<summary>Key for resource getting something like "This authenticated context does not support data encryption."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_SSPI">
	<summary>Key for resource getting something like "A call to SSPI failed, see inner exception."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_failure">
	<summary>Key for resource getting something like "Authentication failed, see inner exception."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_eof">
	<summary>Key for resource getting something like "Authentication failed because the remote party has closed the transport stream."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_alert">
	<summary>Key for resource getting something like "Authentication failed on the remote side (the stream might still be available for additional authentication attempts)."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_ignored_reauth">
	<summary>Key for resource getting something like "Re-authentication failed because the remote party continued to encrypt more than {0} bytes before answering re-authentication."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_empty_read">
	<summary>Key for resource getting something like "Protocol error: cannot proceed with SSPI handshake because an empty blob was received."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_message_not_encrypted">
	<summary>Key for resource getting something like "Protocol error: A received message contains a valid signature but it was not encrypted as required by the effective Protection Level."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_frame_size">
	<summary>Key for resource getting something like "Received an invalid authentication frame. The message size is limited to {0} bytes, attempted to read {1} bytes."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_frame_read_io">
	<summary>Key for resource getting something like "Received incomplete authentication message. Remote party has probably closed the connection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_frame_read_size">
	<summary>Key for resource getting something like "Cannot determine the frame size or a corrupted frame was received."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_frame_max_size">
	<summary>Key for resource getting something like "The payload size is limited to {0}, attempted set it to {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_jscript_load">
	<summary>Key for resource getting something like "The proxy JScript file threw an exception while being initialized: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_proxy_not_gmt">
	<summary>Key for resource getting something like "The specified value is not a valid GMT time."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_proxy_invalid_dayofweek">
	<summary>Key for resource getting something like "The specified value is not a valid day of the week."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_param_not_string">
	<summary>Key for resource getting something like "Argument must be a string instead of {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_value_cannot_be_negative">
	<summary>Key for resource getting something like "The specified value cannot be negative."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_invalid_offset">
	<summary>Key for resource getting something like "Value of offset cannot be negative or greater than the length of the buffer."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_offset_plus_count">
	<summary>Key for resource getting something like "Sum of offset and count cannot be greater than the length of the buffer."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cannot_be_false">
	<summary>Key for resource getting something like "The specified value cannot be false."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_invalid_enum">
	<summary>Key for resource getting something like "The specified value is not valid in the '{0}' enumeration."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_listener_already">
	<summary>Key for resource getting something like "Failed to listen on prefix '{0}' because it conflicts with an existing registration on the machine."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_shadowstream_not_writable">
	<summary>Key for resource getting something like "Shadow stream must be writable."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_validator_fail">
	<summary>Key for resource getting something like "The validation method {0}() returned a failure for this request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_access_denied">
	<summary>Key for resource getting something like "For this RequestCache object, {0} access is denied."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_validator_result">
	<summary>Key for resource getting something like "The validation method {0}() returned the unexpected status: {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_retrieve_failure">
	<summary>Key for resource getting something like "Cache retrieve failed: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_not_supported_body">
	<summary>Key for resource getting something like "The cached response is not supported for a request with a content body."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_not_supported_command">
	<summary>Key for resource getting something like "The cached response is not supported for a request with the specified request method."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_not_accept_response">
	<summary>Key for resource getting something like "The cache protocol refused the server response. To allow automatic request retrying, set request.AllowAutoRedirect to true."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_method_failed">
	<summary>Key for resource getting something like "The request (Method = {0}) cannot be served from the cache and will fail because of the effective CachePolicy: {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_key_failed">
	<summary>Key for resource getting something like "The request failed because no cache entry (CacheKey = {0}) was found and the effective CachePolicy is {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_no_stream">
	<summary>Key for resource getting something like "The cache protocol returned a cached response but the cache entry is invalid because it has a null stream. (Cache Key = {0})."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_unsupported_partial_stream">
	<summary>Key for resource getting something like "A partial content stream does not support this operation or some method argument is out of range."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_not_configured">
	<summary>Key for resource getting something like "No cache protocol is available for this request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_non_seekable_stream_not_supported">
	<summary>Key for resource getting something like "The transport stream instance passed in the RangeStream constructor is not seekable and therefore is not supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_invalid_cast">
	<summary>Key for resource getting something like "Invalid cast from {0} to {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_collection_readonly">
	<summary>Key for resource getting something like "The collection is read-only."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_not_ipermission">
	<summary>Key for resource getting something like "Specified value does not contain 'IPermission' as its tag."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_no_classname">
	<summary>Key for resource getting something like "Specified value does not contain a 'class' attribute."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_no_typename">
	<summary>Key for resource getting something like "The value class attribute is not valid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_array_too_small">
	<summary>Key for resource getting something like "The target array is too small."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_servicePointAddressNotSupportedInHostMode">
	<summary>Key for resource getting something like "This property is not supported for protocols that do not use URI."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_listener_delegate_exception">
	<summary>Key for resource getting something like "Sending 500 response, AuthenticationSchemeSelectorDelegate threw an exception: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_listener_unsupported_authentication_scheme">
	<summary>Key for resource getting something like "Received a request with an unsupported authentication scheme, Authorization:{0} SupportedSchemes:{1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_listener_unmatched_authentication_scheme">
	<summary>Key for resource getting something like "Received a request with an unmatched or no authentication scheme. AuthenticationSchemes:{0}, Authorization:{1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_listener_create_valid_identity_failed">
	<summary>Key for resource getting something like "Failed to create a valid Identity for an incoming request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_sspi_enumerating_security_packages">
	<summary>Key for resource getting something like "Enumerating security packages:"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_sspi_security_package_not_found">
	<summary>Key for resource getting something like "Security package '{0}' was not found."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_sspi_security_context_input_buffer">
	<summary>Key for resource getting something like "{0}(In-Buffer length={1}, Out-Buffer length={2}, returned code={3})."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_sspi_security_context_input_buffers">
	<summary>Key for resource getting something like "{0}(In-Buffers count={1}, Out-Buffer length={2}, returned code={3})."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_remote_certificate">
	<summary>Key for resource getting something like "Remote certificate: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_locating_private_key_for_certificate">
	<summary>Key for resource getting something like "Locating the private key for the certificate: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cert_is_of_type_2">
	<summary>Key for resource getting something like "Certificate is of type X509Certificate2 and contains the private key."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_found_cert_in_store">
	<summary>Key for resource getting something like "Found the certificate in the {0} store."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_did_not_find_cert_in_store">
	<summary>Key for resource getting something like "Cannot find the certificate in either the LocalMachine store or the CurrentUser store."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_open_store_failed">
	<summary>Key for resource getting something like "Opening Certificate store {0} failed, exception: {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_got_certificate_from_delegate">
	<summary>Key for resource getting something like "Got a certificate from the client delegate."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_no_delegate_and_have_no_client_cert">
	<summary>Key for resource getting something like "Client delegate did not provide a certificate; and there are not other user-provided certificates. Need to attempt a session restart."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_no_delegate_but_have_client_cert">
	<summary>Key for resource getting something like "Client delegate did not provide a certificate; but there are other user-provided certificates"."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_attempting_restart_using_cert">
	<summary>Key for resource getting something like "Attempting to restart the session using the user-provided certificate: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_no_issuers_try_all_certs">
	<summary>Key for resource getting something like "We have user-provided certificates. The server has not specified any issuers, so try all the certificates."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_server_issuers_look_for_matching_certs">
	<summary>Key for resource getting something like "We have user-provided certificates. The server has specified {0} issuer(s). Looking for certificates that match any of the issuers."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_selected_cert">
	<summary>Key for resource getting something like "Selected certificate: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_n_certs_after_filtering">
	<summary>Key for resource getting something like "Left with {0} client certificates to choose from."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_finding_matching_certs">
	<summary>Key for resource getting something like "Trying to find a matching certificate in the certificate store."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_using_cached_credential">
	<summary>Key for resource getting something like "Using the cached credential handle."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_remote_cert_user_declared_valid">
	<summary>Key for resource getting something like "Remote certificate was verified as valid by the user."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_remote_cert_user_declared_invalid">
	<summary>Key for resource getting something like "Remote certificate was verified as invalid by the user."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_remote_cert_has_no_errors">
	<summary>Key for resource getting something like "Remote certificate has no errors."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_remote_cert_has_errors">
	<summary>Key for resource getting something like "Remote certificate has errors:"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_remote_cert_not_available">
	<summary>Key for resource getting something like "The remote server did not provide a certificate."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_remote_cert_name_mismatch">
	<summary>Key for resource getting something like "Certificate name mismatch."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_proxy_autodetect_script_location_parse_error">
	<summary>Key for resource getting something like "WebProxy failed to parse the auto-detected location of a proxy script:"{0}" into a Uri."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_proxy_autodetect_failed">
	<summary>Key for resource getting something like "WebProxy failed to autodetect a Uri for a proxy script."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_proxy_script_execution_error">
	<summary>Key for resource getting something like "WebProxy caught an exception while executing the ScriptReturn script: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_proxy_script_download_compile_error">
	<summary>Key for resource getting something like "WebProxy caught an exception while  downloading/compiling the proxy script: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_proxy_system_setting_update">
	<summary>Key for resource getting something like "ScriptEngine was notified of a potential change in the system's proxy settings and will update WebProxy settings."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_proxy_update_due_to_ip_config_change">
	<summary>Key for resource getting something like "ScriptEngine was notified of a change in the IP configuration and will update WebProxy settings."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_proxy_called_with_null_parameter">
	<summary>Key for resource getting something like "{0} was called with a null '{1}' parameter."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_proxy_called_with_invalid_parameter">
	<summary>Key for resource getting something like "{0} was called with an invalid parameter."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_validation_failed_resubmit">
	<summary>Key for resource getting something like "Resubmitting this request because cache cannot validate the response."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_refused_server_response">
	<summary>Key for resource getting something like "Caching protocol has refused the server response. To allow automatic request retrying set request.AllowAutoRedirect=true."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_ftp_proxy_doesnt_support_partial">
	<summary>Key for resource getting something like "This FTP request is configured to use a proxy through HTTP protocol. Cache revalidation and partially cached responses are not supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_ftp_method">
	<summary>Key for resource getting something like "FTP request method={0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_ftp_supports_bin_only">
	<summary>Key for resource getting something like "Caching is not supported for non-binary FTP request mode."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_replacing_entry_with_HTTP_200">
	<summary>Key for resource getting something like "Replacing cache entry metadata with 'HTTP/1.1 200 OK' status line to satisfy HTTP cache protocol logic."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_now_time">
	<summary>Key for resource getting something like "[Now Time (UTC)] = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_max_age_absolute">
	<summary>Key for resource getting something like "[MaxAge] Absolute time expiration check (sensitive to clock skew), cache Expires: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_age1">
	<summary>Key for resource getting something like "[Age1] Now - LastSynchronized = [Age1] Now - LastSynchronized = {0}, Last Synchronized: {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_age1_date_header">
	<summary>Key for resource getting something like "[Age1] NowTime-Date Header = {0}, Date Header: {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_age1_last_synchronized">
	<summary>Key for resource getting something like "[Age1] Now - LastSynchronized + AgeHeader = {0}, Last Synchronized: {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_age1_last_synchronized_age_header">
	<summary>Key for resource getting something like "[Age1] Now - LastSynchronized + AgeHeader = {0}, Last Synchronized: {1}, Age Header: {2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_age2">
	<summary>Key for resource getting something like "[Age2] AgeHeader = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_max_age_cache_s_max_age">
	<summary>Key for resource getting something like "[MaxAge] Cache s_MaxAge = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_max_age_expires_date">
	<summary>Key for resource getting something like "[MaxAge] Cache Expires - Date = {0}, Expires: {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_max_age_cache_max_age">
	<summary>Key for resource getting something like "[MaxAge] Cache MaxAge = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_no_max_age_use_10_percent">
	<summary>Key for resource getting something like "[MaxAge] Cannot compute Cache MaxAge, use 10% since LastModified: {0}, LastModified: {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_no_max_age_use_default">
	<summary>Key for resource getting something like "[MaxAge] Cannot compute Cache MaxAge, using default RequestCacheValidator.UnspecifiedMaxAge: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_validator_invalid_for_policy">
	<summary>Key for resource getting something like "This validator should not be called for policy : {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_response_last_modified">
	<summary>Key for resource getting something like "Response LastModified={0},  ContentLength= {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cache_last_modified">
	<summary>Key for resource getting something like "Cache    LastModified={0},  ContentLength= {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_partial_and_non_zero_content_offset">
	<summary>Key for resource getting something like "A Cache Entry is partial and the user request has non zero ContentOffset = {0}. A restart from cache is not supported for partial cache entries."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_response_valid_based_on_policy">
	<summary>Key for resource getting something like "Response is valid based on Policy = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_null_response_failure">
	<summary>Key for resource getting something like "Response is null so this Request should fail."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_ftp_response_status">
	<summary>Key for resource getting something like "FTP Response Status={0}, {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_valid_based_on_retry">
	<summary>Key for resource getting something like "Accept this response as valid based on the retry count = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_no_update_based_on_method">
	<summary>Key for resource getting something like "Cache is not updated based on the request Method = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_removed_existing_invalid_entry">
	<summary>Key for resource getting something like "Existing entry is removed because it was found invalid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_not_updated_based_on_policy">
	<summary>Key for resource getting something like "Cache is not updated based on Policy = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_not_updated_because_no_response">
	<summary>Key for resource getting something like "Cache is not updated because there is no response associated with the request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_removed_existing_based_on_method">
	<summary>Key for resource getting something like "Existing cache entry is removed based on the request Method = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_existing_not_removed_because_unexpected_response_status">
	<summary>Key for resource getting something like "Existing cache entry should but cannot be removed due to unexpected response Status = ({0}) {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_removed_existing_based_on_policy">
	<summary>Key for resource getting something like "Existing cache entry is removed based on Policy = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_not_updated_based_on_ftp_response_status">
	<summary>Key for resource getting something like "Cache is not updated based on the FTP response status. Expected = {0}, actual = {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_update_not_supported_for_ftp_restart">
	<summary>Key for resource getting something like "Cache update is not supported for restarted FTP responses. Restart offset = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_removed_entry_because_ftp_restart_response_changed">
	<summary>Key for resource getting something like "Existing cache entry is removed since a restarted response was changed on the server, cache LastModified date = {0}, new LastModified date = {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_last_synchronized">
	<summary>Key for resource getting something like "The cache entry last synchronized time = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_suppress_update_because_synched_last_minute">
	<summary>Key for resource getting something like "Suppressing cache update since the entry was synchronized within the last minute."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_updating_last_synchronized">
	<summary>Key for resource getting something like "Updating cache entry last synchronized time = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cannot_remove">
	<summary>Key for resource getting something like "{0} Cannot Remove (throw): Key = {1}, Error = {2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_key_status">
	<summary>Key for resource getting something like "{0}, Key = {1}, -&gt; Status = {2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_key_remove_failed_status">
	<summary>Key for resource getting something like "{0}, Key = {1}, Remove operation failed -&gt; Status = {2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_usecount_file">
	<summary>Key for resource getting something like "{0}, UseCount = {1}, File = {2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_stream">
	<summary>Key for resource getting something like "{0}, stream = {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_filename">
	<summary>Key for resource getting something like "{0} -&gt; Filename = {1}, Status = {2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_lookup_failed">
	<summary>Key for resource getting something like "{0}, Lookup operation failed -&gt; {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_exception">
	<summary>Key for resource getting something like "{0}, Exception = {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_expected_length">
	<summary>Key for resource getting something like "Expected length (0=none)= {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_last_modified">
	<summary>Key for resource getting something like "LastModified    (0=none)= {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_expires">
	<summary>Key for resource getting something like "Expires         (0=none)= {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_max_stale">
	<summary>Key for resource getting something like "MaxStale (sec)          = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_dumping_metadata">
	<summary>Key for resource getting something like "...Dumping Metadata... "</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_create_failed">
	<summary>Key for resource getting something like "Create operation failed -&gt; {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_set_expires">
	<summary>Key for resource getting something like "Set Expires               ={0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_set_last_modified">
	<summary>Key for resource getting something like "Set LastModified          ={0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_set_last_synchronized">
	<summary>Key for resource getting something like "Set LastSynchronized      ={0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_enable_max_stale">
	<summary>Key for resource getting something like "Enable MaxStale (sec) ={0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_disable_max_stale">
	<summary>Key for resource getting something like "Disable MaxStale (set to 0)."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_set_new_metadata">
	<summary>Key for resource getting something like "Set new Metadata."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_dumping">
	<summary>Key for resource getting something like "...Dumping... "</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_key">
	<summary>Key for resource getting something like "{0}, Key = {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_no_commit">
	<summary>Key for resource getting something like "{0}, Nothing was written to the stream, do not commit that cache entry."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_error_deleting_filename">
	<summary>Key for resource getting something like "{0}, Error deleting a Filename = {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_update_failed">
	<summary>Key for resource getting something like "{0}, Key = {1}, Update operation failed -&gt; {2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_delete_failed">
	<summary>Key for resource getting something like "{0}, Key = {1}, Delete operation failed -&gt; {2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_commit_failed">
	<summary>Key for resource getting something like "{0}, Key = {1}, Commit operation failed -&gt; {2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_committed_as_partial">
	<summary>Key for resource getting something like "{0}, Key = {1}, Committed entry as partial, not cached bytes count = {2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_max_stale_and_update_status">
	<summary>Key for resource getting something like "{0}, MaxStale = {1}, Update Status = {2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_failing_request_with_exception">
	<summary>Key for resource getting something like "Failing request with the WebExceptionStatus = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_request_method">
	<summary>Key for resource getting something like "Request Method = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_http_status_parse_failure">
	<summary>Key for resource getting something like "Cannot Parse Cache HTTP Status Line: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_http_status_line">
	<summary>Key for resource getting something like "Entry Status Line = HTTP/{0} {1} {2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cache_control">
	<summary>Key for resource getting something like "Cache Cache-Control = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_invalid_http_version">
	<summary>Key for resource getting something like "The cached version is invalid, assuming HTTP 1.0."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_no_http_response_header">
	<summary>Key for resource getting something like "This Cache Entry does not carry HTTP response headers."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_http_header_parse_error">
	<summary>Key for resource getting something like "Cannot parse HTTP headers in entry metadata, offending string: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_metadata_name_value_parse_error">
	<summary>Key for resource getting something like "Cannot parse all strings in system metadata as "name:value", offending string: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_content_range_error">
	<summary>Key for resource getting something like "Invalid format of Response Content-Range:{0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cache_control_error">
	<summary>Key for resource getting something like "Invalid CacheControl header = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_unexpected_status">
	<summary>Key for resource getting something like "The cache protocol method {0} has returned unexpected status: {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_object_and_exception">
	<summary>Key for resource getting something like "{0} exception: {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_revalidation_not_needed">
	<summary>Key for resource getting something like "{0}, No cache entry revalidation is needed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_not_updated_based_on_cache_protocol_status">
	<summary>Key for resource getting something like "{0}, Cache is not updated based on the current cache protocol status = {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_closing_cache_stream">
	<summary>Key for resource getting something like "{0}: {1} Closing effective cache stream, type = {2}, cache entry key = {3}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_exception_ignored">
	<summary>Key for resource getting something like "{0}: an exception (ignored) on {1} = {2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_no_cache_entry">
	<summary>Key for resource getting something like "{0} has requested a cache response but the entry does not exist (Stream.Null)."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_null_cached_stream">
	<summary>Key for resource getting something like "{0} has requested a cache response but the cached stream is null."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_requested_combined_but_null_cached_stream">
	<summary>Key for resource getting something like "{0} has requested a combined response but the cached stream is null."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_returned_range_cache">
	<summary>Key for resource getting something like "{0} has returned a range cache stream, Offset = {1}, Length = {2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_entry_not_found_freshness_undefined">
	<summary>Key for resource getting something like "{0}, Cache Entry not found, freshness result = Undefined."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_dumping_cache_context">
	<summary>Key for resource getting something like "...Dumping Cache Context..."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_result">
	<summary>Key for resource getting something like "{0}, result = {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_uri_with_query_has_no_expiration">
	<summary>Key for resource getting something like "Request Uri has a Query, and no explicit expiration time is provided."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_uri_with_query_and_cached_resp_from_http_10">
	<summary>Key for resource getting something like "Request Uri has a Query, and cached response is from HTTP 1.0 server."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_valid_as_fresh_or_because_policy">
	<summary>Key for resource getting something like "Valid as fresh or because of Cache Policy = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_accept_based_on_retry_count">
	<summary>Key for resource getting something like "Accept this response base on the retry count = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_date_header_older_than_cache_entry">
	<summary>Key for resource getting something like "Response Date header value is older than that of the cache entry."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_server_didnt_satisfy_range">
	<summary>Key for resource getting something like "Server did not satisfy the range: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_304_received_on_unconditional_request">
	<summary>Key for resource getting something like "304 response was received on an unconditional request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_304_received_on_unconditional_request_expected_200_206">
	<summary>Key for resource getting something like "304 response was received on an unconditional request, but expected response code is 200 or 206."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_last_modified_header_older_than_cache_entry">
	<summary>Key for resource getting something like "HTTP 1.0 Response Last-Modified header value is older than that of the cache entry."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_freshness_outside_policy_limits">
	<summary>Key for resource getting something like "Response freshness is not within the specified policy limits."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_need_to_remove_invalid_cache_entry_304">
	<summary>Key for resource getting something like "Need to remove an invalid cache entry with status code == 304(NotModified)."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_status">
	<summary>Key for resource getting something like "Response Status = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_304_or_request_head">
	<summary>Key for resource getting something like "Response==304 or Request was HEAD, updating cache entry."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_dont_update_cached_headers">
	<summary>Key for resource getting something like "Do not update Cached Headers."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_update_cached_headers">
	<summary>Key for resource getting something like "Update Cached Headers."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_partial_resp_not_combined_with_existing_entry">
	<summary>Key for resource getting something like "A partial response is not combined with existing cache entry, Cache Stream Size = {0}, response Range Start = {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_request_contains_conditional_header">
	<summary>Key for resource getting something like "User Request contains a conditional header."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_not_a_get_head_post">
	<summary>Key for resource getting something like "This was Not a GET, HEAD or POST request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cannot_update_cache_if_304">
	<summary>Key for resource getting something like "Cannot update cache if Response status == 304 and a cache entry was not found."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cannot_update_cache_with_head_resp">
	<summary>Key for resource getting something like "Cannot update cache with HEAD response if the cache entry does not exist."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_http_resp_is_null">
	<summary>Key for resource getting something like "HttpWebResponse is null."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_cache_control_is_no_store">
	<summary>Key for resource getting something like "Response Cache-Control = no-store."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_cache_control_is_public">
	<summary>Key for resource getting something like "Response Cache-Control = public."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_cache_control_is_private">
	<summary>Key for resource getting something like "Response Cache-Control = private, and Cache is public."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_cache_control_is_private_plus_headers">
	<summary>Key for resource getting something like "Response Cache-Control = private+Headers, removing those headers."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_older_than_cache">
	<summary>Key for resource getting something like "HttpWebResponse date is older than of the cached one."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_revalidation_required">
	<summary>Key for resource getting something like "Response revalidation is always required but neither Last-Modified nor ETag header is set on the response."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_needs_revalidation">
	<summary>Key for resource getting something like "Response can be cached although it will always require revalidation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_allows_caching">
	<summary>Key for resource getting something like "Response explicitly allows caching = Cache-Control: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_auth_header_and_no_s_max_age">
	<summary>Key for resource getting something like "Request carries Authorization Header and no s-maxage, proxy-revalidate or public directive found."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_post_resp_without_cache_control_or_expires">
	<summary>Key for resource getting something like "POST Response without Cache-Control or Expires headers."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_valid_based_on_status_code">
	<summary>Key for resource getting something like "Valid based on Status Code: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_no_cache_control">
	<summary>Key for resource getting something like "Response with no CacheControl and Status Code = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_age">
	<summary>Key for resource getting something like "Cache Age = {0}, Cache MaxAge = {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_policy_min_fresh">
	<summary>Key for resource getting something like "Client Policy MinFresh = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_policy_max_age">
	<summary>Key for resource getting something like "Client Policy MaxAge = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_policy_cache_sync_date">
	<summary>Key for resource getting something like "Client Policy CacheSyncDate (UTC) = {0}, Cache LastSynchronizedUtc = {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_policy_max_stale">
	<summary>Key for resource getting something like "Client Policy MaxStale = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_control_no_cache">
	<summary>Key for resource getting something like "Cached CacheControl = no-cache."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_control_no_cache_removing_some_headers">
	<summary>Key for resource getting something like "Cached CacheControl = no-cache, Removing some headers."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_control_must_revalidate">
	<summary>Key for resource getting something like "Cached CacheControl = must-revalidate and Cache is not fresh."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cached_auth_header">
	<summary>Key for resource getting something like "The cached entry has Authorization Header and cache is not fresh."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cached_auth_header_no_control_directive">
	<summary>Key for resource getting something like "The cached entry has Authorization Header and no Cache-Control directive present that would allow to use that entry."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_after_validation">
	<summary>Key for resource getting something like "After Response Cache Validation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_status_304">
	<summary>Key for resource getting something like "Response status == 304 but the cache entry does not exist."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_head_resp_has_different_content_length">
	<summary>Key for resource getting something like "A response resulted from a HEAD request has different Content-Length header."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_head_resp_has_different_content_md5">
	<summary>Key for resource getting something like "A response resulted from a HEAD request has different Content-MD5 header."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_head_resp_has_different_etag">
	<summary>Key for resource getting something like "A response resulted from a HEAD request has different ETag header."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_304_head_resp_has_different_last_modified">
	<summary>Key for resource getting something like "A 304 response resulted from a HEAD request has different Last-Modified header."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_existing_entry_has_to_be_discarded">
	<summary>Key for resource getting something like "An existing cache entry has to be discarded."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_existing_entry_should_be_discarded">
	<summary>Key for resource getting something like "An existing cache entry should be discarded."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_206_resp_non_matching_entry">
	<summary>Key for resource getting something like "A 206 Response has been received and either ETag or Last-Modified header value does not match cache entry."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_206_resp_starting_position_not_adjusted">
	<summary>Key for resource getting something like "The starting position for 206 Response is not adjusted to the end of cache entry."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_combined_resp_requested">
	<summary>Key for resource getting something like "Creation of a combined response has been requested from the cache protocol."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_updating_headers_on_304">
	<summary>Key for resource getting something like "Updating headers on 304 response."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_suppressing_headers_update_on_304">
	<summary>Key for resource getting something like "Suppressing cache headers update on 304, new headers don't add anything."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_status_code_not_304_206">
	<summary>Key for resource getting something like "A Response Status Code is not 304 or 206."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_sxx_resp_cache_only">
	<summary>Key for resource getting something like "A 5XX Response and Cache-Only like policy, serving from cache."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_sxx_resp_can_be_replaced">
	<summary>Key for resource getting something like "A 5XX Response that can be replaced by existing cache entry."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_vary_header_empty">
	<summary>Key for resource getting something like "Cache entry Vary header is empty."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_vary_header_contains_asterisks">
	<summary>Key for resource getting something like "Cache entry Vary header contains '*'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_no_headers_in_metadata">
	<summary>Key for resource getting something like "No request headers are found in cached metadata to test based on the cached response Vary header."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_vary_header_mismatched_count">
	<summary>Key for resource getting something like "Vary header: Request and cache header fields count does not match, header name = {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_vary_header_mismatched_field">
	<summary>Key for resource getting something like "Vary header: A Cache header field mismatch the request one, header name = {0}, cache field = {1}, request field = {2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_vary_header_match">
	<summary>Key for resource getting something like "All required Request headers match based on cached Vary response header."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_range">
	<summary>Key for resource getting something like "Request Range (not in Cache yet) = Range:{0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_range_invalid_format">
	<summary>Key for resource getting something like "Invalid format of Request Range:{0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_range_not_in_cache">
	<summary>Key for resource getting something like "Cannot serve from Cache, Range:{0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_range_in_cache">
	<summary>Key for resource getting something like "Serving Request Range from cache, Range:{0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_partial_resp">
	<summary>Key for resource getting something like "Serving Partial Response (206) from cache, Content-Range:{0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_range_request_range">
	<summary>Key for resource getting something like "Range Request (user specified), Range: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_could_be_partial">
	<summary>Key for resource getting something like "Could be a Partial Cached Response, Size = {0}, Response Content Length = {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_condition_if_none_match">
	<summary>Key for resource getting something like "Request Condition = If-None-Match:{0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_condition_if_modified_since">
	<summary>Key for resource getting something like "Request Condition = If-Modified-Since:{0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cannot_construct_conditional_request">
	<summary>Key for resource getting something like "A Conditional Request cannot be constructed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cannot_construct_conditional_range_request">
	<summary>Key for resource getting something like "A Conditional Range request cannot be constructed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_entry_size_too_big">
	<summary>Key for resource getting something like "Cached Entry Size = {0} is too big, cannot do a range request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_condition_if_range">
	<summary>Key for resource getting something like "Request Condition = If-Range:{0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_conditional_range_not_implemented_on_http_10">
	<summary>Key for resource getting something like "A Conditional Range request on Http &lt;= 1.0 is not implemented."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_saving_request_headers">
	<summary>Key for resource getting something like "Saving Request Headers, Vary: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_only_byte_range_implemented">
	<summary>Key for resource getting something like "Ranges other than bytes are not implemented."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_multiple_complex_range_not_implemented">
	<summary>Key for resource getting something like "Multiple/complexe ranges are not implemented."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_unknown">
	<summary>Key for resource getting something like "unknown"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_operation_returned_something">
	<summary>Key for resource getting something like "{0} returned {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_operation_failed_with_error">
	<summary>Key for resource getting something like "{0} failed with error {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_buffered_n_bytes">
	<summary>Key for resource getting something like "Buffered {0} bytes."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_method_equal">
	<summary>Key for resource getting something like "Method={0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_releasing_connection">
	<summary>Key for resource getting something like "Releasing FTP connection#{0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_unexpected_exception">
	<summary>Key for resource getting something like "Unexpected exception in {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_server_response_error_code">
	<summary>Key for resource getting something like "Error code {0} was received from server response."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_resubmitting_request">
	<summary>Key for resource getting something like "Resubmitting request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_retrieving_localhost_exception">
	<summary>Key for resource getting something like "An unexpected exception while retrieving the local address list: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_resolved_servicepoint_may_not_be_remote_server">
	<summary>Key for resource getting something like "A resolved ServicePoint host could be wrongly considered as a remote server."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_received_status_line">
	<summary>Key for resource getting something like "Received status line: Version={0}, StatusCode={1}, StatusDescription={2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_sending_headers">
	<summary>Key for resource getting something like "Sending headers
{{
{0}}}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_received_headers">
	<summary>Key for resource getting something like "Received headers
{{
{0}}}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_shell_expression_pattern_format_warning">
	<summary>Key for resource getting something like "ShellServices.ShellExpression.Parse() was called with a badly formatted 'pattern':{0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_exception_in_callback">
	<summary>Key for resource getting something like "Exception in callback: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_sending_command">
	<summary>Key for resource getting something like "Sending command [{0}]"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_received_response">
	<summary>Key for resource getting something like "Received response [{0}]"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Mail7BitStreamInvalidCharacter">
	<summary>Key for resource getting something like "An invalid character was found in the 7-bit stream."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailAddressInvalidFormat">
	<summary>Key for resource getting something like "The specified string is not in the form required for an e-mail address."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailAddressUnsupportedFormat">
	<summary>Key for resource getting something like "The specified e-mail address is currently not supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailSubjectInvalidFormat">
	<summary>Key for resource getting something like "The specified string is not in the form required for a subject."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailBase64InvalidCharacter">
	<summary>Key for resource getting something like "An invalid character was found in the Base-64 stream."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailCollectionIsReadOnly">
	<summary>Key for resource getting something like "The collection is read-only."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailDateInvalidFormat">
	<summary>Key for resource getting something like "The date is in an invalid format."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderFieldAlreadyExists">
	<summary>Key for resource getting something like "The specified singleton field already exists in the collection and cannot be added."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderFieldInvalidCharacter">
	<summary>Key for resource getting something like "An invalid character was found in the mail header."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderFieldMalformedHeader">
	<summary>Key for resource getting something like "The mail header is malformed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderFieldMismatchedName">
	<summary>Key for resource getting something like "The header name does not match this property."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderIndexOutOfBounds">
	<summary>Key for resource getting something like "The index value is outside the bounds of the array."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderItemAccessorOnlySingleton">
	<summary>Key for resource getting something like "The Item property can only be used with singleton fields."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderListHasChanged">
	<summary>Key for resource getting something like "The underlying list has been changed and the enumeration is out of date."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderResetCalledBeforeEOF">
	<summary>Key for resource getting something like "The stream should have been consumed before resetting."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderTargetArrayTooSmall">
	<summary>Key for resource getting something like "The target array is too small to contain all the headers."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderInvalidCID">
	<summary>Key for resource getting something like "The ContentID cannot contain a '&lt;' or '&gt;' character."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHostNotFound">
	<summary>Key for resource getting something like "The SMTP host was not found."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailReaderGetContentStreamAlreadyCalled">
	<summary>Key for resource getting something like "GetContentStream() can only be called once."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailReaderTruncated">
	<summary>Key for resource getting something like "Premature end of stream."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailWriterIsInContent">
	<summary>Key for resource getting something like "This operation cannot be performed while in content."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailWriterLineLengthTooSmall">
	<summary>Key for resource getting something like "Maximum line length too small."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailServerDoesNotSupportStartTls">
	<summary>Key for resource getting something like "Server does not support secure connections."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailServerResponse">
	<summary>Key for resource getting something like "The server response was: {0}"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SSPIAuthenticationOrSPNNull">
	<summary>Key for resource getting something like "AuthenticationType and ServicePrincipalName cannot be specified as null for server's SSPI Negotiation module."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SSPIPInvokeError">
	<summary>Key for resource getting something like "{0} failed with error {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SSPIInvalidHandleType">
	<summary>Key for resource getting something like "'{0}' is not a supported handle type."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpAlreadyConnected">
	<summary>Key for resource getting something like "Already connected."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpAuthenticationFailed">
	<summary>Key for resource getting something like "Authentication failed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpAuthenticationFailedNoCreds">
	<summary>Key for resource getting something like "Authentication failed due to lack of credentials."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpDataStreamOpen">
	<summary>Key for resource getting something like "Data stream is still open."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpDefaultMimePreamble">
	<summary>Key for resource getting something like "This is a multi-part MIME message."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpDefaultSubject">
	<summary>Key for resource getting something like "@@SOAP Application Message"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpInvalidResponse">
	<summary>Key for resource getting something like "Smtp server returned an invalid response."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpNotConnected">
	<summary>Key for resource getting something like "Not connected."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpSystemStatus">
	<summary>Key for resource getting something like "System status, or system help reply."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpHelpMessage">
	<summary>Key for resource getting something like "Help message."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpServiceReady">
	<summary>Key for resource getting something like "Service ready."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpServiceClosingTransmissionChannel">
	<summary>Key for resource getting something like "Service closing transmission channel."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpOK">
	<summary>Key for resource getting something like "Completed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpUserNotLocalWillForward">
	<summary>Key for resource getting something like "User not local; will forward to specified path."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpStartMailInput">
	<summary>Key for resource getting something like "Start mail input; end with &lt;CRLF&gt;.&lt;CRLF&gt;."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpServiceNotAvailable">
	<summary>Key for resource getting something like "Service not available, closing transmission channel."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpMailboxBusy">
	<summary>Key for resource getting something like "Mailbox unavailable."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpLocalErrorInProcessing">
	<summary>Key for resource getting something like "Error in processing."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpInsufficientStorage">
	<summary>Key for resource getting something like "Insufficient system storage."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpPermissionDenied">
	<summary>Key for resource getting something like "Client does not have permission to Send As this sender."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpCommandUnrecognized">
	<summary>Key for resource getting something like "Syntax error, command unrecognized."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpSyntaxError">
	<summary>Key for resource getting something like "Syntax error in parameters or arguments."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpCommandNotImplemented">
	<summary>Key for resource getting something like "Command not implemented."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpBadCommandSequence">
	<summary>Key for resource getting something like "Bad sequence of commands."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpCommandParameterNotImplemented">
	<summary>Key for resource getting something like "Command parameter not implemented."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpMailboxUnavailable">
	<summary>Key for resource getting something like "Mailbox unavailable."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpUserNotLocalTryAlternatePath">
	<summary>Key for resource getting something like "User not local; please try a different path."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpExceededStorageAllocation">
	<summary>Key for resource getting something like "Exceeded storage allocation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpMailboxNameNotAllowed">
	<summary>Key for resource getting something like "Mailbox name not allowed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpTransactionFailed">
	<summary>Key for resource getting something like "Transaction failed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpSendMailFailure">
	<summary>Key for resource getting something like "Failure sending mail."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpRecipientFailed">
	<summary>Key for resource getting something like "Unable to send to a recipient."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpRecipientRequired">
	<summary>Key for resource getting something like "A recipient must be specified."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpFromRequired">
	<summary>Key for resource getting something like "A from address must be specified."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpAllRecipientsFailed">
	<summary>Key for resource getting something like "Unable to send to all recipients."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpClientNotPermitted">
	<summary>Key for resource getting something like "Client does not have permission to submit mail to this server."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpMustIssueStartTlsFirst">
	<summary>Key for resource getting something like "The SMTP server requires a secure connection or the client was not authenticated."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpNeedAbsolutePickupDirectory">
	<summary>Key for resource getting something like "Only absolute directories are allowed for pickup directory."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpGetIisPickupDirectoryFailed">
	<summary>Key for resource getting something like "Cannot get IIS pickup directory."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpPickupDirectoryDoesnotSupportSsl">
	<summary>Key for resource getting something like "SSL must not be enabled for pickup-directory delivery methods."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpOperationInProgress">
	<summary>Key for resource getting something like "Previous operation is still in progress."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpAuthResponseInvalid">
	<summary>Key for resource getting something like "The server returned an invalid response in the authentication handshake."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpEhloResponseInvalid">
	<summary>Key for resource getting something like "The server returned an invalid response to the EHLO command."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MimeTransferEncodingNotSupported">
	<summary>Key for resource getting something like "The MIME transfer encoding '{0}' is not supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SeekNotSupported">
	<summary>Key for resource getting something like "Seeking is not supported on this stream."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.WriteNotSupported">
	<summary>Key for resource getting something like "Writing is not supported on this stream."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidHexDigit">
	<summary>Key for resource getting something like "Invalid hex digit '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidSSPIContext">
	<summary>Key for resource getting something like "The SSPI context is not valid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidSSPIContextKey">
	<summary>Key for resource getting something like "A null session key was obtained from SSPI."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidSSPINegotiationElement">
	<summary>Key for resource getting something like "Invalid SSPI BinaryNegotiationElement."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidHeaderName">
	<summary>Key for resource getting something like "An invalid character was found in header name."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidHeaderValue">
	<summary>Key for resource getting something like "An invalid character was found in header value."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CannotGetEffectiveTimeOfSSPIContext">
	<summary>Key for resource getting something like "Cannot get the effective time of the SSPI context."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CannotGetExpiryTimeOfSSPIContext">
	<summary>Key for resource getting something like "Cannot get the expiry time of the SSPI context."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ReadNotSupported">
	<summary>Key for resource getting something like "Reading is not supported on this stream."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidAsyncResult">
	<summary>Key for resource getting something like "The AsyncResult is not valid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnspecifiedHost">
	<summary>Key for resource getting something like "The SMTP host was not specified."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidPort">
	<summary>Key for resource getting something like "The specified port is invalid. The port must be greater than 0."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpInvalidOperationDuringSend">
	<summary>Key for resource getting something like "This operation cannot be performed while a message is being sent."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MimePartCantResetStream">
	<summary>Key for resource getting something like "One of the streams has already been used and can't be reset to the origin."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MediaTypeInvalid">
	<summary>Key for resource getting something like "The specified media type is invalid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ContentTypeInvalid">
	<summary>Key for resource getting something like "The specified content type is invalid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ContentDispositionInvalid">
	<summary>Key for resource getting something like "The specified content disposition is invalid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.AttributeNotSupported">
	<summary>Key for resource getting something like "'{0}' is not a valid configuration attribute for type '{1}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cannot_remove_with_null">
	<summary>Key for resource getting something like "Cannot remove with null name."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_elements_only">
	<summary>Key for resource getting something like "Only elements allowed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_no_child_nodes">
	<summary>Key for resource getting something like "Child nodes not allowed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_required_attribute_empty">
	<summary>Key for resource getting something like "Required attribute '{0}' cannot be empty."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_required_attribute_missing">
	<summary>Key for resource getting something like "Required attribute '{0}' not found."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_time_overflow">
	<summary>Key for resource getting something like "The time span for the property '{0}' exceeds the maximum that can be stored in the configuration."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_type_must_be_configurationvalidation">
	<summary>Key for resource getting something like "The ConfigurationValidation attribute must be derived from ConfigurationValidation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_type_must_be_typeconverter">
	<summary>Key for resource getting something like "The ConfigurationPropertyConverter attribute must be derived from TypeConverter."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_unknown_format">
	<summary>Key for resource getting something like "Unknown"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_unrecognized_attribute">
	<summary>Key for resource getting something like "Unrecognized attribute '{0}'. Note that attribute names are case-sensitive."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_unrecognized_element">
	<summary>Key for resource getting something like "Unrecognized element."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_invalid_boolean_attribute">
	<summary>Key for resource getting something like "The property '{0}' must have value 'true' or 'false'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_invalid_integer_attribute">
	<summary>Key for resource getting something like "The '{0}' attribute must be set to an integer value."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_invalid_positive_integer_attribute">
	<summary>Key for resource getting something like "The '{0}' attribute must be set to a positive integer value."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_invalid_type_attribute">
	<summary>Key for resource getting something like "The '{0}' attribute must be set to a valid Type name."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_missing_required_attribute">
	<summary>Key for resource getting something like "The '{0}' attribute must be specified on the '{1}' tag."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_name_value_file_section_file_invalid_root">
	<summary>Key for resource getting something like "The root element must match the name of the section referencing the file, '{0}'"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_provider_must_implement_type">
	<summary>Key for resource getting something like "Provider must implement the class '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_provider_name_null_or_empty">
	<summary>Key for resource getting something like "Provider name cannot be null or empty."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_provider_not_found">
	<summary>Key for resource getting something like "The provider was not found in the collection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_property_name_cannot_be_empty">
	<summary>Key for resource getting something like "Property '{0}' cannot be empty or null."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_section_cannot_clear_locked_section">
	<summary>Key for resource getting something like "Cannot clear section handlers.  Section '{0}' is locked."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_section_record_not_found">
	<summary>Key for resource getting something like "SectionRecord not found."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_source_cannot_contain_file">
	<summary>Key for resource getting something like "The 'File' property cannot be used with the ConfigSource property."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_system_already_set">
	<summary>Key for resource getting something like "The configuration system can only be set once.  Configuration system is already set"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_unable_to_read_security_policy">
	<summary>Key for resource getting something like "Unable to read security policy."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_write_xml_returned_null">
	<summary>Key for resource getting something like "WriteXml returned null."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cannot_clear_sections_within_group">
	<summary>Key for resource getting something like "Server cannot clear configuration sections from within section groups.  &lt;clear/&gt; must be a child of &lt;configSections&gt;."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cannot_exit_up_top_directory">
	<summary>Key for resource getting something like "Cannot use a leading .. to exit above the top directory."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Could_not_create_listener">
	<summary>Key for resource getting something like "Couldn't create listener '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TextWriterTL_DefaultConstructor_NotSupported">
	<summary>Key for resource getting something like "initializeData needs to be a valid file name for TextWriterTraceListener.  "</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Could_not_create_type_instance">
	<summary>Key for resource getting something like "Could not create {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Could_not_find_type">
	<summary>Key for resource getting something like "Couldn't find type for class {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Could_not_get_constructor">
	<summary>Key for resource getting something like "Couldn't find constructor for class {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.EmptyTypeName_NotAllowed">
	<summary>Key for resource getting something like "switchType needs to be a valid class name. It can't be empty."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Incorrect_base_type">
	<summary>Key for resource getting something like "The specified type, '{0}' is not derived from the appropriate base type, '{1}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Only_specify_one">
	<summary>Key for resource getting something like "'switchValue' and 'switchName' cannot both be specified on source '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Provider_Already_Initialized">
	<summary>Key for resource getting something like "This provider instance has already been initialized."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Reference_listener_cant_have_properties">
	<summary>Key for resource getting something like "A listener with no type name specified references the sharedListeners section and cannot have any attributes other than 'Name'.  Listener: '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Reference_to_nonexistent_listener">
	<summary>Key for resource getting something like "Listener '{0}' does not exist in the sharedListeners section."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SettingsPropertyNotFound">
	<summary>Key for resource getting something like "The settings property '{0}' was not found."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SettingsPropertyReadOnly">
	<summary>Key for resource getting something like "The settings property '{0}' is read-only."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SettingsPropertyWrongType">
	<summary>Key for resource getting something like "The settings property '{0}' is of a non-compatible type."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Type_isnt_tracelistener">
	<summary>Key for resource getting something like "Could not add trace listener {0} because it is not a subclass of TraceListener."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Unable_to_convert_type_from_string">
	<summary>Key for resource getting something like "Could not find a type-converter to convert object if type '{0}' from string."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Unable_to_convert_type_to_string">
	<summary>Key for resource getting something like "Could not find a type-converter to convert object if type '{0}' to string."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Value_must_be_numeric">
	<summary>Key for resource getting something like "Error in trace switch '{0}': The value of a switch must be integral."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Could_not_create_from_default_value">
	<summary>Key for resource getting something like "The property '{0}' could not be created from it's default value. Error message: {1}"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Could_not_create_from_default_value_2">
	<summary>Key for resource getting something like "The property '{0}' could not be created from it's default value because the default value is of a different type."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidDirName">
	<summary>Key for resource getting something like "The directory name {0} is invalid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_IOError">
	<summary>Key for resource getting something like "Error reading the {0} directory."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PatternInvalidChar">
	<summary>Key for resource getting something like "The character '{0}' in the pattern provided is not valid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BufferSizeTooLarge">
	<summary>Key for resource getting something like "The specified buffer size is too large. FileSystemWatcher cannot allocate {0} bytes for the internal buffer."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_ChangedFilter">
	<summary>Key for resource getting something like "Flag to indicate which change event to monitor."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_Enabled">
	<summary>Key for resource getting something like "Flag to indicate whether this component is active or not."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_Filter">
	<summary>Key for resource getting something like "The file pattern filter."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_IncludeSubdirectories">
	<summary>Key for resource getting something like "Flag to watch subdirectories."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_Path">
	<summary>Key for resource getting something like "The path to the directory to monitor."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_SynchronizingObject">
	<summary>Key for resource getting something like "The object used to marshal the event handler calls issued as a result of a Directory change."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_Changed">
	<summary>Key for resource getting something like "Occurs when a file and/or directory change matches the filter."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_Created">
	<summary>Key for resource getting something like "Occurs when a file and/or directory creation matches the filter."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_Deleted">
	<summary>Key for resource getting something like "Occurs when a file and/or directory deletion matches the filter."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_Renamed">
	<summary>Key for resource getting something like "Occurs when a file and/or directory rename matches the filter."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_BufferOverflow">
	<summary>Key for resource getting something like "Too many changes at once in directory:{0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileSystemWatcherDesc">
	<summary>Key for resource getting something like "Monitors file system change notifications and raises events when a directory or file changes."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSet">
	<summary>Key for resource getting something like "[Not Set]"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TimerAutoReset">
	<summary>Key for resource getting something like "Indicates whether the timer will be restarted when it is enabled."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TimerEnabled">
	<summary>Key for resource getting something like "Indicates whether the timer is enabled to fire events at a defined interval."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TimerInterval">
	<summary>Key for resource getting something like "The number of milliseconds between timer events."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TimerIntervalElapsed">
	<summary>Key for resource getting something like "Occurs when the Interval has elapsed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TimerSynchronizingObject">
	<summary>Key for resource getting something like "The object used to marshal the event handler calls issued when an interval has elapsed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MismatchedCounterTypes">
	<summary>Key for resource getting something like "Mismatched counter types."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoPropertyForAttribute">
	<summary>Key for resource getting something like "Could not find a property for the attribute '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidAttributeType">
	<summary>Key for resource getting something like "The value of attribute '{0}' could not be converted to the proper type."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Generic_ArgCantBeEmptyString">
	<summary>Key for resource getting something like "'{0}' can not be empty string."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BadLogName">
	<summary>Key for resource getting something like "Event log names must consist of printable characters and cannot contain \, *, ?, or spaces"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidProperty">
	<summary>Key for resource getting something like "Invalid value {1} for property {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotifyCreateFailed">
	<summary>Key for resource getting something like "Cannot create Notify event."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantMonitorEventLog">
	<summary>Key for resource getting something like "Cannot monitor Event log. The log may exist on a remote computer."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InitTwice">
	<summary>Key for resource getting something like "Cannot initialize the same object twice."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidParameter">
	<summary>Key for resource getting something like "Invalid value '{1}' for parameter '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MissingParameter">
	<summary>Key for resource getting something like "Must specify value for {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ParameterTooLong">
	<summary>Key for resource getting something like "The size of {0} is too big. It cannot be longer than {1} characters."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LocalSourceAlreadyExists">
	<summary>Key for resource getting something like "Source {0} already exists on the local computer."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SourceAlreadyExists">
	<summary>Key for resource getting something like "Source {0} already exists on the computer '{1}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LocalLogAlreadyExistsAsSource">
	<summary>Key for resource getting something like "Log {0} has already been registered as a source on the local computer."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogAlreadyExistsAsSource">
	<summary>Key for resource getting something like "Log {0} has already been registered as a source on the computer '{1}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.DuplicateLogName">
	<summary>Key for resource getting something like "Only the first eight characters of a custom log name are significant, and there is already another log on the system using the first eight characters of the name given. Name given: '{0}', name of existing log: '{1}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.RegKeyMissing">
	<summary>Key for resource getting something like "Cannot open registry key {0}\{1}\{2} on computer '{3}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LocalRegKeyMissing">
	<summary>Key for resource getting something like "Cannot open registry key {0}\{1}\{2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.RegKeyMissingShort">
	<summary>Key for resource getting something like "Cannot open registry key {0} on computer {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidParameterFormat">
	<summary>Key for resource getting something like "Invalid format for argument {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoLogName">
	<summary>Key for resource getting something like "Log to delete was not specified."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.RegKeyNoAccess">
	<summary>Key for resource getting something like "Cannot open registry key {0} on computer {1}. You might not have access."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MissingLog">
	<summary>Key for resource getting something like "Cannot find Log {0} on computer '{1}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SourceNotRegistered">
	<summary>Key for resource getting something like "The source '{0}' is not registered on machine '{1}', or you do not have write access to the {2} registry key."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LocalSourceNotRegistered">
	<summary>Key for resource getting something like "Source {0} is not registered on the local computer."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantRetrieveEntries">
	<summary>Key for resource getting something like "Cannot retrieve all entries."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.IndexOutOfBounds">
	<summary>Key for resource getting something like "Index {0} is out of bounds."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantReadLogEntryAt">
	<summary>Key for resource getting something like "Cannot read log entry number {0}.  The event log may be corrupt."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MissingLogProperty">
	<summary>Key for resource getting something like "Log property value has not been specified."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantOpenLog">
	<summary>Key for resource getting something like "Cannot open log {0} on machine {1}. Windows has not provided an error code."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NeedSourceToOpen">
	<summary>Key for resource getting something like "Source property was not set before opening the event log in write mode."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NeedSourceToWrite">
	<summary>Key for resource getting something like "Source property was not set before writing to the event log."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantOpenLogAccess">
	<summary>Key for resource getting something like "Cannot open log for source '{0}'. You may not have write access."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryTooLong">
	<summary>Key for resource getting something like "Log entry string is too long. A string written to the event log cannot exceed 32766 characters."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TooManyReplacementStrings">
	<summary>Key for resource getting something like "The maximum allowed number of replacement strings is 255."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogSourceMismatch">
	<summary>Key for resource getting something like "The source '{0}' is not registered in log '{1}'. (It is registered in log '{2}'.) " The Source and Log properties must be matched, or you may set Log to the empty string, and it will automatically be matched to the Source property."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoAccountInfo">
	<summary>Key for resource getting something like "Cannot obtain account information."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoCurrentEntry">
	<summary>Key for resource getting something like "No current EventLog entry available, cursor is located before the first or after the last element of the enumeration."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MessageNotFormatted">
	<summary>Key for resource getting something like "The description for Event ID '{0}' in Source '{1}' cannot be found.  The local computer may not have the necessary registry information or message DLL files to display the message, or you may not have permission to access them.  The following information is part of the event:"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.EventID">
	<summary>Key for resource getting something like "Invalid eventID value '{0}'. It must be in the range between '{1}' and '{2}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogDoesNotExists">
	<summary>Key for resource getting something like "The event log '{0}' on computer '{1}' does not exist."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidCustomerLogName">
	<summary>Key for resource getting something like "The log name: '{0}' is invalid for customer log creation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CannotDeleteEqualSource">
	<summary>Key for resource getting something like "The event log source '{0}' cannot be deleted, because it's equal to the log name."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.RentionDaysOutOfRange">
	<summary>Key for resource getting something like "'retentionDays' must be between 1 and 365 days."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MaximumKilobytesOutOfRange">
	<summary>Key for resource getting something like "MaximumKilobytes must be between 64 KB and 4 GB, and must be in 64K increments."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SomeLogsInaccessible">
	<summary>Key for resource getting something like "The source was not found, but some or all event logs could not be searched.  Inaccessible logs: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BadConfigSwitchValue">
	<summary>Key for resource getting something like "The config value for Switch '{0}' was invalid."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ConfigSectionsUnique">
	<summary>Key for resource getting something like "The '{0}' section can only appear once per config file."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ConfigSectionsUniquePerSection">
	<summary>Key for resource getting something like "The '{0}' tag can only appear once per section."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SourceListenerDoesntExist">
	<summary>Key for resource getting something like "The listener '{0}' added to source '{1}' must have a listener with the same name defined in the main Trace listeners section."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SourceSwitchDoesntExist">
	<summary>Key for resource getting something like "The source '{0}' must have a switch with the same name defined in the Switches section."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ReadOnlyCounter">
	<summary>Key for resource getting something like "Cannot update Performance Counter, this object has been initialized as ReadOnly."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ReadOnlyRemoveInstance">
	<summary>Key for resource getting something like "Cannot remove Performance Counter Instance, this object as been initialized as ReadOnly."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotCustomCounter">
	<summary>Key for resource getting something like "The requested Performance Counter is not a custom counter, it has to be initialized as ReadOnly."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CategoryNameMissing">
	<summary>Key for resource getting something like "Failed to initialize because CategoryName is missing."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CounterNameMissing">
	<summary>Key for resource getting something like "Failed to initialize because CounterName is missing."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceNameProhibited">
	<summary>Key for resource getting something like "Counter is single instance, instance name '{0}' is not valid for this counter category."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceNameRequired">
	<summary>Key for resource getting something like "Counter is not single instance, an instance name needs to be specified."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MissingInstance">
	<summary>Key for resource getting something like "Instance {0} does not exist in category {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PerformanceCategoryExists">
	<summary>Key for resource getting something like "Cannot create Performance Category '{0}' because it already exists."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidCounterName">
	<summary>Key for resource getting something like "Invalid empty or null string for counter name."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.DuplicateCounterName">
	<summary>Key for resource getting something like "Cannot create Performance Category with counter name {0} because the name is a duplicate."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantDeleteCategory">
	<summary>Key for resource getting something like "Cannot delete Performance Category because this category is not registered or is a system category."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MissingCategory">
	<summary>Key for resource getting something like "Category does not exist."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MissingCategoryDetail">
	<summary>Key for resource getting something like "Category {0} does not exist."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantReadCategory">
	<summary>Key for resource getting something like "Cannot read Category {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MissingCounter">
	<summary>Key for resource getting something like "Counter {0} does not exist."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CategoryNameNotSet">
	<summary>Key for resource getting something like "Category name property has not been set."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CounterExists">
	<summary>Key for resource getting something like "Could not locate Performance Counter with specified category name '{0}', counter name '{1}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantReadCategoryIndex">
	<summary>Key for resource getting something like "Could not Read Category Index: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantReadCounter">
	<summary>Key for resource getting something like "Counter '{0}' does not exist in the specified Category."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantReadInstance">
	<summary>Key for resource getting something like "Instance '{0}' does not exist in the specified Category."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.RemoteWriting">
	<summary>Key for resource getting something like "Cannot write to a Performance Counter in a remote machine."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CounterLayout">
	<summary>Key for resource getting something like "The Counter layout for the Category specified is invalid, a counter of the type:  AverageCount64, AverageTimer32, CounterMultiTimer, CounterMultiTimerInverse, CounterMultiTimer100Ns, CounterMultiTimer100NsInverse, RawFraction, or SampleFraction has to be immediately followed by any of the base counter types: AverageBase, CounterMultiBase, RawBase or SampleBase."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PossibleDeadlock">
	<summary>Key for resource getting something like "The operation couldn't be completed, potential internal deadlock."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SharedMemoryGhosted">
	<summary>Key for resource getting something like "Cannot access shared memory, AppDomain has been unloaded."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.HelpNotAvailable">
	<summary>Key for resource getting something like "Help not available."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PerfInvalidHelp">
	<summary>Key for resource getting something like "Invalid help string. Its length must be in the range between '{0}' and '{1}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PerfInvalidCounterName">
	<summary>Key for resource getting something like "Invalid counter name. Its length must be in the range between '{0}' and '{1}'. Double quotes, control characters and leading or trailing spaces are not allowed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PerfInvalidCategoryName">
	<summary>Key for resource getting something like "Invalid category name. Its length must be in the range between '{0}' and '{1}'. Double quotes, control characters and leading or trailing spaces are not allowed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MustAddCounterCreationData">
	<summary>Key for resource getting something like "Only objects of type CounterCreationData can be added to a CounterCreationDataCollection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.RemoteCounterAdmin">
	<summary>Key for resource getting something like "Creating or Deleting Performance Counter Categories on remote machines is not supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoInstanceInformation">
	<summary>Key for resource getting something like "The {0} category doesn't provide any instance information, no accurate data can be returned."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PerfCounterPdhError">
	<summary>Key for resource getting something like "There was an error calculating the PerformanceCounter value (0x{0})."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MultiInstanceOnly">
	<summary>Key for resource getting something like "Category '{0}' is marked as multi-instance.  Performance counters in this category can only be created with instance names."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SingleInstanceOnly">
	<summary>Key for resource getting something like "Category '{0}' is marked as single-instance.  Performance counters in this category can only be created without instance names."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceNameTooLong">
	<summary>Key for resource getting something like "Instance names used for writing to custom counters must be 127 characters or less. "</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CategoryNameTooLong">
	<summary>Key for resource getting something like "Category names must be 1024 characters or less. "</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceLifetimeProcessonReadOnly">
	<summary>Key for resource getting something like "InstanceLifetime is unused by ReadOnly counters. "</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceLifetimeProcessforSingleInstance">
	<summary>Key for resource getting something like "Single instance categories are only valid with the Global lifetime. "</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceAlreadyExists">
	<summary>Key for resource getting something like "Instance '{0}' already exists with a lifetime of Process.  It cannot be recreated or reused until it has been removed or until the process using it has exited. "</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantSetLifetimeAfterInitialized">
	<summary>Key for resource getting something like "The InstanceLifetime cannot be set after the instance has been initialized.  You must use the default constructor and set the CategoryName, InstanceName, CounterName, InstanceLifetime and ReadOnly properties manually before setting the RawValue. "</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessLifetimeNotValidInGlobal">
	<summary>Key for resource getting something like "PerformanceCounterInstanceLifetime.Process is not valid in the global shared memory.  If your performance counter category was created with an older version of the Framework, it uses the global shared memory.  Either use PerformanceCounterInstanceLifetime.Global, or if applications running on older versions of the Framework do not need to write to your category, delete and recreate it. "</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantConvertProcessToGlobal">
	<summary>Key for resource getting something like "An instance with a lifetime of Process can only be accessed from a PerformanceCounter with the InstanceLifetime set to PerformanceCounterInstanceLifetime.Process. "</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantConvertGlobalToProcess">
	<summary>Key for resource getting something like "An instance with a lifetime of Global can only be accessed from a PerformanceCounter with the InstanceLifetime set to PerformanceCounterInstanceLifetime.Global. "</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PriorityClassNotSupported">
	<summary>Key for resource getting something like "The AboveNormal and BelowNormal priority classes are not available on this platform."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.WinNTRequired">
	<summary>Key for resource getting something like "Feature requires Windows NT."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Win2kRequired">
	<summary>Key for resource getting something like "Feature requires Windows 2000."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoAssociatedProcess">
	<summary>Key for resource getting something like "No process is associated with this object."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessIdRequired">
	<summary>Key for resource getting something like "Feature requires a process identifier."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupportedRemote">
	<summary>Key for resource getting something like "Feature is not supported for remote machines."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoProcessInfo">
	<summary>Key for resource getting something like "Process has exited, so the requested information is not available."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.WaitTillExit">
	<summary>Key for resource getting something like "Process must exit before requested information can be determined."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoProcessHandle">
	<summary>Key for resource getting something like "Process was not started by this object, so requested information cannot be determined."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MissingProccess">
	<summary>Key for resource getting something like "Process with an Id of {0} is not running."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BadMinWorkset">
	<summary>Key for resource getting something like "Minimum working set size is invalid. It must be less than or equal to the maximum working set size."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BadMaxWorkset">
	<summary>Key for resource getting something like "Maximum working set size is invalid. It must be greater than or equal to the minimum working set size."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.WinNTRequiredForRemote">
	<summary>Key for resource getting something like "Operating system does not support accessing processes on remote computers. This feature requires Windows NT or later."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessHasExited">
	<summary>Key for resource getting something like "Cannot process request because the process ({0}) has exited."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessHasExitedNoId">
	<summary>Key for resource getting something like "Cannot process request because the process has exited."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadExited">
	<summary>Key for resource getting something like "The request cannot be processed because the thread ({0}) has exited."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Win2000Required">
	<summary>Key for resource getting something like "Feature requires Windows 2000 or later."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.WinXPRequired">
	<summary>Key for resource getting something like "Feature requires Windows XP or later."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Win2k3Required">
	<summary>Key for resource getting something like "Feature requires Windows Server 2003 or later."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessNotFound">
	<summary>Key for resource getting something like "Thread {0} found, but no process {1} found."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantGetProcessId">
	<summary>Key for resource getting something like "Cannot retrieve process identifier from the process handle."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessDisabled">
	<summary>Key for resource getting something like "Process performance counter is disabled, so the requested operation cannot be performed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.WaitReasonUnavailable">
	<summary>Key for resource getting something like "WaitReason is only available if the ThreadState is Wait."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupportedRemoteThread">
	<summary>Key for resource getting something like "Feature is not supported for threads on remote computers."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UseShellExecuteRequiresSTA">
	<summary>Key for resource getting something like "Current thread is not in Single Thread Apartment (STA) mode. Starting a process with UseShellExecute set to True requires the current thread be in STA mode.  Ensure that your Main function has STAThreadAttribute marked."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantRedirectStreams">
	<summary>Key for resource getting something like "The Process object must have the UseShellExecute property set to false in order to redirect IO streams."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantUseEnvVars">
	<summary>Key for resource getting something like "The Process object must have the UseShellExecute property set to false in order to use environment variables."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantStartAsUser">
	<summary>Key for resource getting something like "The Process object must have the UseShellExecute property set to false in order to start a process as a user."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CouldntConnectToRemoteMachine">
	<summary>Key for resource getting something like "Couldn't connect to remote machine."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CouldntGetProcessInfos">
	<summary>Key for resource getting something like "Couldn't get process information from performance counter."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InputIdleUnkownError">
	<summary>Key for resource getting something like "WaitForInputIdle failed.  This could be because the process does not have a graphical interface."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileNameMissing">
	<summary>Key for resource getting something like "Cannot start process because a file name has not been provided."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.EnvironmentBlock">
	<summary>Key for resource getting something like "The environment block provided doesn't have the correct format."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.EnumProcessModuleFailed">
	<summary>Key for resource getting something like "Unable to enumerate the process modules."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PendingAsyncOperation">
	<summary>Key for resource getting something like "An async read operation has already been started on the stream."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoAsyncOperation">
	<summary>Key for resource getting something like "No async read operation is in progress on the stream."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidApplication">
	<summary>Key for resource getting something like "The specified executable is not a valid Win32 application."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.StandardOutputEncodingNotAllowed">
	<summary>Key for resource getting something like "StandardOutputEncoding is only supported when standard output is redirected."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.StandardErrorEncodingNotAllowed">
	<summary>Key for resource getting something like "StandardErrorEncoding is only supported when standard error is redirected."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CountersOOM">
	<summary>Key for resource getting something like "Custom counters file view is out of memory."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MappingCorrupted">
	<summary>Key for resource getting something like "Cannot continue the current operation, the performance counters memory mapping has been corrupted."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SetSecurityDescriptorFailed">
	<summary>Key for resource getting something like "Cannot initialize security descriptor initialized."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantCreateFileMapping">
	<summary>Key for resource getting something like "Cannot create file mapping."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantMapFileView">
	<summary>Key for resource getting something like "Cannot map view of file."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantGetMappingSize">
	<summary>Key for resource getting something like "Cannot calculate the size of the file view. "</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantGetStandardOut">
	<summary>Key for resource getting something like "StandardOut has not been redirected or the process hasn't started yet."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantGetStandardIn">
	<summary>Key for resource getting something like "StandardIn has not been redirected."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantGetStandardError">
	<summary>Key for resource getting something like "StandardError has not been redirected."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantMixSyncAsyncOperation">
	<summary>Key for resource getting something like "Cannot mix synchronous and asynchronous operation on process stream."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoFileMappingSize">
	<summary>Key for resource getting something like "Cannot retrieve file mapping size while initializing configuration settings."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.EnvironmentBlockTooLong">
	<summary>Key for resource getting something like "The environment block used to start a process cannot be longer than 65535 bytes.  Your environment block is {0} bytes long.  Remove some environment variables and try again. "</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_InvalidSerialPort">
	<summary>Key for resource getting something like "The given port name does not start with COM/com or does not resolve to a valid serial port."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_InvalidSerialPortExtended">
	<summary>Key for resource getting something like "The given port name is invalid.  It may be a valid port, but not a serial port."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_SecurityException">
	<summary>Key for resource getting something like "The port name cannot start with '\'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_InvalidOffLen">
	<summary>Key for resource getting something like "Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentNull_Array">
	<summary>Key for resource getting something like "Array cannot be null."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentNull_Buffer">
	<summary>Key for resource getting something like "Buffer cannot be null."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_Bounds_Lower_Upper">
	<summary>Key for resource getting something like "Argument must be between {0} and {1}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_Enum">
	<summary>Key for resource getting something like "Enum value was out of legal range."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_NeedNonNegNumRequired">
	<summary>Key for resource getting something like "Non-negative number required."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_Timeout">
	<summary>Key for resource getting something like "The timeout must be greater than or equal to -1."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_WriteTimeout">
	<summary>Key for resource getting something like "The timeout must be either a positive number or -1."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_NeedPosNum">
	<summary>Key for resource getting something like "Positive number required."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_OffsetOut">
	<summary>Key for resource getting something like "Either offset did not refer to a position in the string, or there is an insufficient length of destination character array."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.IndexOutOfRange_IORaceCondition">
	<summary>Key for resource getting something like "Probable I/O race condition detected while copying memory.  The I/O package is not thread safe by default.  In multithreaded applications, a stream must be accessed in a thread-safe way, such as a thread-safe wrapper returned by TextReader's or TextWriter's Synchronized methods.  This also applies to classes like StreamWriter and StreamReader."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.IO_BindHandleFailed">
	<summary>Key for resource getting something like "BindHandle for ThreadPool failed on this handle."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.IO_OperationAborted">
	<summary>Key for resource getting something like "The I/O operation has been aborted because of either a thread exit or an application request."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_UnseekableStream">
	<summary>Key for resource getting something like "Stream does not support seeking."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnauthorizedAccess_IODenied_Path">
	<summary>Key for resource getting something like "Access to the port '{0}' is denied."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.IO_EOF_ReadBeyondEOF">
	<summary>Key for resource getting something like "Unable to read beyond the end of the stream."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.IO_UnknownError">
	<summary>Key for resource getting something like "Unknown Error '{0}'."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ObjectDisposed_StreamClosed">
	<summary>Key for resource getting something like "Can not access a closed Stream."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_WrongAsyncResult">
	<summary>Key for resource getting something like "IAsyncResult object did not come from the corresponding async method on this type."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_EndReadCalledMultiple">
	<summary>Key for resource getting something like "EndRead can only be called once for each asynchronous operation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_EndWriteCalledMultiple">
	<summary>Key for resource getting something like "EndWrite can only be called once for each asynchronous operation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.IO_PortNotFound">
	<summary>Key for resource getting something like "The specified port does not exist."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.IO_PortNotFoundFileName">
	<summary>Key for resource getting something like "The port '{0}' does not exist."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnauthorizedAccess_IODenied_NoPathName">
	<summary>Key for resource getting something like "Access to the port is denied."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.IO_PathTooLong">
	<summary>Key for resource getting something like "The specified port name is too long.  The port name must be less than 260 characters."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.IO_SharingViolation_NoFileName">
	<summary>Key for resource getting something like "The process cannot access the port because it is being used by another process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.IO_SharingViolation_File">
	<summary>Key for resource getting something like "The process cannot access the port '{0}' because it is being used by another process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_UnwritableStream">
	<summary>Key for resource getting something like "Stream does not support writing."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ObjectDisposed_WriterClosed">
	<summary>Key for resource getting something like "Can not write to a closed TextWriter."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BaseStream_Invalid_Not_Open">
	<summary>Key for resource getting something like "The BaseStream is only available when the port is open."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PortNameEmpty_String">
	<summary>Key for resource getting something like "The PortName cannot be empty."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Port_not_open">
	<summary>Key for resource getting something like "The port is closed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Port_already_open">
	<summary>Key for resource getting something like "The port is already open."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cant_be_set_when_open">
	<summary>Key for resource getting something like "'{0}' cannot be set while the port is open."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Max_Baud">
	<summary>Key for resource getting something like "The maximum baud rate for the device is {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.In_Break_State">
	<summary>Key for resource getting something like "The port is in the break state and cannot be written to."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Write_timed_out">
	<summary>Key for resource getting something like "The write timed out."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantSetRtsWithHandshaking">
	<summary>Key for resource getting something like "RtsEnable cannot be accessed if Handshake is set to RequestToSend or RequestToSendXOnXOff."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupportedOS">
	<summary>Key for resource getting something like "GetPortNames is not supported on Win9x platforms."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupportedEncoding">
	<summary>Key for resource getting something like "SerialPort does not support encoding '{0}'.  The supported encodings include ASCIIEncoding, UTF8Encoding, UnicodeEncoding, UTF32Encoding, and most single or double byte code pages.  For a complete list please see the documentation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BaudRate">
	<summary>Key for resource getting something like "The baud rate to use on this serial port."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.DataBits">
	<summary>Key for resource getting something like "The number of data bits per transmitted/received byte."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.DiscardNull">
	<summary>Key for resource getting something like "Whether to discard null bytes received on the port before adding to serial buffer."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.DtrEnable">
	<summary>Key for resource getting something like "Whether to enable the Data Terminal Ready (DTR) line during communications."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Encoding">
	<summary>Key for resource getting something like "The encoding to use when reading and writing strings."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Handshake">
	<summary>Key for resource getting something like "The handshaking protocol for flow control in data exchange, which can be None."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NewLine">
	<summary>Key for resource getting something like "The string used by ReadLine and WriteLine to denote a new line."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Parity">
	<summary>Key for resource getting something like "The scheme for parity checking each received byte and marking each transmitted byte."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ParityReplace">
	<summary>Key for resource getting something like "Byte with which to replace bytes received with parity errors."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PortName">
	<summary>Key for resource getting something like "The name of the communications port to open."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ReadBufferSize">
	<summary>Key for resource getting something like "The size of the read buffer in bytes.  This is the maximum number of read bytes which can be buffered."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ReadTimeout">
	<summary>Key for resource getting something like "The read timeout in Milliseconds."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ReceivedBytesThreshold">
	<summary>Key for resource getting something like "Number of bytes required to be available before the Read event is fired."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.RtsEnable">
	<summary>Key for resource getting something like "Whether to enable the Request To Send (RTS) line during communications."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SerialPortDesc">
	<summary>Key for resource getting something like "Represents a serial port resource."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.StopBits">
	<summary>Key for resource getting something like "The number of stop bits per transmitted/received byte."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.WriteBufferSize">
	<summary>Key for resource getting something like "The size of the write buffer in bytes.  This is the maximum number of bytes which can be queued for write."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.WriteTimeout">
	<summary>Key for resource getting something like "The write timeout in milliseconds."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SerialErrorReceived">
	<summary>Key for resource getting something like "Raised each time when an error is received from the SerialPort."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SerialPinChanged">
	<summary>Key for resource getting something like "Raised each time when pin is changed on the SerialPort."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SerialDataReceived">
	<summary>Key for resource getting something like "Raised each time when data is received from the SerialPort."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CounterType">
	<summary>Key for resource getting something like "The type of this counter."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CounterName">
	<summary>Key for resource getting something like "The name of this counter."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CounterHelp">
	<summary>Key for resource getting something like "Help information for this counter."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.EventLogDesc">
	<summary>Key for resource getting something like "Provides interaction with Windows event logs."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorDataReceived">
	<summary>Key for resource getting something like "User event handler to call for async IO with StandardError stream."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntries">
	<summary>Key for resource getting something like "The contents of the log."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogLog">
	<summary>Key for resource getting something like "Gets or sets the name of the log to read from and write to."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogMachineName">
	<summary>Key for resource getting something like "The name of the machine on which to read or write events."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogMonitoring">
	<summary>Key for resource getting something like "Indicates if the component monitors the event log for changes."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogSynchronizingObject">
	<summary>Key for resource getting something like "The object used to marshal the event handler calls issued as a result of an EventLog change."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogSource">
	<summary>Key for resource getting something like "The application name (source name) to use when writing to the event log."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryWritten">
	<summary>Key for resource getting something like "Raised each time any application writes an entry to the event log."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryMachineName">
	<summary>Key for resource getting something like "The machine on which this event log resides."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryData">
	<summary>Key for resource getting something like "The binary data associated with this entry in the event log."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryIndex">
	<summary>Key for resource getting something like "The sequence of this entry in the event log."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryCategory">
	<summary>Key for resource getting something like "The category for this message."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryCategoryNumber">
	<summary>Key for resource getting something like "An application-specific category number assigned to this entry."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryEventID">
	<summary>Key for resource getting something like "The number identifying the message for this source."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryEntryType">
	<summary>Key for resource getting something like "The type of entry - Information, Warning, etc."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryMessage">
	<summary>Key for resource getting something like "The text of the message for this entry"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntrySource">
	<summary>Key for resource getting something like "The name of the application that wrote this entry."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryReplacementStrings">
	<summary>Key for resource getting something like "The application-supplied strings used in the message."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryResourceId">
	<summary>Key for resource getting something like "The full number identifying the message in the event message dll."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryTimeGenerated">
	<summary>Key for resource getting something like "The time at which the application logged this entry."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryTimeWritten">
	<summary>Key for resource getting something like "The time at which the system logged this entry to the event log."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryUserName">
	<summary>Key for resource getting something like "The username of the account associated with this entry by the writing application."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.OutputDataReceived">
	<summary>Key for resource getting something like "User event handler to call for async IO with StandardOutput stream."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PC_CounterHelp">
	<summary>Key for resource getting something like "The description message for this counter."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PC_CounterType">
	<summary>Key for resource getting something like "The counter type indicates how to interpret the value of the counter, for example an actual count or a rate of change."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PC_ReadOnly">
	<summary>Key for resource getting something like "Indicates if the counter is read only.  Remote counters and counters not created using this component are read-only."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PC_RawValue">
	<summary>Key for resource getting something like "Directly accesses the raw value of this counter.  The counter must have been created using this component."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessAssociated">
	<summary>Key for resource getting something like "Indicates if the process component is associated with a real process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessDesc">
	<summary>Key for resource getting something like "Provides access to local and remote processes, enabling starting and stopping of local processes."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessExitCode">
	<summary>Key for resource getting something like "The value returned from the associated process when it terminated."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessTerminated">
	<summary>Key for resource getting something like "Indicates if the associated process has been terminated."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessExitTime">
	<summary>Key for resource getting something like "The time that the associated process exited."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessHandle">
	<summary>Key for resource getting something like "Returns the native handle for this process.   The handle is only available if the process was started using this component."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessHandleCount">
	<summary>Key for resource getting something like "The number of native handles associated with this process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessId">
	<summary>Key for resource getting something like "The unique identifier for the process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessMachineName">
	<summary>Key for resource getting something like "The name of the machine the running the process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessMainModule">
	<summary>Key for resource getting something like "The main module for the associated process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessModules">
	<summary>Key for resource getting something like "The modules that have been loaded by the associated process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessSynchronizingObject">
	<summary>Key for resource getting something like "The object used to marshal the event handler calls issued as a result of a Process exit."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessSessionId">
	<summary>Key for resource getting something like "The identifier for the session of the process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessThreads">
	<summary>Key for resource getting something like "The threads running in the associated process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessEnableRaisingEvents">
	<summary>Key for resource getting something like "Whether the process component should watch for the associated process to exit, and raise the Exited event."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessExited">
	<summary>Key for resource getting something like "If the WatchForExit property is set to true, then this event is raised when the associated process exits."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessFileName">
	<summary>Key for resource getting something like "The name of the application, document or URL to start."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessWorkingDirectory">
	<summary>Key for resource getting something like "The initial working directory for the process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessBasePriority">
	<summary>Key for resource getting something like "The base priority computed based on the priority class that all threads run relative to."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessMainWindowHandle">
	<summary>Key for resource getting something like "The handle of the main window for the process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessMainWindowTitle">
	<summary>Key for resource getting something like "The caption of the main window for the process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessMaxWorkingSet">
	<summary>Key for resource getting something like "The maximum amount of physical memory the process has required since it was started."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessMinWorkingSet">
	<summary>Key for resource getting something like "The minimum amount of physical memory the process has required since it was started."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessNonpagedSystemMemorySize">
	<summary>Key for resource getting something like "The number of bytes of non pageable system  memory the process is using."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessPagedMemorySize">
	<summary>Key for resource getting something like "The current amount of memory that can be paged to disk that the process is using."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessPagedSystemMemorySize">
	<summary>Key for resource getting something like "The number of bytes of pageable system memory the process is using."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessPeakPagedMemorySize">
	<summary>Key for resource getting something like "The maximum amount of memory that can be paged to disk that the process has used since it was started."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessPeakWorkingSet">
	<summary>Key for resource getting something like "The maximum amount of physical memory the process has used since it was started."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessPeakVirtualMemorySize">
	<summary>Key for resource getting something like "The maximum amount of virtual memory the process has allocated since it was started."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessPriorityBoostEnabled">
	<summary>Key for resource getting something like "Whether this process would like a priority boost when the user interacts with it."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessPriorityClass">
	<summary>Key for resource getting something like "The priority that the threads in the process run relative to."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessPrivateMemorySize">
	<summary>Key for resource getting something like "The current amount of memory that the process has allocated that cannot be shared with other processes."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessPrivilegedProcessorTime">
	<summary>Key for resource getting something like "The amount of CPU time the process spent inside the operating system core."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessProcessName">
	<summary>Key for resource getting something like "The name of the process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessProcessorAffinity">
	<summary>Key for resource getting something like "A bit mask which represents the processors that the threads within the process are allowed to run on."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessResponding">
	<summary>Key for resource getting something like "Whether this process is currently responding."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessStandardError">
	<summary>Key for resource getting something like "Standard error stream of the process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessStandardInput">
	<summary>Key for resource getting something like "Standard input stream of the process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessStandardOutput">
	<summary>Key for resource getting something like "Standard output stream of the process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessStartInfo">
	<summary>Key for resource getting something like "Specifies information used to start a process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessStartTime">
	<summary>Key for resource getting something like "The time at which the process was started."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessTotalProcessorTime">
	<summary>Key for resource getting something like "The amount of CPU time the process has used."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessUserProcessorTime">
	<summary>Key for resource getting something like "The amount of CPU time the process spent outside the operating system core."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessVirtualMemorySize">
	<summary>Key for resource getting something like "The amount of virtual memory the process has currently allocated."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessWorkingSet">
	<summary>Key for resource getting something like "The current amount of physical memory the process is using."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcModModuleName">
	<summary>Key for resource getting something like "The name of the module."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcModFileName">
	<summary>Key for resource getting something like "The file name of the module."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcModBaseAddress">
	<summary>Key for resource getting something like "The memory address that the module loaded at."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcModModuleMemorySize">
	<summary>Key for resource getting something like "The amount of virtual memory required by the code and data in the module file."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcModEntryPointAddress">
	<summary>Key for resource getting something like "The memory address of the function that runs when the module is loaded."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessVerb">
	<summary>Key for resource getting something like "The verb to apply to the document specified by the FileName property."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessArguments">
	<summary>Key for resource getting something like "Command line arguments that will be passed to the application specified by the FileName property."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessErrorDialog">
	<summary>Key for resource getting something like "Whether to show an error dialog to the user if there is an error."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessWindowStyle">
	<summary>Key for resource getting something like "How the main window should be created when the process starts."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessCreateNoWindow">
	<summary>Key for resource getting something like "Whether to start the process without creating a new window to contain it."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessEnvironmentVariables">
	<summary>Key for resource getting something like "Set of environment variables that apply to this process and child processes."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessRedirectStandardInput">
	<summary>Key for resource getting something like "Whether the process command input is read from the Process instance's StandardInput member."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessRedirectStandardOutput">
	<summary>Key for resource getting something like "Whether the process output is written to the Process instance's StandardOutput member."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessRedirectStandardError">
	<summary>Key for resource getting something like "Whether the process's error output is written to the Process instance's StandardError member."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessUseShellExecute">
	<summary>Key for resource getting something like "Whether to use the operating system shell to start the process."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadBasePriority">
	<summary>Key for resource getting something like "The current base priority of the thread."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadCurrentPriority">
	<summary>Key for resource getting something like "The current priority level of the thread."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadId">
	<summary>Key for resource getting something like "The unique identifier for the thread."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadPriorityBoostEnabled">
	<summary>Key for resource getting something like "Whether the thread would like a priority boost when the user interacts with UI associated with the thread."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadPriorityLevel">
	<summary>Key for resource getting something like "The priority level of the thread."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadPrivilegedProcessorTime">
	<summary>Key for resource getting something like "The amount of CPU time the thread spent inside the operating system core."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadStartAddress">
	<summary>Key for resource getting something like "The memory address of the function that was run when the thread started."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadStartTime">
	<summary>Key for resource getting something like "The time the thread was started."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadThreadState">
	<summary>Key for resource getting something like "The execution state of the thread."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadTotalProcessorTime">
	<summary>Key for resource getting something like "The amount of CPU time the thread has consumed since it was started."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadUserProcessorTime">
	<summary>Key for resource getting something like "The amount of CPU time the thread spent outside the operating system core."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadWaitReason">
	<summary>Key for resource getting something like "The reason the thread is waiting, if it is waiting."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.VerbEditorDefault">
	<summary>Key for resource getting something like "(Default)"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.AppSettingsReaderNoKey">
	<summary>Key for resource getting something like "The key '{0}' does not exist in the appSettings configuration section."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.AppSettingsReaderNoParser">
	<summary>Key for resource getting something like "Type '{0}' does not have a Parse method."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.AppSettingsReaderCantParse">
	<summary>Key for resource getting something like "The value '{0}' was found in the appSettings configuration section for key '{1}', and this value is not a valid {2}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.AppSettingsReaderEmptyString">
	<summary>Key for resource getting something like "(empty string)"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidPermissionState">
	<summary>Key for resource getting something like "Invalid permission state."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PermissionNumberOfElements">
	<summary>Key for resource getting something like "The number of elements on the access path must be the same as the number of tag names."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PermissionItemExists">
	<summary>Key for resource getting something like "The item provided already exists."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PermissionItemDoesntExist">
	<summary>Key for resource getting something like "The requested item doesn't exist."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PermissionBadParameterEnum">
	<summary>Key for resource getting something like "Parameter must be of type enum."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PermissionInvalidLength">
	<summary>Key for resource getting something like "Length must be greater than {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PermissionTypeMismatch">
	<summary>Key for resource getting something like "Type mismatch."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_NotAPermissionElement">
	<summary>Key for resource getting something like "'securityElement' was not a permission element."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_InvalidXMLBadVersion">
	<summary>Key for resource getting something like "Invalid Xml - can only parse elements of version one."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidPermissionLevel">
	<summary>Key for resource getting something like "Invalid permission level."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.TargetNotWebBrowserPermissionLevel">
	<summary>Key for resource getting something like "Target not WebBrowserPermissionLevel."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.WebBrowserBadXml">
	<summary>Key for resource getting something like "Bad Xml {0}"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.KeyedCollNeedNonNegativeNum">
	<summary>Key for resource getting something like "Need a non negative number for capacity."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.KeyedCollDuplicateKey">
	<summary>Key for resource getting something like "Cannot add item since the item with the key already exists in the collection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.KeyedCollReferenceKeyNotFound">
	<summary>Key for resource getting something like "The key reference with respect to which the insertion operation was to be performed was not found."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.KeyedCollKeyNotFound">
	<summary>Key for resource getting something like "Cannot find the key {0} in the collection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.KeyedCollInvalidKey">
	<summary>Key for resource getting something like "Keys must be non-null non-empty Strings."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.KeyedCollCapacityOverflow">
	<summary>Key for resource getting something like "Capacity overflowed and went negative.  Check capacity of the collection."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_EnumEnded">
	<summary>Key for resource getting something like "The enumeration has already completed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.OrderedDictionary_ReadOnly">
	<summary>Key for resource getting something like "The OrderedDictionary is readonly and cannot be modified."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.OrderedDictionary_SerializationMismatch">
	<summary>Key for resource getting something like "There was an error deserializing the OrderedDictionary.  The ArrayList does not contain DictionaryEntries."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_ExceptionOccurred">
	<summary>Key for resource getting something like "An exception occurred during the operation, making the result invalid.  Check InnerException for exception details."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_QueueingFailed">
	<summary>Key for resource getting something like "Queuing WaitCallback failed."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_OperationCancelled">
	<summary>Key for resource getting something like "Operation has been cancelled."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_OperationAlreadyCompleted">
	<summary>Key for resource getting something like "This operation has already had OperationCompleted called on it and further calls are illegal."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_NullDelegate">
	<summary>Key for resource getting something like "A non-null SendOrPostCallback must be supplied."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_WorkerAlreadyRunning">
	<summary>Key for resource getting something like "This BackgroundWorker is currently busy and cannot run multiple tasks concurrently."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_WorkerDoesntReportProgress">
	<summary>Key for resource getting something like "This BackgroundWorker states that it doesn't report progress. Modify WorkerReportsProgress to state that it does report progress."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_WorkerDoesntSupportCancellation">
	<summary>Key for resource getting something like "This BackgroundWorker states that it doesn't support cancellation. Modify WorkerSupportsCancellation to state that it does support cancellation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_ProgressChangedEventArgs_ProgressPercentage">
	<summary>Key for resource getting something like "Percentage progress made in operation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_ProgressChangedEventArgs_UserState">
	<summary>Key for resource getting something like "User-supplied state to identify operation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_AsyncEventArgs_Cancelled">
	<summary>Key for resource getting something like "True if operation was cancelled."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_AsyncEventArgs_Error">
	<summary>Key for resource getting something like "Exception that occurred during operation.  Null if no error."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_AsyncEventArgs_UserState">
	<summary>Key for resource getting something like "User-supplied state to identify operation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_CancellationPending">
	<summary>Key for resource getting something like "Has the user attempted to cancel the operation? To be accessed from DoWork event handler."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_DoWork">
	<summary>Key for resource getting something like "Event handler to be run on a different thread when the operation begins."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_IsBusy">
	<summary>Key for resource getting something like "Is the worker still currently working on a background operation?"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_ProgressChanged">
	<summary>Key for resource getting something like "Raised when the worker thread indicates that some progress has been made."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_RunWorkerCompleted">
	<summary>Key for resource getting something like "Raised when the worker has completed (either through success, failure, or cancellation)."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_WorkerReportsProgress">
	<summary>Key for resource getting something like "Whether the worker will report progress."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_WorkerSupportsCancellation">
	<summary>Key for resource getting something like "Whether the worker supports cancellation."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_DoWorkEventArgs_Argument">
	<summary>Key for resource getting something like "Argument passed into the worker handler from BackgroundWorker.RunWorkerAsync."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_DoWorkEventArgs_Result">
	<summary>Key for resource getting something like "Result from the worker function."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_Desc">
	<summary>Key for resource getting something like "Executes an operation on a separate thread."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceCreationEditorDefaultText">
	<summary>Key for resource getting something like "(New...)"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyTabAttributeBadPropertyTabScope">
	<summary>Key for resource getting something like "Scope must be PropertyTabScope.Document or PropertyTabScope.Component"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyTabAttributeTypeLoadException">
	<summary>Key for resource getting something like "Couldn't find type {0}"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyTabAttributeArrayLengthMismatch">
	<summary>Key for resource getting something like "tabClasses must have the same number of items as tabScopes"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyTabAttributeParamsBothNull">
	<summary>Key for resource getting something like "An array of tab type names or tab types must be specified"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceDescriptorCannotBeStatic">
	<summary>Key for resource getting something like "Parameter cannot be static."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceDescriptorMustBeStatic">
	<summary>Key for resource getting something like "Parameter must be static."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceDescriptorMustBeReadable">
	<summary>Key for resource getting something like "Parameter must be readable."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceDescriptorLengthMismatch">
	<summary>Key for resource getting something like "Length mismatch."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ToolboxItemAttributeFailedGetType">
	<summary>Key for resource getting something like "Failed to create ToolboxItem of type: {0}"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyDescriptorCollectionBadValue">
	<summary>Key for resource getting something like "Parameter must be of type PropertyDescriptor."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyDescriptorCollectionBadKey">
	<summary>Key for resource getting something like "Parameter must be of type int or string."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.AspNetHostingPermissionBadXml">
	<summary>Key for resource getting something like "Bad Xml {0}"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CorruptedGZipHeader">
	<summary>Key for resource getting something like "The magic number in GZip header is not correct. Make sure you are passing in a GZip stream."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnknownCompressionMode">
	<summary>Key for resource getting something like "The compression mode specified in GZip header is unknown."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnknownState">
	<summary>Key for resource getting something like "Decoder is in some unknown state. This might be caused by corrupted data."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidHuffmanData">
	<summary>Key for resource getting something like "Failed to construct a huffman tree using the length array. The stream might be corrupted."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidCRC">
	<summary>Key for resource getting something like "The CRC in GZip footer does not match the CRC calculated from the decompressed data."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidStreamSize">
	<summary>Key for resource getting something like "The stream size in GZip footer does not match the real stream size."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnknownBlockType">
	<summary>Key for resource getting something like "Unknown block type. Stream might be corrupted."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidBlockLength">
	<summary>Key for resource getting something like "Block length does not match with its complement."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.GenericInvalidData">
	<summary>Key for resource getting something like "Found invalid data while decoding."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CannotReadFromDeflateStream">
	<summary>Key for resource getting something like "Reading from the compression stream is not supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.CannotWriteToDeflateStream">
	<summary>Key for resource getting something like "Writing to the compression stream is not supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotReadableStream">
	<summary>Key for resource getting something like "The base stream is not readable."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotWriteableStream">
	<summary>Key for resource getting something like "The base stream is not writeable."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidArgumentOffsetCount">
	<summary>Key for resource getting something like "Offset plus count is larger than the length of target array."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidBeginCall">
	<summary>Key for resource getting something like "Only one asynchronous reader is allowed time at one time."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidEndCall">
	<summary>Key for resource getting something like "EndRead is only callable when there is one pending asynchronous reader ."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.StreamSizeOverflow">
	<summary>Key for resource getting something like "The gzip stream can't contain more than 4GB data."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_HCCountOverflow">
	<summary>Key for resource getting something like "Handle collector count overflows or underflows."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_InvalidThreshold">
	<summary>Key for resource getting something like "maximumThreshold cannot be less than initialThreshold."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_SemaphoreInitialMaximum">
	<summary>Key for resource getting something like "The initial count for the semaphore must be greater than or equal to zero and less than the maximum count."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_WaitHandleNameTooLong">
	<summary>Key for resource getting something like "The name can be no more than 260 characters in length."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.Threading_SemaphoreFullException">
	<summary>Key for resource getting something like "Adding the given count to the semaphore would cause it to exceed its maximum count."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.WaitHandleCannotBeOpenedException_InvalidHandle">
	<summary>Key for resource getting something like "A WaitHandle with system-wide name '{0}' cannot be created. A WaitHandle of a different type might have the same name."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentNotAPermissionElement">
	<summary>Key for resource getting something like "Argument was not a permission Element."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentWrongType">
	<summary>Key for resource getting something like "Argument should be of type {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BadXmlVersion">
	<summary>Key for resource getting something like "Xml version was wrong."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BinarySerializationNotSupported">
	<summary>Key for resource getting something like "Binary serialization is current not supported by the LocalFileSettingsProvider."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.BothScopeAttributes">
	<summary>Key for resource getting something like "The setting {0} has both an ApplicationScopedSettingAttribute and a UserScopedSettingAttribute."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoScopeAttributes">
	<summary>Key for resource getting something like "The setting {0} does not have either an ApplicationScopedSettingAttribute or UserScopedSettingAttribute."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.PositionOutOfRange">
	<summary>Key for resource getting something like "Position cannot be less than zero."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProviderInstantiationFailed">
	<summary>Key for resource getting something like "Failed to instantiate provider: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProviderTypeLoadFailed">
	<summary>Key for resource getting something like "Failed to load provider type: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SaveAppScopedNotSupported">
	<summary>Key for resource getting something like "Error saving {0} - The LocalFileSettingsProvider does not support saving changes to application-scoped settings."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SettingsResetFailed">
	<summary>Key for resource getting something like "Failed to reset settings: unable to access the configuration section."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SettingsSaveFailed">
	<summary>Key for resource getting something like "Failed to save settings: {0}"</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SettingsSaveFailedNoSection">
	<summary>Key for resource getting something like "Failed to save settings: unable to access the configuration section."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.StringDeserializationFailed">
	<summary>Key for resource getting something like "Could not use String deserialization for setting: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.StringSerializationFailed">
	<summary>Key for resource getting something like "Could not use String serialization for setting: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnknownSerializationFormat">
	<summary>Key for resource getting something like "Unknown serialization format specified."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnknownSeekOrigin">
	<summary>Key for resource getting something like "Unknown SeekOrigin specified."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnknownUserLevel">
	<summary>Key for resource getting something like "Unknown ConfigurationUserLevel specified."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.UserSettingsNotSupported">
	<summary>Key for resource getting something like "The current configuration system does not support user-scoped settings."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.XmlDeserializationFailed">
	<summary>Key for resource getting something like "Could not use Xml deserialization for setting: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.XmlSerializationFailed">
	<summary>Key for resource getting something like "Could not use Xml serialization for setting: {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MemberRelationshipService_RelationshipNotSupported">
	<summary>Key for resource getting something like "Relationships between {0}.{1} and {2}.{3} are not supported."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MaskedTextProviderPasswordAndPromptCharError">
	<summary>Key for resource getting something like "The PasswordChar and PromptChar values cannot be the same."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MaskedTextProviderInvalidCharError">
	<summary>Key for resource getting something like "The specified character value is not allowed for this property."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MaskedTextProviderMaskNullOrEmpty">
	<summary>Key for resource getting something like "The Mask value cannot be null or empty."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.MaskedTextProviderMaskInvalidChar">
	<summary>Key for resource getting something like "The specified mask contains invalid characters."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.StandardOleMarshalObjectGetMarshalerFailed">
	<summary>Key for resource getting something like "Failed to get marshaler for IID {0}."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SoundAPIBadSoundLocation">
	<summary>Key for resource getting something like "Could not determine a universal resource identifier for the sound location."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SoundAPIFileDoesNotExist">
	<summary>Key for resource getting something like "Please be sure a sound file exists at the specified location."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SoundAPIFormatNotSupported">
	<summary>Key for resource getting something like "Sound API only supports playing PCM wave files."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SoundAPIInvalidWaveFile">
	<summary>Key for resource getting something like "The file located at {0} is not a valid wave file."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SoundAPIInvalidWaveHeader">
	<summary>Key for resource getting something like "The wave header is corrupt."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SoundAPILoadTimedOut">
	<summary>Key for resource getting something like "The request to load the wave file in memory timed out."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SoundAPILoadTimeout">
	<summary>Key for resource getting something like "The LoadTimeout property of a SoundPlayer cannot be negative."</summary>
</member><member name="F:Tools.ResourcesT.SystemResources.KnownValues.SoundAPIReadError">
	<summary>Key for resource getting something like "There was an error reading the file located at {0}. Please make sure that a valid wave file exists at the specified location."</summary>
</member><member name="T:Tools.ResourcesT.SystemResources.KnownValues">
	<summary>Contains values of known keys for the <see cref="P:Tools.ResourcesT.SystemResources.Value(Tools.ResourcesT.SystemResources.KnownValues)"/> property</summary>
	<completionlist cref="T:Tools.ResourcesT.SystemResources.KnownValues"/>
</member><member name="T:Tools.ResourcesT.SystemResources">
	<summary>Wraps internal class of .NET Framework <see cref="T:System.SR"/></summary>
	<remarks>Functionality of this class strongly relays on implementation details of .NET Framework!!!</remarks>
</member><member name="F:Tools.ResourcesT.SRDescriptionAttribute._ResourceKey">
	<summary>Contains value of the <see cref="P:Tools.ResourcesT.SRDescriptionAttribute.ResourceKey"/> property</summary>
</member><member name="M:Tools.ResourcesT.SRDescriptionAttribute.#ctor(Tools.ResourcesT.SystemResources.KnownValues)">
	<summary>CTor</summary>
	<param name="ResourceKey">Known resource key to get value from</param>
	<remarks>This CTor is only hint for intellisense. However it is fully functional you will propebly never use it.</remarks>
</member><member name="M:Tools.ResourcesT.SRDescriptionAttribute.#ctor(System.String)">
	<summary>CTor</summary>
	<param name="ResourceKey">Resource key to get value from</param>
</member><member name="P:Tools.ResourcesT.SRDescriptionAttribute.Description">
	<summary>Gets the description stored in this attribute.</summary>
	<returns>The description stored in system resource key <see cref="P:Tools.ResourcesT.SRDescriptionAttribute.ResourceKey"/></returns>
	<exception cref="T:System.Reflection.TargetInvocationException">Unknown unexpected error when obtaining resource value</exception>
</member><member name="P:Tools.ResourcesT.SRDescriptionAttribute.ResourceKey">
	<summary>Key of system resource that contains value of this attribute</summary>
</member><member name="T:Tools.ResourcesT.SRDescriptionAttribute">
	<summary>Exposes functionality of internall (friend) .NET class System.SRDescriptionAttribute - applies <see cref="T:System.ComponentModel.DescriptionAttribute"/> which's value is loaded from internal .NET Framework resource</summary>
</member><member name="M:Tools.ResourcesT.SRCategoryAttribute.#ctor(Tools.ResourcesT.SystemResources.KnownValues)">
	<summary>CTor</summary>
	<param name="ResourceKey">Known resource key to get value from</param>
	<remarks>This CTor is only hint for intellisense. However it is fully functional you will propebly never use it.</remarks>
</member><member name="M:Tools.ResourcesT.SRCategoryAttribute.#ctor(System.String)">
	<summary>CTor</summary>
	<param name="ResourceKey">Resource key to get value from</param>
</member><member name="T:Tools.ResourcesT.SRCategoryAttribute">
	<summary>Exposes functionality of internall (friend) .NET class System.SRCategoryAttribute - applies <see cref="T:System.ComponentModel.DescriptionAttribute"/> which's value is loaded from internal .NET Framework resource</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.#ctor">
	<summary>Default CTor</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.#ctor(Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions)">
	<summary>CTor with value</summary>
	<param name="Value">Initial value</param>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.Value">
	<summary>Edited value</summary>
</member><member name="E:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.ValueChanged">
	<summary>Raised ehan  value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.Value"/> property changes</summary>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor._Context">
	<summary>Contaisn value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.Context"/> property</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.Context">
	<summary>Stores context of current editing session</summary>
	<remarks>This property is set by owner of the control and is valid between calls of <see cref="M:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.OnBeforeShow"/> and <see cref="M:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.OnClosed"/>.</remarks>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.OnBeforeShow">
	<summary>Owner of control informs control that it is about to be shown by calling this methos. It is called just befiore the control is shown.</summary>
</member><member name="M:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.OnClosed">
	<summary>Informs control that it was just hidden by calling this method.</summary>
	<remarks>When implementing editor for reference type that is edited by changin its properties instead of changing its instance. Properties shouldbe changed in this method and onyl if <see cref="P:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.Result"/> is true.</remarks>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.Result">
	<summary>Stores editing result</summary>
	<returns>True if editing was terminated with success, false if it was canceled</returns>
	<remarks>This property is set by owner of the control and is valid when and after <see cref="M:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.OnClosed"/> is called</remarks>
</member><member name="F:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor._Service">
	<summary>Contaisn value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.Service"/> property</summary>
</member><member name="P:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.Service">
	<summary>Stores <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService"/> valid for current editing session</summary>
	<remarks>This property is set by owner of the control and is valid between calls of <see cref="M:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.OnBeforeShow"/> and <see cref="M:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.OnClosed"/>.</remarks>
</member><member name="T:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor">
	<summary>Implements editor for <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions"/></summary>
</member><member name="T:Tools.WindowsT.FormsT.NumericUpDownWithStatus">
	<summary>Note: This control will be removed and replaced with attachable implementation of <see cref="T:Tools.WindowsT.FormsT.StatusMarker"/></summary>
</member><member name="M:Tools.WindowsT.FormsT.TransparentLabel.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.WindowsT.FormsT.TransparentLabel.#ctor(System.String)">
	<summary>CTor with text</summary>
	<param name="Text">Default text of control</param>
</member><member name="M:Tools.WindowsT.FormsT.TransparentLabel.#ctor(System.Drawing.Color)">
	<summary>CTor with back color</summary>
	<param name="BackColor">Default background color</param>
</member><member name="M:Tools.WindowsT.FormsT.TransparentLabel.#ctor(System.Drawing.Color,System.String)">
	<summary>CTor with text and back color</summary>
	<param name="BackColor">Default background color</param>
	<param name="Text">Default text of control</param>
</member><member name="M:Tools.WindowsT.FormsT.TransparentLabel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
	<summary>Paints the background of the control.</summary>
	<param name="pevent">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains information about the control to paint</param>
</member><member name="P:Tools.WindowsT.FormsT.TransparentLabel.CreateParams">
	<summary>Gets the required creation parameters when the control handle is created.</summary>
	<returns>A <see cref="T:System.Windows.Forms.CreateParams"/> that contains the required creation parameters when the handle to the control is created.</returns>
</member><member name="M:Tools.WindowsT.FormsT.TransparentLabel.OnTextChanged(System.EventArgs)">
	<summary>Raisest the <see cref="E:System.Windows.Forms.Control.TextChanged"/> event</summary>
	<param name="e">Event parameters</param>
</member><member name="M:Tools.WindowsT.FormsT.TransparentLabel.OnBackColorChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged"/> event.</summary>
	<param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
</member><member name="P:Tools.WindowsT.FormsT.TransparentLabel.AutoSize">
	<summary>Gets or sets a value indicating whether the control is automatically resized to display its entire contents.</summary>
	<returns>true if the control adjusts its width to closely fit its contents; otherwise, false. The default is false.</returns>
</member><member name="P:Tools.WindowsT.FormsT.TransparentLabel.BackColor">
	<summary>Gets or sets the background color for the control.</summary>
	<returns>A <see cref="T:System.Drawing.Color"/> that represents the background color of the control.</returns>
</member><member name="M:Tools.WindowsT.FormsT.TransparentLabel.ShouldSerializeBackColor">
	<summary>Returns value indicatin if <see cref="P:Tools.WindowsT.FormsT.TransparentLabel.BackColor"/> differs from its default value</summary>
	<returns>True if <see cref="P:Tools.WindowsT.FormsT.TransparentLabel.BackColor"/> is not <see cref="P:System.Drawing.Color.Transparent"/></returns>
</member><member name="M:Tools.WindowsT.FormsT.TransparentLabel.ResetBackColor">
	<summary>Sets <see cref="P:Tools.WindowsT.FormsT.TransparentLabel.BackColor"/> to <see cref="P:System.Drawing.Color.Transparent"/></summary>
</member><member name="T:Tools.WindowsT.FormsT.TransparentLabel">
	<summary><see cref="T:System.Windows.Forms.Label"/> which's background *really* transparent</summary>
	<remarks>To make this contro, transparent or semi-transparent se background color to color with alpha chanel</remarks>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortModes.String">
	<summary>Sort items as <see cref="T:System.String"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortModes.Numeric">
	<summary>Sort items as numbers (<see cref="T:System.Decimal"/> is used)</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortModes.Zerofill">
	<summary>Sor as <see cref="T:System.String"/> filled on left side by zeros ("0") to specified width</summary>
</member><member name="T:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortModes">
	<summary>Possible ways of sorting</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer._Column">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Column"/> property</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer._Descending">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Descending"/> property</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer._SortMode">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortMode"/> property</summary>
</member><member name="F:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer._ZerofillWidth">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.ZerofillWidth"/> property</summary>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.#ctor">
	<summary>CTor with default <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Column"/> 0</summary>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.#ctor(System.Int32,System.Boolean)">
	<summary>CTor</summary>
	<param name="column">Sort column index</param>
	<param name="Descending">Indicates reversed order of sorting</param>
</member><member name="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.ZerofillWidth">
	<summary>Defines fill width applicable when <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortMode"/> is <see cref="F:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortModes.Zerofill"/></summary>
	<exception cref="T:System.ArgumentOutOfRangeException">Setting value less than zero</exception>
	<remarks>When setting to value that differs from contemporary value the <see cref="E:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Changed"/> event is raised</remarks>
</member><member name="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortMode">
	<summary>Gets or sets the way of sorting</summary>
	<remarks>When setting to value that differs from contemporary value the <see cref="E:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Changed"/> event is raised</remarks>
</member><member name="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Column">
	<summary>Gets or sets sort column index</summary>
	<remarks><para>Columns are index in zero-based way including first column. If column is out of range no exceprion is thrown but no sorting done. You can set column to e.g. -1 to avoid sorting.</para>
		<para>When setting to value that differs from contemporary value the <see cref="E:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Changed"/> event is raised.</para></remarks>
</member><member name="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Descending">
	<summary>Gets or sets if sorting order is reversed</summary>
	<remarks>When setting to value that differs from contemporary value the <see cref="E:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Changed"/> event is raised</remarks>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Set(System.Int32,System.Boolean,Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortModes,System.Int32)">
	<summary>Sets <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Column"/> and <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Descending"/> properties at one step and prevents multiple raiseing of the <see cref="E:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Changed"/> event</summary>
	<param name="Column">New value for the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Column"/> property</param>
	<param name="Descending">New value for the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Descending"/> property</param>
	<param name="SortMode">New value for the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortMode"/> property</param>
	<param name="ZeroFillWidth">New value for the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.ZerofillWidth"/> property</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ZeroFillWidth"/> is less than zero</exception>
	<remarks>In case some of parameters differs from value of corresponding property the <see cref="E:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Changed"/> event is raised</remarks>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Compare(System.Object,System.Object)">
	<summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
	<param name="y">The second object to compare.</param>
	<param name="x">The first object to compare.</param>
	<returns>Value Condition Less than zero <paramref name="x"/> is less than <paramref name="y"/>. Zero <paramref name="x"/> equals <paramref name="y"/>. Greater than zero <paramref name="x"/> is greater than <paramref name="y"/>.</returns>
	<exception cref="T:System.ArgumentException">Either <paramref name="x"/> or <paramref name="y"/> is not <see cref="T:System.Windows.Forms.ListViewItem"/></exception>
	<remarks>Internally uses type-safe overload of <see cref="M:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Compare(System.Object,System.Object)"/>. Use it instead.</remarks>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.op_Equality(Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer,Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer)">
	<summary>Compares two <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer"/>s</summary>
	<param name="a">Item to compare</param>
	<param name="b">Item to compare</param>
	<returns>True if both <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Column"/>, <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Descending"/>, <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortMode"/> and <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.ZerofillWidth"/> are equal or both <paramref name="a"/> and <paramref name="b"/> are null. Otherwise False.</returns>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.op_Inequality(Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer,Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer)">
	<summary>Compares two <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer"/>s</summary>
	<param name="a">Item to compare</param>
	<param name="b">Item to compare</param>
	<returns>False if both <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Column"/> and <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Descending"/> are equal or both <paramref name="a"/> and <paramref name="b"/> are null. Otherwise True.</returns>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.op_OnesComplement(Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer)">
	<summary>Inverts <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer"/>'s sort order</summary>
	<param name="a">Original <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer"/></param>
	<returns>A new instance of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer"/> with <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Descending"/> property set to negation of <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Descending"/> property of <paramref name="a"/></returns>
</member><member name="M:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Compare(System.Windows.Forms.ListViewItem,System.Windows.Forms.ListViewItem)">
	<summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
	<param name="liY">The second object to compare.</param>
	<param name="liX">The first object to compare.</param>
	<returns>Value Condition Less than zero <paramref name="liX"/> is less than <paramref name="liY"/>. Zero <paramref name="liX"/> equals <paramref name="liY"/>. Greater than zero <paramref name="liX"/> is greater than <paramref name="liY"/>.</returns>
</member><member name="E:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Changed">
	<summary>Raised when value of member changes</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Event information (always <see cref="F:System.EventArgs.Empty"/> in this implementation</param>
	<remarks>Raiser when value of <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Column"/> or <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Descending"/> changes. Not raised in CTor</remarks>
</member><member name="T:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer">
	<summary>Implements the manual sorting of items in <see cref="T:System.Windows.Forms.ListView"/> by columns.</summary>
	<remarks>
		<seealso>http://msdn2.microsoft.com/en-us/library/system.windows.forms.listview.listviewitemsorter.aspx</seealso>
	</remarks>
</member><member name="M:Tools.ComponentModelT.PrefixAttribute.#ctor(System.String)">
	<summary>CTor</summary>
	<param name="Prefix">Prefix associated with control</param>
</member><member name="F:Tools.ComponentModelT.PrefixAttribute._Prefix">
	<summary>Contains value of the <see cref="P:Tools.ComponentModelT.PrefixAttribute.Prefix"/> property</summary>
</member><member name="P:Tools.ComponentModelT.PrefixAttribute.Prefix">
	<summary>Gets or sets prefix associated with control</summary>
</member><member name="T:Tools.ComponentModelT.PrefixAttribute">
	<summary>Inform programmer that he should name instances of class market wiht this attribute with names beginning with prefix</summary>
	<remarks>This is ONLY recomendation. This attribute is here to allow control author to select prefix. Of course users of controls can either use own prefix or use no prefix.</remarks>
</member><member name="F:Tools.ComponentModelT.ReadOnlyObject.Obj">
	<summary>Contains value of the <see cref="P:Tools.ComponentModelT.ReadOnlyObject.Object"/> property</summary>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.#ctor(System.Object)">
	<summary>CTor</summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Obj"/> is null</exception>
	<param name="Obj">Object to encapsulate</param>
</member><member name="P:Tools.ComponentModelT.ReadOnlyObject.Object">
	<summary>Gets currently encapsulated object</summary>
	<returns>Currently encapsulated object</returns>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.GetAttributes">
	<summary>Returns a collection of custom attributes for this instance of a component.</summary>
	<returns>An <see cref="T:System.ComponentModel.AttributeCollection"/> containing the attributes for this object.</returns>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.GetClassName">
	<summary>Returns the class name of this instance of a component.</summary>
	<returns>The class name of the object, or null if the class does not have a name.</returns>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.GetComponentName">
	<summary>Returns the name of this instance of a component.</summary>
	<returns>The name of the object, or null if the object does not have a name.</returns>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.GetConverter">
	<summary>Returns a type converter for this instance of a component.</summary>
	<returns>A <see cref="T:System.ComponentModel.TypeConverter"/> that is the converter for this object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter"/> for this object.
 This implementation always returns null</returns>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.GetDefaultEvent">
	<summary>Returns the default event for this instance of a component.</summary>
	<returns>An <see cref="T:System.ComponentModel.EventDescriptor"/> that represents the default event for this object, or null if this object does not have events.</returns>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.GetDefaultProperty">
	<summary>Returns the default property for this instance of a component.</summary>
	<returns>A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the default property for this object, or null if this object does not have properties.
 Returned property (if any) is always read-only.</returns>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.GetEditor(System.Type)">
	<summary>Returns an editor of the specified type for this instance of a component.</summary>
	<returns>An <see cref="T:System.Object"/> of the specified type that is the editor for this object, or null if the editor cannot be found.</returns>
	<param name="editorBaseType">A <see cref="T:System.Type"/> that represents the editor for this object. </param>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.GetEvents">
	<summary>Returns the events for this instance of a component.</summary>
	<returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the events for this component instance.</returns>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.GetEvents(System.Attribute[])">
	<summary>Returns the events for this instance of a component using the specified attribute array as a filter.</summary>
	<returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the filtered events for this component instance.</returns>
	<param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter. </param>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.GetProperties">
	<summary>Returns the properties for this instance of a component.</summary>
	<returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties for this component instance.
 Properties returned are read-only.</returns>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.GetProperties(System.Attribute[])">
	<summary>Returns the properties for this instance of a component using the attribute array as a filter.</summary>
	<returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the filtered properties for this component instance.
 Properties returned are read-only.</returns>
	<param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter. </param>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
	<summary>Returns an object that contains the property described by the specified property descriptor.</summary>
	<returns>An <see cref="T:System.Object"/> that represents the owner of the specified property.</returns>
	<param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the property whose owner is to be found. </param>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.ModifyPropertyDescriptor(System.ComponentModel.PropertyDescriptor)">
	<summary>If necessary encapsulates <see cref="T:System.ComponentModel.PropertyDescriptor"/> to be read-only</summary>
	<param name="pd"><see cref="T:System.ComponentModel.PropertyDescriptor"/> to encapsulate</param>
	<returns>Read only <see cref="T:System.ComponentModel.PropertyDescriptor"/></returns>
</member><member name="F:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.Original">
	<summary>Encapsulated <see cref="T:System.ComponentModel.PropertyDescriptor"/></summary>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
	<summary>CTor</summary>
	<param name="Original"><see cref="T:System.ComponentModel.PropertyDescriptor"/> to encapsulate</param>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.CanResetValue(System.Object)">
	<summary>Returns whether resetting an object changes its value.</summary>
	<returns>true if resetting the component changes its value; otherwise, false. This implementation always returns false.</returns>
	<param name="component">The component to test for reset capability. </param>
</member><member name="P:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.ComponentType">
	<summary>Gets the type of the component this property is bound to.</summary>
	<returns>A <see cref="T:System.Type"/> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"/> methods are invoked, the object specified might be an instance of this type.</returns>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.GetValue(System.Object)">
	<summary>Gets the current value of the property on a component.</summary>
	<returns>The value of a property for a given component.</returns>
	<param name="component">The component with the property for which to retrieve the value. </param>
</member><member name="P:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.IsReadOnly">
	<summary>Gets a value indicating whether this property is read-only.</summary>
	<returns>This implementation always return true.</returns>
</member><member name="P:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.PropertyType">
	<summary>Gets the type of the property.</summary>
	<returns>A <see cref="T:System.Type"/> that represents the type of the property.</returns>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.ResetValue(System.Object)">
	<summary>Resets the value for this property of the component to the default value.</summary>
	<param name="component">The component with the property value that is to be reset to the default value. </param>
	<remarks>This implementation does nothing.</remarks>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.SetValue(System.Object,System.Object)">
	<summary>When overridden in a derived class, sets the value of the component to a different value.</summary>
	<param name="component">The component with the property value that is to be set. </param>
	<param name="value">The new value. </param>
	<remarks>This implementation does nothing.</remarks>
</member><member name="M:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.ShouldSerializeValue(System.Object)">
	<summary>When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.</summary>
	<returns>true if the property should be persisted; otherwise, false.</returns>
	<param name="component">The component with the property to be examined for persistence. </param>
</member><member name="T:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor">
	<summary>Read-only <see cref="T:System.ComponentModel.PropertyDescriptor"/></summary>
	<remarks>Encapsulates existing <see cref="T:System.ComponentModel.PropertyDescriptor"/> to be read-only</remarks>
</member><member name="T:Tools.ComponentModelT.ReadOnlyObject">
	<summary>Encapsulates any object and makes it read-only</summary>
	<remarks>Supports both - <see cref="T:System.ComponentModel.TypeDescriptor"/> and <see cref="T:System.ComponentModel.ICustomTypeDescriptor"/></remarks>
</member><member name="M:Tools.ComponentModelT.SettingsInheritDescriptionAttribute.#ctor(System.Type,System.String,System.String)">
	<summary>CTor</summary>
	<param name="Settings">The data type that contains property with name specified in <paramref name="Property"/></param>
	<param name="Property">Name of the property which's <see cref="T:System.Configuration.SettingsDescriptionAttribute"/> initializes this attribute</param>
	<param name="AlternateDescription">Alternative description used in case of failure of getting description form specified property</param>
</member><member name="F:Tools.ComponentModelT.SettingsInheritDescriptionAttribute.Settings">
	<summary>The data type that contains property with name spacified in <see cref="F:Tools.ComponentModelT.SettingsInheritDescriptionAttribute.Property"/></summary>
</member><member name="F:Tools.ComponentModelT.SettingsInheritDescriptionAttribute.Property">
	<summary>Name of the property which's <see cref="T:System.Configuration.SettingsDescriptionAttribute"/> initializes this attribute</summary>
</member><member name="P:Tools.ComponentModelT.SettingsInheritDescriptionAttribute.Description">
	<summary>Gets or sets the string stored as the description.</summary>
	<returns>The string stored as the description. The default value is an empty string ("").</returns>
</member><member name="T:Tools.ComponentModelT.SettingsInheritDescriptionAttribute">
	<summary><see cref="T:System.ComponentModel.DescriptionAttribute"/> that takes its value from <see cref="T:System.Configuration.SettingsDescriptionAttribute"/></summary>
</member><member name="M:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.#ctor(System.Type,System.String,System.Type,System.String)">
	<summary>CTor</summary>
	<param name="Settings">The data type that contains property with name defined in <paramref name="Property"/></param>
	<param name="Property">Name of property from which's <see cref="T:System.Configuration.DefaultSettingValueAttribute"/> this attribute is initialized</param>
	<param name="Type">The data type of the value</param>
	<param name="AlternateDefaultValue">Alternative default value used when fetching fails</param>
</member><member name="M:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.#ctor(System.Type,System.String)">
	<summary>CTor for default values of <see cref="T:System.String"/> type</summary>
	<param name="Settings">The data type that contains property with name defined in <paramref name="Property"/></param>
	<param name="Property">Name of property from which's <see cref="T:System.Configuration.DefaultSettingValueAttribute"/> this attribute is initialized</param>
</member><member name="F:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute._Settings">
	<summary>Contains value of the <see cref="P:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.Settings"/> property</summary>
</member><member name="F:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute._Property">
	<summary>Contains value of the <see cref="P:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.Property"/> property</summary>
</member><member name="F:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute._ValueType">
	<summary>Contains value of the <see cref="P:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.ValueType"/> property</summary>
</member><member name="P:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.Value">
	<summary>Gets the default value of the property this attribute is bound to.</summary>
	<returns>An <see cref="T:System.Object"/> that represents the default value of the property this attribute is bound to.</returns>
	<remarks>Default values can be obtained if stored in form that can be directly returned or if stored as XML-serialized values.</remarks>
</member><member name="P:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.Settings">
	<summary>The data type that contains property with name defined in <see cref="P:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.Property"/></summary>
</member><member name="P:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.Property">
	<summary>Name of property from which's <see cref="T:System.Configuration.DefaultSettingValueAttribute"/> this attribute is initialized</summary>
</member><member name="P:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.ValueType">
	<summary>The data type of the value</summary>
</member><member name="T:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute">
	<summary><see cref="T:System.ComponentModel.DefaultValueAttribute"/> that takes its value from <see cref="T:System.Configuration.DefaultSettingValueAttribute"/></summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTCReader.#ctor(System.IO.Stream)">
	<summary>CTor from <see cref="T:System.IO.Stream"/></summary>
	<param name="Stream"><see cref="T:System.IO.Stream"/> that contains IPTC data</param>
	<exception cref="T:System.IO.InvalidDataException">Tag marker other than 1Ch found</exception>
	<exception cref="T:System.NotSupportedException">Extended-size tag found</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTCReader.#ctor(Tools.DrawingT.MetadataT.IIPTCGetter)">
	<summary>CTor from <see cref="T:Tools.DrawingT.MetadataT.IIPTCGetter"/></summary>
	<param name="Container">Object that contains <see cref="T:System.IO.Stream"/> with IPTC data</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Container"/> is null</exception>
	<exception cref="T:System.IO.InvalidDataException">Tag marker other than 1Ch found</exception>
	<exception cref="T:System.NotSupportedException">Extended-size tag found</exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTCReader.Parse">
	<summary>Parses stream of IPTC data</summary>
	<exception cref="T:System.IO.InvalidDataException">Tag marker other than 1Ch found</exception>
	<exception cref="T:System.NotSupportedException">Extended-size tag found</exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTCReader._Records">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTCReader.Records"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTCReader._Stream">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTCReader.Stream"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTCReader.Stream">
	<summary>Stream used to obtain Exif data</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTCReader.Records">
	<summary>Records in IPTC stream</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTCReader.IPTCRecord.#ctor(System.Byte,System.Byte,System.UInt16,System.Byte[])">
	<summary>CTor</summary>
	<param name="RecordNumber">Record group number</param>
	<param name="Tag">Data set number (usually called tag)</param>
	<param name="Size">Size of record - only not-extended sizes are supported</param>
	<param name="Data">Record data</param>
</member><member name="P:Tools.DrawingT.MetadataT.IPTCReader.IPTCRecord.RecordNumber">
	<summary>Group number of record</summary>
	<remarks>Usually 02h</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTCReader.IPTCRecord.Tag">
	<summary>Data set number (usually called tag)</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTCReader.IPTCRecord.Size">
	<summary>Size of record data</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTCReader.IPTCRecord.Data">
	<summary>Record data as <see cref="T:System.Array"/> of <see cref="T:System.Byte"/>s</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTCReader.IPTCRecord.StringData(System.Text.Encoding)">
	<summary>Record data as <see cref="T:System.String"/></summary>
	<param name="Encoding"><see cref="T:System.Text.Encoding"/> used to convert <see cref="T:System.Byte"/>s to <see cref="T:System.String"/>. If ommited <see cref="P:System.Text.Encoding.Default"/> is used</param>
</member><member name="T:Tools.DrawingT.MetadataT.IPTCReader.IPTCRecord">
	<summary>Repreesents one IPTC record</summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTCReader">
	<summary>Provides low level access to stream of IPTC data</summary>
</member><member name="T:Tools.dSub">
	<summary>Universal delegate of procedure with no argument</summary>
</member><member name="T:Tools.dSub`1">
	<summary>Universal delegate of procedure with 1 argument</summary>
	<param name="arg1">First argument</param>
	<typeparam name="T1">Type of first argument</typeparam>
</member><member name="T:Tools.dSub`2">
	<summary>Universal delegate of procedure with 2 arguments</summary>
	<param name="arg1">First argument</param>
	<param name="arg2">Second argument</param>
	<typeparam name="T1">Type of first argument</typeparam>
	<typeparam name="T2">Type of second argument</typeparam>
</member><member name="T:Tools.dSub`3">
	<summary>Universal delegate of procedure with 3 arguments</summary>
	<param name="arg1">First argument</param>
	<param name="arg2">Second argument</param>
	<param name="arg3">Third argument</param>
	<typeparam name="T1">Type of first argument</typeparam>
	<typeparam name="T2">Type of second argument</typeparam>
	<typeparam name="T3">Type of third argument</typeparam>
</member><member name="T:Tools.dSub`4">
	<summary>Universal delegate of procedure with 4 arguments</summary>
	<param name="arg1">First argument</param>
	<param name="arg2">Second argument</param>
	<param name="arg3">Third argument</param>
	<param name="arg4">Fourth argument</param>
	<typeparam name="T1">Type of first argument</typeparam>
	<typeparam name="T2">Type of second argument</typeparam>
	<typeparam name="T3">Type of third argument</typeparam>
	<typeparam name="T4">Type of third argument</typeparam>
</member><member name="T:Tools.dFunction`1">
	<summary>Universal delegate of function with no argument</summary>
	<typeparam name="TRet">Type of return value</typeparam>
</member><member name="T:Tools.dFunction`2">
	<summary>Universal delegate of function with 1 argument</summary>
	<param name="arg1">First argument</param>
	<typeparam name="TRet">Type of return value</typeparam>
	<typeparam name="T1">Type of first argument</typeparam>
</member><member name="T:Tools.dFunction`3">
	<summary>Universal delegate of function with 2 arguments</summary>
	<param name="arg1">First argument</param>
	<param name="arg2">Second argument</param>
	<typeparam name="TRet">Type of return value</typeparam>
	<typeparam name="T1">Type of first argument</typeparam>
	<typeparam name="T2">Type of second argument</typeparam>
</member><member name="T:Tools.dFunction`4">
	<summary>Universal delegate of function with 3 arguments</summary>
	<param name="arg1">First argument</param>
	<param name="arg2">Second argument</param>
	<param name="arg3">Third argument</param>
	<typeparam name="TRet">Type of return value</typeparam>
	<typeparam name="T1">Type of first argument</typeparam>
	<typeparam name="T2">Type of second argument</typeparam>
	<typeparam name="T3">Type of third argument</typeparam>
</member><member name="T:Tools.dFunction`5">
	<summary>Universal delegate of function with 4 arguments</summary>
	<param name="arg1">First argument</param>
	<param name="arg2">Second argument</param>
	<param name="arg3">Third argument</param>
	<param name="arg4">Fourth argument</param>
	<typeparam name="TRet">Type of return value</typeparam>
	<typeparam name="T1">Type of first argument</typeparam>
	<typeparam name="T2">Type of second argument</typeparam>
	<typeparam name="T3">Type of third argument</typeparam>
	<typeparam name="T4">Type of third argument</typeparam>
</member><member name="T:Tools.ControlEventHandler`2">
	<summary>Represents type-safe event handler</summary>
	<typeparam name="TControl">Type of <paramref name="source"/></typeparam>
	<typeparam name=" TEventArgs">Type of <paramref name="e"/></typeparam>
	<param name="source"><see cref="T:System.Windows.Forms.Control"/> that caused the event</param>
	<param name="e">Event arguments</param>
</member><member name="T:Tools.EventHandler`2">
	<summary>Generic event handler delegate</summary>
	<typeparam name="TSender">Type of the <paramref name="sender"/> argument</typeparam>
	<typeparam name="TEventArgs">Type of the <paramref name="e"/> argument</typeparam>
	<param name="sender">Source of the event - instance of object which fired the event</param>
	<param name="e">Event arguments</param>
</member><member name="T:Tools.Numbers">
	<summary>Contains extension methods for working with numbers of basic data types</summary>
</member><member name="P:Tools.ResourcesT.Icons.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Tools.ResourcesT.Icons.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:Tools.ResourcesT.Icons">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="F:Tools.WindowsT.FormsT.ThesaurusForm.For">
	<summary><see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/> this instance is for</summary>
</member><member name="F:Tools.WindowsT.FormsT.ThesaurusForm.AutoCompleteCache">
	<summary>Reference to auto-complete cache of currently edited <see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/></summary>
</member><member name="M:Tools.WindowsT.FormsT.ThesaurusForm.#ctor(Tools.WindowsT.FormsT.KeyWordsEditor)">
	<summary>CTor</summary>
	<param name="For"><see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/> to be dialog for</param>
</member><member name="F:Tools.WindowsT.FormsT.ThesaurusForm.SynProxy.Syns">
	<summary>Value being proxied</summary>
</member><member name="M:Tools.WindowsT.FormsT.ThesaurusForm.SynProxy.#ctor(System.Collections.Generic.KeyValuePair{System.String[],System.String[]})">
	<summary>CTor</summary>
	<param name="Syns">Value to be proxied</param>
</member><member name="P:Tools.WindowsT.FormsT.ThesaurusForm.SynProxy.DisplayMember">
	<summary>Display member for <see cref="T:System.Windows.Forms.ComboBox"/></summary>
	<returns>First item from <see cref="F:Tools.WindowsT.FormsT.ThesaurusForm.SynProxy.Syns">Syns</see>.<see cref="P:System.Collections.Generic.KeyValuePair`2.Key">Key</see></returns>
</member><member name="T:Tools.WindowsT.FormsT.ThesaurusForm.SynProxy">
	<summary>Proxy of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> for <see cref="T:System.Windows.Forms.ComboBox"/></summary>
</member><member name="M:Tools.WindowsT.FormsT.ThesaurusForm.ShowCache">
	<summary>Shows content of autocomplete cache</summary>
</member><member name="F:Tools.WindowsT.FormsT.ThesaurusForm.OldItem">
	<summary>Previosly selected item in <see cref="P:Tools.WindowsT.FormsT.ThesaurusForm.cmbSyn"/></summary>
</member><member name="M:Tools.WindowsT.FormsT.ThesaurusForm.StoreOldItem">
	<summary>Stores keywords from <see cref="P:Tools.WindowsT.FormsT.ThesaurusForm.kweValues"/> and <see cref="P:Tools.WindowsT.FormsT.ThesaurusForm.kweKeys"/> into <see cref="F:Tools.WindowsT.FormsT.ThesaurusForm.OldItem"/></summary>
</member><member name="T:Tools.WindowsT.FormsT.ThesaurusForm">
	<summary>Editor of autocomplete list and synonym groups for <see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/></summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Object">
	<summary>Reprecents object associated with this step</summary>
	<remarks><list type="table"><listheader><term>Step type</term><description>Content of this field</description></listheader>
			<item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/></term><description>Object value for this step</description></item>
			<item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/></term><description>Object on which the property getter will be invoked</description></item>
			<item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/></term><description><see cref="T:System.Collections.IEnumerable"/> on which the <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">GetEnumerator</see> will be invoked in order to get <see cref="T:System.Collections.IEnumerator"/></description></item>
			<item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/></term><description>Object which's pseudo-propertties will be get</description></item>
			<item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep"/></term><description>Object which's value will be returned</description></item>
		</list></remarks>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Root">
	<summary><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/></summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Property">
	<summary><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/></summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Enumerable">
	<summary><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/></summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Special">
	<summary><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/></summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Self">
	<summary><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep"/></summary>
</member><member name="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses">
	<summary>Helper enumeration that allows quicker identification of steps. Contains one value of each class inherited from <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/></summary>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClass">
	<summary>Returns one of <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses"/> values according to type of current step</summary>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.Step.#ctor(System.Object)">
	<summary>CTor</summary>
	<param name="Object">Value for the <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Object"/> field</param>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Equals(System.Object)">
	<summary>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/>.</summary>
	<param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/>.</param>
	<returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/>; otherwise, false. This function always returns false when type of <paramref name="obj"/> is not <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> and is not same as type of current instance.</returns>
	<remarks>This function cannot be overriden. Override overloaded function instead.</remarks>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Equals(Tools.XmlT.XPathT.XPathObjectNavigator.Step)">
	<summary>Determines whether the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> is equal to the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/>.</summary>
	<param name="other">The <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> to compare with the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/>.</param>
	<returns>true if the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> is equal to the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/>. This function should always return false if the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> is not of the same type as <paramref name="other"/></returns>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Clone">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Clone1">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
	<remarks>Use type-safe <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Clone"/> instead</remarks>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.Step.ToString">
	<summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/>.</summary>
	<returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/></returns>
</member><member name="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step">
	<summary>Common base for step class. Represents one step (level) in pseudo-XML structure exposed by <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/></summary>
	<remarks>You should not create own derived classes from <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> unless you are going to create own <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/>-derived class</remarks>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep.#ctor(System.Object)">
	<summary>CTor</summary>
	<param name="Object">Context object fro new instance</param>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep.Equals(Tools.XmlT.XPathT.XPathObjectNavigator.Step)">
	<summary>Determines whether the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> is equal to the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/>.</summary>
	<param name="other">The <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> to compare with the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/>.</param>
	<returns>true if the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/> and <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Object"/>-s of both <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step">Steps</see> are the same instance.</returns>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep.StepClass">
	<summary>Type of this instance</summary>
	<returns><see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Root"/></returns>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep.Clone">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep">
	<summary>Represents root step of pesudo-XML structure. This step can occure only as first step of sequence.</summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep.Property">
	<summary>Property represented by this step</summary>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep.#ctor(System.Object,System.Reflection.PropertyInfo)">
	<summary>CTor</summary>
	<param name="Object">Object the property is invoked on</param>
	<param name="Property">Identification of property to be represented by a new instance</param>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep.Equals(Tools.XmlT.XPathT.XPathObjectNavigator.Step)">
	<summary>Determines whether the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> is equal to the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/>.</summary>
	<param name="other">The <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> to compare with the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/>.</param>
	<returns>true if type of <paramref name="other"/> is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/> and both, current an specified, <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step">Steps</see> has same value of the <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Object">Object</see> (reference equals) and <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep.Property">Property</see> (same <see cref="P:System.Reflection.MemberInfo.Name"/>) fields.</returns>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep.StepClass">
	<summary>Type of this instance</summary>
	<returns><see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Property"/></returns>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep.Clone">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep.ToString">
	<summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/>.</summary>
	<returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/></returns>
</member><member name="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep">
	<summary>Represents step that represents property of an object</summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Index">
	<summary>Position of pointed object in <see cref="T:System.Collections.IEnumerable"/></summary>
	<remarks>This field must be kept in sinc with real position of <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Enumerator"/> manually! Do not change it if you haven't (or are not going to) move <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Enumerator"/> into the same position as <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Index"/> points to</remarks>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep._Enumerator">
	<summary>Contains value of the <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Enumerator"/> property</summary>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Enumerator">
	<summary><see cref="T:System.Collections.IEnumerator"/> that iterrates through <see cref="T:System.Collections.IEnumerable"/> contained in <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Object"/></summary>
	<remarks>If you use <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Enumerator">Enumerator</see>.<see cref="M:System.Collections.IEnumerator.MoveNext">MoveNext</see> (or <see cref="M:System.Collections.IEnumerator.Reset">Reset</see>) set <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Index"/> to actual position!</remarks>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.#ctor(System.Collections.IEnumerable,System.Int32)">
	<summary>CTor</summary>
	<param name="Object">Instance of <see cref="T:System.Collections.IEnumerable"/> to iterrate through</param>
	<param name="index">Index to move <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Enumerator"/> initially to</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero - or <paramref name="index"/> points to position which exceeds number of items in <paramref name="Object"/></exception>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Object">
	<summary>Shadows <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Object"/> by returning it casted to <see cref="T:System.Collections.IEnumerable"/></summary>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Equals(Tools.XmlT.XPathT.XPathObjectNavigator.Step)">
	<summary>Determines whether the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> is equal to the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/>.</summary>
	<param name="other">The <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> to compare with the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/>.</param>
	<returns>true if type of <paramref name="other"/> is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/>, both (current and specified) <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step">Steps</see> points to the same object (reference equals) and has same <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Index"/></returns>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.StepClass">
	<summary>Type of this instance</summary>
	<returns><see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Enumerable"/></returns>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Clone">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.ToString">
	<summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/>.</summary>
	<returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/></returns>
</member><member name="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep">
	<summary>Represents step that points to item of <see cref="T:System.Collections.IEnumerable"/></summary>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep.#ctor(System.Object)">
	<summary>CTor</summary>
	<param name="Object">Object to point to. This object should be of supported type. See <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Value"/> for list of supported types for pseudo-text pseudo-nodes.</param>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep.Equals(Tools.XmlT.XPathT.XPathObjectNavigator.Step)">
	<summary>Determines whether the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> is equal to the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep"/>.</summary>
	<param name="other">The <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> to compare with the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep"/>.</param>
	<returns>true if type of <paramref name="other"/> is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep"/> and <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Object"/> of both (current and specified) <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step">Steps</see> equals (is same instance)</returns>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep.StepClass">
	<summary>Type of thsi step</summary>
	<returns><see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Self"/></returns>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep.Clone">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="T:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep">
	<summary>Step that points to pseudo-CData content of pseudo-node</summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.TypeName">
	<summary>Short name of type of context object (<seealso cref="P:System.Reflection.MemberInfo.Name"/>)</summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.FullName">
	<summary>Full name of type of context object (<see cref="P:System.Type.FullName"/>)</summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.Name">
	<summary>Name of property, current stape will be obtained throught. Supported also for root but returns <see cref="T:System.String"/></summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.Enumerable">
	<summary>Contains true for enumerable objects, otherwise is not present</summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.CircleLevel">
	<summary>Contains number of steps upward (in parent axis) needed to reach same context object as is actual <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextObject"/>. Present only if non-zero.</summary>
</member><member name="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType">
	<summary>Type of especially supported properties</summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Type">
	<summary>Sub-type of this step</summary>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.#ctor(System.Object,Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType)">
	<summary>CTor</summary>
	<param name="Object">Object to get information from</param>
	<param name="Type">Type of information to be got</param>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Equals(Tools.XmlT.XPathT.XPathObjectNavigator.Step)">
	<summary>Determines whether the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> is equal to the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep"/>.</summary>
	<param name="other">The <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> to compare with the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep"/>.</param>
	<returns>True if <paramref name="other"/> is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/> and both (current and specified) <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step">Steps</see> have same instance in their <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Object"/> field and are of same sub-type (see also <seealso cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Type"/>)</returns>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepClass">
	<summary>Type of this instance</summary>
	<returns><see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Special"/></returns>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Clone">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.ToString">
	<summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/>.</summary>
	<returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/></returns>
</member><member name="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep">
	<summary>Represents special step that points to especially supported property of object</summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator._Location">
	<summary>Contains value of the <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location"/> property</summary>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location">
	<summary>Sequence of steps alwas starting with <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/> and always ahving at least 1 item. This sequence determines current position of <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/>.</summary>
	<returns>Steps in child or attribute axes from root needed to reproduce navigation</returns>
	<remarks>Avoind clearing this collection and puting anything other than <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/> at first index. Consider carefully changing value of items.</remarks>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.ns">
	<summary>Name of namespace for pseudo-document</summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.atrName">
	<summary>Name of attribute name</summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.atrTypeName">
	<summary>Name of attribute type-name</summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.atrFullName">
	<summary>Name of attribute full-name</summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.atrEnumerable">
	<summary>Name of attribute enumerable</summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.atrCircleLevel">
	<summary>Name of attribute circele-level</summary>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.nodItemOf">
	<summary>Name of ode item-of</summary>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.#ctor(System.Boolean)">
	<summary>Private CTor dhat does common construction steps</summary>
	<param name="AllowCircles">Valus for the <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.AllowCircles"/> property</param>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.#ctor(System.Object,System.Boolean)">
	<summary>CTor from any <see cref="T:System.Object"/></summary>
	<param name="Object">Root for new instance</param>
	<param name="AllowCircles">Indicates if newly created instance will support infinite-depth trees (circle references). See <seealso cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.AllowCircles"/> for more details.</param>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.#ctor(Tools.XmlT.XPathT.XPathObjectNavigator)">
	<summary>Copy CTor</summary>
	<param name="Other">Instance which's location new insatnce will point to</param>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.BaseURI">
	<summary>When overridden in a derived class, gets the base URI for the current node.</summary>
	<returns>For <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> this property always returns <see cref="T:System.String"/></returns>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.Clone">
	<summary>When overridden in a derived class, creates a new <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> positioned at the same node as this <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/>.</summary>
	<returns>A new <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> positioned at the same node as this <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/>.</returns>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.IsEmptyElement">
	<summary>Gets a value indicating whether the current node is an empty element without an end element tag.</summary>
	<returns>True if context object has no public readable properties without mandatory arguments and it is not <see cref="T:System.Collections.IEnumerable"/> or it is <see cref="T:System.Collections.IEnumerable"/> but with no items inside.</returns>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
	<summary>Determines whether the current <see cref="T:System.Xml.XPath.XPathNavigator"></see> is at the same position as the specified <see cref="T:System.Xml.XPath.XPathNavigator"></see>.</summary>
	<returns>Returns true if <paramref name="other"/> is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/>, has same count of items in its <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location"/> as current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> and all those steps equals to steps in current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/></returns>
	<param name="other">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> to compare to this <see cref="T:System.Xml.XPath.XPathNavigator"/>.</param>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.LocalName">
	<summary>Gets the <see cref="P:System.Xml.XPath.XPathNavigator.Name"></see> of the current node without any namespace prefix.</summary>
	<returns>A <see cref="T:System.String"></see> that contains the local name of the current node, or <see cref="F:System.String.Empty"></see> if the current node does not have a name (for example, text or comment nodes).</returns>
	<remarks><list><listheader><term>Current step</term><description>Returned value</description></listheader>
			<item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/></term><description>"item-of"</description></item>
			<item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/></term><description><see cref="P:System.Reflection.MemberInfo.Name"/> of current property</description></item>
			<item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/>
					<see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Type">Type</see> = <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.Enumerable"/></term><description>"enumerable"</description></item>
			<item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/>
					<see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Type">Type</see> = <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.FullName"/></term><description>"full-name"</description></item>
			<item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/>
					<see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Type">Type</see> = <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.Name"/></term><description>"name"</description></item>
			<item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/>
					<see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Type">Type</see> = <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.TypeName"/></term><description>"type-name"</description></item>
			<item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/>
					<see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Type">Type</see> = <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.CircleLevel"/></term><description>"circle-level"</description></item>
			<item><term>Any other</term><description><see cref="T:System.String"/></description></item>
		</list>
		<para>See <seealso cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> for definition of some terms.</para>
	</remarks>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.CloneLocation">
	<summary>Clones <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location"/> by clonig all steps in it</summary>
	<returns>Indepemdent copy of actual <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location"/></returns>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
	<summary>Moves the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> to the same position as the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/>.</summary>
	<returns>Returns true if the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> is successful moving to the same position as the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/>; otherwise, false. If false, the position of the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> is unchanged.</returns>
	<param name="other">The <see cref="T:System.Xml.XPath.XPathNavigator"/> positioned on the node that you want to move to. </param>
	<remarks>Changing position succeds only if <paramref name="other"/> is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/></remarks>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToFirstAttribute">
	<summary>When overridden in a derived class, moves the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> to the first attribute of the current node.</summary>
	<returns>Returns true if the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> is successful moving to the first attribute of the current node; otherwise, false. If false, the position of the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> is unchanged.</returns>
	<remarks>This method is succesfull if current step is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/> or <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/> or <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/>. Firts attribute is always <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.TypeName"/> and context object becomes current object</remarks>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.GetFirstProperty(System.Object,System.Reflection.PropertyInfo,System.Boolean)">
	<summary>Finds first property of specified object lying after specified property in specified direction</summary>
	<param name="Obj">Object to be sought for property. If ommited <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextObject"/> is used.</param>
	<param name="After">Property after which the search should start. If ommited first property is returned</param>
	<param name="Reverse">If true the property is being searched from last to first instead of from first to last</param>
	<returns>First usable property of spacified object laying after specified property in specified direction. Usable properties are public instance properties (and not <see cref="P:System.Reflection.PropertyInfo.IsSpecialName"/>) with public get accessor which is callable without parameters. If no such property is found null is returned.</returns>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToFirstPropertyOrItem(System.Reflection.PropertyInfo,System.Object,System.Boolean)">
	<summary>Helper method for <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToFirstChild"/> and <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToNext"/> (when current step is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/>). Moves <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> to first (or next) property or first <see cref="T:System.Collections.IEnumerable"/> item.</summary>
	<param name="After">Property after which start search. If ommited or null first property is used.</param>
	<returns>True if moving was successfull</returns>
	<remarks>This function uses <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.GetFirstProperty(System.Object,System.Reflection.PropertyInfo,System.Boolean)"/> to get first (or next) property in forward direction. If there is no such property and context object is <see cref="T:System.Collections.IEnumerable"/> which has at least one item the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> is muved to this first item.</remarks>
	<param name="Obj">Object which's properties should be examined. If not specified or null the <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextObject"/> is used.</param>
	<param name="Replace">Determines if new step is appended after current (false) or replaces current (true)</param>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToFirstChild">
	<summary>When overridden in a derived class, moves the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> to the first child node of the current node.</summary>
	<returns>Returns true if the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is successful moving to the first child node of the current node; otherwise, false. If false, the position of the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is unchanged.</returns>
	<remarks>
		<para>Only <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/>, <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/> and <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/> can have children.
 In order step-that-can-have-children to have children its context object must not be of supported type (see <seealso cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSupportedType(System.Type)"/>) and it must at least one public instance property with public getter or it must be <see cref="T:System.Collections.IEnumerable"/> with at least one item to enumerate.</para>
		<para>This function uses <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToFirstPropertyOrItem(System.Reflection.PropertyInfo,System.Object,System.Boolean)"/> for unsupported types.</para>
		<para>If type of context object is supported then it has only text child taht contains value of supported type.</para>
		<para>Is <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.IsCircleReferenced"/> returns true than this method retruns false if <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.AllowCircles"/> is set to false</para>
	</remarks>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSupportedType(System.Type)">
	<summary>Gets value indicating if cpecified type is supported for in-line (text node) representation.</summary>
	<param name="T">Type to be verified</param>
	<returns>Currently following types are supported:
 <see cref="T:System.String"/>, <see cref="T:System.Char"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.UInt64"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Single"/>, <see cref="T:System.Boolean"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.TimeSpan"/>, <see cref="T:Tools.TimeSpanFormattable"/>, <see cref="T:System.Uri"/>, <see cref="T:System.Text.StringBuilder"/> and any type that has <see cref="P:System.Type.IsEnum"/> true
 </returns>
	<remarks>Note for inheritors: Supported types are sometimes treated specially sometimes is only <see cref="M:System.Object.ToString"/> used. In order to control this behavoir overrides <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.SupportedTypeValue(System.Object)"/>
		<para>See <seealso cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.SupportedTypeValue(System.Object)"/> for an example.</para>
	</remarks>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
	<summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to first namespace node of the current node.</summary>
	<returns>Not implemented. always retruns false.</returns>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToId(System.String)">
	<summary>Moves to the node that has an attribute of type ID whose value matches the specified <see cref="T:System.String"></see>.</summary>
	<returns>Not implemeted. always returns false.</returns>
	<param name="id">A <see cref="T:System.String"></see> representing the ID value of the node to which you want to move.</param>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToNext">
	<summary>Moves the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> to the next sibling node of the current node.</summary>
	<returns>true if the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> is successful moving to the next sibling node; otherwise, false if there are no more siblings or if the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is currently positioned on an attribute node. If false, the position of the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> is unchanged.</returns>
	<remarks>For <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/> the <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToFirstPropertyOrItem(System.Reflection.PropertyInfo,System.Object,System.Boolean)"/> is invoked. For <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/> an attempt to invoke <see cref="M:System.Collections.IEnumerator.MoveNext"/> is done.</remarks>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToNextAttribute">
	<summary>Moves the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> to the next attribute.</summary>
	<returns>Returns true if the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is successful moving to the next attribute; false if there are no more attributes. If false, the position of the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is unchanged.</returns>
	<remarks>Only <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/>, <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/> and <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/> have attributes. Attributes are ordered type-name, full-name, name, enumerable, circle-level. The enumerable attribute is present only when context object is <see cref="T:System.Collections.IEnumerable"/> (in such case it has value "true"). The name attribute is present always but for <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/> it has value <see cref="T:System.String"/>. The circle-level attribute is present only if it's value is non-zero. Attributes as menitoned are provided also for so-called supported types (<seealso cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSupportedType(System.Type)"/>).</remarks>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
	<summary>Moves the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> to the next namespace node.</summary>
	<returns>Always false. Not implemented</returns>
	<param name="namespaceScope">An <see cref="T:System.Xml.XPath.XPathNamespaceScope"></see> value describing the namespace scope. </param>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToParent">
	<summary>Moves the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> to the parent node of the current node.</summary>
	<returns>Returns true if the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is successful moving to the parent node of the current node; otherwise, false. If false, the position of the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is unchanged.</returns>
	<remarks>Works for all type of steps expect <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/>. Removes current spet, so parent of current step becomes current step.</remarks>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToPrevious">
	<summary>When overridden in a derived class, moves the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> to the previous sibling node of the current node.</summary>
	<returns>Returns true if the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is successful moving to the previous sibling node; otherwise, false if there is no previous sibling node or if the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is currently positioned on an attribute node. If false, the position of the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is unchanged.</returns>
	<remarks>This is valid for <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/> and <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/>.
 For <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/> moves to previous usable property (if any) using <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.GetFirstProperty(System.Object,System.Reflection.PropertyInfo,System.Boolean)"/>.
 For <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/> re-iterates <see cref="T:System.Collections.IEnumerator"/> to position less by 1 than actual position (if actual position is greater than zero; see <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Index"/>). If it is zero that last property of current object become surrent step (if there is any usable property).
 </remarks>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.Name">
	<summary>When overridden in a derived class, gets the qualified name of the current node.</summary>
	<remarks><see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.LocalName"/></remarks>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.NamespaceURI">
	<summary>When overridden in a derived class, gets the namespace URI of the current node.</summary>
	<returns>Not supported. Gets value from <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.NameTable"/> using <see cref="T:System.String"/> as key</returns>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator._NameTable">
	<summary>Contains value of the <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.NameTable"/> property</summary>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.NameTable">
	<summary>Gets the <see cref="T:System.Xml.XmlNameTable"></see> of the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see>.</summary>
	<returns><see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.NameTable"/> that contains only item with <see cref="T:System.String"/> as key</returns>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.NodeType">
	<summary>Gets the <see cref="T:System.Xml.XPath.XPathNodeType"/> of the current node.</summary>
	<returns>
		<para>One of the <see cref="T:System.Xml.XPath.XPathNodeType"/> values representing the current node.</para>
		<list type="table"><listheader><term>Type of current step</term><description>Returned value</description></listheader>
			<item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/></term><description><see cref="F:System.Xml.XPath.XPathNodeType.Root"/></description></item>
			<item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/> or <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/></term><term><see cref="F:System.Xml.XPath.XPathNodeType.Element"/></term></item>
			<item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/></term><description><see cref="F:System.Xml.XPath.XPathNodeType.Attribute"/></description></item>
			<item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep"/></term><description><see cref="F:System.Xml.XPath.XPathNodeType.Text"/></description></item>
			<item><description>other</description><description>Throws <see cref="T:System.InvalidOperationException"/></description></item>
		</list>
	</returns>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.CurrentStep"/>.<see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClass">StepClass</see> is not member of <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses"/>. This can happne only in derived class when inheritor have created own types of steps buth naven't overrided this property.</exception>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.Prefix">
	<summary>When overridden in a derived class, gets the namespace prefix associated with the current node.</summary>
	<returns>Not supported. Returns item from <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.NameTable"/> got by key <see cref="T:System.String"/></returns>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.SupportedTypeValue(System.Object)">
	<summary>Called by <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Value"/> for steps which context object is of type for which <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSupportedType(System.Type)"/> returns true</summary>
	<param name="obj">Object to get <see cref="T:System.String"/> value for</param>
	<remarks>This implementation treats supported types in same way as <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Value"/> with exception for following types:
 <list type="table"><listheader><term>Type</term><description>Treatement</description></listheader>
			<item><term><see cref="T:System.DateTime"/></term><description>Returned in format YYY-MMddHH:mm:ss.fffzzz (fff part is ommited when <see cref="P:System.DateTime.Millisecond"/> is zero; zzz part is ommited when <see cref="P:System.DateTime.Kind"/> is neither <see cref="F:System.DateTimeKind.Local"/> nor <see cref="F:System.DateTimeKind.Utc"/> and replaced wizh 'Z' when it is <see cref="F:System.DateTimeKind.Utc"/>)</description></item>
			<item><term><see cref="T:System.TimeSpan"/></term><description>Converted to <see cref="T:Tools.TimeSpanFormattable"/> and <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.SupportedTypeValue(System.Object)"/> is called again</description></item>
			<item><term><see cref="T:Tools.TimeSpanFormattable"/></term><description>Returned ifn format h(0):mm:ss.lll (lll part is ommited when <see cref="P:Tools.TimeSpanFormattable.Milliseconds"/> is zero).</description></item>
			<item><term><see cref="T:System.Boolean"/></term><description>"true" or "false" depending on value </description></item>
			<item><term>Derived from <see cref="T:System.Enum"/></term><description>Returned result of <see cref="M:System.Enum.ToString"/></description></item>
		</list>
		<para>Note for inheritors: You should consider implementing this method for any type added to <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSupportedType(System.Type)"/> if you don't want default behavior for such type.</para>
		<example>
			<para>Following example shows preffered way of adding own supported type. Of course you can use any other way - change <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.SupportedTypeValue(System.Object)"/>'s behavior for in-this-implementation supported types or make supported type unsuported by returnnig false for it from <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSupportedType(System.Type)"/></para>
			<code>
				<![CDATA[
 Protected Overrides Function IsSupportedType(ByVal T As Type) As Boolean
     Return T.Equals(GetType(MySupportedType)) OrElse T.IsSubclassOf(GetType(MySupportedType)) OrElse MyBase.IsSupportedType(T)
 End Function
 Protected Overrides Function SupportedTypeValue(ByVal obj As Object) As String
     If TypeOf obj Is MySupportedType Then
          Return DirectCast(obj, MySupportedType).GetValueThatIWantToBeGot()
     Else
         Return MyBase.SupportedTypeValue(obj)
     End If
 End Function
 ]]>
			</code>
		</example>
 Note: This function is also called for steps of <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/> type not depending on if type of pseudo-attribute has <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSupportedType(System.Type)"/> true for itself. So, this function must behave correctly for all types of pseudo-attributes (in this implementation it is only <see cref="T:System.String"/> and <see cref="T:System.Boolean"/>).
 </remarks>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.Value">
	<summary>Gets the string value of the item.</summary>
	<returns>The string value of the item.</returns>
	<remarks>If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.CurrentStep"/> is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/> then value of peudo-property depending on <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Type"/> is returned (using <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.SupportedTypeValue(System.Object)"/>) otherwise if context object is <see cref="T:System.IFormattable"/> its value is obtained via <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> with <see cref="T:System.String"/> as format parameter and <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> as culture if it is not <see cref="T:System.IFormattable"/> value is obtained via <see cref="M:System.Object.ToString"/>. But vhen <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSupportedType(System.Type)"/> returns true for type of context object <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.SupportedTypeValue(System.Object)"/> is used instead.</remarks>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsBoolean">
	<summary>Gets the current node's value as an <see cref="T:System.Boolean"></see>.</summary>
	<returns>The current node's value as an <see cref="T:System.Boolean"></see>. If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextValue"/> is <see cref="T:System.IConvertible"/> than <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/> is used, otherwise <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsLong"/> is called.</returns>
	<exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Boolean"></see>.</exception>
	<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Boolean"></see> is not valid.</exception>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsDouble">
	<summary>Gets the current node's value as an <see cref="T:System.Double"></see>.</summary>
	<returns>The current node's value as an <see cref="T:System.Double"></see>. If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextValue"/> is <see cref="T:System.IConvertible"/> than <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/> is used, otherwise <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsLong"/> is called.</returns>
	<exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Double"></see>.</exception>
	<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Double"></see> is not valid.</exception>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsDateTime">
	<summary>Gets the current node's value as an <see cref="T:System.DateTime"></see>.</summary>
	<returns>The current node's value as an <see cref="T:System.DateTime"></see>. If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextValue"/> is <see cref="T:System.IConvertible"/> than <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)"/> is used, otherwise <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsLong"/> is called.</returns>
	<exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.DateTime"></see>.</exception>
	<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.DateTime"></see> is not valid.</exception>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsInt">
	<summary>Gets the current node's value as an <see cref="T:System.Int32"></see>.</summary>
	<returns>The current node's value as an <see cref="T:System.Int32"></see>. If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextValue"/> is <see cref="T:System.IConvertible"/> than <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/> is used, otherwise <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsLong"/> is called.</returns>
	<exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Int32"></see>.</exception>
	<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int32"></see> is not valid.</exception>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsLong">
	<summary>Gets the current node's value as an <see cref="T:System.Int64"></see>.</summary>
	<returns>The current node's value as an <see cref="T:System.Int64"></see>. If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextValue"/> is <see cref="T:System.IConvertible"/> than <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/> is used, otherwise <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsLong"/> is called.</returns>
	<exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Int64"></see>.</exception>
	<exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int64"></see> is not valid.</exception>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueType">
	<summary>Gets the .NET Framework <see cref="T:System.Type"></see> of the current node.</summary>
	<returns>The .NET Framework <see cref="T:System.Type"></see> of the current node. The default value is <see cref="T:System.String"></see>.</returns>
	<remarks>Returned value depends on actual type of actual context value (see <seealso cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextValue"/>). If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextValue"/> is null this returns <see cref="T:System.DBNull"/></remarks>
</member><member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
	<summary>Gets the current node's value as the <see cref="T:System.Type"></see> specified, using the <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object specified to resolve namespace prefixes.</summary>
	<returns>The value of the current node as the <see cref="T:System.Type"></see> requested. If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueType"/> is subclass of (or is itself) or implements <paramref name="returnType"/> then <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextValue"/> is returned. Otherwise <see cref="M:System.Xml.XPath.XPathNavigator.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)"/> is called</returns>
	<param name="returnType">The <see cref="T:System.Type"></see> to return the current node's value as.</param>
	<param name="nsResolver">The <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object used to resolve namespace prefixes.</param>
	<exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
	<exception cref="T:System.FormatException">The current node's value is not in the correct format for the target type.</exception>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextValue">
	<summary>Gets current context value</summary>
	<remarks>See <seealso cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> for definition of context value</remarks>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.CurrentStep">
	<summary>Gets or sets actual current step</summary>
	<value>Setting value of <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.CurrentStep"/> replaces actual current step by another one - so, it changes position of <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> inside parent of current step</value>
	<remarks>See <seealso cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> for definition of current step</remarks>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.CurrentProperty">
	<summary>Gets actual current property</summary>
	<remarks>See <seealso cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> for definition of current property</remarks>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.CurrentObject">
	<summary>Gets actual current object</summary>
	<remarks>See <seealso cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> for definition of current object</remarks>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.CurrentEnumerator">
	<summary>Gets actual current enumerator</summary>
	<remarks>See <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> for definition of current enumerator</remarks>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextObject">
	<summary>Gets actual context object</summary>
	<remarks>See <seealso cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> for definition of context object</remarks>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.IsCircleReferenced">
	<summary>Gets information if current <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextObject"/> is context object of any of parent nodes.</summary>
	<returns>True if <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.CircleLevel"/> &lt; <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location">Location</see>.<see cref="P:System.Collections.Generic.List`1.Count">Count</see> - 1</returns>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.CircleLevel">
	<summary>Detects circle references. Gets index into the <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location"/> collection where is the first occurence of actual <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextObject"/> as context object.</summary>
	<returns>If no reference equal context object in location is found returns index of current step (this is <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location">Location</see>.<see cref="P:System.Collections.Generic.List`1.Count">Count</see> - 1).
 If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.CurrentStep"/> is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/> and returned value should be <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location">Location</see>.<see cref="P:System.Collections.Generic.List`1.Count">Count</see> - 1 then it is <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location">Location</see>.<see cref="P:System.Collections.Generic.List`1.Count">Count</see> - 2 (as if it is in context of pseudo-attribute parent instead of pseudo-attribute itself).
 </returns>
	<remarks>If current step is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/>
		<see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.CurrentObject"/> is used instead of <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextObject"/></remarks>
</member><member name="F:Tools.XmlT.XPathT.XPathObjectNavigator._AllowCircles">
	<summary>Contains value of the <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.AllowCircles"/> property</summary>
</member><member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.AllowCircles">
	<summary>Gets value indicating if circles in references of objects are allowed.</summary>
	<remarks>This property can be set only via CTor
 <para>Circle is detected when <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToFirstChild"/> is invoked and <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextObject"/> reference equals to context object of any of steps in <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location"/>.
 If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.AllowCircles"/> is False in such situation than <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToFirstChild"/> returns false. In XPath you can detect circle references by testing the circle-level pseudo-attribute.
 The circle-level attribute contains number of steps upwards (in parent axis) to reach same context object as is current <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextObject"/>.
 </para>
	</remarks>
</member><member name="T:Tools.XmlT.XPathT.XPathObjectNavigator">
	<summary>Implements <see cref="T:System.Xml.XPath.XPathNavigator"/> over any object structure</summary>
	<remarks>
		<para>Pass any object to CTor of this class and peudo-XML tree structure that can be navigated using XPath will be created.</para>
		<para>
 The structure alwasy consists of root node and sequence of other nodes.
 For some spcially supported types (like <see cref="T:System.Int32"/> or <see cref="T:System.String"/>; see <seealso cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Value"/> for information) the text node is created and nothing else.
 For other types if created element node with three or four attributes and elements named as properties of such type and element named value-of for items of <see cref="T:System.Collections.IEnumerable"/>.
 </para>
		<para>The attributes are:</para>
		<list type="table"><listheader><term>Attribute name</term><description>Description</description></listheader>
			<item><term>type-name</term><description>Short name of type represented by node (see <seealso cref="P:System.Reflection.MemberInfo.Name"/>)</description></item>
			<item><term>full-name</term><description>Full name of type represented by node (see <seealso cref="P:System.Type.FullName"/>)</description></item>
			<item><term>name</term><description>Name of property through which the object have been obtained. For rooth node contains <see cref="T:System.String"/></description></item>
			<item><term>enumerable</term><description>If context object of current node is <see cref="T:System.Collections.IEnumerable"/> and it is not of <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSupportedType(System.Type)">supported type</see> contains true; otherwise it is not present.</description></item>
			<item><term>circle-level</term><description>If same (reference equal) object as context object of current node is context object of node somewhere at parent axis of current node this pseudo-attribute contains number of levels upward (on parent axis) to such (at level closest to root) object; otherwise this pseudo-attribute is not present.</description></item>
		</list>
		<para>Example for <see cref="T:System.Collections.Generic.List`1"/></para>
		<example>
			<![CDATA[
 < type-name="List`1" full-name="System.Collections.Generic.List`1[[System.String, mscorlib, Versionb=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" name="" enumerable="true">
     <Capacity type-name="Int32" full-name="System.Int32" name="Capacity">3</Capacity>
     <Count type-name="Int32" full-name="System.Int32" name="Count">3</Count>
     <item-of type-name="String" full-name="System.String" name="GetEnumerator">Item 1</item>
     <item-of type-name="String" full-name="System.String" name="GetEnumerator">Item 2</item>
     <item-of type-name="String" full-name="System.String" name="GetEnumerator">Item 3</item>
 </ >
 ]]>
		</example>
 Note: Root node is unnamed. Properties can be of complex types (stored as sub-trees). Order of occurence of attributes is as shown. Properties are alwas before enum items. name from enum items is always GetEnumerator. Name of node representing enum item - item-of can never be in conflict with name of property because it contains hyppen.
 <para>Definitions:</para>
		<list>
			<item><term>Current object</term><description>Object contained in <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.[Step].[Object]"/> field of current step</description></item>
			<item><term>Current step</term><description>Last item of <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location"/> collection</description></item>
			<item><term>Context object</term><description>Object produced or used by current step. Value depends on type of step
 <list><listheader><term>Type of step</term><description>Context object</description></listheader>
						<item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/></term><description>Object returned by getter of current property</description></item>
						<item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/></term><description>Object returned by enumerator at its current position</description></item>
						<item><term>Any other defined in <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/></term><description>Same as current object</description></item>
					</list>
				</description></item>
			<item><term>Parent step of another step</term><description>Step that lies on preceding index of <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location"/> collection then step which's parent it is.</description></item>
			<item><term>Current property</term><description>For property steps (<seealso cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/>) it is <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep.Property"/> otherwise it is null</description></item>
			<item><term>Current enumerator</term><description>For enumerable steps (<seealso cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/>) it is <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Enumerator"/> otherwise it is null</description></item>
			<item><term>Context value</term><description>Same as context object with exception when current step is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/> (then it is value of pseudo-attribute)</description></item>
		</list>
	</remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.#ctor(System.Boolean,System.Boolean)">
	<summary>CTor</summary>
	<param name="AddingReadOnly">Value of <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AddingReadOnly"/> property that determines <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> property value for the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> events</param>
	<param name="CancelError">Value of <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> that determines if and <see cref="T:System.OperationCanceledException"/> is thrown when item operation is canceled in event handler.</param>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ToArray">
	<summary>Copies all elements of this collection to new <see cref="T:System.Array"/></summary>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Boolean)">
	<summary>CTor - initializes from another <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
	<param name="collection"><see cref="T:System.Collections.Generic.IEnumerable`1"/> to initialize new instance of <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> with</param>
	<param name="AddingReadOnly">Value of <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AddingReadOnly"/> property that determines <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> property value for the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> events</param>
	<exception cref="T:System.ArgumentNullException">collection is null</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.#ctor(System.Int32,System.Boolean,System.Boolean)">
	<summary>Initializes a new instance of the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> class that is empty and has the specified initial capacity.</summary>
	<param name="capacity">The number of elements that the new list can initially store.</param>
	<param name="AddingReadOnly">Value of <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AddingReadOnly"/> property that determines <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> property value for the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> events</param>
	<exception cref="T:System.ArgumentOutOfRangeException">capacity is less than 0</exception>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.List">
	<summary>Internal list that is used for soring values</summary>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1._AddingReadOnly">
	<summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AddingReadOnly"/> property</summary>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AddingReadOnly">
	<summary>Determines <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> property value for the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> events</summary>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1._CancelError">
	<summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> property</summary>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError">
	<summary>Gets value indicating if an <see cref="T:System.OperationCanceledException"/> is thrown when item operation is canceled in event handler.</summary>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1._AllowAddCancelableEventsHandlers">
	<summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> property</summary>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers">
	<summary>Determines if it is allowed to add handlers for events that supports cancellation</summary>
	<exception cref="T:System.InvalidOperationException">Trying to set value to True when it if False</exception>
	<remarks>
 Value can be changed only from True (default) to False
 <list>
			<listheader>Those are events:</listheader>
			<item><see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/></item>
			<item><see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/></item>
			<item><see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Clearing"/></item>
			<item><see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/></item>
		</list>
	</remarks>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1._Locked">
	<summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/></summary>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked">
	<summary>Determines if the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> isn locked (being locked prevents if from being edited)</summary>
	<remarks><para>
			<see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> is usually locked while some events' handlers are being invoked.
 </para><list>
			<listheader><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> set to True blocks following methods and causes <see cref="T:System.InvalidOperationException"/> exception to be thrown there:</listheader>
			<item><see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Add(`0)"/></item>
			<item><see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Insert(System.Int32,`0)"/></item>
			<item><see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Remove(`0)"/></item>
			<item><see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveAt(System.Int32)"/></item>
			<item><see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Clear"/></item>
			<item><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/> (only setter)</item>
		</list></remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Lock">
	<summary>Sets the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> to True</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Unlock">
	<summary>Sets the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> to False</summary>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.AddingEventHandlerList">
	<summary>List of <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemCancelEventHandler"/> delegates to be invoked when the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> event is raised</summary>
</member><member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemCancelEventHandler">
	<summary>Delegate of handler of <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> events</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Event parameters</param>
</member><member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding">
	<summary>Raised before an item is added to the list. Raised by <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Add(`0)"/> and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Insert(System.Int32,`0)"/> methods.</summary>
	<remarks><para>
 This event can be disabled (see <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/>.
 This means that <see cref="T:System.InvalidOperationException"/> is thrown when adding handler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> is False.
 </para><para>
 Value of parameter <paramref name="e"/>'s <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> can be changed if <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AddingReadOnly"/> is False.
 </para></remarks>
	<exception cref="T:System.InvalidOperationException">Adding handler when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> is false</exception>
</member><member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Added">
	<summary>Raised after an item is added to the list. Raised by <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Add(`0)"/> and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Insert(System.Int32,`0)"/> methods</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Event parameters</param>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Add(`0)">
	<summary>Adds an item to the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</param>
	<remarks>Note for inheritors: Call <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnAdding(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)"/> before adding an item to the list and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnAdded(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemIndexEventArgs)"/> after adding item to the list, do not forgot to check <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/></remarks>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
	<exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
	<exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> event</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
	<summary>Adds range of items into list</summary>
	<param name="Items">Collection of items to be added</param>
	<remarks>
 Internally calls <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Add(`0)"/> for each item.
 If an exception occures in <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Add(`0)"/> or event handler than no item is added.
 <paramref name="Items"/> can safelly be null.
 </remarks>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
	<exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
	<exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> event</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Insert(System.Int32,`0)">
	<summary>Inserts an item to the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> at the specified index.</summary>
	<param name="item">The object to insert into the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</param>
	<param name="index">The zero-based index at which item should be inserted.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</exception>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
	<exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
	<exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> event</exception>
	<remarks>Note for inheritors: Call <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnAdding(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)"/> before adding an item to the list and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnAdded(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemIndexEventArgs)"/> after adding item to the list, do not forgot to check <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/></remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnAdding(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)">
	<summary>Raises <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> event</summary>
	<param name="e">Event arguments</param>
	<remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnAdding(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)"/> in order the event to be raised</remarks>
	<exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
	<exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> event</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnAdded(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemIndexEventArgs)">
	<summary>Raises <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Added"/> event</summary>
	<param name="e">Event arguments</param>
	<remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnAdded(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemIndexEventArgs)"/> in order the event to be raised</remarks>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ClearingEventHandlerList">
	<summary>List of <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ClearingEventHandler"/> delegates to be invoked when the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Clearing"/> event is raised</summary>
</member><member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ClearingEventHandler">
	<summary>Delegate of handler of <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Clearing"/> event</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Event parameters</param>
</member><member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Clearing">
	<summary>Raised before the list is cleared. Raised by <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Clear"/> method.</summary>
	<remarks><para>
 This event can be disabled (see <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/>.
 This means that<see cref="T:System.InvalidOperationException"/> is thrown when adding handler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> is False.
 </para><para>
			<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> Event is not raised when clearing list.
 </para></remarks>
	<exception cref="T:System.InvalidOperationException">Adding handler when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> is false</exception>
</member><member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Cleared">
	<summary>Raised after the list is cleared. Raised by <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Clear"/> method.</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Event parameters</param>
	<remarks><see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed"/> event is not raised when clearing list.</remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Clear">
	<summary>Removes all items from the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</summary>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
	<exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
	<remarks>Note for inheritors: Call <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnClearing(Tools.ComponentModelT.CancelMessageEventArgs)"/> before clearing of the list and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnCleared(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemsEventArgs)"/> after clearing of the list,, do not forgot to check <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/></remarks>
	<exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Clearing"/> event</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnClearing(Tools.ComponentModelT.CancelMessageEventArgs)">
	<summary>Raises <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Clearing"/> event</summary>
	<param name="e">Event arguments</param>
	<remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnClearing(Tools.ComponentModelT.CancelMessageEventArgs)"/> in order the event to be raised</remarks>
	<exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
	<exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Clearing"/> event</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnCleared(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemsEventArgs)">
	<summary>Raises <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Cleared"/> event</summary>
	<param name="e">Event arguments</param>
	<remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnCleared(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemsEventArgs)"/> in order the event to be raised</remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Contains(`0)">
	<summary>Determines whether the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> contains a specific value.</summary>
	<param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</param>
	<returns>true if item is found in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>; otherwise, false.</returns>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.CopyTo(`0[],System.Int32)">
	<summary>Copies the elements of the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.</summary>
	<param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
	<param name="arrayIndex">The zero-based index in array at which copying begins.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
	<exception cref="T:System.ArgumentNullException">array is null.</exception>
	<exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source System.Collections.Generic.ICollection(Of T) is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Count">
	<summary>Gets the number of elements contained in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</summary>
	<returns>The number of elements contained in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</returns>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.IsReadOnly">
	<summary>Gets a value indicating whether the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> is read-only (always false).</summary>
	<returns>Always false because <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> is not read-only</returns>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.RemovingEventHandlerList">
	<summary>List of <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemCancelEventHandler"/> delegates to be invoked when the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> event is raised</summary>
</member><member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing">
	<summary>Raised before item is removed from the list. Raised by <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Remove(`0)"/> and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveAt(System.Int32)"/> methods.</summary>
	<remarks><para>
 This event can be disabled (see <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/>.
 This means that<see cref="T:System.InvalidOperationException"/> is thrown when adding handler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> is False.
 </para><para>
 Do not change content of list in handler! List is locked.
 </para><para>
			<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> event is not raised when list is being cleared.
 </para><para>
 Value of parameter <paramref name="e"/>'s <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> cannot be changed.
 </para>
	</remarks>
	<exception cref="T:System.InvalidOperationException">Adding handler when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> is false</exception>
</member><member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed">
	<summary>Raised after the list is cleared. Raised by <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Remove(`0)"/> and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveAt(System.Int32)"/> methods.</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Event parameters</param>
	<remarks><see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed"/> event is not raised when the list.</remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnRemoving(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)">
	<summary>Raises <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> event</summary>
	<param name="e">Event arguments</param>
	<remarks><para>
 Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnRemoving(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)"/> in order the event to be raised
 </para><para>
 Do not change content of list in this method!
 </para><para>
		</para></remarks>
	<exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
	<exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> event</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnRemoved(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemIndexEventArgs)">
	<summary>Raises <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed"/> event</summary>
	<param name="e">Event arguments</param>
	<remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnRemoved(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemIndexEventArgs)"/> in order the event to be raised</remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Remove(`0)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</summary>
	<param name="item">The object to remove from the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</param>
	<returns>true if item was successfully removed from the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</returns>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
	<exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
	<exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> event</exception>
	<remarks>Note for inheritors: Call <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnRemoving(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)"/> before removing item and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnRemoved(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemIndexEventArgs)"/> after removing item, do not forgot to check <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/></remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveAt(System.Int32)">
	<summary>Removes the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> item at the specified index.</summary>
	<param name="index">The zero-based index of the item to remove.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</exception>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
	<exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
	<exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> event</exception>
	<remarks>Note for inheritors: Call <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnRemoving(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)"/> before removing item and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnRemoved(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemIndexEventArgs)"/> after removing item, do not forgot to check <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/></remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveAll(System.Predicate{`0})">
	<summary>Removes all items that matches given predicate</summary>
	<param name="Match">Predicate to match. If this predicate returns true, item is removed</param>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
	<exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true.</exception>
	<exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> event</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="Match"/> is null</exception>
	<remarks>If any exception is thrown in <seealso cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveAt(System.Int32)"/> or event handler no item is removed (collection stays unchanged)</remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.FindAll(System.Predicate{`0})">
	<summary>Retrieves the all the elements that match the conditions defined by the specified predicate.</summary>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to search for.</param>
	<returns>A <see cref="T:System.Collections.Generic.List`1"/> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List`1"/>.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Match"/> is null.</exception>
	<remarks><seealso cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})"/></remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.GetEnumerator">
	<summary>Returns an enumerator that iterates through the collection.</summary>
	<returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.GetEnumerator1">
	<summary>Returns an enumerator that iterates through a collection.</summary>
	<returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.IndexOf(`0)">
	<summary>Determines the index of a specific item in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</summary>
	<param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</param>
	<returns>The index of item if found in the list; otherwise, -1.</returns>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChangingEventHandlerList">
	<summary>List of <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemCancelEventHandler"/> delegates to be invoked when the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> event is raised</summary>
</member><member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging">
	<summary>Raised before an item is changed. Raised by setter of <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/> property.</summary>
	<remarks><para>
 This event can be disabled (see <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/>.
 This means that <see cref="T:System.InvalidOperationException"/> is thrown when adding handler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> is False.
 </para><para>
 Value of parameter <paramref name="e"/>'s <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> can be changed if <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AddingReadOnly"/> is False.
 </para><para>
 Do not change content of list in handler! List is locked.
 </para><para>
			<paramref name="e"/>'s <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> contains new value. Use <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/> to determine old value.
 </para></remarks>
	<exception cref="T:System.InvalidOperationException">Adding handler when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> is false</exception>
</member><member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanged">
	<summary>Raised after item in the list is changed. Raised by setter of <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/> property.</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Event parameters (<see cref="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemEventArgs.Item"/> contains old value, use <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/> to determine new value.)</param>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnItemChanging(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)">
	<summary>Raises <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> event</summary>
	<param name="e">Event argument</param>
	<remarks><para>
 Note for inheritors: Alway call base class method <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnItemChanging(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)"/> in order the event to be raised.
 </para><para>
 Do not change the content of the list in this method!
 </para></remarks>
	<exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
	<exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> event</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnItemChanged(Tools.CollectionsT.GenericT.ListWithEvents{`0}.OldNewItemEvetArgs)">
	<summary>Raises <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanged"/> event</summary>
	<param name="e">Event arguments</param>
	<remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnItemChanged(Tools.CollectionsT.GenericT.ListWithEvents{`0}.OldNewItemEvetArgs)"/> in order the event to be raised.</remarks>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)">
	<summary>Gets or sets the element at the specified index.</summary>
	<param name="index">The zero-based index of the element to get or set.</param>
	<returns>The element at the specified index.</returns>
	<exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</exception>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True (in setter)</exception>
	<exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
	<exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> event</exception>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.InternalList">
	<summary>Gives access to underlying <see cref="F:Tools.CollectionsT.GenericT.ListWithEvents`1.List"/></summary>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AsReadOnly">
	<summary>Gives read-only access to underlying <see cref="F:Tools.CollectionsT.GenericT.ListWithEvents`1.List"/></summary>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.AddItemHandler(System.Int32)">
	<summary>Adds handler to item at specified index if the item is <see cref="T:Tools.IReportsChange"/></summary>
	<param name="Index">Index of item to try add handler</param>
	<remarks>Call after item is added</remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveItemHandler(System.Int32)">
	<summary>Removes handler from item at specified index if the item is <see cref="T:Tools.IReportsChange"/></summary>
	<param name="Index">Index of item to try remove handler</param>
	<remarks>Call before item is removed</remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveAllItemHandlers">
	<summary>Removes handlers from all item that are of type <see cref="T:Tools.IReportsChange"/></summary>
	<remarks>Call before clering list</remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.AddAllItemHandlers">
	<summary>Adds ahndlers to all items that as of type <see cref="T:Tools.IReportsChange"/></summary>
	<remarks>Call only from CTor when no handlers have been added</remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnItemValueChanged(Tools.IReportsChange,System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/> event and handles the <see cref="E:Tools.IReportsChange.Changed"/> event for items</summary>
	<param name="sender">Original source of the event</param>
	<param name="e">Original event parameters</param>
	<remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnItemValueChanged(Tools.IReportsChange,System.EventArgs)"/> in order the event to be raised</remarks>
</member><member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged">
	<summary>Raised when any of items that is of type <see cref="T:Tools.IReportsChange"/> raises <see cref="E:Tools.IReportsChange.Changed"/> event</summary>
	<param name="sender">Source of the event</param>
	<param name="e">Event params (contains original source (item) and original arguments</param>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs._Item">
	<summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> property</summary>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs._ReadOnly">
	<summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> property</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.#ctor(`0,System.Boolean)">
	<summary>CTor</summary>
	<param name="Item">Item associated with current event</param>
	<param name="ReadOnly">True to disallow changing of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> property</param>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item">
	<summary>Item associated with current event</summary>
	<exception cref="T:System.Data.ReadOnlyException">Using setter when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> is True</exception>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly">
	<summary>Indicates if this instance's property <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> is read-only or not</summary>
</member><member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs">
	<summary>Parameter of cancelable item events</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemIndexEventArgs.#ctor(`0,System.Int32,System.Boolean)">
	<summary>CTor</summary>
	<param name="Item">Item associated with current event</param>
	<param name="ReadOnly">True to disallow changing of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> property</param>
	<param name="Index">Index of newly added item</param>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemIndexEventArgs.NewIndex">
	<summary>Index of newly added item</summary>
	<remarks>The index may be invalid when collecion-manipulation is done between raising <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> event and performing <see cref="M:System.Collections.Generic.List`1.Add(`0)"/> operation on underlying <see cref="F:Tools.CollectionsT.GenericT.ListWithEvents`1.List"/>. (it's always valid when performing <see cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)"/> - event raised through <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Insert(System.Int32,`0)"/>.)</remarks>
</member><member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemIndexEventArgs">
	<summary>Argument of <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> event</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemEventArgs.#ctor(`0)">
	<summary>CTor</summary>
	<param name="Item">Item associated with current event</param>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemEventArgs.Item">
	<summary>Item associated with current event</summary>
</member><member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemEventArgs">
	<summary>Parameter od non-cancelable item events</summary>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemIndexEventArgs.Index">
	<summary>Index ow newly added or changed item</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemIndexEventArgs.#ctor(`0,System.Int32)">
	<summary>CTor</summary>
	<param name="Item">Newly added item</param>
	<param name="index">Index of newly added item</param>
</member><member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemIndexEventArgs">
	<summary>Parameter of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Added"/> event</summary>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.OldNewItemEvetArgs.OldItem">
	<summary>Old item previosly on <see cref="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemIndexEventArgs.Index"/></summary>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OldNewItemEvetArgs.#ctor(`0,`0,System.Int32)">
	<summary>CTor</summary>
	<param name="OldItem">Old item present at position</param>
	<param name="NewItem">New item present at postion</param>
	<param name="index">Position index</param>
</member><member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.OldNewItemEvetArgs">
	<summary>Parameter of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanged"/> event</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.CountEventArgs.#ctor(System.Int32)">
	<summary>CTor</summary>
	<param name="Count">Count to be reported</param>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.CountEventArgs.Count">
	<summary>Reported count</summary>
</member><member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.CountEventArgs">
	<summary>Parameter of events that reports count</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemsEventArgs.#ctor(`0[])">
	<summary>CTor</summary>
	<param name="Items">Items to be reported</param>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemsEventArgs.Items">
	<summary>Items reported by this event</summary>
</member><member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemsEventArgs">
	<summary>Parameter of event that report items</summary>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChangedEventArgs.OriginalEventArgs">
	<summary>Original argument of item's <see cref="E:Tools.IReportsChange.Changed"/> event</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChangedEventArgs.#ctor(`0,System.EventArgs)">
	<summary>CTor</summary>
	<param name="Item">Item that caused the event</param>
	<param name="OriginalEventArgs">Original argument of item's <see cref="E:Tools.IReportsChange.Changed"/> event</param>
</member><member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChangedEventArgs">
	<summary>Parameter of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/> event</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.CopyTo1(System.Array,System.Int32)">
	<summary>Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.</summary>
	<param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
	<param name="index">The zero-based index in array at which copying begins.</param>
	<exception cref="T:System.ArgumentNullException">array is null.</exception>
	<exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.</exception>
	<exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from index to the end of the destination array.</exception>
	<exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination array.</exception>
	<remarks>Do not use, use type-safe <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.CopyTo(`0[],System.Int32)"/> instead. Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.IsSynchronized">
	<summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).</summary>
	<returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.</returns>
	<remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.SyncRoot">
	<summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</summary>
	<returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/></returns>
	<remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Add(System.Object)">
	<summary>Adds an item to the <see cref="T:System.Collections.IList"/>.</summary>
	<param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
	<returns>The position into which the new element was inserted.</returns>
	<exception cref="T:System.InvalidCastException"><paramref name="value"/> cannot be converted into type <see cref="T"/></exception>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
	<remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Contains(System.Object)">
	<summary>Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.</summary>
	<param name="value">The System.Object to locate in the <see cref="T:System.Collections.IList"/>.</param>
	<returns>true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.</returns>
	<remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.IndexOf(System.Object)">
	<param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
	<returns>The index of value if found in the list; otherwise, -1.</returns>
	<remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Insert(System.Int32,System.Object)">
	<param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>.</param>
	<param name="index">The zero-based index at which value should be inserted.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"/>.</exception>
	<exception cref="T:System.NullReferenceException">value is null reference in the <see cref="T:System.Collections.IList"/>.</exception>
	<exception cref="T:System.InvalidCastException"><paramref name="value"/> cannot be converted to the type <see cref="T"/></exception>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
	<remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.IsFixedSize">
	<summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.</summary>
	<returns>Always False</returns>
	<remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Remove(System.Object)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.</summary>
	<param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/></param>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
	<remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item1(System.Int32)">
	<summary>Gets or sets the element at the specified index.</summary>
	<param name="index">The zero-based index of the element to get or set.</param>
	<returns>The element at the specified index.</returns>
	<exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"/>.</exception>
	<exception cref="T:System.InvalidCastException">When setting value that cannot be converted to <see cref="T"/></exception>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True (in setter)</exception>
	<remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.</summary>
	<param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
	<param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
	<exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
	<remarks>
 Only items (see <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/>) are serialized.
 Note for inheritors: Call this base class method in order items to be serialized.
 </remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>CTor - deserializes <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/></summary>
	<param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains serialized object</param>
	<param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) of this deserialization.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null</exception>
	<exception cref="T:System.InvalidCastException">Serialized value was found but cannot be converted to type of corresponding property</exception>
	<exception cref="T:System.Runtime.Serialization.SerializationException">An exception occured during deserialization</exception>
	<remarks>
 Only items (see <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/>) are deserialized.
 Note for inheritors: Call this base class CTor in order to deserialize items. Another way is to deserialize them into local variable and then use <see cref="M:System.Collections.Generic.List`1.Add(`0)"/> or <see cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/>.
 </remarks>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemsName">
	<summary>Name used for serialization of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.InternalList"/> property</summary>
</member><member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Changed">
	<summary>Raised when value of member changes</summary>
	<param name="sender">The source of the event</param>
	<param name="e">Event information.
 As of this implementation type of <paramref name="e"/> is always one of following types: <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemIndexEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Added"/>), <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemsEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Cleared"/>), <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemIndexEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed"/>), <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.OldNewItemEvetArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanged"/>), <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChangedEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/>).</param>
	<remarks>Raised after <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Added"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Cleared"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanged"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/> events with the same argument <paramref name="e"/></remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Changed"/> event</summary>
	<param name="e">Event parameters</param>
	<remarks>Called after <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Added"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Cleared"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanged"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/> events with the same argument <paramref name="e"/>.
 You should call one of overloaded <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnCollectionChanged(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ListChangedEventArgs)"/> methods after calling this.</remarks>
</member><member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged">
	<summary>Raised when this <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> collection changes.</summary>
	<param name="sender">Source ot the event</param>
	<param name="e">Event arguments. The <paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.ChangeEventArgs">ChangedEventArgs</see> contains event argument of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Changed"/> event raised immediatelly prior this event.
 As of this implementation type of <paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.ChangeEventArgs">ChangedEventArgs</see> is always one of following types: <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemIndexEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Added"/>), <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemsEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Cleared"/>), <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemIndexEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed"/>), <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.OldNewItemEvetArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanged"/>), <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChangedEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/>).
 Value of <paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.Collection"/> is always this instance.</param>
	<remarks>This event is raised immediatelly after each <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Changed"/> event.<para>
 The reason for having two duplicit events is that <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Changed"/> implements <see cref="E:Tools.IReportsChange.Changed"/> and you cannot determine action (what happend) through it. The aim of this event is to concentrate <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Added"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Cleared"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanged"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/> events to one single event which allows handler to easily dinstinguish which action happedned on collection.</para></remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnCollectionChanged(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ListChangedEventArgs)">
	<summary>Raises the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged"/> event.</summary>
	<param name="e">Event argument. The <paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.ChangeEventArgs">ChangedEventArgs</see> should always contain event argument of preceding call of <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnChanged(System.EventArgs)"/></param>
	<remarks>You should call one of overloaded <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnChanged(System.EventArgs)"/> methods after all calls of <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnChanged(System.EventArgs)"/>.
 This overridable overload is always called by the other overloads.</remarks>
	<filterpriority>2</filterpriority>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnCollectionChanged(System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction,`0,`0,System.Int32)">
	<summary>Raises the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged"/> event via calling <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnChanged(Tools.CollectionsT.GenericT.ListChangedEventArgs)"/></summary>
	<param name="e">Argument of preceding call of <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnChanged(System.EventArgs)"/></param>
	<param name="Action">Action taken on collection</param>
	<param name="OldValue">Old value at index <paramref name="index"/> prior to change. Pass null (default value for value types) if not applicable.</param>
	<param name="NewValue">New value at index <paramref name="index"/> after change. pass null (default value for value types) if not applicable</param>
	<param name="index">Index at which change has occured. Pass -1 if not applicable</param>
	<remarks>You should call one of overloaded <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnChanged(System.EventArgs)"/> methods after all calls of <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnChanged(System.EventArgs)"/>.</remarks>
	<filterpriority>1</filterpriority>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.#ctor(Tools.CollectionsT.GenericT.ListWithEvents{`0},System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction)">
	<summary>CTor</summary>
	<param name="ChangeEventArgs">Argumens of event that caused the collection to change</param>
	<param name="Collection">Collection that was changed</param>
	<param name="Action">Action which occured on collection</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Action"/> is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/></exception>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.#ctor(Tools.CollectionsT.GenericT.ListWithEvents{`0},System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction,System.Int32)">
	<summary>CTor with index</summary>
	<param name="ChangeEventArgs">Argumens of event that caused the collection to change</param>
	<param name="Collection">Collection that was changed</param>
	<param name="Action">Action which occured on collection</param>
	<param name="index">Index at which the change has occured</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Action"/> is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/></exception>
</member><member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.#ctor(Tools.CollectionsT.GenericT.ListWithEvents{`0},System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction,System.Int32,`0,`0)">
	<summary>CTor with index and old and new value</summary>
	<param name="ChangeEventArgs">Argumens of event that caused the collection to change</param>
	<param name="Collection">Collection that was changed</param>
	<param name="Action">Action which occured on collection</param>
	<param name="index">Index at which the change has occured</param>
	<param name="OldValue">Old value at index <paramref name="index"/></param>
	<param name="NewValue">New value at index <paramref name="index"/></param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Action"/> is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/></exception>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.Collection">
	<summary>Collection which was changed</summary>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs._Index">
	<summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.Index"/> property</summary>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs._OldValue">
	<summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.OldValue"/> property</summary>
</member><member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs._NewValue">
	<summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.NewValue"/> property</summary>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.Index">
	<summary>Gets index at which change occured (if applicable)</summary>
	<returns>Original index where the change has ocured. If not applicable returns -1</returns>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.OldValue">
	<summary>Gets value on index <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.Index"/> before change (if applicable)</summary>
	<returns>Original value at index <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.Index"/>. If not applicable returns null (for reference types) or type default value (for <see cref="T:System.ValueType">value types</see>)</returns>
</member><member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.NewValue">
	<summary>Gets value on index <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.Index"/> after change (if applicable)</summary>
	<returns>Valu at index <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.Index"/> after changed. If not applicable returns null (for reference types) or type default value (for <see cref="T:System.ValueType">value types</see>)</returns>
</member><member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs">
	<summary>Specialized <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeEventArgs`1"/> for <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/></summary>
</member><member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1">
	<summary>List that provides events when changed</summary>
	<typeparam name="T">Type of items to be stored in the list</typeparam>
	<remarks><para>
 If item of type tha implements the <see cref="T:Tools.IReportsChange"/> interface is passed to this list, than it's events <see cref="E:Tools.IReportsChange.Changed"/> are reported through <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/> event.
 </para><para>
 Implementation of interface <see cref="T:System.Collections.IList"/> is provided only in orer this class to be compatible with <see cref="T:System.ComponentModel.Design.CollectionEditor"/>.
 </para>
	</remarks>
</member><member name="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Add">
	<summary>An item was added. Equals to <see cref="F:System.ComponentModel.CollectionChangeAction.Add"/>. Represents <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Added"/>.</summary>
</member><member name="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Remove">
	<summary>An item was removed. Equals to <see cref="F:System.ComponentModel.CollectionChangeAction.Remove"/>. Represents <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed"/></summary>
</member><member name="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Clear">
	<summary>The collection was cleared. Represents <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Cleared"/>.</summary>
</member><member name="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Replace">
	<summary>Item of collection was replaced. Represents <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanged"/>.</summary>
</member><member name="F:Tools.CollectionsT.GenericT.CollectionChangeAction.ItemChange">
	<summary>Property of item of collection changed. Represents <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/>.</summary>
</member><member name="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Other">
	<summary>Unspecified action. Equals to <see cref="F:System.ComponentModel.CollectionChangeAction.Refresh"/>.</summary>
</member><member name="T:Tools.CollectionsT.GenericT.CollectionChangeAction">
	<summary>Describes acction on collection</summary>
</member><member name="F:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase._ChangeEventArgs">
	<summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.ChangeEventArgs"/> property</summary>
</member><member name="F:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase._Action">
	<summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action"/> property</summary>
</member><member name="M:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.#ctor(System.Collections.IEnumerable,System.EventArgs)">
	<summary>CTor</summary>
	<param name="ChangeEventArgs">Argumens of event that caused the collection to change</param>
	<param name="Collection">Collection that was changed</param>
	<remarks><see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action"/> is set to <see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Other"/></remarks>
</member><member name="M:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.#ctor(System.Collections.IEnumerable,System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction)">
	<summary>CTor</summary>
	<param name="ChangeEventArgs">Argumens of event that caused the collection to change</param>
	<param name="Collection">Collection that was changed</param>
	<param name="Action">Action which occured on collection</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Action"/> is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/></exception>
</member><member name="M:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.ConvertAction(Tools.CollectionsT.GenericT.CollectionChangeAction)">
	<summary>Converts <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/> to <see cref="T:System.ComponentModel.CollectionChangeAction"/></summary>
	<param name="Action">A <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/> to be converted</param>
	<returns><see cref="T:System.ComponentModel.CollectionChangeAction"/> corresponding to <paramref name="Action"/></returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Action"/> is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/></exception>
	<remarks>Conversion table follows:
 <list type="table">
			<listheader><term><see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/> (<paramref name="Action"/>)</term><description><see cref="T:System.ComponentModel.CollectionChangeAction"/></description></listheader>
			<item><term><see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Add"/></term><description><see cref="F:System.ComponentModel.CollectionChangeAction.Add"/></description></item>
			<item><term><see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Remove"/></term><description><see cref="F:System.ComponentModel.CollectionChangeAction.Remove"/></description></item>
			<item><term><see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Other"/></term><description><see cref="F:System.ComponentModel.CollectionChangeAction.Refresh"/></description></item>
			<item><term><see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Clear"/></term><description><see cref="F:System.ComponentModel.CollectionChangeAction.Remove"/></description></item>
			<item><term><see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Replace"/></term><description><see cref="F:System.ComponentModel.CollectionChangeAction.Refresh"/></description></item>
			<item><term><see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.ItemChange"/></term><description><see cref="F:System.ComponentModel.CollectionChangeAction.Refresh"/></description></item>
			<item><term>Otherwise</term><description><see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> thrown</description></item>
		</list>
	</remarks>
</member><member name="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.ChangeEventArgs">
	<summary>Arguments of event that caused collection to be changed or that was raised by the colection on change</summary>
</member><member name="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action">
	<summary>Action taken on collection</summary>
</member><member name="T:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase">
	<summary>Represents common base for generic classes <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeEventArgs`1"/></summary>
</member><member name="M:Tools.CollectionsT.GenericT.CollectionChangeEventArgs`1.#ctor(System.Collections.Generic.ICollection{`0},System.EventArgs)">
	<summary>CTor</summary>
	<param name="ChangeEventArgs">Argumens of event that caused the collection to change</param>
	<param name="Collection">Collection that was changed</param>
	<remarks><see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action"/> is set to <see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Other"/></remarks>
</member><member name="M:Tools.CollectionsT.GenericT.CollectionChangeEventArgs`1.#ctor(System.Collections.Generic.ICollection{`0},System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction)">
	<summary>CTor</summary>
	<param name="ChangeEventArgs">Argumens of event that caused the collection to change</param>
	<param name="Collection">Collection that was changed</param>
	<param name="Action">Action which occured on collection</param>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Action"/> is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/></exception>
</member><member name="P:Tools.CollectionsT.GenericT.CollectionChangeEventArgs`1.Collection">
	<summary>Collection which was changed</summary>
</member><member name="T:Tools.CollectionsT.GenericT.CollectionChangeEventArgs`1">
	<summary>Arguments of event raised when collection owned by event source has changed</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.#ctor(System.Collections.Generic.List{`0})">
	<summary>CTor</summary>
	<param name="AdaptThis">The <see cref="T:System.Collections.Generic.List`1"/> to be adapted.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="AdaptThis"/> is null</exception>
</member><member name="F:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2._InnerList">
	<summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.InnerList"/> property</summary>
</member><member name="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.InnerList">
	<summary>The <see cref="T:System.Collections.Generic.List`1"/> being adapted</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.GetEnumerator">
	<summary>Returns an enumerator that iterates through the collection.</summary>
	<returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.GetEnumerator1">
	<summary>Returns an enumerator that iterates through a collection.</summary>
	<returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.Contains(`1)">
	<summary>Determines whether an element is in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
	<returns>true if item is found in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The value can be null for reference types.</param>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ConvertAll``1(System.Converter{`1,``0})">
	<summary>Converts the elements in the current <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> to another type, and returns a list containing the converted elements.</summary>
	<returns>A <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> of the target type containing the converted elements from the current <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</returns>
	<param name="converter">A <see cref="T:System.Converter`2"/> delegate that converts each element from one type to another type.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="converter"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.CopyTo(System.Int32,`1[],System.Int32,System.Int32)">
	<summary>Copies a range of elements from the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
	<param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
	<param name="count">The number of elements to copy.</param>
	<param name="arrayIndex">The zero-based index in array at which copying begins.</param>
	<param name="index">The zero-based index in the source <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> at which copying begins.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0. or <paramref name="arrayIndex"/> is less than 0 or <paramref name="count"/> is less than 0.</exception>
	<exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than the <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.Count"/> of the source <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> or <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/> or The number of elements from <paramref name="index"/> to the end of the source <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <see cref="T:System.Array"/>.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.CopyTo(`1[])">
	<summary>Copies the entire <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> to a compatible one-dimensional array, starting at the beginning of the target array.</summary>
	<param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
	<exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> is greater than the number of elements that the destination array can contain.</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.CopyTo(`1[],System.Int32)">
	<summary>Copies the entire <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
	<param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
	<param name="arrayIndex">The zero-based index in array at which copying begins.</param>
	<exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of array or The number of elements in the source <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ToList">
	<summary>Creates new instance of <see cref="T:System.Collections.Generic.List`1"/> tha contains all members present in current instance</summary>
	<returns>New <see cref="T:System.Collections.Generic.List`1"/> initialized with members of <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.InnerList"/></returns>
</member><member name="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.Count">
	<summary>Gets the number of elements actually contained in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
	<returns>The number of elements actually contained in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</returns>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.Exists(System.Predicate{`1})">
	<summary>Determines whether the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> contains elements that match the conditions defined by the specified predicate.</summary>
	<returns>true if the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to search for.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.Find(System.Predicate{`1})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
	<returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T.</returns>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.FindAll(System.Predicate{`1})">
	<summary>Retrieves the all the elements that match the conditions defined by the specified predicate.</summary>
	<returns>A <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</returns>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to search for.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.FindIndex(System.Int32,System.Int32,System.Predicate{`1})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that starts at the specified index and contains the specified number of elements.</summary>
	<returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, –1.</returns>
	<param name="count">The number of elements in the section to search.</param>
	<param name="startIndex">The zero-based starting index of the search.</param>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.-or-<paramref name="count"/> is less than 0.-or-<paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.FindIndex(System.Int32,System.Predicate{`1})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that extends from the specified index to the last element.</summary>
	<returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, –1.</returns>
	<param name="startIndex">The zero-based starting index of the search.</param>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.FindIndex(System.Predicate{`1})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
	<returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, –1.</returns>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.FindLast(System.Predicate{`1})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
	<returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <see cref="TTo"/>.</returns>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.FindLastIndex(System.Int32,System.Int32,System.Predicate{`1})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that contains the specified number of elements and ends at the specified index.</summary>
	<returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, –1.</returns>
	<param name="count">The number of elements in the section to search.</param>
	<param name="startIndex">The zero-based starting index of the backward search.</param>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.-or-count is less than 0.-or-startIndex and count do not specify a valid section in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.FindLastIndex(System.Int32,System.Predicate{`1})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that extends from the first element to the specified index.</summary>
	<returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
	<param name="startIndex">The zero-based starting index of the backward search.</param>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.FindLastIndex(System.Predicate{`1})">
	<summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
	<returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ForEach(System.Action{`1})">
	<summary>Performs the specified action on each element of the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
	<param name="action">The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</param>
	<exception cref="T:System.ArgumentNullException">action is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.GetRange(System.Int32,System.Int32)">
	<summary>Creates a shallow copy of a range of elements in the source <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
	<returns>A shallow copy of a range of elements in the source <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</returns>
	<param name="count">The number of elements in the range.</param>
	<param name="index">The zero-based <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> index at which the range starts.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
	<exception cref="T:System.ArgumentException"><paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.IndexOf(`1)">
	<summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
	<returns>The zero-based index of the first occurrence of item within the entire <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>, if found; otherwise, –1.</returns>
	<param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The value can be null for reference types.</param>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.IndexOf(`1,System.Int32)">
	<summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that extends from the specified index to the last element.</summary>
	<returns>The zero-based index of the first occurrence of item within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that extends from <paramref name="index"/> to the last element, if found; otherwise, –1.</returns>
	<param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The value can be null for reference types.</param>
	<param name="index">The zero-based starting index of the search.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.IndexOf(`1,System.Int32,System.Int32)">
	<summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that starts at the specified index and contains the specified number of elements.</summary>
	<returns>The zero-based index of the first occurrence of item within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that starts at index and contains count number of elements, if found; otherwise, –1.</returns>
	<param name="count">The number of elements in the section to search.</param>
	<param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The value can be null for reference types.</param>
	<param name="index">The zero-based starting index of the search.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.-or-<paramref name="count"/> is less than 0.-or-<paramref name="index"/> and <paramref name="count"/> do not specify a valid section in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</exception>
</member><member name="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.Item(System.Int32)">
	<summary>Gets or sets the element at the specified index.</summary>
	<returns>The element at the specified index.</returns>
	<param name="index">The zero-based index of the element to get or set.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.-or-<paramref name="index"/> is equal to or greater than <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.Count"/>. </exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.LastIndexOf(`1)">
	<summary>Searches for the specified object and returns the zero-based index of the last occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
	<returns>The zero-based index of the last occurrence of item within the entire the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>, if found; otherwise, –1.</returns>
	<param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The value can be null for reference types.</param>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.LastIndexOf(`1,System.Int32)">
	<summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that extends from the first element to the specified index.</summary>
	<returns>The zero-based index of the last occurrence of item within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that extends from the first element to index, if found; otherwise, –1.</returns>
	<param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The value can be null for reference types.</param>
	<param name="index">The zero-based starting index of the backward search.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. </exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.LastIndexOf(`1,System.Int32,System.Int32)">
	<summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that contains the specified number of elements and ends at the specified index.</summary>
	<returns>The zero-based index of the last occurrence of item within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that contains count number of elements and ends at index, if found; otherwise, –1.</returns>
	<param name="count">The number of elements in the section to search.</param>
	<param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The value can be null for reference types.</param>
	<param name="index">The zero-based starting index of the backward search.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.-or-<paramref name="count"/> is less than 0.-or-<paramref name="index"/> and <paramref name="count"/> do not specify a valid section in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. </exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ToArray">
	<summary>Copies the elements of the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> to a new array.</summary>
	<returns>An array containing copies of the elements of the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</returns>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.TrueForAll(System.Predicate{`1})">
	<summary>Determines whether every element in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> matches the conditions defined by the specified predicate.</summary>
	<returns>true if every element in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
	<param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions to check against the elements.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.op_Implicit(System.Collections.Generic.List{`0})~Tools.CollectionsT.GenericT.ReadOnlyListAdapter{`0,`1}">
	<summary>Wraps instance of <see cref="T:System.Collections.Generic.List`1"/> with instance of <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/></summary>
	<param name="a">Instance to be wrapped</param>
	<returns>New instance of <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> initialized with <paramref name="a"/></returns>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ToString">
	<summary>String representation of current instance</summary>
</member><member name="F:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator._InnerEnumerator">
	<summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.InnerEnumerator"/> property</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.#ctor(System.Collections.Generic.IEnumerator{`0})">
	<summary>CTor</summary>
	<param name="innerEnumerator">The enumerator that enumerates through <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.InnerList"/></param>
</member><member name="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.InnerEnumerator">
	<summary>The enumerator that enumerates through <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.InnerList"/></summary>
</member><member name="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.Current">
	<summary>Gets the element in the collection at the current position of the enumerator.</summary>
	<returns>The element in the collection at the current position of the enumerator</returns>
</member><member name="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.Current1">
	<summary>Gets the current element in the collection.</summary>
	<returns>The current element in the collection.</returns>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.MoveNext">
	<summary>Advances the enumerator to the next element of the collection.</summary>
	<returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
	<exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.Reset">
	<summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
	<exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
</member><member name="F:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.disposedValue">
	<summary>To detect redundant calls</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.Dispose(System.Boolean)">
	<summary>IDisposable</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.Dispose">
	<summary>This code added by Visual Basic to correctly implement the disposable pattern.</summary>
</member><member name="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator">
	<summary>Supports simple enumeration over <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/></summary>
</member><member name="F:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ConverterAdaptor`1._InnerConverter">
	<summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ConverterAdaptor`1.InnerConverter"/> property</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ConverterAdaptor`1.#ctor(System.Converter{`1,`2})">
	<summary>CTor</summary>
	<param name="InnerConverter">The <see cref="T:System.Converter`2"/> to wrap</param>
</member><member name="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ConverterAdaptor`1.InnerConverter">
	<summary>The <see cref="T:System.Converter`2"/> to wrap</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ConverterAdaptor`1.Convert(`0)">
	<summary>Invokes <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ConverterAdaptor`1.InnerConverter"/></summary>
	<param name="input">Value to be converted</param>
	<returns>The <see cref="TOut"/> that represents the converted <see cref="TFrom"/>.</returns>
</member><member name="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ConverterAdaptor`1">
	<summary>Wraps converter from <see cref="TTo"/> to TOut to work as converter from <see cref="TFrom"/> to TOut</summary>
	<typeparam name="TOut">Type of output value of this <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ConverterAdaptor`1"/></typeparam>
</member><member name="F:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor._InnerPredicate">
	<summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor.InnerPredicate"/> property</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor.#ctor(System.Predicate{`1})">
	<summary>CTor</summary>
	<param name="InnerPredicate"><see cref="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor.Predicate(`0)"/> to wrap</param>
</member><member name="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor.InnerPredicate">
	<summary><see cref="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor.Predicate(`0)"/> being wrapped</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor.Predicate(`0)">
	<summary>Invokes <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor.InnerPredicate"/></summary>
	<param name="obj">Object to be tested</param>
	<returns>true if obj meets the criteria defined within the <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor.InnerPredicate"/>; otherwise, false.</returns>
</member><member name="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor">
	<summary>Wraps <see cref="T:System.Predicate`1"/> of <see cref="TTo"/> so it looks like <see cref="T:System.Predicate`1"/> of <see cref="TFrom"/></summary>
</member><member name="F:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ActionAdaptor._InnerAction">
	<summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ActionAdaptor.InnerAction"/> property</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ActionAdaptor.#ctor(System.Action{`1})">
	<summary>CTor</summary>
	<param name="InnerPredicate"><see cref="T:System.Action`1"/> to wrap</param>
</member><member name="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ActionAdaptor.InnerAction">
	<summary><see cref="T:System.Predicate`1"/> being wrapped</summary>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ActionAdaptor.Do(`0)">
	<summary>Invokes <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ActionAdaptor.InnerAction"/></summary>
	<param name="obj">Object to <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ActionAdaptor.InnerAction"/> be performed on</param>
</member><member name="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ActionAdaptor">
	<summary>Wraps <see cref="T:System.Action`1"/> of <see cref="TTo"/> so it looks like <see cref="T:System.Action`1"/> of <see cref="TFrom"/></summary>
</member><member name="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2">
	<summary>Adapter that adapts <see cref="T:System.Collections.Generic.List`1"/> into <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> where TFrom is cublass of TTo</summary>
	<typeparam name="TFrom">Type of items stored in <see cref="T:System.Collections.Generic.List`1"/> being adapted</typeparam>
	<typeparam name="TTo">
 Type of items this <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> should appear to be <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> of.
 TFrom must inherit from or implement TTo
 </typeparam>
	<remarks>If you doesn't need type conversion than you can use <seealso cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`1"/></remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`1.#ctor(System.Collections.Generic.List{`0})">
	<summary>CTor</summary>
	<param name="AdaptThis"><see cref="T:System.Collections.Generic.List`1"/> to be adapted</param>
</member><member name="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`1">
	<summary>Adapter that adapts <see cref="T:System.Collections.Generic.List`1"/> into <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> in order to prevent changes of adapted list</summary>
	<typeparam name="T">Type of items of list</typeparam>
	<remarks>If you need convert list of values of inherited type to list of values of parent type use <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/></remarks>
</member><member name="M:Tools.ComponentModelT.FieldDisplayNameAttribute.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.ComponentModelT.FieldDisplayNameAttribute.#ctor(System.String)">
	<summary>CTor</summary>
	<param name="displayName">The display name.</param>
</member><member name="T:Tools.ComponentModelT.FieldDisplayNameAttribute">
	<summary><see cref="T:System.ComponentModel.DisplayNameAttribute"/> that can be applied on fields</summary>
</member><member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Action">
	<summary><see cref="P:System.ComponentModel.CategoryAttribute.Action"/></summary>
</member><member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Appearance">
	<summary><see cref="P:System.ComponentModel.CategoryAttribute.Appearance"/></summary>
</member><member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Asynchronous">
	<summary><see cref="P:System.ComponentModel.CategoryAttribute.Asynchronous"/></summary>
</member><member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Behavior">
	<summary><see cref="P:System.ComponentModel.CategoryAttribute.Behavior"/></summary>
</member><member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Data">
	<summary><see cref="P:System.ComponentModel.CategoryAttribute.Data"/></summary>
</member><member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Default">
	<summary><see cref="P:System.ComponentModel.CategoryAttribute.Default"/></summary>
</member><member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Design">
	<summary><see cref="P:System.ComponentModel.CategoryAttribute.Design"/></summary>
</member><member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.DragDrop">
	<summary><see cref="P:System.ComponentModel.CategoryAttribute.DragDrop"/></summary>
</member><member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Focus">
	<summary><see cref="P:System.ComponentModel.CategoryAttribute.Focus"/></summary>
</member><member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Format">
	<summary><see cref="P:System.ComponentModel.CategoryAttribute.Format"/></summary>
</member><member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Key">
	<summary><see cref="P:System.ComponentModel.CategoryAttribute.Key"/></summary>
</member><member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Layout">
	<summary><see cref="P:System.ComponentModel.CategoryAttribute.Layout"/></summary>
</member><member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Mouse">
	<summary><see cref="P:System.ComponentModel.CategoryAttribute.Mouse"/></summary>
</member><member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.WindowStyle">
	<summary><see cref="P:System.ComponentModel.CategoryAttribute.WindowStyle"/></summary>
</member><member name="T:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories">
	<summary>Represents shared (static) properties of <see cref="T:System.ComponentModel.CategoryAttribute"/></summary>
</member><member name="M:Tools.ComponentModelT.KnownCategoryAttribute.#ctor(Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories)">
	<summary>CTor from value preconfigured in .NET framework as shared (static) property of <see cref="T:System.ComponentModel.CategoryAttribute"/></summary>
	<param name="KnownCategory">Known value for <see cref="T:System.ComponentModel.CategoryAttribute"/></param>
</member><member name="M:Tools.ComponentModelT.KnownCategoryAttribute.#ctor(Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value)">
	<summary>CTor from value represented as instance of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value"/></summary>
	<param name="KnownCategory">Instance of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value"/></param>
	<remarks>Thsi CTor is hint for intellisense only. However it is fully functional you will probably never use it.</remarks>
</member><member name="M:Tools.ComponentModelT.KnownCategoryAttribute.#ctor(System.String)">
	<summary>CTor from any <see cref="T:System.String"/></summary>
	<param name="AnyCategory">Category to be passed to CTor of <see cref="T:System.ComponentModel.CategoryAttribute"/></param>
	<remarks>
 This CTor allows you to pass any <see cref="T:System.String"/> to this class. This is CTor that is used instead of that one that takes <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value"/>. This is done becose of it is the way how you can tell intellisense to list values for you.
 This ctor should be used with constants that are members of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues"/> (but there is no chceck).
 </remarks>
</member><member name="M:Tools.ComponentModelT.KnownCategoryAttribute.KnownAttribute(Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories)">
	<summary></summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="KnownCategory"/> is not member of <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories"/></exception>
</member><member name="T:Tools.ComponentModelT.KnownCategoryAttribute">
	<summary><see cref="T:System.ComponentModel.CategoryAttribute"/> which's value is one of known values</summary>
</member><member name="M:Tools.DrawingT.DesignT.UITypeEditor`1.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
	<summary>Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.</summary>
	<returns>The new value of the object. If the value of the object has not changed, this should return the same object it was passed.</returns>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information. </param>
	<param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services. </param>
	<param name="value">The object to edit. </param>
	<remarks>Use type-safe overload instead</remarks>
	<exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is not of type <typeparamref name="T"/>.</exception>
</member><member name="M:Tools.DrawingT.DesignT.UITypeEditor`1.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,`0)">
	<summary>Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.</summary>
	<returns>The new value of the object. If the value of the object has not changed, this should return the same object it was passed.</returns>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information. </param>
	<param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services. </param>
	<param name="value">The object to edit. </param>
</member><member name="M:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
	<summary>Paints a representation of the value of an object using the specified <see cref="T:System.Drawing.Design.PaintValueEventArgs"/>.</summary>
	<param name="e">A <see cref="T:System.Drawing.Design.PaintValueEventArgs"/> that indicates what to paint and where to paint it. </param>
	<remarks>Use type-safe overload instead</remarks>
</member><member name="M:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValue(Tools.DrawingT.DesignT.UITypeEditor{`0}.PaintValueEventArgs)">
	<summary>Paints a representation of the value of an object using the specified <see cref="T:System.Drawing.Design.PaintValueEventArgs"/>.</summary>
	<param name="e">A <see cref="T:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValueEventArgs"/> that indicates what to paint and where to paint it. </param>
</member><member name="M:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValueEventArgs.#ctor(System.ComponentModel.ITypeDescriptorContext,`0,System.Drawing.Graphics,System.Drawing.Rectangle)">
	<summary>Initializes a new instance of the <see cref="T:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValueEventArgs"/> class using the specified values.</summary>
	<param name="context">The context in which the value appears.</param>
	<param name="value">The value to paint.</param>
	<param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object with which drawing is to be done.</param>
	<param name="bounds">The <see cref="T:System.Drawing.Rectangle"/> in which drawing is to be done.</param>
	<exception cref="T:System.ArgumentNullException">graphics is null.</exception>
</member><member name="M:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValueEventArgs.#ctor(System.Drawing.Design.PaintValueEventArgs)">
	<summary>Initializes a new instance of the <see cref="T:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValueEventArgs"/> class from another instance of <see cref="T:System.Drawing.Design.PaintValueEventArgs"/>.</summary>
	<param name="other">A <see cref="T:System.Drawing.Design.PaintValueEventArgs"/></param>
	<exception cref="T:Tools.TypeMismatchException"><paramref name="other"/>.<see cref="P:System.Drawing.Design.PaintValueEventArgs.Value">Value</see> is not of type <typeparamref name="T"/>.</exception>
</member><member name="M:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValueEventArgs.VerifyValue(System.Object)">
	<summary>Verifies that given value is of type <typeparamref name="T"/></summary>
	<param name="value">Value to be verified</param>
	<remarks><paramref name="value"/></remarks>
	<exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is not of type <typeparamref name="T"/>.</exception>
</member><member name="P:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValueEventArgs.Value">
	<summary>Gets the value to paint.</summary>
	<returns>An object indicating what to paint.</returns>
</member><member name="T:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValueEventArgs">
	<summary>Type-safe implementation of <see cref="T:System.Drawing.Design.PaintValueEventArgs"/></summary>
</member><member name="T:Tools.DrawingT.DesignT.UITypeEditor`1">
	<summary>Base class for type-safe <see cref="T:Tools.DrawingT.DesignT.UITypeEditor`1">UITypeEditors</see></summary>
	<typeparam name="T">Type of value being edited</typeparam>
</member><member name="M:Tools.DrawingT.DesignT.DropDownControlEditor`2.ShowDropDown(`1,System.IServiceProvider,System.ComponentModel.ITypeDescriptorContext)">
	<summary>Performs all tasks needed to show drop down</summary>
	<param name="control">Control to be shown</param>
	<param name="provider"><see cref="T:System.IServiceProvider"/> that provides environment for drop down</param>
	<param name="context">Context for this editing session</param>
	<returns>True when drop-down was shown, false when it was not shown due to some condition.</returns>
	<remarks>
 This implementation <paramref name="provider"/> is not null, <paramref name="context"/>.<see cref="P:System.ComponentModel.ITypeDescriptorContext.Instance">Instance</see> is not null and <paramref name="provider"/> provides <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService"/>. If those conditions are true, drop down is shown, otherwise not.
 While showing dropdown <paramref name="control"/>.<see cref="P:Tools.DrawingT.DesignT.IEditor`1.Service">Service</see> and <paramref name="control"/>.<see cref="P:Tools.DrawingT.DesignT.IEditor`1.Context"/> properties are set and handler is attached to <paramref name="control"/>.<see cref="E:System.Windows.Forms.Control.KeyDown">KeyDown</see>.
 Then <see cref="M:Tools.DrawingT.DesignT.DropDownControlEditor`2.ShowDropDown(!1,System.Windows.Forms.Design.IWindowsFormsEditorService)"/> is called. After that handle is detached.
 <para>Note for inheritors: Inheritor should ensure that each instance of <typeparamref name="TControl"/> is being shown only once at same time.</para>
	</remarks>
</member><member name="M:Tools.DrawingT.DesignT.DropDownControlEditor`2.ShowDropdown(`1,System.Windows.Forms.Design.IWindowsFormsEditorService)">
	<summary>Shows drop-down editor for <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService"/></summary>
	<param name="Control">Control to be shown</param>
	<param name="edSvc"><see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService"/> that provides environment for current editing session.</param>
	<remarks>This method is called by overloaded <see cref="M:Tools.DrawingT.DesignT.DesignT.DropDownControlEditor`2.ShowDropDown(!1,System.IServiceProviderSystem.ComponentModel.ITypeDescriptorContext)"/> when all conditions necessary for showin drop-down as WinForms <see cref="T:System.Windows.Forms.Control"/> are fullfilled.
 <para>This implementation calls <paramref name="Control"/>.<see cref="M:Tools.DrawingT.DesignT.IEditor`1.OnBeforeShow">OnBeforeShow</see>, shows drop down and calls <paramref name="Control"/>.<see cref="M:Tools.DrawingT.DesignT.IEditor`1.OnClosed">OnClosed</see>.</para>
		<para>Note for inheritors: Inheritor should ensure that each instance of <typeparamref name="TControl"/> is being shown only once at same time.</para>
	</remarks>
</member><member name="M:Tools.DrawingT.DesignT.DropDownControlEditor`2.control_KeyDown(`1,System.Windows.Forms.KeyEventArgs)">
	<summary>Handles <see cref="E:System.Windows.Forms.Control.KeyDown"/> event of drop-down control</summary>
	<param name="sender">Source of the event - the control</param>
	<param name="e">Event arguments</param>
</member><member name="M:Tools.DrawingT.DesignT.DropDownControlEditor`2.OnControlKeyDown(`1,System.Windows.Forms.KeyEventArgs)">
	<summary>Called when user presses key on drop-down control (when it raises <see cref="E:System.Windows.Forms.Control.KeyDown"/> event.</summary>
	<param name="control">Control that is currently shown</param>
	<param name="e">Event arguments</param>
	<returns><see cref="F:System.Windows.Forms.DialogResult.OK"/> id drop down should be closed and result accepted; <see cref="F:System.Windows.Forms.DialogResult.Cancel"/> if dialog should be closed and result canceled; <see cref="F:System.Windows.Forms.DialogResult.None"/> if key event should be ignored.</returns>
	<remarks>This implementation favors <see cref="F:System.Windows.Forms.Keys.Escape"/> and <see cref="F:System.Windows.Forms.Keys.Enter"/> in no-shift state for cancel and OK.</remarks>
</member><member name="M:Tools.DrawingT.DesignT.DropDownControlEditor`2.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,`0)">
	<summary>Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.</summary>
	<returns>The new value of the object. If the value of the object has not changed, this should return the same object it was passed.</returns>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information. </param>
	<param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services. </param>
	<param name="value">The object to edit. </param>
	<remarks>This implementation creates instance if <typeparamref name="TControl"/> amd calls <see cref="M:Tools.DrawingT.DesignT.DropDownControlEditor`2.ShowDropDown(!1,System.Windows.Forms.Design.IWindowsFormsEditorService)"/> for it.
 <para>Note for inheritors: Inheritor should ensure that each instance of <typeparamref name="TControl"/> is being shown only once at same time.</para></remarks>
</member><member name="M:Tools.DrawingT.DesignT.DropDownControlEditor`2.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.</summary>
	<returns><see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/></returns>
</member><member name="P:Tools.DrawingT.DesignT.DropDownControlEditor`2.IsDropDownResizable">
	<summary>Gets a value indicating whether drop-down editors should be resizable by the user.</summary>
	<returns>This implementation always returns false</returns>
</member><member name="M:Tools.DrawingT.DesignT.DropDownControlEditor`2.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Indicates whether this editor supports painting a representation of an object's value.</summary>
	<returns>This implementation always returns false</returns>
</member><member name="T:Tools.DrawingT.DesignT.DropDownControlEditor`2">
	<summary>Implements drop-down <see cref="T:Tools.DrawingT.DesignT.UITypeEditor`1"/> represented by WinForms <see cref="T:System.Windows.Forms.Control"/></summary>
	<typeparam name="T">Type of value being edited</typeparam>
	<typeparam name=" TControl">Type of <see cref="T:System.Windows.Forms.Control"/> that serves as editor GUI. It must implement <see cref="T:Tools.DrawingT.DesignT.IEditor`1"/> and has default CTor</typeparam>
</member><member name="P:Tools.DrawingT.DesignT.IEditor`1.Value">
	<summary>Gets or sets edited value</summary>
</member><member name="P:Tools.DrawingT.DesignT.IEditor`1.Service">
	<summary>Stores <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService"/> valid for current editing session</summary>
	<remarks>This property is set by owner of the control and is valid between calls of <see cref="M:Tools.DrawingT.DesignT.IEditor`1.OnBeforeShow"/> and <see cref="M:Tools.DrawingT.DesignT.IEditor`1.OnClosed"/>.</remarks>
</member><member name="P:Tools.DrawingT.DesignT.IEditor`1.Context">
	<summary>Stores context of current editing session</summary>
	<remarks>This property is set by owner of the control and is valid between calls of <see cref="M:Tools.DrawingT.DesignT.IEditor`1.OnBeforeShow"/> and <see cref="M:Tools.DrawingT.DesignT.IEditor`1.OnClosed"/>.</remarks>
</member><member name="P:Tools.DrawingT.DesignT.IEditor`1.Result">
	<summary>Stores editing result</summary>
	<returns>True if editing was terminated with success, false if it was canceled</returns>
	<remarks>This property is set by owner of the control and is valid when and after <see cref="M:Tools.DrawingT.DesignT.IEditor`1.OnClosed"/> is called</remarks>
</member><member name="M:Tools.DrawingT.DesignT.IEditor`1.OnBeforeShow">
	<summary>Owner of control informs control that it is about to be shown by calling this methos. It is called just befiore the control is shown.</summary>
</member><member name="M:Tools.DrawingT.DesignT.IEditor`1.OnClosed">
	<summary>Informs control that it was just hidden by calling this method.</summary>
	<remarks>When implementing editor for reference type that is edited by changin its properties instead of changing its instance. Properties shouldbe changed in this method and onyl if <see cref="P:Tools.DrawingT.DesignT.IEditor`1.Result"/> is true.</remarks>
</member><member name="T:Tools.DrawingT.DesignT.IEditor`1">
	<summary>Interface for control that implements GUI for <see cref="T:Tools.DrawingT.DesignT.DropDownControlEditor`2"/></summary>
	<remarks>This type is usually implemnetd by class derived from <see cref="T:System.Windows.Forms.Control"/>
		<para>However <see cref="T:Tools.DrawingT.DesignT.DropDownControlEditor`2"/> does not do so, control implementation can be recycled. This means shown, closed and the shown again, closed again and then shown again ...</para></remarks>
	<typeparam name="T">Type of value being edited</typeparam>
</member><member name="F:Tools.DrawingT.MetadataT.ExifReader.ExifSubIFDName">
	<summary>Name of Exif Sub IFD (see <see cref="P:Tools.DrawingT.MetadataT.ExifReader.SubIFD.Desc"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifReader.GPSSubIFDName">
	<summary>Name of Exif Sub IFD (see <see cref="P:Tools.DrawingT.MetadataT.ExifReader.SubIFD.Desc"/>)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifReader.ExifInteroperabilityName">
	<summary>Name of Exif Interoperability Sub IFD (see <see cref="P:Tools.DrawingT.MetadataT.ExifReader.ExifInteroperabilityIFD"/>)</summary>
</member><member name="M:Tools.DrawingT.MetadataT.ExifReader.#ctor(System.IO.Stream)">
	<summary>CTor from <see cref="T:System.IO.Stream"/></summary>
	<param name="Stream"><see cref="T:System.IO.Stream"/> that contains Exif data</param>
	<exception cref="T:System.IO.InvalidDataException">
 Invalid byte order mark (other than 'II' or 'MM') at the beginning of stream -or-
 Byte order test (2 bytes next to byte order mark, 3rd and 4th bytes in stream) don't avaluates to value 2Ah
 </exception>
	<exception cref="T:System.ObjectDisposedException">The source stream is closed.</exception>
	<exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
	<exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached unexpectedly.</exception>
</member><member name="M:Tools.DrawingT.MetadataT.ExifReader.#ctor(Tools.DrawingT.MetadataT.IExifGetter)">
	<summary>CTor from <see cref="T:Tools.DrawingT.MetadataT.IExifGetter"/></summary>
	<param name="Container">Object that contains <see cref="T:System.IO.Stream"/> with Exif data</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Container"/> is null</exception>
	<exception cref="T:System.IO.InvalidDataException">
 Invalid byte order mark (other than 'II' or 'MM') at the beginning of stream -or-
 Byte order test (2 bytes next to byte order mark, 3rd and 4th bytes in stream) don't avaluates to value 2Ah
 </exception>
	<exception cref="T:System.ObjectDisposedException">The source stream is closed.</exception>
	<exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
	<exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached unexpectedly.</exception>
</member><member name="M:Tools.DrawingT.MetadataT.ExifReader.Parse">
	<summary>Parses stream of Exif data</summary>
	<exception cref="T:System.IO.InvalidDataException">
 Invalid byte order mark (other than 'II' or 'MM') at the beginning of stream -or-
 Byte order test (2 bytes next to byte order mark, 3rd and 4th bytes in stream) don't avaluates to value 2Ah
 </exception>
	<exception cref="T:System.ObjectDisposedException">The source stream is closed.</exception>
	<exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
	<exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached unexpectedly.</exception>
</member><member name="M:Tools.DrawingT.MetadataT.ExifReader.ParseNextSubIFDs(Tools.DrawingT.MetadataT.ExifIFDReader,Tools.DrawingT.MetadataT.ExifIFDReader,System.Int32)">
	<summary>Founds Sub IFDs that follows passed Sub IFD and adds them into <see cref="F:Tools.DrawingT.MetadataT.ExifReader._OtherSubIFDs"/></summary>
	<param name="Previous">Sub IFD that may contain offset to other Sub IFDs</param>
	<param name="Container">IFD that contains all possibly found Sub IFDs</param>
	<param name="MarkerIndex">Pointer to <see cref="P:Tools.DrawingT.MetadataT.ExifIFDReader.Entries"/></param>
</member><member name="M:Tools.DrawingT.MetadataT.ExifReader.SubIFD.#ctor(Tools.DrawingT.MetadataT.ExifReader,System.UInt32,System.String,Tools.DrawingT.MetadataT.ExifIFDReader,System.Int32,Tools.DrawingT.MetadataT.ExifIFDReader)">
	<summary>CTor</summary>
	<param name="Exif"><see cref="T:Tools.DrawingT.MetadataT.ExifReader"/> that contains this IFD</param>
	<param name="Offset">Offset of start of this IFD in <paramref name="Stream"/></param>
	<param name="Desc">Descriptive name of this Sub IFD</param>
	<param name="ParentIFD"><see cref="T:Tools.DrawingT.MetadataT.ExifIFDReader"/> that represent IFD that contains current Sub IFD</param>
	<param name="ParentRecord">Point to <see cref="P:Tools.DrawingT.MetadataT.ExifIFDReader.Entries"/> collection that points to record that points to this Sub IFD</param>
	<param name="PreviousSubIFD">Sub IFD which's <see cref="P:Tools.DrawingT.MetadataT.ExifIFDReader.NextIFD"/> points to this Sub IFD. Can be null if this is first Sub IFD in line</param>
	<exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
	<exception cref="T:System.IO.EndOfStreamException">The end of the Exif stream is reached unexpectedly.</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Directory entry of unknown data type found</exception>
	<exception cref="T:System.IO.InvalidDataException">Tag data of some are placed otside the tag and cannot be read</exception>
</member><member name="F:Tools.DrawingT.MetadataT.ExifReader.SubIFD._Desc">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.ExifReader.SubIFD.Desc"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifReader.SubIFD._ParentIFD">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.ExifReader.SubIFD.ParentIFD"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifReader.SubIFD._ParentRecord">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.ExifReader.SubIFD.ParentRecord"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifReader.SubIFD._PreviousSubIFD">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.ExifReader.SubIFD.PreviousSubIFD"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.ExifReader.SubIFD.Desc">
	<summary>Descriptive name of this Sub IFD</summary>
	<returns>Usually contain an empty string for non starndard Sub IFDs and comon English name for standard Sub IFDs. For non-standard Sub IFDs only when library have some ideda what can this Sub IFD mean this Sub IFD is captioned somehow</returns>
	<remarks>Currently there are no Non Standard Sub IFDs that have any caption, Captions of staandard Sub IFDs are public onstants declared in <see cref="T:Tools.DrawingT.MetadataT.ExifReader"/></remarks>
</member><member name="P:Tools.DrawingT.MetadataT.ExifReader.SubIFD.ParentIFD">
	<summary><see cref="T:Tools.DrawingT.MetadataT.ExifIFDReader"/> that represent IFD that contains current Sub IFD</summary>
</member><member name="P:Tools.DrawingT.MetadataT.ExifReader.SubIFD.ParentRecord">
	<summary>Point to <see cref="P:Tools.DrawingT.MetadataT.ExifIFDReader.Entries"/> collection that points to record that points to this Sub IFD</summary>
</member><member name="P:Tools.DrawingT.MetadataT.ExifReader.SubIFD.PreviousSubIFD">
	<summary>Sub IFD which's <see cref="P:Tools.DrawingT.MetadataT.ExifIFDReader.NextIFD"/> points to this Sub IFD. Can be null if this is first Sub IFD in line</summary>
	<remarks>This can be standart Sub IFD (like Exif Sub IFD) or nonstandart one</remarks>
</member><member name="T:Tools.DrawingT.MetadataT.ExifReader.SubIFD">
	<summary>Represents Sub IFD</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifReader._OtherSubIFDs">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.ExifReader.OtherSubIFDs"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.ExifReader.OtherSubIFDs">
	<summary>Contains all unexpectedly (by chance) found Sub IFDs that cannot be recognized as starndard one. Those Sub IFDs are usually found as successors of standard ones</summary>
	<remarks>This collection doesnť contain standard Sub IFDs that was recognized like Exif Sub IFD</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.ExifReader._Stream">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.ExifReader.Stream"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.ExifReader.Stream">
	<summary>Stream used to obtain Exif data</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifReader._IFDs">
	<summary>Contains value for the <see cref="P:Tools.DrawingT.MetadataT.ExifReader.IFDs"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifReader._ExifSubIFD">
	<summary>Contains value for the <see cref="P:Tools.DrawingT.MetadataT.ExifReader.ExifSubIFD"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifReader._GPSSubIFD">
	<summary>Contains value for the <see cref="P:Tools.DrawingT.MetadataT.ExifReader.GPSSubIFD"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifReader._ExifInteroperabilityIFD">
	<summary>Contains value for the <see cref="P:Tools.DrawingT.MetadataT.ExifReader.ExifInteroperabilityIFD"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.ExifReader.ExifSubIFD">
	<summary>Returns Exif Sub IFD that contains data that are usually called Exif like setting of camera etc.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.ExifReader.GPSSubIFD">
	<summary>Returns GPS Sub IFD that contains GPS information.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.ExifReader.ExifInteroperabilityIFD">
	<summary>Returns Exif Interoperability Sub IFD</summary>
</member><member name="F:Tools.DrawingT.MetadataT.ExifReader._ByteOrder">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.ExifReader.ByteOrder"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.ExifReader.ByteOrder">
	<summary>Byte order used by this <see cref="T:Tools.DrawingT.MetadataT.ExifReader"/></summary>
</member><member name="P:Tools.DrawingT.MetadataT.ExifReader.IFDs">
	<summary>Collection of IFDs (Image File Directories) in this Exif block</summary>
</member><member name="T:Tools.DrawingT.MetadataT.ExifReader">
	<summary>Provides low level access to stream of Exif data</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.ExifIFD">
	<summary>Exif IFD Pointer</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.GPSIFD">
	<summary>GPS Info IFD Pointer</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.ImageWidth">
	<summary>Image width</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.ImageLength">
	<summary>Image height</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.BitsPerSample">
	<summary>Number of bits per component</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.Compression">
	<summary>Compression scheme</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.PhotometricInterpretation">
	<summary>Pixel composition</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.Orientation">
	<summary>Orientation of image</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.SamplesPerPixel">
	<summary>Number of components</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.PlanarConfiguration">
	<summary>Image data arrangement</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.YCbCrSubSampling">
	<summary>Subsampling ratio of Y to C</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.YCbCrPositioning">
	<summary>Y and C positioning</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.XResolution">
	<summary>Image resolution in width direction</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.YResolution">
	<summary>Image resolution in height direction</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.ResolutionUnit">
	<summary>Unit of X and Y resolution</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.StripOffsets">
	<summary>Image data location</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.RowsPerStrip">
	<summary>Number of rows per strip</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.StripByteCounts">
	<summary>Bytes per compressed strip</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.JPEGInterchangeFormat">
	<summary>Offset to JPEG SOI</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.JPEGInterchangeFormatLength">
	<summary>Bytes of JPEG data</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.TransferFunction">
	<summary>Transfer function</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.WhitePoint">
	<summary>White point chromaticity</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.PrimaryChromaticities">
	<summary>Chromaticities of primaries</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.YCbCrCoefficients">
	<summary>Color space transformation matrix coefficients</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.ReferenceBlackWhite">
	<summary>Pair of black and white reference values</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.DateTime">
	<summary>File change date and time</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.ImageDescription">
	<summary>Image title</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.Make">
	<summary>Image input equipment manufacturer</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.Model">
	<summary>Image input equipment model</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.Software">
	<summary>Software used</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.Artist">
	<summary>Person who created the image</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags.Copyright">
	<summary>Copyright holder</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDMain.Tags">
	<summary>Tag numbers used in IFD0 and IFD1</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.ExifIFD">
	<summary>Exif IFD Pointer</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.GPSIFD">
	<summary>GPS Info IFD Pointer</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.ImageWidth">
	<summary>Image width</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.ImageLength">
	<summary>Image height</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.BitsPerSample">
	<summary>Number of bits per component</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.CompressionValues.uncompressed">
	<summary>uncompressed</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.CompressionValues.JPEG">
	<summary>JPEG compression (thumbnails only)</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDMain.CompressionValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDMain.Compression"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.Compression">
	<summary>Compression scheme</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDMain.CompressionValues"/></exception>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.PhotometricInterpretationValues.RGB">
	<summary>RGB</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.PhotometricInterpretationValues.YCbCr">
	<summary>YCbCr</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDMain.PhotometricInterpretationValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDMain.PhotometricInterpretation"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.PhotometricInterpretation">
	<summary>Pixel composition</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDMain.PhotometricInterpretationValues"/></exception>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.OrientationValues.TopLeft">
	<summary>The 0th row is at the visual top of the image, and the 0th column is the visual left-hand side.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.OrientationValues.TopRight">
	<summary>The 0th row is at the visual top of the image, and the 0th column is the visual right-hand side.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.OrientationValues.BottomRight">
	<summary>The 0th row is at the visual bottom of the image, and the 0th column is the visual right-hand side.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.OrientationValues.BottomLeft">
	<summary>The 0th row is at the visual bottom of the image, and the 0th column is the visual left-hand side.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.OrientationValues.LeftTop">
	<summary>The 0th row is the visual left-hand side of the image, and the 0th column is the visual top.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.OrientationValues.RightTop">
	<summary>The 0th row is the visual right-hand side of the image, and the 0th column is the visual top.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.OrientationValues.RightBottom">
	<summary>The 0th row is the visual right-hand side of the image, and the 0th column is the visual bottom.</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.OrientationValues.LeftBottom">
	<summary>The 0th row is the visual left-hand side of the image, and the 0th column is the visual bottom.</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDMain.OrientationValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDMain.Orientation"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.Orientation">
	<summary>Orientation of image</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDMain.OrientationValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.SamplesPerPixel">
	<summary>Number of components</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.PlanarConfigurationValues.Chunky">
	<summary>chunky format</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.PlanarConfigurationValues.Planar">
	<summary>planar format</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDMain.PlanarConfigurationValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDMain.PlanarConfiguration"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.PlanarConfiguration">
	<summary>Image data arrangement</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDMain.PlanarConfigurationValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.YCbCrSubSampling">
	<summary>Subsampling ratio of Y to C</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.YCbCrPositioningValues.Centered">
	<summary>centered</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDMain.YCbCrPositioningValues.Cosited">
	<summary>co-sited</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDMain.YCbCrPositioningValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDMain.YCbCrPositioning"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.YCbCrPositioning">
	<summary>Y and C positioning</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDMain.YCbCrPositioningValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.XResolution">
	<summary>Image resolution in width direction</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.YResolution">
	<summary>Image resolution in height direction</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.ResolutionUnit">
	<summary>Unit of X and Y resolution</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.StripOffsets">
	<summary>Image data location</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.RowsPerStrip">
	<summary>Number of rows per strip</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.StripByteCounts">
	<summary>Bytes per compressed strip</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.JPEGInterchangeFormat">
	<summary>Offset to JPEG SOI</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.JPEGInterchangeFormatLength">
	<summary>Bytes of JPEG data</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.TransferFunction">
	<summary>Transfer function</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.WhitePoint">
	<summary>White point chromaticity</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.PrimaryChromaticities">
	<summary>Chromaticities of primaries</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.YCbCrCoefficients">
	<summary>Color space transformation matrix coefficients</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.ReferenceBlackWhite">
	<summary>Pair of black and white reference values</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.DateTime">
	<summary>File change date and time</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.ImageDescription">
	<summary>Image title</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.Make">
	<summary>Image input equipment manufacturer</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.Model">
	<summary>Image input equipment model</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.Software">
	<summary>Software used</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.Artist">
	<summary>Person who created the image</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.Copyright">
	<summary>Copyright holder</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.TagFormat(Tools.DrawingT.MetadataT.Exif.IFDMain.Tags)">
	<summary>Gets format for tag specified</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Tag"/> contains unknown value</exception>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.InteroperabilityIFD">
	<summary>Interoperability IFD Pointer</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.ExifVersion">
	<summary>Exif version</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.FlashpixVersion">
	<summary>Supported Flashpix version</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.ColorSpace">
	<summary>Color space information</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.ComponentsConfiguration">
	<summary>Meaning of each component</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.CompressedBitsPerPixel">
	<summary>Image compression mode</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.PixelXDimension">
	<summary>Valid image width</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.PixelYDimension">
	<summary>Valid image height</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.MakerNote">
	<summary>Manufacturer notes</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.UserComment">
	<summary>User comments</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.RelatedSoundFile">
	<summary>Related audio file</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.DateTimeOriginal">
	<summary>Date and time of original data generation</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.DateTimeDigitized">
	<summary>Date and time of digital data generation</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.SubSecTime">
	<summary>DateTime subseconds</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.SubSecTimeOriginal">
	<summary>DateTimeOriginal subseconds</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.SubSecTimeDigitized">
	<summary>DateTimeDigitized subseconds</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.ExposureTime">
	<summary>Exposure time</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.FNumber">
	<summary>F number</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.ExposureProgram">
	<summary>Exposure program</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.SpectralSensitivity">
	<summary>Spectral sensitivity</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.ISOSpeedRatings">
	<summary>ISO speed rating</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.OECF">
	<summary>Optoelectric conversion factor</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.ShutterSpeedValue">
	<summary>Shutter speed</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.ApertureValue">
	<summary>Aperture</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.BrightnessValue">
	<summary>Brightness</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.ExposureBiasValue">
	<summary>Exposure bias</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.MaxApertureValue">
	<summary>Maximum lens aperture</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.SubjectDistance">
	<summary>Subject distance</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.MeteringMode">
	<summary>Metering mode</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.LightSource">
	<summary>Light source</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.Flash">
	<summary>Flash</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.FocalLength">
	<summary>Lens focal length</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.SubjectArea">
	<summary>Subject area</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.FlashEnergy">
	<summary>Flash energy</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.SpatialFrequencyResponse">
	<summary>Spatial frequency response</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.FocalPlaneXResolution">
	<summary>Focal plane X resolution</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.FocalPlaneYResolution">
	<summary>Focal plane Y resolution</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.FocalPlaneResolutionUnit">
	<summary>Focal plane resolution unit</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.SubjectLocation">
	<summary>Subject location</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.ExposureIndex">
	<summary>Exposure index</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.SensingMethod">
	<summary>Sensing method</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.FileSource">
	<summary>File source</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.SceneType">
	<summary>Scene type</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.CFAPattern">
	<summary>CFA pattern</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.CustomRendered">
	<summary>Custom image processing</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.ExposureMode">
	<summary>Exposure mode</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.WhiteBalance">
	<summary>White balance</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.DigitalZoomRatio">
	<summary>Digital zoom ratio</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.FocalLengthIn35mmFilm">
	<summary>Focal length in 35 mm film</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.SceneCaptureType">
	<summary>Scene capture type</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.GainControl">
	<summary>Gain control</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.Contrast">
	<summary>Contrast</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.Saturation">
	<summary>Saturation</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.Sharpness">
	<summary>Sharpness</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.DeviceSettingDescription">
	<summary>Device settings description</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.SubjectDistanceRange">
	<summary>Subject distance range</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags.ImageUniqueID">
	<summary>Unique image ID</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif.Tags">
	<summary>Tag numbers used in Exif Sub IFD</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.InteroperabilityIFD">
	<summary>Interoperability IFD Pointer</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.ExifVersion">
	<summary>Exif version</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.FlashpixVersionValues.Flashpix10">
	<summary>Flashpix Format Version 1.0</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif.FlashpixVersionValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDExif.FlashpixVersion"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.FlashpixVersion">
	<summary>Supported Flashpix version</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDExif.FlashpixVersionValues"/></exception>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ColorSpaceValues.sRGB">
	<summary>sRGB</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ColorSpaceValues.Uncalibrated">
	<summary>Uncalibrated</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif.ColorSpaceValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDExif.ColorSpace"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.ColorSpace">
	<summary>Color space information</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDExif.ColorSpaceValues"/></exception>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ComponentsConfigurationValues.DoesNotExist">
	<summary>does not exist</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ComponentsConfigurationValues.Y">
	<summary>Y</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ComponentsConfigurationValues.Cb">
	<summary>Cb</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ComponentsConfigurationValues.Cr">
	<summary>Cr</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ComponentsConfigurationValues.R">
	<summary>R</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ComponentsConfigurationValues.G">
	<summary>G</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ComponentsConfigurationValues.B">
	<summary>B</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif.ComponentsConfigurationValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDExif.ComponentsConfiguration"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.ComponentsConfiguration">
	<summary>Meaning of each component</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDExif.ComponentsConfigurationValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.CompressedBitsPerPixel">
	<summary>Image compression mode</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.PixelXDimension">
	<summary>Valid image width</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.PixelYDimension">
	<summary>Valid image height</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.MakerNote">
	<summary>Manufacturer notes</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.UserComment">
	<summary>User comments</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.RelatedSoundFile">
	<summary>Related audio file</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.DateTimeOriginal">
	<summary>Date and time of original data generation</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.DateTimeDigitized">
	<summary>Date and time of digital data generation</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.SubSecTime">
	<summary>DateTime subseconds</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.SubSecTimeOriginal">
	<summary>DateTimeOriginal subseconds</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.SubSecTimeDigitized">
	<summary>DateTimeDigitized subseconds</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureTime">
	<summary>Exposure time</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.FNumber">
	<summary>F number</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureProgramValues.NotDefined">
	<summary>Not defined</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureProgramValues.Manual">
	<summary>Manual</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureProgramValues.NormalProgram">
	<summary>Normal program</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureProgramValues.AperturePriority">
	<summary>Aperture priority</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureProgramValues.ShutterPriority">
	<summary>Shutter priority</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureProgramValues.CreativeProgram">
	<summary>Creative program (biased toward depth of field)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureProgramValues.ActionProgram">
	<summary>Action program (biased toward fast shutter speed)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureProgramValues.PortraitMode">
	<summary>Portrait mode (for closeup photos with the background out of focus)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureProgramValues.LandscapeMode">
	<summary>Landscape mode (for landscape photos with the background in focus)</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureProgramValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureProgram"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureProgram">
	<summary>Exposure program</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureProgramValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.SpectralSensitivity">
	<summary>Spectral sensitivity</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.ISOSpeedRatings">
	<summary>ISO speed rating</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.OECF">
	<summary>Optoelectric conversion factor</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.ShutterSpeedValue">
	<summary>Shutter speed</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.ApertureValue">
	<summary>Aperture</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.BrightnessValue">
	<summary>Brightness</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureBiasValue">
	<summary>Exposure bias</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.MaxApertureValue">
	<summary>Maximum lens aperture</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.SubjectDistance">
	<summary>Subject distance</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.MeteringModeValues.Unknown">
	<summary>unknown</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.MeteringModeValues.Average">
	<summary>Average</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.MeteringModeValues.CenterWeightedAverage">
	<summary>Center weighted average</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.MeteringModeValues.Spot">
	<summary>Spot</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.MeteringModeValues.MultiSpot">
	<summary>MultiSpot</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.MeteringModeValues.Pattern">
	<summary>Pattern</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.MeteringModeValues.PartialMode">
	<summary>Partial</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.MeteringModeValues.Other">
	<summary>Other</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif.MeteringModeValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDExif.MeteringMode"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.MeteringMode">
	<summary>Metering mode</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDExif.MeteringModeValues"/></exception>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.unknown">
	<summary>unknown</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.Daylight">
	<summary>Daylight</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.Fluorescent">
	<summary>Fluorescent</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.Tungsten">
	<summary>Tungsten (incandescent light)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.Flash">
	<summary>Flash</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.FineWeather">
	<summary>Fine weather</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.CloudyWeather">
	<summary>Cloudy weather</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.Shade">
	<summary>Shade</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.DaylightFluorescent">
	<summary>Daylight fluorescent (D 5700 – 7100K)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.DayWhiteFluorescent">
	<summary>Day white fluorescent (N 4600 – 5400K)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.CoolWhiteFluorescent">
	<summary>Cool white fluorescent (W 3900 – 4500K)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.WhiteFluorescent">
	<summary>White fluorescent (WW 3200 – 3700K)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.StandardLightA">
	<summary>Standard light A</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.StandardLightB">
	<summary>Standard light B</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.StandardLightC">
	<summary>Standard light C</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.D55">
	<summary>D55</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.D65">
	<summary>D65</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.D75">
	<summary>D75</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.D50">
	<summary>D50</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.ISOStudioTungsten">
	<summary>ISO studio tungsten</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues.OtherLightSource">
	<summary>other light source</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSource"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSource">
	<summary>Light source</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDExif.LightSourceValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.Flash">
	<summary>Flash</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.FocalLength">
	<summary>Lens focal length</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.SubjectArea">
	<summary>Subject area</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.FlashEnergy">
	<summary>Flash energy</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.SpatialFrequencyResponse">
	<summary>Spatial frequency response</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.FocalPlaneXResolution">
	<summary>Focal plane X resolution</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.FocalPlaneYResolution">
	<summary>Focal plane Y resolution</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.FocalPlaneResolutionUnit">
	<summary>Focal plane resolution unit</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.SubjectLocation">
	<summary>Subject location</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureIndex">
	<summary>Exposure index</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.SensingMethodValues.NotDefined">
	<summary>Not defined</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.SensingMethodValues.OneChipColorAreaSensor">
	<summary>One-chip color area sensor</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.SensingMethodValues.TwoChipColorAreaSensor">
	<summary>Two-chip color area sensor</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.SensingMethodValues.ThreeChipColorAreaSensor">
	<summary>Three-chip color area sensor</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.SensingMethodValues.ColorSequentialAreaSensor">
	<summary>Color sequential area sensor</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.SensingMethodValues.TrilinearSensor">
	<summary>Trilinear sensor</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.SensingMethodValues.ColorSequentialLinearSensor">
	<summary>Color sequential linear sensor</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif.SensingMethodValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDExif.SensingMethod"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.SensingMethod">
	<summary>Sensing method</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDExif.SensingMethodValues"/></exception>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.FileSourceValues.DSC">
	<summary>DSC</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif.FileSourceValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDExif.FileSource"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.FileSource">
	<summary>File source</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDExif.FileSourceValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.SceneType">
	<summary>Scene type</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.CFAPattern">
	<summary>CFA pattern</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.CustomRenderedValues.NormalProcess">
	<summary>Normal process</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.CustomRenderedValues.Customrocess">
	<summary>Custom process</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif.CustomRenderedValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDExif.CustomRendered"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.CustomRendered">
	<summary>Custom image processing</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDExif.CustomRenderedValues"/></exception>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureModeValues.AutoExposure">
	<summary>Auto exposure</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureModeValues.ManualExposure">
	<summary>Manual exposure</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureModeValues.AutoBracket">
	<summary>Auto bracket</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureModeValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureMode"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureMode">
	<summary>Exposure mode</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDExif.ExposureModeValues"/></exception>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.WhiteBalanceValues.Auto">
	<summary>Auto white balance</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.WhiteBalanceValues.Manual">
	<summary>Manual white balance</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif.WhiteBalanceValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDExif.WhiteBalance"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.WhiteBalance">
	<summary>White balance</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDExif.WhiteBalanceValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.DigitalZoomRatio">
	<summary>Digital zoom ratio</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.FocalLengthIn35mmFilmValues.Standard">
	<summary>Standard</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.FocalLengthIn35mmFilmValues.Landscape">
	<summary>Landscape</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.FocalLengthIn35mmFilmValues.Portrait">
	<summary>Portrait</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.FocalLengthIn35mmFilmValues.NightScene">
	<summary>Night scene</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif.FocalLengthIn35mmFilmValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDExif.FocalLengthIn35mmFilm"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.FocalLengthIn35mmFilm">
	<summary>Focal length in 35 mm film</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDExif.FocalLengthIn35mmFilmValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.SceneCaptureType">
	<summary>Scene capture type</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.GainControlValues.None">
	<summary>None</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.GainControlValues.LowGainUp">
	<summary>Low gain up</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.GainControlValues.HighGainUp">
	<summary>High gain up</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.GainControlValues.LowGainDown">
	<summary>Low gain down</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.GainControlValues.HighGainDown">
	<summary>High gain down</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif.GainControlValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDExif.GainControl"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.GainControl">
	<summary>Gain control</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDExif.GainControlValues"/></exception>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ContrastValues.Normal">
	<summary>Normal</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ContrastValues.Soft">
	<summary>Soft</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.ContrastValues.Hard">
	<summary>Hard</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif.ContrastValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDExif.Contrast"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.Contrast">
	<summary>Contrast</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDExif.ContrastValues"/></exception>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.SaturationValues.Normal">
	<summary>Normal</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.SaturationValues.Low">
	<summary>Low saturation</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.SaturationValues.High">
	<summary>High saturation</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif.SaturationValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDExif.Saturation"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.Saturation">
	<summary>Saturation</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDExif.SaturationValues"/></exception>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.SharpnessValues.Normal">
	<summary>Normal</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.SharpnessValues.Soft">
	<summary>Soft</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.SharpnessValues.Hard">
	<summary>Hard</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif.SharpnessValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDExif.Sharpness"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.Sharpness">
	<summary>Sharpness</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDExif.SharpnessValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.DeviceSettingDescription">
	<summary>Device settings description</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.SubjectDistanceRangeValues.unknown">
	<summary>unknown</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.SubjectDistanceRangeValues.Macro">
	<summary>Macro</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.SubjectDistanceRangeValues.CloseView">
	<summary>Close view</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDExif.SubjectDistanceRangeValues.DistantView">
	<summary>Distant view</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif.SubjectDistanceRangeValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDExif.SubjectDistanceRange"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.SubjectDistanceRange">
	<summary>Subject distance range</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDExif.SubjectDistanceRangeValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.ImageUniqueID">
	<summary>Unique image ID</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.TagFormat(Tools.DrawingT.MetadataT.Exif.IFDExif.Tags)">
	<summary>Gets format for tag specified</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Tag"/> contains unknown value</exception>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSVersionID">
	<summary>GPS tag version</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSLatitudeRef">
	<summary>North or South Latitude</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSLatitude">
	<summary>Latitude</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSLongitudeRef">
	<summary>East or West Longitude</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSLongitude">
	<summary>Longitude</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSAltitudeRef">
	<summary>Altitude reference</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSAltitude">
	<summary>Altitude</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSTimeStamp">
	<summary>GPS time (atomic clock)</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSSatellites">
	<summary>GPS satellites used for measurement</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSStatus">
	<summary>GPS receiver status</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSMeasureMode">
	<summary>GPS measurement mode</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSDOP">
	<summary>Measurement precision</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSSpeedRef">
	<summary>Speed unit</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSSpeed">
	<summary>Speed of GPS receiver</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSTrackRef">
	<summary>Reference for direction of movement</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSTrack">
	<summary>Direction of movement</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSImgDirectionRef">
	<summary>Reference for direction of image</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSImgDirection">
	<summary>Direction of image</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSMapDatum">
	<summary>Geodetic survey data used</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSDestLatitudeRef">
	<summary>Reference for latitude of destination</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSDestLatitude">
	<summary>Latitude of destination</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSDestLongitudeRef">
	<summary>Reference for longitude of destination</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSDestLongitude">
	<summary>Longitude of destination</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSDestBearingRef">
	<summary>Reference for bearing of destination</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSDestBearing">
	<summary>Bearing of destination</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSDestDistanceRef">
	<summary>Reference for distance to destination</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSDestDistance">
	<summary>Distance to destination</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSProcessingMethod">
	<summary>Name of GPS processing method</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSAreaInformation">
	<summary>Name of GPS area</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSDateStamp">
	<summary>GPS date</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags.GPSDifferential">
	<summary>GPS differential correction</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags">
	<summary>Tag numbers used in GPS Sub IFD</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSVersionID">
	<summary>GPS tag version</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSLatitudeRefValues.North">
	<summary>Nort latitude</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSLatitudeRefValues.South">
	<summary>South latitude</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSLatitudeRefValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSLatitudeRef"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSLatitudeRef">
	<summary>North or South Latitude</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSLatitudeRefValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSLatitude">
	<summary>Latitude</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSLongitudeRefValues.East">
	<summary>East longitude</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSLongitudeRefValues.West">
	<summary>West longitude</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSLongitudeRefValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSLongitudeRef"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSLongitudeRef">
	<summary>East or West Longitude</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSLongitudeRefValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSLongitude">
	<summary>Longitude</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSAltitudeRefValues.SeaLevel">
	<summary>Sea level</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSAltitudeRefValues.SeaLevelReference">
	<summary>Sea level reference (negative value)</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSAltitudeRefValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSAltitudeRef"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSAltitudeRef">
	<summary>Altitude reference</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSAltitudeRefValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSAltitude">
	<summary>Altitude</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSTimeStamp">
	<summary>GPS time (atomic clock)</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSSatellites">
	<summary>GPS satellites used for measurement</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSStatusValues.InProgress">
	<summary>Measurement in progress</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSStatusValues.Interoperability">
	<summary>Measurement Interoperability</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSStatusValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSStatus"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSStatus">
	<summary>GPS receiver status</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSStatusValues"/></exception>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSMeasureModeValues.Measurement2D">
	<summary>2-dimensional measurement</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSMeasureModeValues.Measurement3D">
	<summary>3-dimensional measurement</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSMeasureModeValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSMeasureMode"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSMeasureMode">
	<summary>GPS measurement mode</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSMeasureModeValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSDOP">
	<summary>Measurement precision</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSSpeedRefValues.KilometersPeHour">
	<summary>Kilometers per hour</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSSpeedRefValues.MilesPerHour">
	<summary>Miles per hour</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSSpeedRefValues.Knots">
	<summary>Knots</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSSpeedRefValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSSpeedRef"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSSpeedRef">
	<summary>Speed unit</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSSpeedRefValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSSpeed">
	<summary>Speed of GPS receiver</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSTrackRefValues.TrueDirection">
	<summary>True direction</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSTrackRefValues.MagneticDirection">
	<summary>Magnetic direction</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSTrackRefValues">
	<summary>Possible values of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSTrackRef"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSTrackRef">
	<summary>Reference for direction of movement</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSTrackRefValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSTrack">
	<summary>Direction of movement</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSImgDirectionRef">
	<summary>Reference for direction of image</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSTrackRefValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSImgDirection">
	<summary>Direction of image</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSMapDatum">
	<summary>Geodetic survey data used</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSDestLatitudeRef">
	<summary>Reference for latitude of destination</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSLatitudeRefValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSDestLatitude">
	<summary>Latitude of destination</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSDestLongitudeRef">
	<summary>Reference for longitude of destination</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSLongitudeRefValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSDestLongitude">
	<summary>Longitude of destination</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSDestBearingRef">
	<summary>Reference for bearing of destination</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSTrackRefValues"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSDestBearing">
	<summary>Bearing of destination</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSDestDistanceRef">
	<summary>Reference for distance to destination</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSDestDistance">
	<summary>Distance to destination</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSProcessingMethod">
	<summary>Name of GPS processing method</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSAreaInformation">
	<summary>Name of GPS area</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSDateStamp">
	<summary>GPS date</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.GPSDifferential">
	<summary>GPS differential correction</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.TagFormat(Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags)">
	<summary>Gets format for tag specified</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Tag"/> contains unknown value</exception>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFDInterop.Tags.InteroperabilityIndex">
	<summary>Indicates the identification of the Interoperability rule.</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDInterop.Tags">
	<summary>Tag numbers used in Exif Interoperability IFD</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDInterop.InteroperabilityIndex">
	<summary>Indicates the identification of the Interoperability rule.</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDInterop.TagFormat(Tools.DrawingT.MetadataT.Exif.IFDInterop.Tags)">
	<summary>Gets format for tag specified</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Tag"/> contains unknown value</exception>
</member><member name="M:Tools.MathT.Min``1(``0[])">
	<summary>Finds the smallest of parameters</summary>
	<typeparam name="T">The type of parameters that implements <see cref="T:System.IComparable`1"/></typeparam>
	<param name="Numbers">Objects one of which should be the smallest found</param>
	<returns>The smallest object in <paramref name="Numbers"/> array</returns>
	<exception cref="T:System.ArgumentNullException">If <paramref name="Numbers"/> is Null (Nothing)</exception>
	<exception cref="T:System.ArgumentException">If <paramref name="Numbers"/> contains no item</exception>
	<remarks><seealso cref="M:Tools.MathT.Max``1(``0[])"/></remarks>
</member><member name="M:Tools.MathT.Min``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>Finds the smalles value in givel <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
	<typeparam name="T">Type of object in <paramref name="Numbers"/>. Must implement <see cref="T:System.IComparable`1"/>.</typeparam>
	<param name="Numbers"><see cref="T:System.Collections.Generic.IEnumerable`1"/> of objects where to search the smallest</param>
	<returns>The smallest value from <paramref name="Numbers"/></returns>
	<exception cref="T:System.ArgumentNullException">If <paramref name="Numbers"/> is Null (Nothing)</exception>
	<exception cref="T:System.ArgumentException">If <paramref name="Numbers"/> contains no item</exception>
	<remarks><seealso cref="M:Tools.MathT.Max``1(``0[])"/></remarks>
</member><member name="M:Tools.MathT.Max``1(``0[])">
	<summary>Finds the biggest of parameters</summary>
	<typeparam name="T">The type of parameters that implements <see cref="T:System.IComparable`1"/></typeparam>
	<param name="Numbers">Objects one of which should be the biggest found</param>
	<returns>The biggest object in <paramref name="Numbers"/> array</returns>
	<exception cref="T:System.ArgumentNullException">If <paramref name="Numbers"/> is Null (Nothing)</exception>
	<exception cref="T:System.ArgumentException">If <paramref name="Numbers"/> contains no item</exception>
	<remarks><seealso cref="M:Tools.MathT.Min``1(``0[])"/></remarks>
</member><member name="M:Tools.MathT.Max``1(System.Collections.Generic.IEnumerable{``0})">
	<summary>Finds the biggest value in givel <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
	<typeparam name="T">Type of object in <paramref name="Numbers"/>. Must implement <see cref="T:System.IComparable`1"/>.</typeparam>
	<param name="Numbers"><see cref="T:System.Collections.Generic.IEnumerable`1"/> of objects where to search the biggest</param>
	<returns>The biggest value from <paramref name="Numbers"/></returns>
	<exception cref="T:System.ArgumentNullException">If <paramref name="Numbers"/> is Null (Nothing)</exception>
	<exception cref="T:System.ArgumentException">If <paramref name="Numbers"/> contains no item</exception>
	<remarks><seealso cref="M:Tools.MathT.Min``1(``0[])"/></remarks>
</member><member name="T:Tools.MathT">
	<summary>Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.</summary>
</member><member name="M:Tools.ICloneable`1.Clone">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="T:Tools.ICloneable`1">
	<summary>Type-safe <see cref="T:Tools.ICloneable`1"/> interface</summary>
</member><member name="M:Tools.Cloenable`1.Clone1">
	<summary>Implements <see cref="M:System.ICloneable.Clone"/></summary>
	<returns>Returns the result of <see cref="M:Tools.Cloenable`1.Clone"/> function</returns>
</member><member name="M:Tools.Cloenable`1.Clone">
	<summary>This is the implementation of <see cref="M:Tools.ICloneable`1.Clone"/>. Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="T:Tools.Cloenable`1">
	<summary>Simple <see cref="T:Tools.ICloneable`1"/> implementation that implements <see cref="M:Tools.ICloneable`1.Clone"/></summary>
	<typeparam name="T">The type that is cloned</typeparam>
	<remarks>
 Inherit from this class instead of implementing <see cref="T:Tools.ICloneable`1"/> and you will have to only implement <see cref="M:Tools.ICloneable`1.Clone"/> because <see cref="M:Tools.ICloneable`1.Clone"/> is already implemented.
 <seealso cref="M:Tools.Cloenable`1.Clone1"/>
	</remarks>
</member><member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueProperty">
	<summary>
 Identifies the Value dependency property.
 </summary>
</member><member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Decimal})">
	<summary>
 Raises the ValueChanged event.
 </summary>
	<param name="args">Arguments associated with the ValueChanged event.</param>
</member><member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.CoerceValue(System.Decimal)">
	<summary>Enforces <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Minimum"/>, <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Maximum"/> and <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DecimalPlaces"/> on given value</summary>
	<param name="Value">Value to be coerced</param>
	<returns>Value derived from <paramref name="Value"/> that fullfills the constrains</returns>
</member><member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnValueStringChanged(System.Windows.RoutedPropertyChangedEventArgs{System.String})">
	<summary>
 Raises the ValueChanged event.
 </summary>
	<param name="args">Arguments associated with the ValueChanged event.</param>
</member><member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueChangedEvent">
	<summary>
 Identifies the ValueChanged routed event.
 </summary>
</member><member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueStringChangedEvent">
	<summary>
 Identifies the ValueStringChanged routed event.
 </summary>
</member><member name="E:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueChanged">
	<summary>
 Occurs when the Value property changes.
 </summary>
</member><member name="E:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueStringChanged">
	<summary>
 Occurs when the ValueString property changes.
 </summary>
</member><member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
	<summary>
 This is a class handler for MouseLeftButtonDown event.
 The purpose of this handle is to move input focus to NumericUpDown when user pressed
 mouse left button on any part of slider that is not focusable.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.textBox">
	<summary>Current <see cref="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.textBox"/> (if any)</summary>
</member><member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnApplyTemplate">
	<summary>Invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.</summary>
</member><member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.AttachTextBoxEvents">
	<summary>Hooks events of <see cref="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.textBox"/></summary>
</member><member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DetachTextBoxEvents">
	<summary>Unhooks events of <see cref="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.textBox"/></summary>
</member><member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.textBox_PreviewTextInput(System.Object,System.Windows.Input.TextCompositionEventArgs)">
	<summary>Prevents non-number characters from being typed</summary>
</member><member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.TextToValue(System.String,System.Decimal)">
	<summary>Attempts to convert user-typed text to number</summary>
	<param name="text">Text to converts</param>
	<param name="fallback">Value to be retuned if <paramref name="text"/> cannot be converted to decimal</param>
	<returns>
		<paramref name="text"/> converted to number. It conversion is not possible returns <paramref name="fallback"/>.
 Return value should be acceptable by <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Minimum"/>, <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Maximum"/> and <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DecimalPlaces"/> constraints.
 <para>This implementation utilizes <see cref="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.CoerceValue(System.Windows.DependencyObject,System.Object)"/></para>
	</returns>
</member><member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.AreCharsAccepltable(System.String)">
	<summary>For given string gets value indicating if it consists only of characters acceptable as part of number</summary>
	<param name="text">String to verify</param>
	<returns>True if <paramref name="text"/> consists only of characters valid as part of number. Takes current culture and current constrainst in account.</returns>
	<remarks>Returns true even for string which consists for valid character but is invalid number (i.e. "4.-..5" in invariant culture)</remarks>
</member><member name="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown">
	<summary>Represents a Windows spin box (also known as an up-down control) that displays numeric values.</summary>
	<remarks>
		<para>This is companion class to <see cref="T:System.Windows.Forms.NumericUpDown"/>.</para>
		<para>This class is bsed on http://msdn.microsoft.com/en-us/library/ms771573.aspx, converted by http://labs.developerfusion.co.uk/convert/csharp-to-vb.aspx</para>
	</remarks>
</member><member name="M:Tools.WindowsT.FormsT.TransparentTextBox.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.WindowsT.FormsT.TransparentTextBox.#ctor(System.String)">
	<summary>CTor with text</summary>
	<param name="Text">Default text of control</param>
</member><member name="M:Tools.WindowsT.FormsT.TransparentTextBox.#ctor(System.Drawing.Color)">
	<summary>CTor with back color</summary>
	<param name="BackColor">Default background color</param>
</member><member name="M:Tools.WindowsT.FormsT.TransparentTextBox.#ctor(System.Drawing.Color,System.String)">
	<summary>CTor with text and back color</summary>
	<param name="BackColor">Default background color</param>
	<param name="Text">Default text of control</param>
</member><member name="P:Tools.WindowsT.FormsT.TransparentTextBox.CreateParams">
	<summary>Gets the required creation parameters when the control handle is created.</summary>
	<returns>A <see cref="T:System.Windows.Forms.CreateParams"/> that contains the required creation parameters when the handle to the control is created.</returns>
</member><member name="F:Tools.WindowsT.FormsT.TransparentTextBox.InInvalidateParent">
	<summary>Determines if <see cref="M:Tools.WindowsT.FormsT.TransparentTextBox.InvalidateParent(System.Drawing.Rectangle)"/> is currently on call stack to avoid recursive calls</summary>
</member><member name="M:Tools.WindowsT.FormsT.TransparentTextBox.InvalidateParent(System.Drawing.Rectangle)">
	<summary>Invalidates given parent rectrangle</summary>
	<param name="rect">Rectangle to be invalidated</param>
</member><member name="M:Tools.WindowsT.FormsT.TransparentTextBox.WndProc(System.Windows.Forms.Message@)">
	<summary>Processes Windows messages.</summary>
	<param name="m">The Windows System.Windows.Forms.Message to process</param>
</member><member name="F:Tools.WindowsT.FormsT.TransparentTextBox.KbdProcess">
	<summary>True when <see cref="M:Tools.WindowsT.FormsT.TransparentTextBox.WndProc(System.Windows.Forms.Message@)"/> with keyboard message is on stack. Used in <see cref="M:Tools.WindowsT.FormsT.TransparentTextBox.OnTextChanged(System.EventArgs)"/> to decide wheather to invalidate whole control (False) or only starting at current line (True)</summary>
</member><member name="M:Tools.WindowsT.FormsT.TransparentTextBox.OnTextChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:System.Windows.Forms.Control.TextChanged"/> event.</summary>
	<param name="e">An <see cref="T:System.EventArgs"/> that contains the event data</param>
</member><member name="M:Tools.WindowsT.FormsT.TransparentTextBox.OnHScroll(System.EventArgs)">
	<summary>Raises the <see cref="E:System.Windows.Forms.RichTextBox.HScroll"/> event.</summary>
	<param name="e">An <see cref="T:System.EventArgs"/> that contains the event data</param>
</member><member name="M:Tools.WindowsT.FormsT.TransparentTextBox.OnVScroll(System.EventArgs)">
	<summary>Raises the <see cref="E:System.Windows.Forms.RichTextBox.VScroll"/> event.</summary>
	<param name="e">An <see cref="T:System.EventArgs"/> that contains the event data</param>
</member><member name="M:Tools.WindowsT.FormsT.TransparentTextBox.OnSelectionChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:System.Windows.Forms.RichTextBox.SelectionChanged"/> event.</summary>
	<param name="e">An <see cref="T:System.EventArgs"/> that contains the event data</param>
</member><member name="M:Tools.WindowsT.FormsT.TransparentTextBox.OnMove(System.EventArgs)">
	<summary>Raises the System.Windows.Forms.Control.Move event.</summary>
	<param name="e">An System.EventArgs that contains the event data.</param>
</member><member name="P:Tools.WindowsT.FormsT.TransparentTextBox.BackColor">
	<summary>Gets or sets the background color for the control.</summary>
	<returns>A <see cref="T:System.Drawing.Color"/> that represents the background color of the control.</returns>
</member><member name="M:Tools.WindowsT.FormsT.TransparentTextBox.ResetBackColor">
	<summary>Sets <see cref="P:Tools.WindowsT.FormsT.TransparentTextBox.BackColor"/> to <see cref="P:System.Drawing.Color.Transparent"/></summary>
</member><member name="T:Tools.WindowsT.FormsT.TransparentTextBox">
	<summary><see cref="T:System.Windows.Forms.RichTextBox"/> with transparent background</summary>
	<remarks>This control is 100% transaprent and cannot have any other than transparent <see cref="P:Tools.WindowsT.FormsT.TransparentTextBox.BackColor"/>. To make it semi-transparent, put it onto semitransparent panel.</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.URational._Numerator">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.URational.Numerator"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.URational._Denominator">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.URational.Denominator"/> property</summary>
</member><member name="M:Tools.DrawingT.MetadataT.URational.#ctor(System.UInt16,System.UInt16)">
	<summary>CTor</summary>
	<param name="Numerator">Numerator</param>
	<param name="Denominator">Denominator</param>
</member><member name="M:Tools.DrawingT.MetadataT.URational.Clone1">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="M:Tools.DrawingT.MetadataT.URational.Swap">
	<summary>Swaps values <see cref="P:Tools.DrawingT.MetadataT.URational.Numerator"/> and <see cref="P:Tools.DrawingT.MetadataT.URational.Denominator"/></summary>
</member><member name="P:Tools.DrawingT.MetadataT.URational.Numerator">
	<summary>Numerator (1 in 1/2)</summary>
</member><member name="P:Tools.DrawingT.MetadataT.URational.Denominator">
	<summary>Denominator (2 in 1/2)</summary>
</member><member name="M:Tools.DrawingT.MetadataT.URational.Clone">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="M:Tools.DrawingT.MetadataT.URational.Simplyfy">
	<summary>Simplyfies <see cref="T:Tools.DrawingT.MetadataT.URational"/> to contain smallest possible <see cref="P:Tools.DrawingT.MetadataT.URational.Numerator"/> and <see cref="P:Tools.DrawingT.MetadataT.URational.Denominator"/></summary>
</member><member name="M:Tools.DrawingT.MetadataT.URational.op_Addition(Tools.DrawingT.MetadataT.URational,Tools.DrawingT.MetadataT.URational)">
	<summary>Adds two <see cref="T:Tools.DrawingT.MetadataT.URational"/>s</summary>
	<param name="a">First number to add</param>
	<param name="b">Second number to add</param>
	<returns><paramref name="a"/> + <paramref name="b"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.URational.op_Implicit(Tools.DrawingT.MetadataT.URational)~Tools.DrawingT.MetadataT.SRational">
	<summary>Converts <see cref="T:Tools.DrawingT.MetadataT.URational"/> to <see cref="T:Tools.DrawingT.MetadataT.SRational"/></summary>
	<param name="a">Number to be converted</param>
	<returns>Signed representation of unsigned rational</returns>
</member><member name="M:Tools.DrawingT.MetadataT.URational.op_Explicit(Tools.DrawingT.MetadataT.SRational)~Tools.DrawingT.MetadataT.URational">
	<summary>Converts <see cref="T:Tools.DrawingT.MetadataT.SRational"/> to <see cref="T:Tools.DrawingT.MetadataT.URational"/></summary>
	<param name="a">Number to be converted</param>
	<returns>Unsigned representation of signed rational</returns>
</member><member name="M:Tools.DrawingT.MetadataT.URational.op_Multiply(Tools.DrawingT.MetadataT.URational,Tools.DrawingT.MetadataT.URational)">
	<summary>Multiplyes two <see cref="T:Tools.DrawingT.MetadataT.URational"/>s</summary>
	<param name="a">First number to multiply</param>
	<param name="b">Second number to multiply</param>
	<returns><paramref name="a"/> * <paramref name="b"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.URational.op_Division(Tools.DrawingT.MetadataT.URational,Tools.DrawingT.MetadataT.URational)">
	<summary>Divides one number by other</summary>
	<param name="a">Number to be divided</param>
	<param name="b">Number to divide by</param>
	<returns><paramref name="a"/> / <paramref name="b"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.URational.op_Subtraction(Tools.DrawingT.MetadataT.URational,Tools.DrawingT.MetadataT.URational)">
	<summary>Substracts two <see cref="T:Tools.DrawingT.MetadataT.URational"/>s</summary>
	<param name="a">Number to substract from</param>
	<param name="b">Number to be substracted</param>
	<returns><paramref name="a"/> - <paramref name="b"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.URational.op_UnaryNegation(Tools.DrawingT.MetadataT.URational)">
	<summary>Negative value</summary>
	<param name="a"><see cref="T:Tools.DrawingT.MetadataT.URational"/> to get negative value of</param>
	<returns>Negative value of <paramref name="a"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.URational.op_Explicit(System.Double)~Tools.DrawingT.MetadataT.URational">
	<summary>Converts <see cref="T:System.Double"/> to <see cref="T:Tools.DrawingT.MetadataT.URational"/></summary>
	<param name="a">Number to be converted</param>
	<returns><see cref="T:Tools.DrawingT.MetadataT.URational"/> representation of <paramref name="a"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.URational.op_Explicit(System.Single)~Tools.DrawingT.MetadataT.URational">
	<summary>Converts <see cref="T:System.Single"/> to <see cref="T:Tools.DrawingT.MetadataT.URational"/></summary>
	<param name="a">Number to be converted</param>
	<returns><see cref="T:Tools.DrawingT.MetadataT.URational"/> representation of <paramref name="a"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.URational.op_Implicit(Tools.DrawingT.MetadataT.URational)~System.Double">
	<summary>Converts <see cref="T:Tools.DrawingT.MetadataT.URational"/> to <see cref="T:System.Double"/></summary>
	<param name="a"><see cref="T:Tools.DrawingT.MetadataT.URational"/> to be converted</param>
	<returns><see cref="T:System.Double"/> representation of <paramref name="a"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.URational.op_Implicit(Tools.DrawingT.MetadataT.URational)~System.String">
	<summary>Converts <see cref="T:Tools.DrawingT.MetadataT.URational"/> to <see cref="T:System.String"/></summary>
	<param name="a"><see cref="T:Tools.DrawingT.MetadataT.URational"/> to be converted</param>
	<returns><see cref="T:System.String"/> representation of <paramref name="a"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.URational.ToString">
	<summary>String representation</summary>
</member><member name="M:Tools.DrawingT.MetadataT.URational.op_Explicit(System.String)~Tools.DrawingT.MetadataT.URational">
	<summary>Converts <see cref="T:System.String"/> to <see cref="T:Tools.DrawingT.MetadataT.URational"/></summary>
	<param name="a"><see cref="T:System.String"/> to converts</param>
	<returns><see cref="T:Tools.DrawingT.MetadataT.URational"/> value represented by <paramref name="a"/></returns>
	<exception cref="T:System.InvalidCastException">When error ocures</exception>
	<remarks><paramref name="a"/> must be in format \s*\d+\s*[/\s*\d+\s*]</remarks>
</member><member name="T:Tools.DrawingT.MetadataT.URational">
	<summary>Represents unsigned rational number with numerator and denominator as used in Exif</summary>
</member><member name="F:Tools.DrawingT.MetadataT.SRational._Numerator">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.SRational.Numerator"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.SRational._Denominator">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.SRational.Denominator"/> property</summary>
</member><member name="M:Tools.DrawingT.MetadataT.SRational.#ctor(System.Int16,System.Int16)">
	<summary>CTor</summary>
	<param name="Numerator">Numerator</param>
	<param name="Denominator">Denominator</param>
</member><member name="M:Tools.DrawingT.MetadataT.SRational.Clone1">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="M:Tools.DrawingT.MetadataT.SRational.Swap">
	<summary>Swaps values <see cref="P:Tools.DrawingT.MetadataT.SRational.Numerator"/> and <see cref="P:Tools.DrawingT.MetadataT.SRational.Denominator"/></summary>
</member><member name="P:Tools.DrawingT.MetadataT.SRational.Numerator">
	<summary>Numerator (1 in 1/2)</summary>
</member><member name="P:Tools.DrawingT.MetadataT.SRational.Denominator">
	<summary>Denominator (2 in 1/2)</summary>
</member><member name="M:Tools.DrawingT.MetadataT.SRational.Clone">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="M:Tools.DrawingT.MetadataT.SRational.Simplyfy">
	<summary>Simplyfies <see cref="T:Tools.DrawingT.MetadataT.SRational"/> to contain smallest possible <see cref="P:Tools.DrawingT.MetadataT.SRational.Numerator"/> and <see cref="P:Tools.DrawingT.MetadataT.SRational.Denominator"/></summary>
</member><member name="M:Tools.DrawingT.MetadataT.SRational.op_Addition(Tools.DrawingT.MetadataT.SRational,Tools.DrawingT.MetadataT.SRational)">
	<summary>Adds two <see cref="T:Tools.DrawingT.MetadataT.SRational"/>s</summary>
	<param name="a">First number to add</param>
	<param name="b">Second number to add</param>
	<returns><paramref name="a"/> + <paramref name="b"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.SRational.op_UnaryNegation(Tools.DrawingT.MetadataT.SRational)">
	<summary>Creates negative value of given <see cref="T:Tools.DrawingT.MetadataT.SRational"/></summary>
	<param name="a">Value to negativize</param>
	<returns>- <paramref name="a"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.SRational.op_Subtraction(Tools.DrawingT.MetadataT.SRational,Tools.DrawingT.MetadataT.SRational)">
	<summary>Substracts two <see cref="T:Tools.DrawingT.MetadataT.SRational"/>s</summary>
	<param name="a">Number to substract from</param>
	<param name="b">Number to be substracted</param>
	<returns><paramref name="a"/> - <paramref name="b"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.SRational.op_Multiply(Tools.DrawingT.MetadataT.SRational,Tools.DrawingT.MetadataT.SRational)">
	<summary>Multiplyes two <see cref="T:Tools.DrawingT.MetadataT.SRational"/>s</summary>
	<param name="a">First number to multiply</param>
	<param name="b">Second number to multiply</param>
	<returns><paramref name="a"/> * <paramref name="b"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.SRational.op_Division(Tools.DrawingT.MetadataT.SRational,Tools.DrawingT.MetadataT.SRational)">
	<summary>Divides one number by other</summary>
	<param name="a">Number to be divided</param>
	<param name="b">Number to divide by</param>
	<returns><paramref name="a"/> / <paramref name="b"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.SRational.op_Explicit(System.Double)~Tools.DrawingT.MetadataT.SRational">
	<summary>Converts <see cref="T:System.Double"/> to <see cref="T:Tools.DrawingT.MetadataT.SRational"/></summary>
	<param name="a">Number to be converted</param>
	<returns><see cref="T:Tools.DrawingT.MetadataT.URational"/> representation of <paramref name="a"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.SRational.op_Explicit(System.Single)~Tools.DrawingT.MetadataT.SRational">
	<summary>Converts <see cref="T:System.Single"/> to <see cref="T:Tools.DrawingT.MetadataT.URational"/></summary>
	<param name="a">Number to be converted</param>
	<returns><see cref="T:Tools.DrawingT.MetadataT.URational"/> representation of <paramref name="a"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.SRational.op_Implicit(Tools.DrawingT.MetadataT.SRational)~System.Double">
	<summary>Converts <see cref="T:Tools.DrawingT.MetadataT.URational"/> to <see cref="T:System.Double"/></summary>
	<param name="a"><see cref="T:Tools.DrawingT.MetadataT.URational"/> to be converted</param>
	<returns><see cref="T:System.Double"/> representation of <paramref name="a"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.SRational.op_Implicit(Tools.DrawingT.MetadataT.SRational)~System.String">
	<summary>Converts <see cref="T:Tools.DrawingT.MetadataT.URational"/> to <see cref="T:System.String"/></summary>
	<param name="a"><see cref="T:Tools.DrawingT.MetadataT.URational"/> to be converted</param>
	<returns><see cref="T:System.String"/> representation of <paramref name="a"/></returns>
</member><member name="M:Tools.DrawingT.MetadataT.SRational.ToString">
	<summary>String representation</summary>
</member><member name="M:Tools.DrawingT.MetadataT.SRational.op_Explicit(System.String)~Tools.DrawingT.MetadataT.SRational">
	<summary>Converts <see cref="T:System.String"/> to <see cref="T:Tools.DrawingT.MetadataT.SRational"/></summary>
	<param name="a"><see cref="T:System.String"/> to converts</param>
	<returns><see cref="T:Tools.DrawingT.MetadataT.URational"/> value represented by <paramref name="a"/></returns>
	<exception cref="T:System.InvalidCastException">When error ocures</exception>
	<remarks><paramref name="a"/> must be in format \s*-\s*?\d+\s*[/\s*-?\s*\d+\s*]</remarks>
</member><member name="T:Tools.DrawingT.MetadataT.SRational">
	<summary>Represents signed rational number with numerator and denominator as used in Exif</summary>
</member><member name="F:Tools.IOt.FileSystemEnumerator.Root">
	<summary>Folder to start enumeration with. Used to initialize the enumerator.</summary>
</member><member name="F:Tools.IOt.FileSystemEnumerator.Levels">
	<summary>Levels of recursive enumeration in file system</summary>
</member><member name="F:Tools.IOt.FileSystemEnumerator._FoldersFirst">
	<summary>Contains value of the <see cref="P:Tools.IOt.FileSystemEnumerator.FoldersFirst"/> property</summary>
</member><member name="P:Tools.IOt.FileSystemEnumerator.FoldersFirst">
	<summary>Gets value idication if folders are listed before files</summary>
</member><member name="M:Tools.IOt.FileSystemEnumerator.#ctor(System.String,System.Boolean)">
	<summary>CTor</summary>
	<param name="Root">The folder to start enumeration with. This folder is not included in list. All files and folders in it are recursivelly included.</param>
	<param name="FoldersFirst">True to enlist folders and its content before files of each current folder</param>
</member><member name="P:Tools.IOt.FileSystemEnumerator.Current">
	<summary>Gets string that represents current file or folder enumerator points to.</summary>
	<returns>String that represents full path of file or folder enumerator points to</returns>
	<exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
</member><member name="P:Tools.IOt.FileSystemEnumerator.CurrentPath">
	<summary>Gets <see cref="T:Tools.IOt.Path"/> that represents current file or folder enumerator points to.</summary>
	<returns><see cref="T:Tools.IOt.Path"/> that represents full path of file or folder enumerator points to</returns>
	<exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
</member><member name="P:Tools.IOt.FileSystemEnumerator.Current1">
	<summary>Same as <see cref="P:Tools.IOt.FileSystemEnumerator.Current"/>, but type unsafe</summary>
	<returns><see cref="P:Tools.IOt.FileSystemEnumerator.Current"/></returns>
	<exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
	<remarks>Use type-safe <see cref="P:Tools.IOt.FileSystemEnumerator.Current"/> or <see cref="P:Tools.IOt.FileSystemEnumerator.CurrentPath"/> instead</remarks>
</member><member name="P:Tools.IOt.FileSystemEnumerator.CurrentLevel">
	<summary>Gets curent level of recursion (0-based)</summary>
	<returns>Current level of recursion. -1 if enumerator is either before first or after last item.</returns>
</member><member name="F:Tools.IOt.FileSystemEnumerator._Current">
	<summary>Stores current path as string. If null, enumeration has not been initialized yer or has already finished</summary>
</member><member name="M:Tools.IOt.FileSystemEnumerator.MoveNext">
	<summary>Advances the enumerator to the next file or folder.</summary>
	<returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has alredy enumerated all the files and folders.</returns>
</member><member name="M:Tools.IOt.FileSystemEnumerator.Reset">
	<summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
	<exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
</member><member name="M:Tools.IOt.FileSystemEnumerator.GetEnumeratorForFolder(System.String)">
	<summary>Returns <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates files and folders in given directory in order depending on <see cref="P:Tools.IOt.FileSystemEnumerator.FoldersFirst"/>.</summary>
	<param name="Path">Directory to get files and folders for</param>
</member><member name="F:Tools.IOt.FileSystemEnumerator.disposedValue">
	<summary>To detect redundant calls</summary>
</member><member name="M:Tools.IOt.FileSystemEnumerator.Dispose(System.Boolean)">
	<summary>Implements <see cref="M:System.IDisposable.Dispose"/>'s logic</summary>
	<param name="disposing">Set to true by <see cref="M:Tools.IOt.FileSystemEnumerator.Dispose(System.Boolean)"/></param>
</member><member name="M:Tools.IOt.FileSystemEnumerator.Dispose">
	<summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
	<remarks>Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.</remarks>
</member><member name="T:Tools.IOt.FileSystemEnumerator">
	<summary>Enumerates through files and folders within specified folder</summary>
</member><member name="F:Tools.IOt.FilteredFileSystemEnumerator._Filter">
	<summary>Contains value of the <see cref="P:Tools.IOt.FilteredFileSystemEnumerator.Filter"/> property</summary>
</member><member name="P:Tools.IOt.FilteredFileSystemEnumerator.Filter">
	<summary>Filter function called when item is about to be included in output.</summary>
	<exception cref="T:System.ArgumentNullException">Value being set is null</exception>
	<exception cref="T:System.InvalidOperationException">Trying to set this property when it is not null</exception>
	<remarks>This property can be only set when it is null</remarks>
</member><member name="F:Tools.IOt.FilteredFileSystemEnumerator.FilterReasons.See">
	<summary>Reason is that base class is about to get known about the file or folder</summary>
	<remarks>
 If you want folder to be went through but do not want them to be enlisted, return true. Return False for all files that you want exclude from listing.
 Filter with this argument is called by <see cref="M:Tools.CollectionsT.GenericT.FilteredEnumerator`1.MoveNext"/> created as wrapper of result of <see cref="M:Tools.IOt.FileSystemEnumerator.GetEnumeratorForFolder(System.String)"/>. Items filtered by this call are skipped and it it is folder it is not entered and its content is skipped to.
 </remarks>
</member><member name="F:Tools.IOt.FilteredFileSystemEnumerator.FilterReasons.Show">
	<summary>Reason is that base class is about to make the item current item (user called <see cref="M:Tools.IOt.FilteredFileSystemEnumerator.MoveNext"/>).</summary>
	<remarks>
 There is no reason to return false for files in this situation since all files should be filtered on <see cref="F:Tools.IOt.FilteredFileSystemEnumerator.FilterReasons.See"/>.
 Return false for any folder you want to enlist content but not enlist folder itself.
 Filter with this argument is called by <see cref="M:Tools.IOt.FilteredFileSystemEnumerator.MoveNext"/> function and items that does not pass it are skipped in output. But folders are entered and their content is listed (it it pass the filter).
 </remarks>
</member><member name="T:Tools.IOt.FilteredFileSystemEnumerator.FilterReasons">
	<summary>Defines reasons for calling filter function</summary>
</member><member name="M:Tools.IOt.FilteredFileSystemEnumerator.#ctor(System.String,System.Func{System.String,Tools.IOt.FilteredFileSystemEnumerator.FilterReasons,System.Boolean},System.Boolean)">
	<summary>CTor</summary>
	<param name="Root">Folder to start enumeration with. This folder's name is not included in list.</param>
	<param name="Filter">Filter function that is called for all files and folders when they are about to be included in output list. The function must return True for items that should be included.</param>
	<param name="FoldersFirst">True if folders should be enlisted recursively before files or current folder.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Filter"/> is null</exception>
</member><member name="M:Tools.IOt.FilteredFileSystemEnumerator.#ctor(System.String,System.Boolean)">
	<summary>CTor without filter</summary>
	<param name="Root">Folder to start enumeration with. This folder's name is not included in list.</param>
	<param name="FoldersFirst">True if folders should be enlisted recursively before files or current folder.</param>
	<remarks>When using this constructor, you must set the <see cref="P:Tools.IOt.FilteredFileSystemEnumerator.Filter"/> property as soon as possible</remarks>
</member><member name="M:Tools.IOt.FilteredFileSystemEnumerator.GetEnumeratorForFolder(System.String)">
	<summary>Returns <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates files and folders in given directory in order depending on <see cref="P:Tools.IOt.FileSystemEnumerator.FoldersFirst"/>. Files and folders that does not pass filer are excluded from enumerator (excluded folders are not entered).</summary>
	<param name="Path">Directory to get files and folders for</param>
</member><member name="M:Tools.IOt.FilteredFileSystemEnumerator.MoveNext">
	<summary>Advances the enumerator to the next file or folder. Files and folders that does not pass the filer as skipped, but folders are entered.</summary>
	<returns>True if the enumerator was successfully advanced to the next element; false if the enumerator has alredy enumerated all the files and folders.</returns>
</member><member name="T:Tools.IOt.FilteredFileSystemEnumerator">
	<summary>Implements enumerator through file system with generic call-back filter</summary>
</member><member name="F:Tools.IOt.FileSystemEnumeratorWithMask.Masks">
	<summary>List of masks</summary>
</member><member name="F:Tools.IOt.FileSystemEnumeratorWithMask._FoldersListMasks">
	<summary>Contains value of the <see cref="P:Tools.IOt.FileSystemEnumeratorWithMask.FoldersListMasks"/> property</summary>
</member><member name="F:Tools.IOt.FileSystemEnumeratorWithMask._FoldersEnterMasks">
	<summary>Cont value of the <see cref="P:Tools.IOt.FileSystemEnumeratorWithMask.FoldersEnterMasks"/> property</summary>
</member><member name="P:Tools.IOt.FileSystemEnumeratorWithMask.FoldersListMasks">
	<summary>Special masks for folders to list in output</summary>
	<remarks>Default value is an empty array. So, by default folders are not listed.</remarks>
	<value>Array of masks in format used by Visual Basic Like operator (wildchars ? and *)</value>
	<exception cref="T:System.ArgumentNullException">Value beign set is null</exception>
</member><member name="P:Tools.IOt.FileSystemEnumeratorWithMask.FilesMasks">
	<summary>Gets or sets array masks used for files</summary>
	<value>Array of masks used for files. Masks are in formet used by Visual Basic Like operator (wildchars * and ?)</value>
	<returns>Array of maks. Getter can change actual instance stored in masks. Avoid using getter unless it is necessary. Inheritors can use <see cref="P:Tools.IOt.FileSystemEnumeratorWithMask.MaskForFiles"/>.</returns>
	<exception cref="T:System.ArgumentNullException">Value beign set is null</exception>
</member><member name="P:Tools.IOt.FileSystemEnumeratorWithMask.MaskForFiles">
	<summary>Returns masks for files</summary>
	<returns>Use <see cref="P:Tools.IOt.FileSystemEnumeratorWithMask.FilesMasks"/> in order to set this property</returns>
</member><member name="P:Tools.IOt.FileSystemEnumeratorWithMask.FoldersEnterMasks">
	<summary>Special masks for folders to list their content</summary>
	<value>Array of masks in format used by Visual Basic Like operator (wildchars ? and *)</value>
	<exception cref="T:System.ArgumentNullException">Value beign set is null</exception>
</member><member name="M:Tools.IOt.FileSystemEnumeratorWithMask.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
	<summary>CTor from root and masks as <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
	<param name="Root">Folder to start enumeration with. The folder itself is not included, but its content is.</param>
	<param name="Masks">List of masks for files. Each mask is in format used by Visual Basic Like operator (wildchars * and ?).</param>
	<param name="FoldersFirst"></param>
</member><member name="M:Tools.IOt.FileSystemEnumeratorWithMask.#ctor(System.String,System.String[])">
	<summary>CTor from root and array of masks</summary>
	<param name="Root">Folder to start enumeration with. The folder itself is not included, but its content is.</param>
	<param name="Masks">Array of masks for files. Each mask is in format used by Visual Basic Like operator (wildchars * and ?).</param>
</member><member name="M:Tools.IOt.FileSystemEnumeratorWithMask.#ctor(System.String,System.String,System.Boolean)">
	<summary>CTor from root and one mask</summary>
	<param name="Root">Folder to start enumeration with. The folder itself is not included, but its content is.</param>
	<param name="Mask">Mask for files. Each mask is in format used by Visual Basic Like operator (wildchars * and ?).</param>
	<param name="FoldersFirst"></param>
</member><member name="M:Tools.IOt.FileSystemEnumeratorWithMask.#ctor(System.String,System.Boolean,System.String[])">
	<summary>CTor from root, boolean for defining order of listing of folders and array of masks</summary>
	<param name="Root">Folder to start enumeration with. The folder itself is not included, but its content is.</param>
	<param name="FoldersFirst"></param>
	<param name="Masks">Array of masks for files. Each mask is in format used by Visual Basic Like operator (wildchars * and ?).</param>
</member><member name="M:Tools.IOt.FileSystemEnumeratorWithMask.#ctor(System.String,System.String,System.Char,System.Boolean)">
	<summary>CTor from root and masks in one string separated by separator</summary>
	<param name="Root">Folder to start enumeration with. The folder itself is not included, but its content is.</param>
	<param name="Masks">Masks for files separated by <paramref name="MaskSeperator"/>. Each mask is in format used by Visual Basic Like operator (wildchars * and ?).</param>
	<param name="MaskSeperator">Seperator for <see cref="T:System.String">splitting</see>
		<paramref name="Masks"/>.</param>
	<param name="FoldersFirst"></param>
</member><member name="M:Tools.IOt.FileSystemEnumeratorWithMask.Filter(System.String,Tools.IOt.FilteredFileSystemEnumerator.FilterReasons)">
	<summary>Returns if file or folder should be included in listing or if folder should be browser</summary>
	<param name="Path">File or folder</param>
	<param name="Reason">Type of filtering</param>
	<returns>True if <paramref name="Path"/> satisfies al least one mask from either <see cref="P:Tools.IOt.FileSystemEnumeratorWithMask.FoldersEnterMasks"/>, <see cref="P:Tools.IOt.FileSystemEnumeratorWithMask.FoldersListMasks"/> or <see cref="P:Tools.IOt.FileSystemEnumeratorWithMask.MaskForFiles"/> depending on <paramref name="Reason"/></returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">This implementation throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> when <paramref name="Path"/> represents folder and <paramref name="Reason"/> is not one of <see cref="T:Tools.IOt.FilteredFileSystemEnumerator.FilterReasons"/> members.</exception>
</member><member name="T:Tools.IOt.FileSystemEnumeratorWithMask">
	<summary>Recursive enumerator of files and folder filtered by masks</summary>
	<remarks>Allows to list only files of all folders. Filter separatelly files, folders to be listed and folders to be browsed.</remarks>
</member><member name="M:Tools.LinqT.EnumerableT.UnionAll``1(System.Collections.Generic.IEnumerable{``0}[])">
	<summary>Creates union of all given collections</summary>
	<param name="collections">Collections to create union of</param>
	<typeparam name="T">Type of items in collection(s)</typeparam>
	<returns>Collection that contains members of all collections in <paramref name="collections"/>. If <paramref name="collections"/> is null returns an emlty collection.</returns>
</member><member name="M:Tools.LinqT.EnumerableT.UnionAll``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
	<summary>Creates union of all given collections</summary>
	<param name="collections">Collections to create union of</param>
	<typeparam name="T">Type of items in collection(s)</typeparam>
	<returns>Collection that contains members of all collections in <paramref name="collections"/>. If <paramref name="collections"/> is null returns an emlty collection.</returns>
</member><member name="M:Tools.LinqT.EnumerableT.UnionAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
	<summary>Creates union of given collection with other given collections</summary>
	<param name="collection">Firts collection for union</param>
	<param name="OtherCollections">Other collections for union</param>
	<typeparam name="T">Type of mmber in collection(s)</typeparam>
	<returns>Collection that contains members of <paramref name="collection"/> as well as of all items in <paramref name="OtherCollections"/>.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null</exception>
</member><member name="M:Tools.LinqT.EnumerableT.UnionAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
	<summary>Creates union of given collection with other given collections</summary>
	<param name="collection">Firts collection for union</param>
	<param name="OtherCollections">Other collections for union</param>
	<typeparam name="T">Type of mmber in collection(s)</typeparam>
	<returns>Collection that contains members of <paramref name="collection"/> as well as of all items in <paramref name="OtherCollections"/>.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null</exception>
</member><member name="M:Tools.LinqT.EnumerableT.IsEmpty(System.Collections.IEnumerable)">
	<summary>Gets value indicating if given collection is empty</summary>
	<param name="collection">Collection to check emptyness of</param>
	<returns>True if first element of collection cannot be enumerated using <paramref name="collection"/>.<see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">GetEnumerator</see>.<see cref="M:System.Collections.IEnumerator.MoveNext">MoveNext</see>.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null</exception>
</member><member name="T:Tools.LinqT.EnumerableT">
	<summary>Tools for working with <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
</member><member name="M:Tools.VisualBasicT.Interaction.iif``1(System.Boolean,``0,``0)">
	<summary>Returns one of two objects, depending on the evaluation of an expression.</summary>
	<param name="Expression">The expression you want to evaluate.</param>
	<param name="FalsePart">Returned if <paramref name="Expression">Expression</paramref> evaluates to False.</param>
	<param name="TruePart">Returned if <paramref name="Expression">Expression</paramref> evaluates to True.</param>
	<returns>Returns one of two objects, depending on the evaluation of an <paramref name="Expression"/>.</returns>
	<typeparam name="T">The type of object to return.</typeparam>
</member><member name="M:Tools.VisualBasicT.Interaction.IfNull``1(``0,``0)">
	<summary>Returns item or ist alternative item depending on if item has meaningful value</summary>
	<param name="value">Item to be returned if has meaningful value</param>
	<param name="alternative">Alternative (fallback) item to be returned if <paramref name="value"/> has no meaningful value</param>
	<returns><paramref name="value"/> if it is not null, <paramref name="alternative"/> otherwise</returns>
	<typeparam name="T">Type of item</typeparam>
</member><member name="M:Tools.VisualBasicT.Interaction.IfNull(System.String,System.String)">
	<summary>Returns item or ist alternative item depending on if item has meaningful value</summary>
	<param name="value">Item to be returned if has meaningful value</param>
	<param name="alternative">Alternative (fallback) item to be returned if <paramref name="value"/> has no meaningful value</param>
	<returns><paramref name="value"/> if it is not null and is not an empty <see cref="T:System.String"/>, <paramref name="alternative"/> otherwise</returns>
</member><member name="M:Tools.VisualBasicT.Interaction.IfNull``1(System.Nullable{``0},``0)">
	<summary>Returns item or ist alternative item depending on if item has meaningful value</summary>
	<typeparam name="T">Type of structure contained in <paramref name="value"/> and to be returned</typeparam>
	<param name="value">Item to be returned if has meaningful value</param>
	<param name="alternative">Alternative (fallback) item to be returned if <paramref name="value"/> has no meaningful value</param>
	<returns><paramref name="value"/> if it's <see cref="P:System.Nullable`1.HasValue"/> is true, <paramref name="alternative"/> otherwise</returns>
</member><member name="M:Tools.VisualBasicT.Interaction.IfNull``1(System.Object,``0)">
	<summary>Returns item or ist alternative item depending on if item has meaningful value</summary>
	<typeparam name="T">Type of value to be returned</typeparam>
	<param name="value">Item to be returned if has meaningful value</param>
	<param name="alternative">Alternative (fallback) item to be returned if <paramref name="value"/> has no meaningful value</param>
	<returns><paramref name="value"/> if it is not nothing and is not <see cref="T:System.DBNull"/>, <paramref name="alternative"/> otherwise</returns>
	<exception cref="T:System.InvalidCastException">Casting from <paramref name="value"/> to <paramref name="T"/> failed</exception>
</member><member name="F:Tools.VisualBasicT.Interaction.Null">
	<summary>If you like to use 'Null' instead of 'Nothing' in Visual Basic you can</summary>
</member><member name="F:Tools.VisualBasicT.Interaction.Nothing">
	<summary>If you like to use 'Nothing' instead of 'Null' outside Visual Basic you can</summary>
</member><member name="T:Tools.VisualBasicT.Interaction">
	<summary>The Interaction module contains procedures used to interact with objects, applications, and systems.</summary>
</member><member name="T:Tools.WindowsT.FormsT.MultiLineTextBoxWithStatus">
	<summary>Note: This control will be removed and replaced with attachable implementation of <see cref="T:Tools.WindowsT.FormsT.StatusMarker"/></summary>
</member><member name="M:Tools.WindowsT.FormsT.AboutDialog.ShowModalDialog(System.Windows.Forms.IWin32Window)">
	<summary>Displays a modal dialog</summary>
	<param name="owner">Window, dialog will be modal to, or null</param>
	<returns>Result of dialog. <see cref="F:System.Windows.Forms.DialogResult.OK"/> when user clicked on OK button, pressed Enter or Escape; <see cref="F:System.Windows.Forms.DialogResult.Cancel"/> when window was closed another way (e.g. the close (X) button in top right corner)</returns>
</member><member name="T:Tools.WindowsT.FormsT.AboutDialog">
	<summary>Represents about dialog for application</summary>
	<remarks>You can use it as is or derive it</remarks>
</member><member name="F:Tools.ComponentModelT.RestrictAttribute._Restrict">
	<summary>Contains value of the <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> property</summary>
</member><member name="M:Tools.ComponentModelT.RestrictAttribute.#ctor(System.Boolean)">
	<summary>CTor</summary>
	<param name="Restrict">State of restriction</param>
</member><member name="P:Tools.ComponentModelT.RestrictAttribute.Restrict">
	<summary>Inidicates if values should be restricted to enum members</summary>
</member><member name="T:Tools.ComponentModelT.RestrictAttribute">
	<summary>Indicates if enum may allow values that are not member of it or not</summary>
	<remarks>Tools that use this attribute should treat enums with no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> as restricted (<see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> is True)</remarks>
</member><member name="M:Tools.ExtensionsT.String.IsNullOrEmpry(System.String)">
	<summary>Indicates whether the specified <see cref="T:System.String"/> object is null or an <see cref="F:System.String.Empty"/> string.</summary>
	<param name="s">A <see cref="T:System.String"/> reference.</param>
	<returns>true if the value parameter is null or an empty string (""); otherwise, false.</returns>
	<seealso cref="M:System.String.IsNullOrEmpty(System.String)"/>
</member><member name="M:Tools.ExtensionsT.String.Format(System.String,System.Object[])">
	<summary>Replaces the format item in a specified <see cref="T:System.String"/> with the text equivalent of the value of a corresponding <see cref="T:System.Object"/> instance in a specified array. A specified parameter supplies culture-specific formatting information.</summary>
	<param name="s">A composite format string.</param>
	<param name="args">An <see cref="T:System.Object"/> array containing zero or more objects to format.</param>
	<returns>A copy of format in which the format items have been replaced by the <see cref="T:System.String"/> equivalent of the corresponding instances of <see cref="T:System.Object"/> in args.</returns>
	<exception cref="T:System.ArgumentNullException">format or args is null.</exception>
	<exception cref="T:System.FormatException"><paramref name="s"/> is invalid composite format string.-or- The number indicating an argument to format is less than zero, or greater than or equal to the length of the args array.</exception>
	<seealso cref="M:System.String.Format(System.String,System.Object)"/>
</member><member name="M:Tools.ExtensionsT.String.Join(System.String[],System.String)">
	<summary>Concatenates a specified separator <see cref="T:System.String"/> between each element of a specified <see cref="T:System.String"/> array, yielding a single concatenated string.</summary>
	<param name="separator">A <see cref="T:System.String"/> to separate items with.</param>
	<param name="strarr">An array of <see cref="T:System.String"/>.</param>
	<returns>A <see cref="T:System.String"/> consisting of the elements of value interspersed with the separator string.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="strarr"/> is null.</exception>
	<seealso cref="M:System.String.Join(System.String,System.String[])"/>
</member><member name="M:Tools.ExtensionsT.String.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
	<summary>Concatenates a specified separator <see cref="T:System.String"/> between each element of a specified <see cref="T:System.String"/> array, yielding a single concatenated string.</summary>
	<param name="separator">A <see cref="T:System.String"/> to separate items with.</param>
	<param name="strs">A collection of <see cref="T:System.String"/>.</param>
	<returns>A <see cref="T:System.String"/> consisting of the elements of value interspersed with the separator string.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="strs"/> is null.</exception>
</member><member name="T:Tools.ExtensionsT.String">
	<summary>Contains extension methods for working with <see cref="T:System.String"/></summary>
</member><member name="M:Tools.TypeMismatchException.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.TypeMismatchException.#ctor(System.String)">
	<summary>Initializes a new instance of the <see cref="T:Tools.TypeMismatchException"/> class with a specified error message.</summary>   ''' <param name="message">The error message that explains the reason for the exception.</param>
</member><member name="M:Tools.TypeMismatchException.#ctor(System.String,System.Object)">
	<summary>Initializes new instance of the <see cref="T:Tools.TypeMismatchException"/> class with message and actual unacceptable value.</summary>
	<param name="Message">The error message that explains the reason for the exception.</param>
	<param name="ActualValue">Value of argument which caused the exception to be thrown</param>
</member><member name="M:Tools.TypeMismatchException.#ctor(System.String,System.Exception)">
	<summary>Initializes a new instance of the <see cref="T:Tools.TypeMismatchException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
	<param name="Message">The error message that explains the reason for the exception.</param>
	<param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
</member><member name="M:Tools.TypeMismatchException.#ctor(System.String,System.Object,System.Type,System.String,System.Exception)">
	<summary>Initializes a new instance of <see cref="T:Tools.TypeMismatchException"/> class with message, name of parameter, actual value, expected type and optionally reference to the inner exception that is cause of thios exception.</summary>
	<param name="ParamName">Name of method argument that cased the exception to be thrown - that violated type constraint.</param>
	<param name="ActualValue">Value of argument which caused the exception to be thrown</param>
	<param name="ExpectedType">Type which is acceptable</param>
	<param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
	<param name="Message">The error message that explains the reason for the exception.</param>
</member><member name="M:Tools.TypeMismatchException.#ctor(System.String,System.Object,System.Type,System.Exception)">
	<summary>Initializes a new instance of <see cref="T:Tools.TypeMismatchException"/> class with name of parameter, actual value, expected type and optionally reference to the inner exception that is cause of thios exception.</summary>
	<param name="ParamName">Name of method argument that cased the exception to be thrown - that violated type constraint.</param>
	<param name="ActualValue">Value of argument which caused the exception to be thrown</param>
	<param name="ExpectedType">Type which is acceptable</param>
	<param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
</member><member name="M:Tools.TypeMismatchException.#ctor(System.Object,System.Type,System.String,System.Exception)">
	<summary>Initializes a new instance of <see cref="T:Tools.TypeMismatchException"/> class with message, name of parameter, actual value, expected type and optionally reference to the inner exception that is cause of thios exception.</summary>
	<param name="ActualValue">Value of argument which caused the exception to be thrown</param>
	<param name="ExpectedType">Type which is acceptable</param>
	<param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
	<param name="Message">The error message that explains the reason for the exception.</param>
</member><member name="M:Tools.TypeMismatchException.#ctor(System.Object,System.Type,System.Exception)">
	<summary>Initializes a new instance of <see cref="T:Tools.TypeMismatchException"/> class with name of parameter, actual value, expected type and optionally reference to the inner exception that is cause of thios exception.</summary>
	<param name="ActualValue">Value of argument which caused the exception to be thrown</param>
	<param name="ExpectedType">Type which is acceptable</param>
	<param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
</member><member name="M:Tools.TypeMismatchException.CreateMessage(System.Object,System.Type)">
	<summary>Create exception message from actual argument value and expected type</summary>
	<param name="ActualValue">Value of argument which caused the exception to be thrown</param>
	<param name="ExpectedType">Type which is acceptable</param>
	<returns>Exception message</returns>
	<remarks>Either of both arguments can be null and appropriate message will be created</remarks>
</member><member name="F:Tools.TypeMismatchException._ActualValue">
	<summary>Contains value of the <see cref="P:Tools.TypeMismatchException.ActualValue"/> property</summary>
</member><member name="P:Tools.TypeMismatchException.ActualValue">
	<summary>Value that was passed</summary>
</member><member name="F:Tools.TypeMismatchException._ExpectedType">
	<summary>Contains value of the <see cref="P:Tools.TypeMismatchException.ExpectedType"/> property</summary>
</member><member name="P:Tools.TypeMismatchException.ExpectedType">
	<summary>Type of value being expected</summary>
</member><member name="T:Tools.TypeMismatchException">
	<summary>Exception thrown when value of some type is passes where the type is not acceptable</summary>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.Dispose(System.Boolean)">
	<summary>Form overrides dispose to clean up the component list.</summary>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.CommonDisposeActions">
	<summary>Common actions taken when form is closed or disposed</summary>
</member><member name="F:Tools.WindowsT.FormsT.MessageBoxForm._MessageBox">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox">
	<summary>Gets <see cref="T:Tools.WindowsT.FormsT.MessageBox"/> this forms is GUI for</summary>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.#ctor(Tools.WindowsT.FormsT.MessageBox)">
	<summary>CTor</summary>
	<param name="MessageBox"><see cref="T:Tools.WindowsT.FormsT.MessageBox"/> to initialize this form by</param>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.ApplyOptions">
	<summary>Applies <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox"/>.<see cref="P:Tools.WindowsT.IndependentT.MessageBox.Options">Options</see></summary>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.Initialize">
	<summary>Initializes tis form by <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox"/>, called from CTor</summary>
</member><member name="F:Tools.WindowsT.FormsT.MessageBoxForm.BottomControl">
	<summary>Additional control on messagebox below buttons</summary>
</member><member name="F:Tools.WindowsT.FormsT.MessageBoxForm.TopControl">
	<summary>Additional control on messagebox abow prompt</summary>
</member><member name="F:Tools.WindowsT.FormsT.MessageBoxForm.MidControl">
	<summary>Additional control on messagebox abow buttons</summary>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.AttachComboBoxHandlers(Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox,System.Boolean)">
	<summary>Attachs or detachs handlers for <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox"/></summary>
	<param name="ComboBox"><see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox"/> to attach handlers to</param>
	<param name="attach">True to attach, false so detach</param>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.AttachCheckBoxHandlers(Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox,System.Boolean)">
	<summary>Attachs or detachs handlers for <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/></summary>
	<param name="CheckBox"><see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/> to attach handlers to</param>
	<param name="attach">True to attach, false so detach</param>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.AttachButtonHandlers(Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton,System.Boolean)">
	<summary>Attachs or detachs handlers for <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/></summary>
	<param name="Button"><see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/> to attach handlers to</param>
	<param name="attach">True to attach, false so detach</param>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.AttachRadioHandlers(Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton,System.Boolean)">
	<summary>Attachs or detachs handlers for <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/></summary>
	<param name="Radio"><see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> to attach handlers to</param>
	<param name="attach">True to attach, false so detach</param>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.AttachMessageBoxHandlers(System.Boolean)">
	<summary>Attachs or tetachs handlers for <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox"/></summary>
	<param name="attach">True (default) to attach, false to detach</param>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.ApplyComboBox">
	<summary>Applyes the <see cref="T:System.Windows.Forms.ComboBox"/> onto <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.cmbCombo"/></summary>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.CreateCheckBox(Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox)">
	<summary>Creates <see cref="T:System.Windows.Forms.CheckBox"/> from given <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/></summary>
	<param name="Chk">A <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/> to create <see cref="T:System.Windows.Forms.CheckBox"/> from</param>
	<returns><see cref="T:System.Windows.Forms.CheckBox"/> initiated by <paramref name="Chk"/></returns>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.CreateButton(Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton)">
	<summary>Creates <see cref="T:System.Windows.Forms.Button"/> from <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/></summary>
	<param name="Button"><see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/> to initialize new <see cref="T:System.Windows.Forms.Button"/> with</param>
	<returns>Newly created <see cref="T:System.Windows.Forms.Button"/> with attached <see cref="E:System.Windows.Forms.Control.Click"/> event to <see cref="M:Tools.WindowsT.FormsT.MessageBoxForm.Button_Click(System.Windows.Forms.Button,System.EventArgs)"/></returns>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.CreateRadio(Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton)">
	<summary>Creates <see cref="T:System.Windows.Forms.RadioButton"/> from <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/></summary>
	<param name="Radio"><see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> to initialize new <see cref="T:System.Windows.Forms.RadioButton"/> with</param>
	<returns>New created <see cref="T:System.Windows.Forms.RadioButton"/> with attached <see cref="E:System.Windows.Forms.RadioButton.CheckedChanged"/> event to <see cref="M:Tools.WindowsT.FormsT.MessageBoxForm.Radio_CheckedChanged(Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton,Tools.IReportsChange.ValueChangedEventArgs{System.Boolean})"/></returns>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.Radio_CheckedChanged(Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton,Tools.IReportsChange.ValueChangedEventArgs{System.Boolean})">
	<summary>Handles the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.CheckedChanged">CheckedChanged</see> event of items of the <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox">MessageBox</see>.<see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios">Radios</see> collection</summary>
	<param name="sender">Source of the event</param>
	<param name="e">Event parameters</param>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.Radio_CheckedChanged(System.Windows.Forms.RadioButton,System.EventArgs)">
	<summary>Hanles the <see cref="E:System.Windows.Forms.RadioButton.CheckedChanged"/> event of radio buttons</summary>
	<param name="sender">Source of the event</param>
	<param name="e">Event parameters</param>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.ComboBox_ItemsChanged(Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox,Tools.CollectionsT.GenericT.ListWithEvents{System.Object}.ListChangedEventArgs)">
	<exception cref="T:System.InvalidOperationException"><paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action">Action</see> is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/>.</exception>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox_CheckBoxesChanged(Tools.WindowsT.FormsT.MessageBox,Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox}.ListChangedEventArgs)">
	<exception cref="T:System.InvalidOperationException"><paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action">Action</see> is <see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Other"/> or is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/>.</exception>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox_RadiosChanged(Tools.WindowsT.FormsT.MessageBox,Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton}.ListChangedEventArgs)">
	<exception cref="T:System.InvalidOperationException"><paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action">Action</see> is <see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Other"/> or is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/>.</exception>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox_ButtonsChanged(Tools.WindowsT.FormsT.MessageBox,Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton}.ListChangedEventArgs)">
	<exception cref="T:System.InvalidOperationException"><paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action">Action</see> is <see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Other"/> or is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/>.</exception>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.PerformButtonRemoval(Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton)">
	<summary>Performs actions needed when button is about to be removed. Does not remove button from <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.flpButtons"/>.</summary>
	<param name="Button">Button to be removed</param>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.PerformRadioRemoval(Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton)">
	<summary>Performs actions needed when radio button is about to be removed. Does not remove radio button from <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.flpRadio"/>.</summary>
	<param name="Button"><see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> to be removed</param>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.PerformCheckBoxRemoval(Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox)">
	<summary>Performs actions needed when check box is about to be removed. Does not remove radio button from <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.flpChecks"/>.</summary>
	<param name="mChk"><see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/> to be removed</param>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.EnsureCancelButton">
	<summary>Ensures that <see cref="P:System.Windows.Forms.Form.CancelButton"/> is set to button with <see cref="P:System.Windows.Forms.Button.DialogResult">DialogResult</see> same as <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox">MessageBox</see>.<see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse">CloseResponse</see> or to null if appropriate button does not exist</summary>
</member><member name="M:Tools.WindowsT.FormsT.MessageBoxForm.Close">
	<summary>Force closes the form</summary>
</member><member name="F:Tools.WindowsT.FormsT.MessageBoxForm.AllowClose">
	<summary>When true <see cref="M:Tools.WindowsT.FormsT.MessageBoxForm.MessageBoxForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)"/> allows form to be closed on whatever reason without any action (use for programatic closes)</summary>
</member><member name="T:Tools.WindowsT.FormsT.MessageBoxForm">
	<summary>Implements GUI (form) for <see cref="T:Tools.WindowsT.FormsT.MessageBox"/></summary>
	<remarks>
		<para>This class implements <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> in fully dynamic way. You can change all it's properties and all properties of its controls and those change are immediatelly displayed to user.</para>
 If you are passing some very custom implementation of <see cref="T:Tools.WindowsT.FormsT.MessageBox"/> to this form, you must ensure that :
 <list type="list">
			<item>Argument e of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/>.<see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items">Items</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged"/> event has always <see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action">Action</see> which is member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/>.</item>
			<item>Argument e of the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.ButtonsChanged"/> and <see cref="E:Tools.WindowsT.IndependentT.MessageBox.RadiosChanged"/> events has always <see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action">Action</see> which is member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/> and is not <see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Other"/>.</item>
		</list>
 Violating these rules can lead to uncatchable <see cref="T:System.InvalidOperationException"/> being thrown when event occurs.
 </remarks>
</member><member name="M:Tools.WindowsT.FormsT.MessageBox.Dispose(System.Boolean)">
	<summary>Releases all resources used by the <see cref="T:System.ComponentModel.Component"/>.</summary>
	<param name="disposing"> true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
</member><member name="M:Tools.WindowsT.FormsT.MessageBox.Close(System.Windows.Forms.DialogResult)">
	<summary>If overriden in derived class closes the message box with given response</summary>
	<param name="Response">Response returned by the <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(Tools.WindowsT.IndependentT.MessageBox,Tools.WindowsT.IndependentT.MessageBox,System.Windows.Forms.IWin32Window)"/> function</param>
</member><member name="F:Tools.WindowsT.FormsT.MessageBox._Form">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.MessageBox.Form"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.MessageBox.Form">
	<summary>Gets or sets instance of <see cref="T:Tools.WindowsT.FormsT.MessageBoxForm"/> that currently shows the message box</summary>
	<value>This property should be set only from overriden <see cref="M:Tools.WindowsT.FormsT.MessageBox.PerformDialog(System.Boolean,System.Windows.Forms.IWin32Window)"/> when it does not calls base class method</value>
</member><member name="M:Tools.WindowsT.FormsT.MessageBox.PerformDialog(System.Boolean,System.Windows.Forms.IWin32Window)">
	<summary>Shows the dialog</summary>
	<param name="Modal">Indicates if dialog should be shown modally (true) or modells (false)</param>
	<param name="Owner">Parent window of dialog (may be null)</param>
	<remarks>Note for inheritors: If you override thie method and do not call base class method, you must set value of the <see cref="P:Tools.WindowsT.FormsT.MessageBox.Form"/> property</remarks>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is not <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Created"/></exception>
</member><member name="P:Tools.WindowsT.FormsT.MessageBox.TopControlControl">
	<summary>gets <see cref="T:System.Windows.Forms.Control"/> representation of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/> if possible</summary>
	<returns><see cref="T:System.Windows.Forms.Control"/> which represents <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/> if possible, null otherwise</returns>
	<seealso cref="M:Tools.WindowsT.FormsT.MessageBox.GetControl(System.Object)"/><seealso cref="P:Tools.WindowsT.FormsT.MessageBox.MidControlControl"/><seealso cref="P:Tools.WindowsT.FormsT.MessageBox.BottomControlControl"/>
	<seealso cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/>
</member><member name="P:Tools.WindowsT.FormsT.MessageBox.MidControlControl">
	<summary>Gets <see cref="T:System.Windows.Forms.Control"/> representation of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MidControl"/> if possible</summary>
	<returns><see cref="T:System.Windows.Forms.Control"/> which represents <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MidControl"/> if possible, null otherwise</returns>
	<seealso cref="M:Tools.WindowsT.FormsT.MessageBox.GetControl(System.Object)"/><seealso cref="P:Tools.WindowsT.FormsT.MessageBox.TopControlControl"/><seealso cref="P:Tools.WindowsT.FormsT.MessageBox.BottomControlControl"/>
	<seealso cref="P:Tools.WindowsT.IndependentT.MessageBox.MidControl"/>
</member><member name="P:Tools.WindowsT.FormsT.MessageBox.BottomControlControl">
	<summary>Gets <see cref="T:System.Windows.Forms.Control"/> representation of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl"/> if possible</summary>
	<returns><see cref="T:System.Windows.Forms.Control"/> which represents <see cref="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl"/> if possible, null otherwise</returns>
	<seealso cref="M:Tools.WindowsT.FormsT.MessageBox.GetControl(System.Object)"/><seealso cref="P:Tools.WindowsT.FormsT.MessageBox.TopControlControl"/><seealso cref="P:Tools.WindowsT.FormsT.MessageBox.MidControlControl"/>
	<seealso cref="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl"/>
</member><member name="M:Tools.WindowsT.FormsT.MessageBox.GetControl(System.Object)">
	<summary>Gets control from object</summary>
	<param name="Control">Object that represents a control. It can be <see cref="T:System.Windows.Forms.Control"/>, <see cref="T:System.Windows.UIElement"/></param>
	<returns><see cref="T:System.Windows.Forms.Control"/> which represents <paramref name="Control"/>. For same <paramref name="Control"/> returns same <see cref="T:System.Windows.Forms.Control"/>. Returns null if <paramref name="Control"/> is null or it is of unsupported type.</returns>
</member><member name="M:Tools.WindowsT.FormsT.MessageBox.RecycleInternal">
	<summary>Performs all operations needed to switch <see cref="T:Tools.WindowsT.FormsT.MessageBox"/> form <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/>
		<see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed"/> to <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Created"/></summary>
	<remarks>Called by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Recycle"/>.
 <para>Note to inheritors: Always call base-class method <see cref="M:Tools.WindowsT.FormsT.MessageBox.RecycleInternal"/>.</para></remarks>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is not <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed"/>. This exception never occures in this implementation because <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Recycle"/> ensures that <see cref="M:Tools.WindowsT.FormsT.MessageBox.RecycleInternal"/> is caled only when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed"/>.</exception>
</member><member name="T:Tools.WindowsT.FormsT.MessageBox">
	<summary>Implements <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> for as <see cref="T:System.Windows.Forms.Form"/></summary>
	<remarks>The <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> is implemented with following notes:
 <list>
			<item><see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignJustify"/> is not supported, <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignLeft"/> is used instead.</item>
		</list>
	</remarks>
</member><member name="F:Tools.CollectionsT.GenericT.Wrapper`1._Wrapped">
	<summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.Wrapper`1.Wrapped"/> property</summary>
</member><member name="M:Tools.CollectionsT.GenericT.Wrapper`1.#ctor(System.Collections.IEnumerable)">
	<summary>CTor</summary>
	<param name="WrapThis">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="WrapThis"/> is null</exception>
</member><member name="P:Tools.CollectionsT.GenericT.Wrapper`1.Wrapped">
	<summary>Wrapped value</summary>
	<exception cref="T:System.ArgumentNullException">Setting value to null</exception>
	<remarks>Changing this value doesn't invalidate enumerators, so enumerations continues although the content of wrapper has changed</remarks>
</member><member name="M:Tools.CollectionsT.GenericT.Wrapper`1.GetEnumerator">
	<summary>Returns an enumerator that iterates through the collection.</summary>
	<returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
</member><member name="M:Tools.CollectionsT.GenericT.Wrapper`1.GetEnumerator1">
	<summary>Returns an enumerator that iterates through a collection.</summary>
	<returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection</returns>
</member><member name="F:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator.Wrap">
	<summary>type-unsafe <see cref="T:System.Collections.IEnumerator"/> to be wrapped</summary>
</member><member name="M:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator.#ctor(System.Collections.IEnumerator)">
	<summary>CTor</summary>
	<param name="Wrap">type-unsafe <see cref="T:System.Collections.IEnumerator"/> to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Wrap"/> is null</exception>
</member><member name="P:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator.Current">
	<summary>Gets the element in the collection at the current position of the enumerator.</summary>
	<returns>The element in the collection at the current position of the enumerator.</returns>
	<exception cref="T:System.InvalidCastException">Current value from collection cannot be converted to <see cref="T"/>. Also another exception can be throw if thrown by cast operator.</exception>
</member><member name="P:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator.Current1">
	<summary>Gets the current element in the collection.</summary>
	<returns>The current element in the collection.</returns>
	<exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator.MoveNext">
	<summary>Advances the enumerator to the next element of the collection.</summary>
	<returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
	<exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator.Reset">
	<summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
	<exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created</exception>
</member><member name="F:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator.disposedValue">
	<summary>To detect redundant calls</summary>
</member><member name="M:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator.Dispose(System.Boolean)">
	<summary><see cref="T:System.IDisposable"/></summary>
</member><member name="M:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator.Dispose">
	<summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
	<remarks>This code added by Visual Basic to correctly implement the disposable pattern.</remarks>
</member><member name="T:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator">
	<summary>Wraps type-unsafe <see cref="T:System.Collections.IEnumerator"/> as type-safe <see cref="T:System.Collections.Generic.IEnumerator`1"/></summary>
</member><member name="T:Tools.CollectionsT.GenericT.Wrapper`1">
	<summary>Wpars type-unsafe <see cref="T:System.Collections.IEnumerable"/> as type-safe <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
	<typeparam name="T">Type that each item of wrapped collection must be of or convertible to</typeparam>
</member><member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.#ctor(System.Collections.IList)">
	<summary>CTor</summary>
	<param name="List">Item to be wrapped</param>
</member><member name="P:Tools.CollectionsT.GenericT.ListWrapper`1.List">
	<summary>Wrapped list</summary>
</member><member name="P:Tools.CollectionsT.GenericT.ListWrapper`1.Wrapped">
	<summary>Wrapped value</summary>
	<exception cref="T:System.ArgumentNullException">Setting value to null</exception>
	<remarks>Changing this value doesn't invalidate enumerators, so enumerations continues although the content of wrapper has changed</remarks>
	<exception cref="T:System.ArgumentException">Value being set does not implement <see cref="T:System.Collections.IList"/></exception>
</member><member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.Add(`0)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
	<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.Clear">
	<summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</summary>
	<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
</member><member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.Contains(`0)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.</summary>
	<returns>true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
</member><member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.CopyTo(`0[],System.Int32)">
	<summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
	<param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
	<param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
	<exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-arrayIndex is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
	<exception cref="T:System.InvalidCastException"><see cref="P:Tools.CollectionsT.GenericT.ListWrapper`1.List"/> contains item that cannot be automatically cast to <see cref="T"/></exception>
</member><member name="P:Tools.CollectionsT.GenericT.ListWrapper`1.Count">
	<summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</summary>
	<returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
</member><member name="P:Tools.CollectionsT.GenericT.ListWrapper`1.IsReadOnly">
	<summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</summary>
	<returns><see cref="P:Tools.CollectionsT.GenericT.ListWrapper`1.List">List</see>.<see cref="P:System.Collections.IList.IsReadOnly">IsReadOnly</see></returns>
</member><member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.Remove(`0)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</summary>
	<returns>true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
	<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.IndexOf(`0)">
	<summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.</summary>
	<returns>The index of item if found in the list; otherwise, -1.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
</member><member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.Insert(System.Int32,`0)">
	<summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.</summary>
	<param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
	<param name="index">The zero-based index at which item should be inserted.</param>
	<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
	<exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
</member><member name="P:Tools.CollectionsT.GenericT.ListWrapper`1.Item(System.Int32)">
	<summary>Gets or sets the element at the specified index.</summary>
	<returns>The element at the specified index.</returns>
	<param name="index">The zero-based index of the element to get or set.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
	<exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.RemoveAt(System.Int32)">
	<summary>Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.</summary>
	<param name="index">The zero-based index of the item to remove.</param>
	<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
</member><member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.CopyTo(System.Array,System.Int32)">
	<summary>Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
	<param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
	<param name="index">The zero-based index in array at which copying begins. </param>
	<exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null. </exception>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero. </exception>
	<exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or- <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>. </exception>
	<exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination <paramref name="array"/>. </exception>
	<remarks>This method is provided only for compatibility with <see cref="T:System.Collections.IList"/>. Use type-safe <see cref="M:Tools.CollectionsT.GenericT.ListWrapper`1.CopyTo(`0[],System.Int32)"/> instead</remarks>
</member><member name="P:Tools.CollectionsT.GenericT.ListWrapper`1.IsSynchronized">
	<summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).</summary>
	<returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
</member><member name="P:Tools.CollectionsT.GenericT.ListWrapper`1.SyncRoot">
	<summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</summary>
	<returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
</member><member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.Add(System.Object)">
	<summary>Adds an item to the <see cref="T:System.Collections.IList"></see>.</summary>
	<returns>The position into which the new element was inserted.</returns>
	<param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>. </param>
	<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
	<remarks>This function is provided only for compatibility with <see cref="T:System.Collections.IList"/>. Use type-safe <see cref="M:Tools.CollectionsT.GenericT.ListWrapper`1.Add(`0)"/> instead</remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.Contains(System.Object)">
	<summary>Determines whether the <see cref="T:System.Collections.IList"></see> contains a specific value.</summary>
	<returns>true if the <see cref="T:System.Object"></see> is found in the <see cref="T:System.Collections.IList"></see>; otherwise, false.</returns>
	<param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>. </param>
	<remarks>This function is provided only for compatibility with <see cref="T:System.Collections.IList"/>. Use type-safe <see cref="M:Tools.CollectionsT.GenericT.ListWrapper`1.Contains(`0)"/> instead</remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.IndexOf(System.Object)">
	<summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList"></see>.</summary>
	<returns>The index of value if found in the list; otherwise, -1.</returns>
	<param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>. </param>
	<remarks>This function is provided only for compatibility with <see cref="T:System.Collections.IList"/>. Use type-safe <see cref="M:Tools.CollectionsT.GenericT.ListWrapper`1.IndexOf(`0)"/> instead</remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.Insert(System.Int32,System.Object)">
	<summary>Inserts an item to the <see cref="T:System.Collections.IList"></see> at the specified index.</summary>
	<param name="value">The <see cref="T:System.Object"></see> to insert into the <see cref="T:System.Collections.IList"></see>. </param>
	<param name="index">The zero-based index at which value should be inserted. </param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
	<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
	<exception cref="T:System.NullReferenceException">value is null reference in the <see cref="T:System.Collections.IList"></see>.</exception>
	<remarks>This function is provided only for compatibility with <see cref="T:System.Collections.IList"/>. Use type-safe <see cref="M:Tools.CollectionsT.GenericT.ListWrapper`1.Insert(System.Int32,`0)"/> instead. This method allows you to insert item of othert type than <see cref="T"/></remarks>
</member><member name="P:Tools.CollectionsT.GenericT.ListWrapper`1.IsFixedSize">
	<summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> has a fixed size.</summary>
	<returns>true if the <see cref="T:System.Collections.IList"></see> has a fixed size; otherwise, false.</returns>
</member><member name="P:Tools.CollectionsT.GenericT.ListWrapper`1.UnsafeItem(System.Int32)">
	<summary>Gets or sets the element at the specified index.</summary>
	<returns>The element at the specified index.</returns>
	<param name="index">The zero-based index of the element to get or set. </param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
	<exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList"></see> is read-only. </exception>
	<remarks>This function is provided only for compatibility with <see cref="T:System.Collections.IList"/>. Use type-safe <see cref="P:Tools.CollectionsT.GenericT.ListWrapper`1.Item(System.Int32)"/> instead. This property allows you to set item that is not of type <see cref="T"/></remarks>
</member><member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.Remove(System.Object)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"></see>.</summary>
	<param name="value">The <see cref="T:System.Object"></see> to remove from the <see cref="T:System.Collections.IList"></see>. </param>
	<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
	<remarks>This function is provided only for compatibility with <see cref="T:System.Collections.IList"/>. Use type-safe <see cref="P:Tools.CollectionsT.GenericT.ListWrapper`1.Item(System.Int32)"/> instead.</remarks>
</member><member name="T:Tools.CollectionsT.GenericT.ListWrapper`1">
	<summary>Wraps type-unsafe <see cref="T:System.Collections.IList"/> as type-safe <see cref="T:System.Collections.Generic.IList`1"/></summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Collections.BitArray)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Collections.BitArray"/></summary>
	<param name="Collection">A <see cref="T:System.Boolean"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper.#ctor(System.Collections.BitArray)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper.op_Implicit(System.Collections.BitArray)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Collections.BitArray"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Collections.BitArray"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper.Add(System.Boolean)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper.Remove(System.Boolean)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Collections.BitArray"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.ComponentModel.AttributeCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.ComponentModel.AttributeCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Attribute"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AttributeCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AttributeCollectionTypeSafeWrapper.#ctor(System.ComponentModel.AttributeCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AttributeCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AttributeCollectionTypeSafeWrapper.op_Implicit(System.ComponentModel.AttributeCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.AttributeCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.ComponentModel.AttributeCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AttributeCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.ComponentModel.AttributeCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AttributeCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AttributeCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.ComponentModel.AttributeCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.ComponentModel.Design.DesignerCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.ComponentModel.Design.DesignerCollection"/></summary>
	<param name="Collection">A <see cref="T:System.ComponentModel.Design.IDesignerHost"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerCollectionTypeSafeWrapper.#ctor(System.ComponentModel.Design.DesignerCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerCollectionTypeSafeWrapper.op_Implicit(System.ComponentModel.Design.DesignerCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.ComponentModel.Design.DesignerCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.ComponentModel.Design.DesignerCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.ComponentModel.Design.DesignerCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.DataViewSettingCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Data.DataViewSettingCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Data.DataViewSetting"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataViewSettingCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataViewSettingCollectionTypeSafeWrapper.#ctor(System.Data.DataViewSettingCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataViewSettingCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataViewSettingCollectionTypeSafeWrapper.op_Implicit(System.Data.DataViewSettingCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataViewSettingCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Data.DataViewSettingCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataViewSettingCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Data.DataViewSettingCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataViewSettingCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataViewSettingCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Data.DataViewSettingCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.Odbc.OdbcErrorCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Data.Odbc.OdbcErrorCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Data.Odbc.OdbcError"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcErrorCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcErrorCollectionTypeSafeWrapper.#ctor(System.Data.Odbc.OdbcErrorCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcErrorCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcErrorCollectionTypeSafeWrapper.op_Implicit(System.Data.Odbc.OdbcErrorCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcErrorCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Data.Odbc.OdbcErrorCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcErrorCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Data.Odbc.OdbcErrorCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcErrorCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcErrorCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Data.Odbc.OdbcErrorCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.OleDb.OleDbErrorCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Data.OleDb.OleDbErrorCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Data.OleDb.OleDbError"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbErrorCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbErrorCollectionTypeSafeWrapper.#ctor(System.Data.OleDb.OleDbErrorCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbErrorCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbErrorCollectionTypeSafeWrapper.op_Implicit(System.Data.OleDb.OleDbErrorCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbErrorCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Data.OleDb.OleDbErrorCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbErrorCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Data.OleDb.OleDbErrorCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbErrorCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbErrorCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Data.OleDb.OleDbErrorCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.SqlClient.SqlErrorCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Data.SqlClient.SqlErrorCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Data.SqlClient.SqlError"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlErrorCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlErrorCollectionTypeSafeWrapper.#ctor(System.Data.SqlClient.SqlErrorCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlErrorCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlErrorCollectionTypeSafeWrapper.op_Implicit(System.Data.SqlClient.SqlErrorCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlErrorCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Data.SqlClient.SqlErrorCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlErrorCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Data.SqlClient.SqlErrorCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlErrorCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlErrorCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Data.SqlClient.SqlErrorCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Diagnostics.EventLogEntryCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Diagnostics.EventLogEntryCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Diagnostics.EventLogEntry"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogEntryCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogEntryCollectionTypeSafeWrapper.#ctor(System.Diagnostics.EventLogEntryCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogEntryCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogEntryCollectionTypeSafeWrapper.op_Implicit(System.Diagnostics.EventLogEntryCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogEntryCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Diagnostics.EventLogEntryCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogEntryCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Diagnostics.EventLogEntryCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogEntryCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogEntryCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Diagnostics.EventLogEntryCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Drawing.Printing.PrinterSettings.PaperSourceCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Drawing.Printing.PaperSource"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSourceCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSourceCollectionTypeSafeWrapper.#ctor(System.Drawing.Printing.PrinterSettings.PaperSourceCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSourceCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSourceCollectionTypeSafeWrapper.op_Implicit(System.Drawing.Printing.PrinterSettings.PaperSourceCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSourceCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSourceCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSourceCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSourceCollectionTypeSafeWrapper.Add(System.Drawing.Printing.PaperSource)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSourceCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Drawing.Printing.PrinterSettings.PaperSizeCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Drawing.Printing.PaperSize"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSizeCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSizeCollectionTypeSafeWrapper.#ctor(System.Drawing.Printing.PrinterSettings.PaperSizeCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSizeCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSizeCollectionTypeSafeWrapper.op_Implicit(System.Drawing.Printing.PrinterSettings.PaperSizeCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSizeCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSizeCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSizeCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSizeCollectionTypeSafeWrapper.Add(System.Drawing.Printing.PaperSize)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSizeCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Drawing.Printing.PrinterResolution"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PrinterResolutionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PrinterResolutionCollectionTypeSafeWrapper.#ctor(System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PrinterResolutionCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PrinterResolutionCollectionTypeSafeWrapper.op_Implicit(System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.PrinterResolutionCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PrinterResolutionCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PrinterResolutionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PrinterResolutionCollectionTypeSafeWrapper.Add(System.Drawing.Printing.PrinterResolution)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PrinterResolutionCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Net.CookieCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Net.CookieCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Net.Cookie"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CookieCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CookieCollectionTypeSafeWrapper.#ctor(System.Net.CookieCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CookieCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CookieCollectionTypeSafeWrapper.op_Implicit(System.Net.CookieCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CookieCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Net.CookieCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CookieCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Net.CookieCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CookieCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CookieCollectionTypeSafeWrapper.Add(System.Net.Cookie)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CookieCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Net.CookieCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.Cryptography.AsnEncodedDataCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Security.Cryptography.AsnEncodedData"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AsnEncodedDataCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AsnEncodedDataCollectionTypeSafeWrapper.#ctor(System.Security.Cryptography.AsnEncodedDataCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AsnEncodedDataCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AsnEncodedDataCollectionTypeSafeWrapper.op_Implicit(System.Security.Cryptography.AsnEncodedDataCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.AsnEncodedDataCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AsnEncodedDataCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AsnEncodedDataCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AsnEncodedDataCollectionTypeSafeWrapper.Add(System.Security.Cryptography.AsnEncodedData)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AsnEncodedDataCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.Cryptography.OidCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Security.Cryptography.OidCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Security.Cryptography.Oid"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OidCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OidCollectionTypeSafeWrapper.#ctor(System.Security.Cryptography.OidCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OidCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OidCollectionTypeSafeWrapper.op_Implicit(System.Security.Cryptography.OidCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.OidCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Security.Cryptography.OidCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OidCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Security.Cryptography.OidCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OidCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OidCollectionTypeSafeWrapper.Add(System.Security.Cryptography.Oid)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OidCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Security.Cryptography.OidCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.Cryptography.X509Certificates.X509ExtensionCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ExtensionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ExtensionCollectionTypeSafeWrapper.#ctor(System.Security.Cryptography.X509Certificates.X509ExtensionCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ExtensionCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ExtensionCollectionTypeSafeWrapper.op_Implicit(System.Security.Cryptography.X509Certificates.X509ExtensionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ExtensionCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ExtensionCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ExtensionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ExtensionCollectionTypeSafeWrapper.Add(System.Security.Cryptography.X509Certificates.X509Extension)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ExtensionCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.Cryptography.X509Certificates.X509ChainElementCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElement"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ChainElementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ChainElementCollectionTypeSafeWrapper.#ctor(System.Security.Cryptography.X509Certificates.X509ChainElementCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ChainElementCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ChainElementCollectionTypeSafeWrapper.op_Implicit(System.Security.Cryptography.X509Certificates.X509ChainElementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ChainElementCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ChainElementCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ChainElementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ChainElementCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.Permissions.KeyContainerPermissionAccessEntryCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.KeyContainerPermissionAccessEntryCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.KeyContainerPermissionAccessEntryCollectionTypeSafeWrapper.#ctor(System.Security.Permissions.KeyContainerPermissionAccessEntryCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.KeyContainerPermissionAccessEntryCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.KeyContainerPermissionAccessEntryCollectionTypeSafeWrapper.op_Implicit(System.Security.Permissions.KeyContainerPermissionAccessEntryCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.KeyContainerPermissionAccessEntryCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.KeyContainerPermissionAccessEntryCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.KeyContainerPermissionAccessEntryCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.KeyContainerPermissionAccessEntryCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.Policy.ApplicationTrustCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Security.Policy.ApplicationTrustCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Security.Policy.ApplicationTrust"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper.#ctor(System.Security.Policy.ApplicationTrustCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper.op_Implicit(System.Security.Policy.ApplicationTrustCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Security.Policy.ApplicationTrustCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Security.Policy.ApplicationTrustCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper.Add(System.Security.Policy.ApplicationTrust)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper.Remove(System.Security.Policy.ApplicationTrust)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Security.Policy.ApplicationTrustCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Text.RegularExpressions.CaptureCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Text.RegularExpressions.CaptureCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Text.RegularExpressions.Capture"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CaptureCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CaptureCollectionTypeSafeWrapper.#ctor(System.Text.RegularExpressions.CaptureCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CaptureCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CaptureCollectionTypeSafeWrapper.op_Implicit(System.Text.RegularExpressions.CaptureCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CaptureCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Text.RegularExpressions.CaptureCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CaptureCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Text.RegularExpressions.CaptureCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CaptureCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CaptureCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Text.RegularExpressions.CaptureCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Text.RegularExpressions.GroupCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Text.RegularExpressions.GroupCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Text.RegularExpressions.Group"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GroupCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GroupCollectionTypeSafeWrapper.#ctor(System.Text.RegularExpressions.GroupCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GroupCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GroupCollectionTypeSafeWrapper.op_Implicit(System.Text.RegularExpressions.GroupCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.GroupCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Text.RegularExpressions.GroupCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GroupCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Text.RegularExpressions.GroupCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GroupCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GroupCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Text.RegularExpressions.GroupCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Text.RegularExpressions.MatchCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Text.RegularExpressions.MatchCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Text.RegularExpressions.Match"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MatchCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MatchCollectionTypeSafeWrapper.#ctor(System.Text.RegularExpressions.MatchCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MatchCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MatchCollectionTypeSafeWrapper.op_Implicit(System.Text.RegularExpressions.MatchCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.MatchCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Text.RegularExpressions.MatchCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MatchCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Text.RegularExpressions.MatchCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MatchCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MatchCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Text.RegularExpressions.MatchCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.ControlCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.ControlCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.Control"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper.#ctor(System.Web.UI.ControlCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.ControlCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.ControlCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.ControlCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper.Add(System.Web.UI.Control)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper.Remove(System.Web.UI.Control)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper.Contains(System.Web.UI.Control)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper.IndexOf(System.Web.UI.Control)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper.Insert(System.Int32,System.Web.UI.Control)">
	<summary>Inserts item into collection at specified index</summary>
	<param name="index">Index to insert item onto</param>
	<param name="item">Item to be inserted</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.ControlCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.HtmlControls.HtmlTableCellCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper.#ctor(System.Web.UI.HtmlControls.HtmlTableCellCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.HtmlControls.HtmlTableCellCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper.Add(System.Web.UI.HtmlControls.HtmlTableCell)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper.Remove(System.Web.UI.HtmlControls.HtmlTableCell)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper.Insert(System.Int32,System.Web.UI.HtmlControls.HtmlTableCell)">
	<summary>Inserts item into collection at specified index</summary>
	<param name="index">Index to insert item onto</param>
	<param name="item">Item to be inserted</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.HtmlControls.HtmlTableRowCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper.#ctor(System.Web.UI.HtmlControls.HtmlTableRowCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.HtmlControls.HtmlTableRowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper.Add(System.Web.UI.HtmlControls.HtmlTableRow)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper.Remove(System.Web.UI.HtmlControls.HtmlTableRow)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper.Insert(System.Int32,System.Web.UI.HtmlControls.HtmlTableRow)">
	<summary>Inserts item into collection at specified index</summary>
	<param name="index">Index to insert item onto</param>
	<param name="item">Item to be inserted</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.ValidatorCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.ValidatorCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.IValidator"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper.#ctor(System.Web.UI.ValidatorCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.ValidatorCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.ValidatorCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.ValidatorCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper.Add(System.Web.UI.IValidator)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper.Remove(System.Web.UI.IValidator)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper.Contains(System.Web.UI.IValidator)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.ValidatorCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.DataGridColumnCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.DataGridColumn"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.DataGridColumnCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.DataGridColumnCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper.Add(System.Web.UI.WebControls.DataGridColumn)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper.Remove(System.Web.UI.WebControls.DataGridColumn)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.DataGridColumn)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.DataGridColumn)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper.Insert(System.Int32,System.Web.UI.WebControls.DataGridColumn)">
	<summary>Inserts item into collection at specified index</summary>
	<param name="index">Index to insert item onto</param>
	<param name="item">Item to be inserted</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.DataGridItemCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.DataGridItemCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.DataGridItem"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridItemCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.DataGridItemCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridItemCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridItemCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.DataGridItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridItemCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.DataGridItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridItemCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.DataGridItemCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridItemCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.DataGridItemCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.DataKeyArray)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.DataKeyArray"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.DataKey"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataKeyArrayTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataKeyArrayTypeSafeWrapper.#ctor(System.Web.UI.WebControls.DataKeyArray)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataKeyArrayTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataKeyArrayTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.DataKeyArray)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataKeyArrayTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.DataKeyArray"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataKeyArrayTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.DataKeyArray"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataKeyArrayTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataKeyArrayTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.DataKeyArray"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.DataListItemCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.DataListItemCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.DataListItem"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataListItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataListItemCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.DataListItemCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataListItemCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataListItemCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.DataListItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataListItemCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.DataListItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataListItemCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.DataListItemCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataListItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataListItemCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.DataListItemCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.DetailsViewRowCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.DetailsViewRowCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.DetailsViewRow"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DetailsViewRowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DetailsViewRowCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.DetailsViewRowCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DetailsViewRowCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DetailsViewRowCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.DetailsViewRowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DetailsViewRowCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.DetailsViewRowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DetailsViewRowCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.DetailsViewRowCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DetailsViewRowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DetailsViewRowCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.DetailsViewRowCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.GridViewRowCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.GridViewRowCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.GridViewRow"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridViewRowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridViewRowCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.GridViewRowCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridViewRowCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridViewRowCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.GridViewRowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridViewRowCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.GridViewRowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridViewRowCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.GridViewRowCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridViewRowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridViewRowCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.GridViewRowCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.MenuItemCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.MenuItemCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.MenuItem"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.MenuItemCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.MenuItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.MenuItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.MenuItemCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper.Add(System.Web.UI.WebControls.MenuItem)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper.Remove(System.Web.UI.WebControls.MenuItem)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.MenuItem)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.MenuItem)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.MenuItemCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.RepeaterItemCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.RepeaterItemCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.RepeaterItem"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RepeaterItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RepeaterItemCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.RepeaterItemCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RepeaterItemCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RepeaterItemCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.RepeaterItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.RepeaterItemCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.RepeaterItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RepeaterItemCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.RepeaterItemCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RepeaterItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RepeaterItemCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.RepeaterItemCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.SelectedDatesCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection"/></summary>
	<param name="Collection">A <see cref="T:System.DateTime"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.SelectedDatesCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.SelectedDatesCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper.Add(System.DateTime)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper.Remove(System.DateTime)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper.Contains(System.DateTime)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.TreeNodeCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.TreeNodeCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.TreeNode"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.TreeNodeCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.TreeNodeCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.TreeNodeCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.TreeNodeCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper.Add(System.Web.UI.WebControls.TreeNode)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper.Remove(System.Web.UI.WebControls.TreeNode)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.TreeNode)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.TreeNode)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper.Insert(System.Int32,System.Web.UI.WebControls.TreeNode)">
	<summary>Inserts item into collection at specified index</summary>
	<param name="index">Index to insert item onto</param>
	<param name="item">Item to be inserted</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.TreeNodeCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper.Add(System.Web.UI.WebControls.WebParts.PersonalizationStateInfo)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper.Remove(System.Web.UI.WebControls.WebParts.PersonalizationStateInfo)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.GridItemCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.GridItemCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.GridItem"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridItemCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.GridItemCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridItemCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridItemCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.GridItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridItemCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.GridItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridItemCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.GridItemCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridItemCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.GridItemCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.HtmlElementCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.HtmlElementCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.HtmlElement"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlElementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlElementCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.HtmlElementCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlElementCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlElementCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.HtmlElementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlElementCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.HtmlElementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlElementCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.HtmlElementCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlElementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlElementCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.HtmlElementCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.HtmlWindowCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.HtmlWindowCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.HtmlWindow"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlWindowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlWindowCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.HtmlWindowCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlWindowCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlWindowCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.HtmlWindowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlWindowCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.HtmlWindowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlWindowCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.HtmlWindowCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlWindowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlWindowCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.HtmlWindowCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.PropertyGrid.PropertyTabCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.PropertyGrid.PropertyTabCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.Design.PropertyTab"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyTabCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyTabCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.PropertyGrid.PropertyTabCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyTabCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyTabCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.PropertyGrid.PropertyTabCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyTabCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.PropertyGrid.PropertyTabCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyTabCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.PropertyGrid.PropertyTabCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyTabCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyTabCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.PropertyGrid.PropertyTabCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.WindowCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.WindowCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Window"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WindowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WindowCollectionTypeSafeWrapper.#ctor(System.Windows.WindowCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WindowCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WindowCollectionTypeSafeWrapper.op_Implicit(System.Windows.WindowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WindowCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.WindowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WindowCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.WindowCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WindowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WindowCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.WindowCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Xml.XmlAttributeCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Xml.XmlAttributeCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Xml.XmlAttribute"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper.#ctor(System.Xml.XmlAttributeCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper.op_Implicit(System.Xml.XmlAttributeCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Xml.XmlAttributeCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Xml.XmlAttributeCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper.Add(System.Xml.XmlAttribute)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper.Remove(System.Xml.XmlAttribute)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Xml.XmlAttributeCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.ComponentModel.ComponentCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.ComponentModel.ComponentCollection"/></summary>
	<param name="Collection">A <see cref="T:System.ComponentModel.IComponent"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ComponentCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ComponentCollectionTypeSafeWrapper.#ctor(System.ComponentModel.ComponentCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ComponentCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ComponentCollectionTypeSafeWrapper.op_Implicit(System.ComponentModel.ComponentCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ComponentCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.ComponentModel.ComponentCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ComponentCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.ComponentModel.ComponentCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ComponentCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ComponentCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.ComponentModel.ComponentCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Configuration.ConfigurationLocationCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Configuration.ConfigurationLocationCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Configuration.ConfigurationLocation"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationLocationCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationLocationCollectionTypeSafeWrapper.#ctor(System.Configuration.ConfigurationLocationCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationLocationCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationLocationCollectionTypeSafeWrapper.op_Implicit(System.Configuration.ConfigurationLocationCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationLocationCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Configuration.ConfigurationLocationCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationLocationCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Configuration.ConfigurationLocationCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationLocationCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationLocationCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Configuration.ConfigurationLocationCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Diagnostics.ProcessModuleCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Diagnostics.ProcessModuleCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Diagnostics.ProcessModule"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper.#ctor(System.Diagnostics.ProcessModuleCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper.op_Implicit(System.Diagnostics.ProcessModuleCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Diagnostics.ProcessModuleCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Diagnostics.ProcessModuleCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper.Contains(System.Diagnostics.ProcessModule)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper.IndexOf(System.Diagnostics.ProcessModule)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Diagnostics.ProcessModuleCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Diagnostics.ProcessThreadCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Diagnostics.ProcessThreadCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Diagnostics.ProcessThread"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper.#ctor(System.Diagnostics.ProcessThreadCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper.op_Implicit(System.Diagnostics.ProcessThreadCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Diagnostics.ProcessThreadCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Diagnostics.ProcessThreadCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper.Add(System.Diagnostics.ProcessThread)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper.Remove(System.Diagnostics.ProcessThread)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper.Contains(System.Diagnostics.ProcessThread)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper.IndexOf(System.Diagnostics.ProcessThread)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper.Insert(System.Int32,System.Diagnostics.ProcessThread)">
	<summary>Inserts item into collection at specified index</summary>
	<param name="index">Index to insert item onto</param>
	<param name="item">Item to be inserted</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Diagnostics.ProcessThreadCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Drawing.Design.CategoryNameCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Drawing.Design.CategoryNameCollection"/></summary>
	<param name="Collection">A <see cref="T:System.String"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper.#ctor(System.Drawing.Design.CategoryNameCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper.op_Implicit(System.Drawing.Design.CategoryNameCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Drawing.Design.CategoryNameCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Drawing.Design.CategoryNameCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper.Contains(System.String)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper.IndexOf(System.String)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Drawing.Design.CategoryNameCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Drawing.Design.ToolboxItemCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Drawing.Design.ToolboxItemCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Drawing.Design.ToolboxItem"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper.#ctor(System.Drawing.Design.ToolboxItemCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper.op_Implicit(System.Drawing.Design.ToolboxItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Drawing.Design.ToolboxItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Drawing.Design.ToolboxItemCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper.Contains(System.Drawing.Design.ToolboxItem)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper.IndexOf(System.Drawing.Design.ToolboxItem)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Drawing.Design.ToolboxItemCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.AccessControl.AuthorizationRuleCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Security.AccessControl.AuthorizationRuleCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Security.AccessControl.AuthorizationRule"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthorizationRuleCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthorizationRuleCollectionTypeSafeWrapper.#ctor(System.Security.AccessControl.AuthorizationRuleCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthorizationRuleCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthorizationRuleCollectionTypeSafeWrapper.op_Implicit(System.Security.AccessControl.AuthorizationRuleCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthorizationRuleCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Security.AccessControl.AuthorizationRuleCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthorizationRuleCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Security.AccessControl.AuthorizationRuleCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthorizationRuleCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthorizationRuleCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Security.AccessControl.AuthorizationRuleCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Management.WebBaseEventCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Management.WebBaseEventCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Management.WebBaseEvent"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper.#ctor(System.Web.Management.WebBaseEventCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper.op_Implicit(System.Web.Management.WebBaseEventCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Management.WebBaseEventCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Management.WebBaseEventCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper.Contains(System.Web.Management.WebBaseEvent)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper.IndexOf(System.Web.Management.WebBaseEvent)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Management.WebBaseEventCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.CatalogPartCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.CatalogPartCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.CatalogPartCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.WebParts.CatalogPart)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.WebParts.CatalogPart)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Type"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper.Contains(System.Type)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper.IndexOf(System.Type)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.EditorPartCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.EditorPartCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.EditorPartCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.WebParts.EditorPart)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.WebParts.EditorPart)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.WebParts.ProviderConnectionPoint)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.WebParts.ProviderConnectionPoint)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.TransformerTypeCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.TransformerTypeCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Type"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.TransformerTypeCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.TransformerTypeCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.TransformerTypeCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.TransformerTypeCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper.Contains(System.Type)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper.IndexOf(System.Type)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.TransformerTypeCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.WebPartCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.WebPartCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.WebPartCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.WebParts.WebPart)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.WebParts.WebPart)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescription"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.WebParts.WebPartDescription)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.WebParts.WebPartDescription)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.WebPartVerbCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerbCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.WebPartVerbCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.WebPartVerbCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerbCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerbCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.WebParts.WebPartVerb)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.WebParts.WebPartVerb)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerbCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.WebPartZoneCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.WebPartZoneCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.WebPartZoneCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.WebParts.WebPartZoneBase)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.WebParts.WebPartZoneBase)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.FormCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.FormCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.Form"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.FormCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.FormCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.FormCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.FormCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.FormCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.InputLanguageCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.InputLanguageCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.InputLanguage"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.InputLanguageCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.InputLanguageCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.InputLanguageCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.InputLanguageCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper.Contains(System.Windows.Forms.InputLanguage)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper.IndexOf(System.Windows.Forms.InputLanguage)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.InputLanguageCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Configuration.ConfigurationSectionCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Configuration.ConfigurationSectionCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Configuration.ConfigurationSection"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionCollectionTypeSafeWrapper.#ctor(System.Configuration.ConfigurationSectionCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionCollectionTypeSafeWrapper.op_Implicit(System.Configuration.ConfigurationSectionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Configuration.ConfigurationSectionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Configuration.ConfigurationSectionCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Configuration.ConfigurationSectionCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Configuration.ConfigurationSectionGroupCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Configuration.ConfigurationSectionGroupCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Configuration.ConfigurationSectionGroup"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionGroupCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionGroupCollectionTypeSafeWrapper.#ctor(System.Configuration.ConfigurationSectionGroupCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionGroupCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionGroupCollectionTypeSafeWrapper.op_Implicit(System.Configuration.ConfigurationSectionGroupCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionGroupCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Configuration.ConfigurationSectionGroupCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionGroupCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Configuration.ConfigurationSectionGroupCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionGroupCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionGroupCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionGroupCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Configuration.ConfigurationSectionGroupCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.VirtualDirectoryMappingCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.VirtualDirectoryMappingCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.VirtualDirectoryMapping"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.VirtualDirectoryMappingCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.VirtualDirectoryMappingCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.VirtualDirectoryMappingCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.VirtualDirectoryMappingCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.VirtualDirectoryMappingCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.VirtualDirectoryMappingCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.VirtualDirectoryMappingCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.VirtualDirectoryMappingCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.VirtualDirectoryMappingCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.VirtualDirectoryMappingCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.VirtualDirectoryMappingCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.VirtualDirectoryMappingCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.VirtualDirectoryMappingCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.VirtualDirectoryMappingCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.HttpCookieCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.HttpCookieCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.HttpCookie"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper.#ctor(System.Web.HttpCookieCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper.op_Implicit(System.Web.HttpCookieCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.HttpCookieCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.HttpCookieCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper.Add(System.Web.HttpCookie)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.HttpCookieCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.HttpFileCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.HttpFileCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.HttpPostedFile"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpFileCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpFileCollectionTypeSafeWrapper.#ctor(System.Web.HttpFileCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpFileCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpFileCollectionTypeSafeWrapper.op_Implicit(System.Web.HttpFileCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpFileCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.HttpFileCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpFileCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.HttpFileCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpFileCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpFileCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.HttpFileCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.HttpModuleCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.HttpModuleCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.IHttpModule"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleCollectionTypeSafeWrapper.#ctor(System.Web.HttpModuleCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleCollectionTypeSafeWrapper.op_Implicit(System.Web.HttpModuleCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.HttpModuleCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.HttpModuleCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.HttpModuleCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Configuration.ConnectionStringSettingsCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Configuration.ConnectionStringSettingsCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Configuration.ConnectionStringSettings"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper.#ctor(System.Configuration.ConnectionStringSettingsCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper.op_Implicit(System.Configuration.ConnectionStringSettingsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Configuration.ConnectionStringSettingsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Configuration.ConnectionStringSettingsCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper.Add(System.Configuration.ConnectionStringSettings)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper.Remove(System.Configuration.ConnectionStringSettings)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper.Contains(System.Configuration.ConnectionStringSettings)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper.IndexOf(System.Configuration.ConnectionStringSettings)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Configuration.ConnectionStringSettingsCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Configuration.ProviderSettingsCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Configuration.ProviderSettingsCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Configuration.ProviderSettings"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderSettingsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderSettingsCollectionTypeSafeWrapper.#ctor(System.Configuration.ProviderSettingsCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderSettingsCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderSettingsCollectionTypeSafeWrapper.op_Implicit(System.Configuration.ProviderSettingsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderSettingsCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Configuration.ProviderSettingsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderSettingsCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Configuration.ProviderSettingsCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderSettingsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderSettingsCollectionTypeSafeWrapper.Add(System.Configuration.ProviderSettings)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderSettingsCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Configuration.ProviderSettingsCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Net.Configuration.AuthenticationModuleElementCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Net.Configuration.AuthenticationModuleElementCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Net.Configuration.AuthenticationModuleElement"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper.#ctor(System.Net.Configuration.AuthenticationModuleElementCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper.op_Implicit(System.Net.Configuration.AuthenticationModuleElementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Net.Configuration.AuthenticationModuleElementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Net.Configuration.AuthenticationModuleElementCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper.Add(System.Net.Configuration.AuthenticationModuleElement)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper.Remove(System.Net.Configuration.AuthenticationModuleElement)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper.Contains(System.Net.Configuration.AuthenticationModuleElement)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper.IndexOf(System.Net.Configuration.AuthenticationModuleElement)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Net.Configuration.AuthenticationModuleElementCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Net.Configuration.BypassElementCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Net.Configuration.BypassElementCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Net.Configuration.BypassElement"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper.#ctor(System.Net.Configuration.BypassElementCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper.op_Implicit(System.Net.Configuration.BypassElementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Net.Configuration.BypassElementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Net.Configuration.BypassElementCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper.Add(System.Net.Configuration.BypassElement)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper.Remove(System.Net.Configuration.BypassElement)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper.Contains(System.Net.Configuration.BypassElement)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper.IndexOf(System.Net.Configuration.BypassElement)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Net.Configuration.BypassElementCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Net.Configuration.ConnectionManagementElementCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Net.Configuration.ConnectionManagementElementCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Net.Configuration.ConnectionManagementElement"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper.#ctor(System.Net.Configuration.ConnectionManagementElementCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper.op_Implicit(System.Net.Configuration.ConnectionManagementElementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Net.Configuration.ConnectionManagementElementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Net.Configuration.ConnectionManagementElementCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper.Add(System.Net.Configuration.ConnectionManagementElement)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper.Remove(System.Net.Configuration.ConnectionManagementElement)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper.Contains(System.Net.Configuration.ConnectionManagementElement)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper.IndexOf(System.Net.Configuration.ConnectionManagementElement)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Net.Configuration.ConnectionManagementElementCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Net.Configuration.WebRequestModuleElementCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Net.Configuration.WebRequestModuleElementCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Net.Configuration.WebRequestModuleElement"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper.#ctor(System.Net.Configuration.WebRequestModuleElementCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper.op_Implicit(System.Net.Configuration.WebRequestModuleElementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Net.Configuration.WebRequestModuleElementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Net.Configuration.WebRequestModuleElementCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper.Add(System.Net.Configuration.WebRequestModuleElement)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper.Remove(System.Net.Configuration.WebRequestModuleElement)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper.Contains(System.Net.Configuration.WebRequestModuleElement)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper.IndexOf(System.Net.Configuration.WebRequestModuleElement)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Net.Configuration.WebRequestModuleElementCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.AssemblyCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.AssemblyCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.AssemblyInfo"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.AssemblyCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.AssemblyCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.AssemblyCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.AssemblyCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper.Add(System.Web.Configuration.AssemblyInfo)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.AssemblyCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.AuthorizationRuleCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.AuthorizationRuleCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.AuthorizationRule"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.AuthorizationRuleCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.AuthorizationRuleCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.AuthorizationRuleCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.AuthorizationRuleCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper.Add(System.Web.Configuration.AuthorizationRule)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper.Remove(System.Web.Configuration.AuthorizationRule)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper.Contains(System.Web.Configuration.AuthorizationRule)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper.IndexOf(System.Web.Configuration.AuthorizationRule)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.AuthorizationRuleCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.BufferModesCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.BufferModesCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.BufferModeSettings"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BufferModesCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BufferModesCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.BufferModesCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BufferModesCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BufferModesCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.BufferModesCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.BufferModesCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.BufferModesCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BufferModesCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.BufferModesCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BufferModesCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BufferModesCollectionTypeSafeWrapper.Add(System.Web.Configuration.BufferModeSettings)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BufferModesCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.BufferModesCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.BuildProviderCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.BuildProviderCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.BuildProvider"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.BuildProviderCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.BuildProviderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.BuildProviderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.BuildProviderCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper.Add(System.Web.Configuration.BuildProvider)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.BuildProviderCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.ClientTargetCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.ClientTargetCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.ClientTarget"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.ClientTargetCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.ClientTargetCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.ClientTargetCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.ClientTargetCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper.Add(System.Web.Configuration.ClientTarget)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper.Remove(System.Web.Configuration.ClientTarget)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.ClientTargetCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.CodeSubDirectoriesCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.CodeSubDirectoriesCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.CodeSubDirectory"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.CodeSubDirectoriesCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.CodeSubDirectoriesCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.CodeSubDirectoriesCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.CodeSubDirectoriesCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper.Add(System.Web.Configuration.CodeSubDirectory)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.CodeSubDirectoriesCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.CompilerCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.CompilerCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.Compiler"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebCompilerCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebCompilerCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.CompilerCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebCompilerCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebCompilerCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.CompilerCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebCompilerCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.CompilerCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebCompilerCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.CompilerCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebCompilerCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebCompilerCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.CompilerCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.CustomErrorCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.CustomErrorCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.CustomError"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.CustomErrorCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.CustomErrorCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.CustomErrorCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.CustomErrorCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper.Add(System.Web.Configuration.CustomError)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper.Remove(System.Web.Configuration.CustomError)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.CustomErrorCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.EventMappingSettingsCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.EventMappingSettingsCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.EventMappingSettings"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.EventMappingSettingsCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.EventMappingSettingsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.EventMappingSettingsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.EventMappingSettingsCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper.Add(System.Web.Configuration.EventMappingSettings)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper.Remove(System.Web.Configuration.EventMappingSettings)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper.Contains(System.Web.Configuration.EventMappingSettings)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper.IndexOf(System.Web.Configuration.EventMappingSettings)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.EventMappingSettingsCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.ExpressionBuilderCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.ExpressionBuilderCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.ExpressionBuilder"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.ExpressionBuilderCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.ExpressionBuilderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.ExpressionBuilderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.ExpressionBuilderCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper.Add(System.Web.Configuration.ExpressionBuilder)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.ExpressionBuilderCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.FormsAuthenticationUserCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.FormsAuthenticationUserCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.FormsAuthenticationUser"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.FormsAuthenticationUserCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.FormsAuthenticationUserCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.FormsAuthenticationUserCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.FormsAuthenticationUserCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper.Add(System.Web.Configuration.FormsAuthenticationUser)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.FormsAuthenticationUserCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.HttpHandlerActionCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.HttpHandlerActionCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.HttpHandlerAction"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.HttpHandlerActionCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.HttpHandlerActionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.HttpHandlerActionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.HttpHandlerActionCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper.Add(System.Web.Configuration.HttpHandlerAction)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper.Remove(System.Web.Configuration.HttpHandlerAction)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper.Contains(System.Web.Configuration.HttpHandlerAction)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper.IndexOf(System.Web.Configuration.HttpHandlerAction)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.HttpHandlerActionCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.HttpModuleActionCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.HttpModuleActionCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.HttpModuleAction"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.HttpModuleActionCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.HttpModuleActionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.HttpModuleActionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.HttpModuleActionCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper.Add(System.Web.Configuration.HttpModuleAction)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper.Remove(System.Web.Configuration.HttpModuleAction)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper.Contains(System.Web.Configuration.HttpModuleAction)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper.IndexOf(System.Web.Configuration.HttpModuleAction)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.HttpModuleActionCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.NamespaceCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.NamespaceCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.NamespaceInfo"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.NamespaceCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.NamespaceCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.NamespaceCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.NamespaceCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper.Add(System.Web.Configuration.NamespaceInfo)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper.Remove(System.Web.Configuration.NamespaceInfo)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.NamespaceCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.OutputCacheProfileCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.OutputCacheProfileCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.OutputCacheProfile"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.OutputCacheProfileCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.OutputCacheProfileCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.OutputCacheProfileCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.OutputCacheProfileCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper.Add(System.Web.Configuration.OutputCacheProfile)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper.Remove(System.Web.Configuration.OutputCacheProfile)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.OutputCacheProfileCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.ProfileGroupSettingsCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.ProfileGroupSettingsCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.ProfileGroupSettings"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.ProfileGroupSettingsCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.ProfileGroupSettingsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.ProfileGroupSettingsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.ProfileGroupSettingsCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper.Add(System.Web.Configuration.ProfileGroupSettings)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper.Remove(System.Web.Configuration.ProfileGroupSettings)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.ProfileGroupSettingsCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.ProfilePropertySettingsCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.ProfilePropertySettingsCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.ProfilePropertySettings"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.ProfilePropertySettingsCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.ProfilePropertySettingsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.ProfilePropertySettingsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.ProfilePropertySettingsCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper.Add(System.Web.Configuration.ProfilePropertySettings)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper.Remove(System.Web.Configuration.ProfilePropertySettings)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.ProfilePropertySettingsCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.ProfileSettingsCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.ProfileSettingsCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.ProfileSettings"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.ProfileSettingsCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.ProfileSettingsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.ProfileSettingsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.ProfileSettingsCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper.Add(System.Web.Configuration.ProfileSettings)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper.Remove(System.Web.Configuration.ProfileSettings)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper.Contains(System.Web.Configuration.ProfileSettings)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper.IndexOf(System.Web.Configuration.ProfileSettings)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper.Insert(System.Int32,System.Web.Configuration.ProfileSettings)">
	<summary>Inserts item into collection at specified index</summary>
	<param name="index">Index to insert item onto</param>
	<param name="item">Item to be inserted</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.ProfileSettingsCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.ProtocolCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.ProtocolCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.ProtocolElement"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.ProtocolCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.ProtocolCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.ProtocolCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.ProtocolCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper.Add(System.Web.Configuration.ProtocolElement)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper.Remove(System.Web.Configuration.ProtocolElement)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.ProtocolCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.RuleSettingsCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.RuleSettingsCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.RuleSettings"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.RuleSettingsCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.RuleSettingsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.RuleSettingsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.RuleSettingsCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper.Add(System.Web.Configuration.RuleSettings)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper.Remove(System.Web.Configuration.RuleSettings)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper.Contains(System.Web.Configuration.RuleSettings)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper.IndexOf(System.Web.Configuration.RuleSettings)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper.Insert(System.Int32,System.Web.Configuration.RuleSettings)">
	<summary>Inserts item into collection at specified index</summary>
	<param name="index">Index to insert item onto</param>
	<param name="item">Item to be inserted</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.RuleSettingsCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.SqlCacheDependencyDatabaseCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.SqlCacheDependencyDatabaseCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.SqlCacheDependencyDatabase"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.SqlCacheDependencyDatabaseCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.SqlCacheDependencyDatabaseCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.SqlCacheDependencyDatabaseCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.SqlCacheDependencyDatabaseCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper.Add(System.Web.Configuration.SqlCacheDependencyDatabase)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper.Remove(System.Web.Configuration.SqlCacheDependencyDatabase)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.SqlCacheDependencyDatabaseCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.TagMapCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.TagMapCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.TagMapInfo"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.TagMapCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.TagMapCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.TagMapCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.TagMapCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper.Add(System.Web.Configuration.TagMapInfo)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper.Remove(System.Web.Configuration.TagMapInfo)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.TagMapCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.TagPrefixCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.TagPrefixCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.TagPrefixInfo"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagPrefixCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagPrefixCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.TagPrefixCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagPrefixCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagPrefixCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.TagPrefixCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagPrefixCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.TagPrefixCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagPrefixCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.TagPrefixCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagPrefixCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagPrefixCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.TagPrefixCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.TransformerInfoCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.TransformerInfoCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.TransformerInfo"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerInfoCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerInfoCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.TransformerInfoCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerInfoCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerInfoCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.TransformerInfoCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerInfoCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.TransformerInfoCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerInfoCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.TransformerInfoCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerInfoCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerInfoCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.TransformerInfoCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.TrustLevelCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.TrustLevelCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.TrustLevel"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TrustLevelCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TrustLevelCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.TrustLevelCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TrustLevelCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TrustLevelCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.TrustLevelCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TrustLevelCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.TrustLevelCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TrustLevelCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.TrustLevelCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TrustLevelCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TrustLevelCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TrustLevelCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.TrustLevelCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.UrlMappingCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.UrlMappingCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Configuration.UrlMapping"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.UrlMappingCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.UrlMappingCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.UrlMappingCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.UrlMappingCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper.Add(System.Web.Configuration.UrlMapping)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper.Remove(System.Web.Configuration.UrlMapping)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.UrlMappingCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper.#ctor(System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper.op_Implicit(System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper.Add(System.Xml.Serialization.Configuration.SchemaImporterExtensionElement)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper.Remove(System.Xml.Serialization.Configuration.SchemaImporterExtensionElement)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper.Contains(System.Xml.Serialization.Configuration.SchemaImporterExtensionElement)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper.IndexOf(System.Xml.Serialization.Configuration.SchemaImporterExtensionElement)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Configuration.ProtectedConfigurationProviderCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Configuration.ProtectedConfigurationProviderCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Configuration.ProtectedConfigurationProvider"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtectedConfigurationProviderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtectedConfigurationProviderCollectionTypeSafeWrapper.#ctor(System.Configuration.ProtectedConfigurationProviderCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtectedConfigurationProviderCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtectedConfigurationProviderCollectionTypeSafeWrapper.op_Implicit(System.Configuration.ProtectedConfigurationProviderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtectedConfigurationProviderCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Configuration.ProtectedConfigurationProviderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtectedConfigurationProviderCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Configuration.ProtectedConfigurationProviderCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtectedConfigurationProviderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtectedConfigurationProviderCollectionTypeSafeWrapper.Add(System.Configuration.ProtectedConfigurationProvider)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtectedConfigurationProviderCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Configuration.ProtectedConfigurationProviderCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Configuration.SettingsProviderCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Configuration.SettingsProviderCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Configuration.SettingsProvider"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SettingsProviderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SettingsProviderCollectionTypeSafeWrapper.#ctor(System.Configuration.SettingsProviderCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SettingsProviderCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SettingsProviderCollectionTypeSafeWrapper.op_Implicit(System.Configuration.SettingsProviderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SettingsProviderCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Configuration.SettingsProviderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SettingsProviderCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Configuration.SettingsProviderCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SettingsProviderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SettingsProviderCollectionTypeSafeWrapper.Add(System.Configuration.SettingsProvider)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SettingsProviderCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Configuration.SettingsProviderCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Profile.ProfileProviderCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Profile.ProfileProviderCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Profile.ProfileProvider"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileProviderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileProviderCollectionTypeSafeWrapper.#ctor(System.Web.Profile.ProfileProviderCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileProviderCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileProviderCollectionTypeSafeWrapper.op_Implicit(System.Web.Profile.ProfileProviderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileProviderCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Profile.ProfileProviderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileProviderCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Profile.ProfileProviderCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileProviderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileProviderCollectionTypeSafeWrapper.Add(System.Web.Profile.ProfileProvider)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileProviderCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Profile.ProfileProviderCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Security.MembershipProviderCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Security.MembershipProviderCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Security.MembershipProvider"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MembershipProviderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MembershipProviderCollectionTypeSafeWrapper.#ctor(System.Web.Security.MembershipProviderCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MembershipProviderCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MembershipProviderCollectionTypeSafeWrapper.op_Implicit(System.Web.Security.MembershipProviderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.MembershipProviderCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Security.MembershipProviderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MembershipProviderCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Security.MembershipProviderCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MembershipProviderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MembershipProviderCollectionTypeSafeWrapper.Add(System.Web.Security.MembershipProvider)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MembershipProviderCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Security.MembershipProviderCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Security.RoleProviderCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Security.RoleProviderCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.Security.RoleProvider"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleProviderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleProviderCollectionTypeSafeWrapper.#ctor(System.Web.Security.RoleProviderCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleProviderCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleProviderCollectionTypeSafeWrapper.op_Implicit(System.Web.Security.RoleProviderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleProviderCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Security.RoleProviderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleProviderCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Security.RoleProviderCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleProviderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleProviderCollectionTypeSafeWrapper.Add(System.Web.Security.RoleProvider)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleProviderCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Security.RoleProviderCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.SiteMapProviderCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.SiteMapProviderCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.SiteMapProvider"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapProviderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapProviderCollectionTypeSafeWrapper.#ctor(System.Web.SiteMapProviderCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapProviderCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapProviderCollectionTypeSafeWrapper.op_Implicit(System.Web.SiteMapProviderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapProviderCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.SiteMapProviderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapProviderCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.SiteMapProviderCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapProviderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapProviderCollectionTypeSafeWrapper.Add(System.Web.SiteMapProvider)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapProviderCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.SiteMapProviderCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationProvider"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationProviderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationProviderCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationProviderCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationProviderCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationProviderCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationProviderCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationProviderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationProviderCollectionTypeSafeWrapper.Add(System.Web.UI.WebControls.WebParts.PersonalizationProvider)">
	<summary>Adds item to collection</summary>
	<param name="item">Item to be added</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationProviderCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.ConstraintCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Data.ConstraintCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Data.Constraint"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper.#ctor(System.Data.ConstraintCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper.op_Implicit(System.Data.ConstraintCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Data.ConstraintCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Data.ConstraintCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper.Add(System.Data.Constraint)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper.Remove(System.Data.Constraint)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper.Contains(System.Data.Constraint)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper.IndexOf(System.Data.Constraint)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Data.ConstraintCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.DataColumnCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Data.DataColumnCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Data.DataColumn"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper.#ctor(System.Data.DataColumnCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper.op_Implicit(System.Data.DataColumnCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Data.DataColumnCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Data.DataColumnCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper.Add(System.Data.DataColumn)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper.Remove(System.Data.DataColumn)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper.Contains(System.Data.DataColumn)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper.IndexOf(System.Data.DataColumn)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Data.DataColumnCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.DataRelationCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Data.DataRelationCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Data.DataRelation"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper.#ctor(System.Data.DataRelationCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper.op_Implicit(System.Data.DataRelationCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Data.DataRelationCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Data.DataRelationCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper.Add(System.Data.DataRelation)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper.Remove(System.Data.DataRelation)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper.Contains(System.Data.DataRelation)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper.IndexOf(System.Data.DataRelation)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Data.DataRelationCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.DataRowCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Data.DataRowCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Data.DataRow"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper.#ctor(System.Data.DataRowCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper.op_Implicit(System.Data.DataRowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Data.DataRowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Data.DataRowCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper.Add(System.Data.DataRow)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper.Remove(System.Data.DataRow)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper.Contains(System.Data.DataRow)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper.IndexOf(System.Data.DataRow)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Data.DataRowCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.DataTableCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Data.DataTableCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Data.DataTable"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper.#ctor(System.Data.DataTableCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper.op_Implicit(System.Data.DataTableCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Data.DataTableCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Data.DataTableCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper.Add(System.Data.DataTable)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper.Remove(System.Data.DataTable)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper.Contains(System.Data.DataTable)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper.IndexOf(System.Data.DataTable)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Data.DataTableCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.AccessControl.GenericAcl)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Security.AccessControl.GenericAcl"/></summary>
	<param name="Collection">A <see cref="T:System.Security.AccessControl.GenericAce"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GenericAclTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GenericAclTypeSafeWrapper.#ctor(System.Security.AccessControl.GenericAcl)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GenericAclTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GenericAclTypeSafeWrapper.op_Implicit(System.Security.AccessControl.GenericAcl)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.GenericAclTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Security.AccessControl.GenericAcl"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GenericAclTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Security.AccessControl.GenericAcl"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GenericAclTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GenericAclTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Security.AccessControl.GenericAcl"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.AccessControl.RawAcl)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Security.AccessControl.RawAcl"/></summary>
	<param name="Collection">A <see cref="T:System.Security.AccessControl.GenericAce"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RawAclTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RawAclTypeSafeWrapper.#ctor(System.Security.AccessControl.RawAcl)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RawAclTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RawAclTypeSafeWrapper.op_Implicit(System.Security.AccessControl.RawAcl)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.RawAclTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Security.AccessControl.RawAcl"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RawAclTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Security.AccessControl.RawAcl"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RawAclTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RawAclTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RawAclTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Security.AccessControl.RawAcl"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.ViewCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.ViewCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.View"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.ViewCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.ViewCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.ViewCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.ViewCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper.Add(System.Web.UI.WebControls.View)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper.Remove(System.Web.UI.WebControls.View)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.View)">
	<summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.</summary>
	<returns>true if 
 <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
	<param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.View)">
	<summary>Gets index at which lies given object</summary>
	<param name="item">Object to search for</param>
	<returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper.Insert(System.Int32,System.Web.UI.WebControls.View)">
	<summary>Inserts item into collection at specified index</summary>
	<param name="index">Index to insert item onto</param>
	<param name="item">Item to be inserted</param>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.ViewCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.BindingsCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.BindingsCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.Binding"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BindingsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BindingsCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.BindingsCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BindingsCollectionTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BindingsCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.BindingsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.BindingsCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.BindingsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BindingsCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.BindingsCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BindingsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BindingsCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.BindingsCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ControlBindingsCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ControlBindingsCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.Binding"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ControlBindingsCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper.Item(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ControlBindingsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.ControlBindingsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.ControlBindingsCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper.Add(System.Windows.Forms.Binding)">
	<summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper.Remove(System.Windows.Forms.Binding)">
	<summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
	<returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
	<param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.ControlBindingsCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.AdapterDictionary)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.AdapterDictionary"/></summary>
	<param name="Collection">A <see cref="T:System.String"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AdapterDictionaryTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AdapterDictionaryTypeSafeWrapper.#ctor(System.Web.Configuration.AdapterDictionary)">
	<summary>CTor</summary>
	<param name="Collection">Collection to be wrapped</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AdapterDictionaryTypeSafeWrapper.ItemRO(System.Int32)">
	<summary>Gets or sets value on specified index</summary>
	<param name="index">Index to set or obtain value</param>
	<returns>Value lying on specified <paramref name="index"/></returns>
	<value>New value to be stored at specified index</value>
	<exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AdapterDictionaryTypeSafeWrapper.op_Implicit(System.Web.Configuration.AdapterDictionary)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.AdapterDictionaryTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.Configuration.AdapterDictionary"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AdapterDictionaryTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.Configuration.AdapterDictionary"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AdapterDictionaryTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AdapterDictionaryTypeSafeWrapper.RemoveAt(System.Int32)">
	<summary>Removes item at specified index</summary>
	<param name="Index">Index to remove item at</param>
	<exception cref="T:System.ArgumentException">Index is not valid</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AdapterDictionaryTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.Configuration.AdapterDictionary"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeNamespaceImportCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeNamespaceImportCollection"/></summary>
	<param name="Collection">A <see cref="T:System.CodeDom.CodeNamespaceImport"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceImportCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceImportCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeNamespaceImportCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceImportCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeNamespaceImportCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceImportCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.CodeDom.CodeNamespaceImportCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceImportCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.CodeDom.CodeNamespaceImportCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceImportCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceImportCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.CodeDom.CodeNamespaceImportCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeAttributeArgumentCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeAttributeArgumentCollection"/></summary>
	<param name="Collection">A <see cref="T:System.CodeDom.CodeAttributeArgument"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeArgumentCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeArgumentCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeArgumentCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeAttributeArgumentCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeArgumentCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.CodeDom.CodeAttributeArgumentCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeArgumentCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.CodeDom.CodeAttributeArgumentCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeArgumentCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeArgumentCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.CodeDom.CodeAttributeArgumentCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeAttributeDeclarationCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"/></summary>
	<param name="Collection">A <see cref="T:System.CodeDom.CodeAttributeDeclaration"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeDeclarationCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeDeclarationCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeDeclarationCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeAttributeDeclarationCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeDeclarationCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeDeclarationCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeDeclarationCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeDeclarationCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeCatchClauseCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeCatchClauseCollection"/></summary>
	<param name="Collection">A <see cref="T:System.CodeDom.CodeCatchClause"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCatchClauseCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCatchClauseCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeCatchClauseCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCatchClauseCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeCatchClauseCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCatchClauseCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.CodeDom.CodeCatchClauseCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCatchClauseCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.CodeDom.CodeCatchClauseCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCatchClauseCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCatchClauseCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.CodeDom.CodeCatchClauseCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeCommentStatementCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeCommentStatementCollection"/></summary>
	<param name="Collection">A <see cref="T:System.CodeDom.CodeCommentStatement"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCommentStatementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCommentStatementCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeCommentStatementCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCommentStatementCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeCommentStatementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCommentStatementCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.CodeDom.CodeCommentStatementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCommentStatementCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.CodeDom.CodeCommentStatementCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCommentStatementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCommentStatementCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.CodeDom.CodeCommentStatementCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeDirectiveCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeDirectiveCollection"/></summary>
	<param name="Collection">A <see cref="T:System.CodeDom.CodeDirective"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeDirectiveCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeDirectiveCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeDirectiveCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeDirectiveCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeDirectiveCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeDirectiveCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.CodeDom.CodeDirectiveCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeDirectiveCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.CodeDom.CodeDirectiveCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeDirectiveCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeDirectiveCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.CodeDom.CodeDirectiveCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeExpressionCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeExpressionCollection"/></summary>
	<param name="Collection">A <see cref="T:System.CodeDom.CodeExpression"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeExpressionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeExpressionCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeExpressionCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeExpressionCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeExpressionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeExpressionCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.CodeDom.CodeExpressionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeExpressionCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.CodeDom.CodeExpressionCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeExpressionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeExpressionCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.CodeDom.CodeExpressionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeNamespaceCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeNamespaceCollection"/></summary>
	<param name="Collection">A <see cref="T:System.CodeDom.CodeNamespace"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeNamespaceCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeNamespaceCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.CodeDom.CodeNamespaceCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.CodeDom.CodeNamespaceCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.CodeDom.CodeNamespaceCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"/></summary>
	<param name="Collection">A <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeParameterDeclarationExpressionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeParameterDeclarationExpressionCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeParameterDeclarationExpressionCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeParameterDeclarationExpressionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeParameterDeclarationExpressionCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeParameterDeclarationExpressionCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeParameterDeclarationExpressionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeParameterDeclarationExpressionCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeStatementCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeStatementCollection"/></summary>
	<param name="Collection">A <see cref="T:System.CodeDom.CodeStatement"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeStatementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeStatementCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeStatementCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeStatementCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeStatementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeStatementCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.CodeDom.CodeStatementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeStatementCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.CodeDom.CodeStatementCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeStatementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeStatementCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.CodeDom.CodeStatementCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeTypeDeclarationCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"/></summary>
	<param name="Collection">A <see cref="T:System.CodeDom.CodeTypeDeclaration"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeDeclarationCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeDeclarationCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeDeclarationCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeTypeDeclarationCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeDeclarationCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeDeclarationCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeDeclarationCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeDeclarationCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeTypeMemberCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeTypeMemberCollection"/></summary>
	<param name="Collection">A <see cref="T:System.CodeDom.CodeTypeMember"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeMemberCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeMemberCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeTypeMemberCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeMemberCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeTypeMemberCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeMemberCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.CodeDom.CodeTypeMemberCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeMemberCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.CodeDom.CodeTypeMemberCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeMemberCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeMemberCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.CodeDom.CodeTypeMemberCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeTypeParameterCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeTypeParameterCollection"/></summary>
	<param name="Collection">A <see cref="T:System.CodeDom.CodeTypeParameter"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeParameterCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeParameterCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeTypeParameterCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeParameterCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeTypeParameterCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeParameterCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.CodeDom.CodeTypeParameterCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeParameterCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.CodeDom.CodeTypeParameterCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeParameterCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeParameterCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.CodeDom.CodeTypeParameterCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeTypeReferenceCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeTypeReferenceCollection"/></summary>
	<param name="Collection">A <see cref="T:System.CodeDom.CodeTypeReference"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeReferenceCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeReferenceCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeReferenceCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeTypeReferenceCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeReferenceCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.CodeDom.CodeTypeReferenceCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeReferenceCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.CodeDom.CodeTypeReferenceCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeReferenceCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeReferenceCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.CodeDom.CodeTypeReferenceCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.Compiler.CompilerErrorCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"/></summary>
	<param name="Collection">A <see cref="T:System.CodeDom.Compiler.CompilerError"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CompilerErrorCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CompilerErrorCollectionTypeSafeWrapper.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CompilerErrorCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.Compiler.CompilerErrorCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CompilerErrorCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CompilerErrorCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CompilerErrorCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CompilerErrorCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.ComponentModel.Design.DesignerVerbCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.ComponentModel.Design.DesignerVerbCollection"/></summary>
	<param name="Collection">A <see cref="T:System.ComponentModel.Design.DesignerVerb"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerVerbCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerVerbCollectionTypeSafeWrapper.#ctor(System.ComponentModel.Design.DesignerVerbCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerVerbCollectionTypeSafeWrapper.op_Implicit(System.ComponentModel.Design.DesignerVerbCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerVerbCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.ComponentModel.Design.DesignerVerbCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerVerbCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.ComponentModel.Design.DesignerVerbCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerVerbCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerVerbCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.ComponentModel.Design.DesignerVerbCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.SqlClient.SqlBulkCopyColumnMappingCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlBulkCopyColumnMappingCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlBulkCopyColumnMappingCollectionTypeSafeWrapper.#ctor(System.Data.SqlClient.SqlBulkCopyColumnMappingCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlBulkCopyColumnMappingCollectionTypeSafeWrapper.op_Implicit(System.Data.SqlClient.SqlBulkCopyColumnMappingCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlBulkCopyColumnMappingCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlBulkCopyColumnMappingCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlBulkCopyColumnMappingCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlBulkCopyColumnMappingCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Diagnostics.CounterCreationDataCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Diagnostics.CounterCreationDataCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Diagnostics.CounterCreationData"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CounterCreationDataCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CounterCreationDataCollectionTypeSafeWrapper.#ctor(System.Diagnostics.CounterCreationDataCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CounterCreationDataCollectionTypeSafeWrapper.op_Implicit(System.Diagnostics.CounterCreationDataCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CounterCreationDataCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Diagnostics.CounterCreationDataCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CounterCreationDataCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Diagnostics.CounterCreationDataCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CounterCreationDataCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CounterCreationDataCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Diagnostics.CounterCreationDataCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Diagnostics.EventLogPermissionEntryCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Diagnostics.EventLogPermissionEntryCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Diagnostics.EventLogPermissionEntry"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogPermissionEntryCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogPermissionEntryCollectionTypeSafeWrapper.#ctor(System.Diagnostics.EventLogPermissionEntryCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogPermissionEntryCollectionTypeSafeWrapper.op_Implicit(System.Diagnostics.EventLogPermissionEntryCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogPermissionEntryCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Diagnostics.EventLogPermissionEntryCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogPermissionEntryCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Diagnostics.EventLogPermissionEntryCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogPermissionEntryCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogPermissionEntryCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Diagnostics.EventLogPermissionEntryCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Diagnostics.PerformanceCounterPermissionEntryCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PerformanceCounterPermissionEntryCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PerformanceCounterPermissionEntryCollectionTypeSafeWrapper.#ctor(System.Diagnostics.PerformanceCounterPermissionEntryCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PerformanceCounterPermissionEntryCollectionTypeSafeWrapper.op_Implicit(System.Diagnostics.PerformanceCounterPermissionEntryCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.PerformanceCounterPermissionEntryCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PerformanceCounterPermissionEntryCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PerformanceCounterPermissionEntryCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PerformanceCounterPermissionEntryCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509CertificateCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509CertificateCollectionTypeSafeWrapper.#ctor(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509CertificateCollectionTypeSafeWrapper.op_Implicit(System.Security.Cryptography.X509Certificates.X509CertificateCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509CertificateCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509CertificateCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509CertificateCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509CertificateCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"/></summary>
	<param name="Collection">A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509Certificate2CollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509Certificate2CollectionTypeSafeWrapper.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509Certificate2CollectionTypeSafeWrapper.op_Implicit(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509Certificate2CollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509Certificate2CollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509Certificate2CollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509Certificate2CollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.ParserErrorCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.ParserErrorCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.ParserError"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ParserErrorCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ParserErrorCollectionTypeSafeWrapper.#ctor(System.Web.ParserErrorCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ParserErrorCollectionTypeSafeWrapper.op_Implicit(System.Web.ParserErrorCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ParserErrorCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.ParserErrorCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ParserErrorCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.ParserErrorCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ParserErrorCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ParserErrorCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.ParserErrorCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.EmbeddedMailObjectsCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.EmbeddedMailObjectsCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.EmbeddedMailObject"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EmbeddedMailObjectsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EmbeddedMailObjectsCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.EmbeddedMailObjectsCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EmbeddedMailObjectsCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.EmbeddedMailObjectsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.EmbeddedMailObjectsCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.EmbeddedMailObjectsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EmbeddedMailObjectsCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.EmbeddedMailObjectsCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EmbeddedMailObjectsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EmbeddedMailObjectsCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.EmbeddedMailObjectsCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.RoleGroupCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.RoleGroupCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.RoleGroup"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleGroupCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleGroupCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.RoleGroupCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleGroupCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.RoleGroupCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleGroupCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.RoleGroupCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleGroupCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.RoleGroupCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleGroupCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleGroupCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.RoleGroupCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProxyWebPartConnectionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProxyWebPartConnectionCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProxyWebPartConnectionCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProxyWebPartConnectionCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProxyWebPartConnectionCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProxyWebPartConnectionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProxyWebPartConnectionCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.WebPartConnectionCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartConnectionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartConnectionCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.WebPartConnectionCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartConnectionCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.WebPartConnectionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartConnectionCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartConnectionCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartConnectionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartConnectionCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDisplayModeCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDisplayModeCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDisplayModeCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDisplayModeCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDisplayModeCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDisplayModeCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDisplayModeCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.WebPartTransformerCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartTransformerCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartTransformerCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.WebPartTransformerCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartTransformerCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.WebPartTransformerCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartTransformerCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartTransformerCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartTransformerCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartTransformerCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Documents.LinkTargetCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Documents.LinkTargetCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Documents.LinkTarget"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkTargetCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkTargetCollectionTypeSafeWrapper.#ctor(System.Windows.Documents.LinkTargetCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkTargetCollectionTypeSafeWrapper.op_Implicit(System.Windows.Documents.LinkTargetCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkTargetCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Documents.LinkTargetCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkTargetCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Documents.LinkTargetCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkTargetCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkTargetCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Documents.LinkTargetCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionCollectionTypeSafeWrapper.#ctor(System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionCollectionTypeSafeWrapper.op_Implicit(System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Xml.Serialization.XmlAnyElementAttributes)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes"/></summary>
	<param name="Collection">A <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAnyElementAttributesTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAnyElementAttributesTypeSafeWrapper.#ctor(System.Xml.Serialization.XmlAnyElementAttributes)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAnyElementAttributesTypeSafeWrapper.op_Implicit(System.Xml.Serialization.XmlAnyElementAttributes)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAnyElementAttributesTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAnyElementAttributesTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAnyElementAttributesTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAnyElementAttributesTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Xml.Serialization.XmlArrayItemAttributes)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes"/></summary>
	<param name="Collection">A <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlArrayItemAttributesTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlArrayItemAttributesTypeSafeWrapper.#ctor(System.Xml.Serialization.XmlArrayItemAttributes)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlArrayItemAttributesTypeSafeWrapper.op_Implicit(System.Xml.Serialization.XmlArrayItemAttributes)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlArrayItemAttributesTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlArrayItemAttributesTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlArrayItemAttributesTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlArrayItemAttributesTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Xml.Serialization.XmlElementAttributes)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Xml.Serialization.XmlElementAttributes"/></summary>
	<param name="Collection">A <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlElementAttributesTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlElementAttributesTypeSafeWrapper.#ctor(System.Xml.Serialization.XmlElementAttributes)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlElementAttributesTypeSafeWrapper.op_Implicit(System.Xml.Serialization.XmlElementAttributes)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlElementAttributesTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Xml.Serialization.XmlElementAttributes"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlElementAttributesTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Xml.Serialization.XmlElementAttributes"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlElementAttributesTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlElementAttributesTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Xml.Serialization.XmlElementAttributes"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Xml.Serialization.XmlSchemas)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Xml.Serialization.XmlSchemas"/></summary>
	<param name="Collection">A <see cref="T:System.Xml.Schema.XmlSchema"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemasTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemasTypeSafeWrapper.#ctor(System.Xml.Serialization.XmlSchemas)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemasTypeSafeWrapper.op_Implicit(System.Xml.Serialization.XmlSchemas)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemasTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Xml.Serialization.XmlSchemas"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemasTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Xml.Serialization.XmlSchemas"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemasTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemasTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Xml.Serialization.XmlSchemas"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Xml.Schema.XmlSchemaObjectCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Xml.Schema.XmlSchemaObject"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemaObjectCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemaObjectCollectionTypeSafeWrapper.#ctor(System.Xml.Schema.XmlSchemaObjectCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemaObjectCollectionTypeSafeWrapper.op_Implicit(System.Xml.Schema.XmlSchemaObjectCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemaObjectCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemaObjectCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemaObjectCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemaObjectCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Collections.Specialized.StringCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Collections.Specialized.StringCollection"/></summary>
	<param name="Collection">A <see cref="T:System.String"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StringCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StringCollectionTypeSafeWrapper.#ctor(System.Collections.Specialized.StringCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StringCollectionTypeSafeWrapper.op_Implicit(System.Collections.Specialized.StringCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.StringCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Collections.Specialized.StringCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StringCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Collections.Specialized.StringCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StringCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StringCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Collections.Specialized.StringCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"/></summary>
	<param name="Collection">A <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerOptionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerOptionCollectionTypeSafeWrapper.#ctor(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerOptionCollectionTypeSafeWrapper.op_Implicit(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerOptionCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerOptionCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerOptionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerOptionCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.ComponentModel.EventDescriptorCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.ComponentModel.EventDescriptorCollection"/></summary>
	<param name="Collection">A <see cref="T:System.ComponentModel.EventDescriptor"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventDescriptorCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventDescriptorCollectionTypeSafeWrapper.#ctor(System.ComponentModel.EventDescriptorCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventDescriptorCollectionTypeSafeWrapper.op_Implicit(System.ComponentModel.EventDescriptorCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventDescriptorCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.ComponentModel.EventDescriptorCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventDescriptorCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.ComponentModel.EventDescriptorCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventDescriptorCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventDescriptorCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.ComponentModel.EventDescriptorCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.ComponentModel.ListSortDescriptionCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/></summary>
	<param name="Collection">A <see cref="T:System.ComponentModel.ListSortDescription"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListSortDescriptionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListSortDescriptionCollectionTypeSafeWrapper.#ctor(System.ComponentModel.ListSortDescriptionCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListSortDescriptionCollectionTypeSafeWrapper.op_Implicit(System.ComponentModel.ListSortDescriptionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListSortDescriptionCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListSortDescriptionCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListSortDescriptionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListSortDescriptionCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.ComponentModel.PropertyDescriptorCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/></summary>
	<param name="Collection">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyDescriptorCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyDescriptorCollectionTypeSafeWrapper.#ctor(System.ComponentModel.PropertyDescriptorCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyDescriptorCollectionTypeSafeWrapper.op_Implicit(System.ComponentModel.PropertyDescriptorCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyDescriptorCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyDescriptorCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyDescriptorCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyDescriptorCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.Common.DataColumnMappingCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Data.Common.DataColumnMappingCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Data.Common.DataColumnMapping"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnMappingCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnMappingCollectionTypeSafeWrapper.#ctor(System.Data.Common.DataColumnMappingCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnMappingCollectionTypeSafeWrapper.op_Implicit(System.Data.Common.DataColumnMappingCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnMappingCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Data.Common.DataColumnMappingCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnMappingCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Data.Common.DataColumnMappingCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnMappingCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnMappingCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Data.Common.DataColumnMappingCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.Common.DbParameterCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Data.Common.DbParameterCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Data.Common.DbParameter"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DbParameterCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DbParameterCollectionTypeSafeWrapper.#ctor(System.Data.Common.DbParameterCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DbParameterCollectionTypeSafeWrapper.op_Implicit(System.Data.Common.DbParameterCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DbParameterCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Data.Common.DbParameterCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DbParameterCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Data.Common.DbParameterCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DbParameterCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DbParameterCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Data.Common.DbParameterCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.Odbc.OdbcParameterCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Data.Odbc.OdbcParameterCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Data.Odbc.OdbcParameter"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcParameterCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcParameterCollectionTypeSafeWrapper.#ctor(System.Data.Odbc.OdbcParameterCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcParameterCollectionTypeSafeWrapper.op_Implicit(System.Data.Odbc.OdbcParameterCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcParameterCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Data.Odbc.OdbcParameterCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcParameterCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Data.Odbc.OdbcParameterCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcParameterCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcParameterCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Data.Odbc.OdbcParameterCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.OleDb.OleDbParameterCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Data.OleDb.OleDbParameterCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Data.OleDb.OleDbParameter"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbParameterCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbParameterCollectionTypeSafeWrapper.#ctor(System.Data.OleDb.OleDbParameterCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbParameterCollectionTypeSafeWrapper.op_Implicit(System.Data.OleDb.OleDbParameterCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbParameterCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Data.OleDb.OleDbParameterCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbParameterCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Data.OleDb.OleDbParameterCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbParameterCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbParameterCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Data.OleDb.OleDbParameterCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.SqlClient.SqlParameterCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Data.SqlClient.SqlParameterCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Data.SqlClient.SqlParameter"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlParameterCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlParameterCollectionTypeSafeWrapper.#ctor(System.Data.SqlClient.SqlParameterCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlParameterCollectionTypeSafeWrapper.op_Implicit(System.Data.SqlClient.SqlParameterCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlParameterCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Data.SqlClient.SqlParameterCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlParameterCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Data.SqlClient.SqlParameterCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlParameterCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlParameterCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Data.SqlClient.SqlParameterCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.Common.DataTableMappingCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Data.Common.DataTableMappingCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Data.Common.DataTableMapping"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableMappingCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableMappingCollectionTypeSafeWrapper.#ctor(System.Data.Common.DataTableMappingCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableMappingCollectionTypeSafeWrapper.op_Implicit(System.Data.Common.DataTableMappingCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableMappingCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Data.Common.DataTableMappingCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableMappingCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Data.Common.DataTableMappingCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableMappingCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableMappingCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Data.Common.DataTableMappingCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Diagnostics.TraceListenerCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Diagnostics.TraceListenerCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Diagnostics.TraceListener"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TraceListenerCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TraceListenerCollectionTypeSafeWrapper.#ctor(System.Diagnostics.TraceListenerCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TraceListenerCollectionTypeSafeWrapper.op_Implicit(System.Diagnostics.TraceListenerCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TraceListenerCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Diagnostics.TraceListenerCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TraceListenerCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Diagnostics.TraceListenerCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TraceListenerCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TraceListenerCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Diagnostics.TraceListenerCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.SiteMapNodeCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.SiteMapNodeCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.SiteMapNode"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapNodeCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapNodeCollectionTypeSafeWrapper.#ctor(System.Web.SiteMapNodeCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapNodeCollectionTypeSafeWrapper.op_Implicit(System.Web.SiteMapNodeCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapNodeCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.SiteMapNodeCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapNodeCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.SiteMapNodeCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapNodeCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapNodeCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.SiteMapNodeCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.DataControlFieldCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.DataControlField"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataControlFieldCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataControlFieldCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.DataControlFieldCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataControlFieldCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.DataControlFieldCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataControlFieldCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataControlFieldCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataControlFieldCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataControlFieldCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.HotSpotCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.HotSpotCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.HotSpot"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HotSpotCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HotSpotCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.HotSpotCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HotSpotCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.HotSpotCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HotSpotCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.HotSpotCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HotSpotCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.HotSpotCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HotSpotCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HotSpotCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.HotSpotCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.MenuItemBindingCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.MenuItemBindingCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.MenuItemBinding"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemBindingCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemBindingCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.MenuItemBindingCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemBindingCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.MenuItemBindingCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemBindingCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.MenuItemBindingCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemBindingCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.MenuItemBindingCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemBindingCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemBindingCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.MenuItemBindingCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.MenuItemStyleCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.MenuItemStyleCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.MenuItemStyle"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemStyleCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemStyleCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.MenuItemStyleCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemStyleCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.MenuItemStyleCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemStyleCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.MenuItemStyleCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemStyleCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.MenuItemStyleCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemStyleCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemStyleCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.MenuItemStyleCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.ParameterCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.ParameterCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.Parameter"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebParameterCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebParameterCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.ParameterCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebParameterCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.ParameterCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebParameterCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.ParameterCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebParameterCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.ParameterCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebParameterCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebParameterCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.ParameterCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.StyleCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.StyleCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.Style"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebStyleCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebStyleCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.StyleCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebStyleCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.StyleCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebStyleCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.StyleCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebStyleCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.StyleCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebStyleCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebStyleCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.StyleCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.SubMenuStyleCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.SubMenuStyleCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.SubMenuStyle"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SubMenuStyleCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SubMenuStyleCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.SubMenuStyleCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SubMenuStyleCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.SubMenuStyleCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SubMenuStyleCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.SubMenuStyleCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SubMenuStyleCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.SubMenuStyleCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SubMenuStyleCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SubMenuStyleCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.SubMenuStyleCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.TreeNodeBindingCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.TreeNodeBindingCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.TreeNodeBinding"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeBindingCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeBindingCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.TreeNodeBindingCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeBindingCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.TreeNodeBindingCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeBindingCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.TreeNodeBindingCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeBindingCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.TreeNodeBindingCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeBindingCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeBindingCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.TreeNodeBindingCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.TreeNodeStyleCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.TreeNodeStyleCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.TreeNodeStyle"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeStyleCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeStyleCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.TreeNodeStyleCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeStyleCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.TreeNodeStyleCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeStyleCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.TreeNodeStyleCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeStyleCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.TreeNodeStyleCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeStyleCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeStyleCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.TreeNodeStyleCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.ListItemCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.ListItemCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.ListItem"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebListItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebListItemCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.ListItemCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebListItemCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.ListItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebListItemCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.ListItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebListItemCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.ListItemCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebListItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebListItemCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.ListItemCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.TableCellCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.TableCellCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.TableCell"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableCellCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableCellCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.TableCellCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableCellCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.TableCellCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableCellCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.TableCellCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableCellCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.TableCellCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableCellCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableCellCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.TableCellCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.TableRowCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.TableRowCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.TableRow"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableRowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableRowCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.TableRowCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableRowCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.TableRowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableRowCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.TableRowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableRowCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.TableRowCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableRowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableRowCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.TableRowCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WizardStepCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WizardStepCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Web.UI.WebControls.WizardStep"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WizardStepCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WizardStepCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WizardStepCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WizardStepCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WizardStepCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WizardStepCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Web.UI.WebControls.WizardStepCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WizardStepCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Web.UI.WebControls.WizardStepCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WizardStepCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WizardStepCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Web.UI.WebControls.WizardStepCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Controls.ColumnDefinitionCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Controls.ColumnDefinitionCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Controls.ColumnDefinition"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebColumnDefinitionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebColumnDefinitionCollectionTypeSafeWrapper.#ctor(System.Windows.Controls.ColumnDefinitionCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebColumnDefinitionCollectionTypeSafeWrapper.op_Implicit(System.Windows.Controls.ColumnDefinitionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebColumnDefinitionCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Controls.ColumnDefinitionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebColumnDefinitionCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Controls.ColumnDefinitionCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebColumnDefinitionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebColumnDefinitionCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Controls.ColumnDefinitionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Controls.RowDefinitionCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Controls.RowDefinitionCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Controls.RowDefinition"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RowDefinitionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RowDefinitionCollectionTypeSafeWrapper.#ctor(System.Windows.Controls.RowDefinitionCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RowDefinitionCollectionTypeSafeWrapper.op_Implicit(System.Windows.Controls.RowDefinitionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.RowDefinitionCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Controls.RowDefinitionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RowDefinitionCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Controls.RowDefinitionCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RowDefinitionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RowDefinitionCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Controls.RowDefinitionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Controls.UIElementCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Controls.UIElementCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.UIElement"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UIElementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UIElementCollectionTypeSafeWrapper.#ctor(System.Windows.Controls.UIElementCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UIElementCollectionTypeSafeWrapper.op_Implicit(System.Windows.Controls.UIElementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.UIElementCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Controls.UIElementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UIElementCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Controls.UIElementCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UIElementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UIElementCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Controls.UIElementCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Documents.TableCellCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Documents.TableCellCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Documents.TableCell"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableCellCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableCellCollectionTypeSafeWrapper.#ctor(System.Windows.Documents.TableCellCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableCellCollectionTypeSafeWrapper.op_Implicit(System.Windows.Documents.TableCellCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableCellCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Documents.TableCellCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableCellCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Documents.TableCellCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableCellCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableCellCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Documents.TableCellCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Documents.TableColumnCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Documents.TableColumnCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Documents.TableColumn"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableColumnCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableColumnCollectionTypeSafeWrapper.#ctor(System.Windows.Documents.TableColumnCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableColumnCollectionTypeSafeWrapper.op_Implicit(System.Windows.Documents.TableColumnCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableColumnCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Documents.TableColumnCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableColumnCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Documents.TableColumnCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableColumnCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableColumnCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Documents.TableColumnCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Documents.TableRowCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Documents.TableRowCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Documents.TableRow"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowCollectionTypeSafeWrapper.#ctor(System.Windows.Documents.TableRowCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowCollectionTypeSafeWrapper.op_Implicit(System.Windows.Documents.TableRowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Documents.TableRowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Documents.TableRowCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Documents.TableRowCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Documents.TableRowGroupCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Documents.TableRowGroupCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Documents.TableRowGroup"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowGroupCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowGroupCollectionTypeSafeWrapper.#ctor(System.Windows.Documents.TableRowGroupCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowGroupCollectionTypeSafeWrapper.op_Implicit(System.Windows.Documents.TableRowGroupCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowGroupCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Documents.TableRowGroupCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowGroupCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Documents.TableRowGroupCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowGroupCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowGroupCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Documents.TableRowGroupCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.AutoCompleteStringCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.AutoCompleteStringCollection"/></summary>
	<param name="Collection">A <see cref="T:System.String"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AutoCompleteStringCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AutoCompleteStringCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.AutoCompleteStringCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AutoCompleteStringCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.AutoCompleteStringCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.AutoCompleteStringCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.AutoCompleteStringCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AutoCompleteStringCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.AutoCompleteStringCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AutoCompleteStringCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AutoCompleteStringCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.AutoCompleteStringCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.DataGridViewCellCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.DataGridViewCellCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.DataGridViewCell"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewCellCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewCellCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.DataGridViewCellCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewCellCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.DataGridViewCellCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewCellCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.DataGridViewCellCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewCellCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.DataGridViewCellCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewCellCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewCellCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.DataGridViewCellCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.DataGridViewColumnCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.DataGridViewColumnCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.DataGridViewColumn"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewColumnCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewColumnCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.DataGridViewColumnCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewColumnCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.DataGridViewColumnCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewColumnCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.DataGridViewColumnCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewColumnCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.DataGridViewColumnCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewColumnCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewColumnCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.DataGridViewColumnCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.DataGridViewRowCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.DataGridViewRowCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.DataGridViewRow"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewRowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewRowCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.DataGridViewRowCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewRowCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.DataGridViewRowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewRowCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.DataGridViewRowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewRowCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.DataGridViewRowCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewRowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewRowCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.DataGridViewRowCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.DataGridViewSelectedCellCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.DataGridViewSelectedCellCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.DataGridViewCell"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedCellCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedCellCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.DataGridViewSelectedCellCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedCellCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.DataGridViewSelectedCellCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedCellCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.DataGridViewSelectedCellCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedCellCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.DataGridViewSelectedCellCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedCellCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedCellCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.DataGridViewSelectedCellCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.DataGridViewSelectedColumnCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.DataGridViewSelectedColumnCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.DataGridViewColumn"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedColumnCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedColumnCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.DataGridViewSelectedColumnCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedColumnCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.DataGridViewSelectedColumnCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedColumnCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.DataGridViewSelectedColumnCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedColumnCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.DataGridViewSelectedColumnCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedColumnCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedColumnCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.DataGridViewSelectedColumnCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.DataGridViewSelectedRowCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.DataGridViewSelectedRowCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.DataGridViewRow"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedRowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedRowCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.DataGridViewSelectedRowCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedRowCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.DataGridViewSelectedRowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedRowCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.DataGridViewSelectedRowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedRowCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.DataGridViewSelectedRowCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedRowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedRowCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.DataGridViewSelectedRowCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.GridColumnStylesCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.GridColumnStylesCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.DataGridColumnStyle"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridColumnStylesCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridColumnStylesCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.GridColumnStylesCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridColumnStylesCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.GridColumnStylesCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridColumnStylesCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.GridColumnStylesCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridColumnStylesCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.GridColumnStylesCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridColumnStylesCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridColumnStylesCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.GridColumnStylesCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.GridTableStylesCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.GridTableStylesCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.DataGridTableStyle"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridTableStylesCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridTableStylesCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.GridTableStylesCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridTableStylesCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.GridTableStylesCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridTableStylesCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.GridTableStylesCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridTableStylesCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.GridTableStylesCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridTableStylesCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridTableStylesCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.GridTableStylesCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.CheckedListBox.CheckedIndexCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Int32"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxCheckedIndexCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxCheckedIndexCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.CheckedListBox.CheckedIndexCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxCheckedIndexCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.CheckedListBox.CheckedIndexCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxCheckedIndexCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxCheckedIndexCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxCheckedIndexCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxCheckedIndexCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ImageList.ImageCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ImageList.ImageCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Drawing.Image"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ImageCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ImageCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ImageList.ImageCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ImageCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ImageList.ImageCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ImageCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.ImageList.ImageCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ImageCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.ImageList.ImageCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ImageCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ImageCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.ImageList.ImageCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.Control.ControlCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.Control.ControlCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.Control"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.Control.ControlCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.Control.ControlCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.Control.ControlCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.Control.ControlCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.Control.ControlCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ToolStripItemCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ToolStripItemCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.ToolStripItem"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripItemCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ToolStripItemCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripItemCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ToolStripItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripItemCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.ToolStripItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripItemCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.ToolStripItemCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripItemCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.ToolStripItemCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.ToolStripPanelRow"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripPanelRowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripPanelRowCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripPanelRowCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripPanelRowCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripPanelRowCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripPanelRowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripPanelRowCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.LinkLabel.LinkCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.LinkLabel.LinkCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.LinkLabel.Link"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.LinkLabel.LinkCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.LinkLabel.LinkCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.LinkLabel.LinkCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.LinkLabel.LinkCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.LinkLabel.LinkCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListBox.IntegerCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListBox.IntegerCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Int32"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IntegerCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IntegerCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListBox.IntegerCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IntegerCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListBox.IntegerCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.IntegerCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.ListBox.IntegerCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IntegerCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.ListBox.IntegerCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IntegerCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IntegerCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.ListBox.IntegerCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListBox.SelectedIndexCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Int32"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxSelectedIndexCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxSelectedIndexCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListBox.SelectedIndexCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxSelectedIndexCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListBox.SelectedIndexCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxSelectedIndexCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxSelectedIndexCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxSelectedIndexCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxSelectedIndexCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListView.ColumnHeaderCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.ColumnHeader"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ColumnHeaderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ColumnHeaderCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListView.ColumnHeaderCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ColumnHeaderCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListView.ColumnHeaderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ColumnHeaderCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ColumnHeaderCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ColumnHeaderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ColumnHeaderCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListView.CheckedIndexCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Int32"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewCheckedIndexCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewCheckedIndexCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListView.CheckedIndexCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewCheckedIndexCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListView.CheckedIndexCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewCheckedIndexCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewCheckedIndexCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewCheckedIndexCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewCheckedIndexCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListView.CheckedListViewItemCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.ListViewItem"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CheckedListViewItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CheckedListViewItemCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListView.CheckedListViewItemCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CheckedListViewItemCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListView.CheckedListViewItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CheckedListViewItemCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CheckedListViewItemCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CheckedListViewItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CheckedListViewItemCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListView.ListViewItemCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.ListViewItem"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewItemCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListView.ListViewItemCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewItemCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListView.ListViewItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewItemCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewItemCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewItemCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListView.SelectedIndexCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Int32"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedIndexCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedIndexCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListView.SelectedIndexCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedIndexCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListView.SelectedIndexCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedIndexCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedIndexCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedIndexCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedIndexCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListView.SelectedListViewItemCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.ListViewItem"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedListViewItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedListViewItemCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListView.SelectedListViewItemCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedListViewItemCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListView.SelectedListViewItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedListViewItemCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedListViewItemCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedListViewItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedListViewItemCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListViewGroupCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListViewGroupCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.ListViewGroup"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewGroupCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewGroupCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListViewGroupCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewGroupCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListViewGroupCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewGroupCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.ListViewGroupCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewGroupCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.ListViewGroupCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewGroupCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewGroupCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.ListViewGroupCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListViewItem.ListViewSubItemCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItemCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewSubItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewSubItemCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListViewItem.ListViewSubItemCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewSubItemCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListViewItem.ListViewSubItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewSubItemCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewSubItemCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItemCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewSubItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewSubItemCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItemCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.Menu.MenuItemCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.Menu.MenuItemCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.MenuItem"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.Menu.MenuItemCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.Menu.MenuItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.Menu.MenuItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.Menu.MenuItemCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.Menu.MenuItemCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.StatusBar.StatusBarPanelCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.StatusBar.StatusBarPanelCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.StatusBarPanel"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StatusBarPanelCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StatusBarPanelCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.StatusBar.StatusBarPanelCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StatusBarPanelCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.StatusBar.StatusBarPanelCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.StatusBarPanelCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.StatusBar.StatusBarPanelCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StatusBarPanelCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.StatusBar.StatusBarPanelCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StatusBarPanelCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StatusBarPanelCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.StatusBar.StatusBarPanelCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.TabControl.TabPageCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.TabControl.TabPageCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.TabPage"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TabPageCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TabPageCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.TabControl.TabPageCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TabPageCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.TabControl.TabPageCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TabPageCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.TabControl.TabPageCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TabPageCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.TabControl.TabPageCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TabPageCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TabPageCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.TabControl.TabPageCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.TableLayoutStyleCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.TableLayoutStyleCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.TableLayoutStyle"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableLayoutStyleCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableLayoutStyleCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.TableLayoutStyleCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableLayoutStyleCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.TableLayoutStyleCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableLayoutStyleCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.TableLayoutStyleCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableLayoutStyleCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.TableLayoutStyleCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableLayoutStyleCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableLayoutStyleCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.TableLayoutStyleCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ToolBar.ToolBarButtonCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.ToolBarButton"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolBarButtonCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolBarButtonCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ToolBar.ToolBarButtonCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolBarButtonCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ToolBar.ToolBarButtonCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolBarButtonCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolBarButtonCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolBarButtonCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolBarButtonCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.TreeNodeCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.TreeNodeCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Forms.TreeNode"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.TreeNodeCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.TreeNodeCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Forms.TreeNodeCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Forms.TreeNodeCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Forms.TreeNodeCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Media.Animation.ThicknessKeyFrameCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ThicknessKeyFrameCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ThicknessKeyFrameCollectionTypeSafeWrapper.#ctor(System.Windows.Media.Animation.ThicknessKeyFrameCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ThicknessKeyFrameCollectionTypeSafeWrapper.op_Implicit(System.Windows.Media.Animation.ThicknessKeyFrameCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ThicknessKeyFrameCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ThicknessKeyFrameCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ThicknessKeyFrameCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ThicknessKeyFrameCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.TriggerActionCollection)">
	<summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.TriggerActionCollection"/></summary>
	<param name="Collection">A <see cref="T:System.Windows.TriggerAction"/> to be wrapped</param>
	<returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TriggerActionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TriggerActionCollectionTypeSafeWrapper.#ctor(System.Windows.TriggerActionCollection)">
	<summary>CTor</summary>
	<param name="Collection">Collection to wrapp</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TriggerActionCollectionTypeSafeWrapper.op_Implicit(System.Windows.TriggerActionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TriggerActionCollectionTypeSafeWrapper">
	<summary>Converts <see cref="T:System.Windows.TriggerActionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TriggerActionCollectionTypeSafeWrapper"/></summary>
	<param name="a">A <see cref="T:System.Windows.TriggerActionCollection"/> to be converted</param>
	<returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TriggerActionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TriggerActionCollectionTypeSafeWrapper">
	<summary>Wraps <see cref="T:System.Windows.TriggerActionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/&gt;</summary>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Collections.BitArray)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Collections.BitArray"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.ComponentModel.AttributeCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.ComponentModel.AttributeCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.ComponentModel.Design.DesignerCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.ComponentModel.Design.DesignerCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.DataViewSettingCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Data.DataViewSettingCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.Odbc.OdbcErrorCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Data.Odbc.OdbcErrorCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.OleDb.OleDbErrorCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Data.OleDb.OleDbErrorCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.SqlClient.SqlErrorCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Data.SqlClient.SqlErrorCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Diagnostics.EventLogEntryCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Diagnostics.EventLogEntryCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Drawing.Printing.PrinterSettings.PaperSourceCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Drawing.Printing.PrinterSettings.PaperSizeCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Net.CookieCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Net.CookieCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.Cryptography.AsnEncodedDataCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.Cryptography.OidCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Security.Cryptography.OidCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.Cryptography.X509Certificates.X509ExtensionCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.Cryptography.X509Certificates.X509ChainElementCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.Permissions.KeyContainerPermissionAccessEntryCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.Policy.ApplicationTrustCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Security.Policy.ApplicationTrustCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Text.RegularExpressions.CaptureCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Text.RegularExpressions.CaptureCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Text.RegularExpressions.GroupCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Text.RegularExpressions.GroupCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Text.RegularExpressions.MatchCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Text.RegularExpressions.MatchCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.ControlCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.ControlCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.HtmlControls.HtmlTableCellCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.HtmlControls.HtmlTableRowCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.ValidatorCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.ValidatorCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.DataGridColumnCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.DataGridItemCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.DataGridItemCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.DataKeyArray)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.DataKeyArray"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.DataListItemCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.DataListItemCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.DetailsViewRowCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.DetailsViewRowCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.GridViewRowCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.GridViewRowCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.MenuItemCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.MenuItemCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.RepeaterItemCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.RepeaterItemCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.SelectedDatesCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.TreeNodeCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.TreeNodeCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.GridItemCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.GridItemCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.HtmlElementCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.HtmlElementCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.HtmlWindowCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.HtmlWindowCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.PropertyGrid.PropertyTabCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.PropertyGrid.PropertyTabCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.WindowCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.WindowCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Xml.XmlAttributeCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Xml.XmlAttributeCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.ComponentModel.ComponentCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.ComponentModel.ComponentCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Configuration.ConfigurationLocationCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Configuration.ConfigurationLocationCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Diagnostics.ProcessModuleCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Diagnostics.ProcessModuleCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Diagnostics.ProcessThreadCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Diagnostics.ProcessThreadCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Drawing.Design.CategoryNameCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Drawing.Design.CategoryNameCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Drawing.Design.ToolboxItemCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Drawing.Design.ToolboxItemCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.AccessControl.AuthorizationRuleCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Security.AccessControl.AuthorizationRuleCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Management.WebBaseEventCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Management.WebBaseEventCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.CatalogPartCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.EditorPartCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.TransformerTypeCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.TransformerTypeCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.WebPartCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.WebPartVerbCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerbCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.WebPartZoneCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.FormCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.FormCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.InputLanguageCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.InputLanguageCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Configuration.ConfigurationSectionCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Configuration.ConfigurationSectionCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Configuration.ConfigurationSectionGroupCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Configuration.ConfigurationSectionGroupCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.VirtualDirectoryMappingCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.VirtualDirectoryMappingCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.HttpCookieCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.HttpCookieCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.HttpFileCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.HttpFileCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.HttpModuleCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.HttpModuleCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Configuration.ConnectionStringSettingsCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Configuration.ConnectionStringSettingsCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Configuration.ProviderSettingsCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Configuration.ProviderSettingsCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Net.Configuration.AuthenticationModuleElementCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Net.Configuration.AuthenticationModuleElementCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Net.Configuration.BypassElementCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Net.Configuration.BypassElementCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Net.Configuration.ConnectionManagementElementCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Net.Configuration.ConnectionManagementElementCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Net.Configuration.WebRequestModuleElementCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Net.Configuration.WebRequestModuleElementCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.AssemblyCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.AssemblyCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.AuthorizationRuleCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.AuthorizationRuleCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.BufferModesCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.BufferModesCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.BuildProviderCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.BuildProviderCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.ClientTargetCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.ClientTargetCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.CodeSubDirectoriesCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.CodeSubDirectoriesCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.CompilerCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.CompilerCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.CustomErrorCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.CustomErrorCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.EventMappingSettingsCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.EventMappingSettingsCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.ExpressionBuilderCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.ExpressionBuilderCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.FormsAuthenticationUserCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.FormsAuthenticationUserCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.HttpHandlerActionCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.HttpHandlerActionCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.HttpModuleActionCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.HttpModuleActionCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.NamespaceCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.NamespaceCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.OutputCacheProfileCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.OutputCacheProfileCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.ProfileGroupSettingsCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.ProfileGroupSettingsCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.ProfilePropertySettingsCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.ProfilePropertySettingsCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.ProfileSettingsCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.ProfileSettingsCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.ProtocolCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.ProtocolCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.RuleSettingsCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.RuleSettingsCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.SqlCacheDependencyDatabaseCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.SqlCacheDependencyDatabaseCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.TagMapCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.TagMapCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.TagPrefixCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.TagPrefixCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.TransformerInfoCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.TransformerInfoCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.TrustLevelCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.TrustLevelCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.UrlMappingCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.UrlMappingCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Configuration.ProtectedConfigurationProviderCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Configuration.ProtectedConfigurationProviderCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Configuration.SettingsProviderCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Configuration.SettingsProviderCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Profile.ProfileProviderCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Profile.ProfileProviderCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Security.MembershipProviderCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Security.MembershipProviderCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Security.RoleProviderCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Security.RoleProviderCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.SiteMapProviderCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.SiteMapProviderCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.ConstraintCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Data.ConstraintCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.DataColumnCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Data.DataColumnCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.DataRelationCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Data.DataRelationCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.DataRowCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Data.DataRowCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.DataTableCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Data.DataTableCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.AccessControl.GenericAcl)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Security.AccessControl.GenericAcl"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.AccessControl.RawAcl)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Security.AccessControl.RawAcl"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.ViewCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.ViewCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.BindingsCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.BindingsCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ControlBindingsCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ControlBindingsCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.AdapterDictionary)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.AdapterDictionary"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeNamespaceImportCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeNamespaceImportCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeAttributeArgumentCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeAttributeArgumentCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeAttributeDeclarationCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeCatchClauseCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeCatchClauseCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeCommentStatementCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeCommentStatementCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeDirectiveCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeDirectiveCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeExpressionCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeExpressionCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeNamespaceCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeNamespaceCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeStatementCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeStatementCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeTypeDeclarationCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeTypeMemberCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeTypeMemberCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeTypeParameterCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeTypeParameterCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeTypeReferenceCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeTypeReferenceCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.Compiler.CompilerErrorCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.ComponentModel.Design.DesignerVerbCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.ComponentModel.Design.DesignerVerbCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.SqlClient.SqlBulkCopyColumnMappingCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Diagnostics.CounterCreationDataCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Diagnostics.CounterCreationDataCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Diagnostics.EventLogPermissionEntryCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Diagnostics.EventLogPermissionEntryCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Diagnostics.PerformanceCounterPermissionEntryCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.ParserErrorCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.ParserErrorCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.EmbeddedMailObjectsCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.EmbeddedMailObjectsCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.RoleGroupCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.RoleGroupCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.WebPartConnectionCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.WebPartTransformerCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Documents.LinkTargetCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Documents.LinkTargetCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Xml.Serialization.XmlAnyElementAttributes)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Xml.Serialization.XmlArrayItemAttributes)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Xml.Serialization.XmlElementAttributes)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Xml.Serialization.XmlElementAttributes"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Xml.Serialization.XmlSchemas)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Xml.Serialization.XmlSchemas"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Xml.Schema.XmlSchemaObjectCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Collections.Specialized.StringCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Collections.Specialized.StringCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.ComponentModel.EventDescriptorCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.ComponentModel.EventDescriptorCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.ComponentModel.ListSortDescriptionCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.ComponentModel.PropertyDescriptorCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.Common.DataColumnMappingCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Data.Common.DataColumnMappingCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.Common.DbParameterCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Data.Common.DbParameterCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.Odbc.OdbcParameterCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Data.Odbc.OdbcParameterCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.OleDb.OleDbParameterCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Data.OleDb.OleDbParameterCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.SqlClient.SqlParameterCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Data.SqlClient.SqlParameterCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.Common.DataTableMappingCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Data.Common.DataTableMappingCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Diagnostics.TraceListenerCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Diagnostics.TraceListenerCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.SiteMapNodeCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.SiteMapNodeCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.DataControlFieldCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.HotSpotCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.HotSpotCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.MenuItemBindingCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.MenuItemBindingCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.MenuItemStyleCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.MenuItemStyleCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.ParameterCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.ParameterCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.StyleCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.StyleCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.SubMenuStyleCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.SubMenuStyleCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.TreeNodeBindingCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.TreeNodeBindingCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.TreeNodeStyleCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.TreeNodeStyleCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.ListItemCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.ListItemCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.TableCellCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.TableCellCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.TableRowCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.TableRowCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WizardStepCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WizardStepCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Controls.ColumnDefinitionCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Controls.ColumnDefinitionCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Controls.RowDefinitionCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Controls.RowDefinitionCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Controls.UIElementCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Controls.UIElementCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Documents.TableCellCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Documents.TableCellCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Documents.TableColumnCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Documents.TableColumnCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Documents.TableRowCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Documents.TableRowCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Documents.TableRowGroupCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Documents.TableRowGroupCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.AutoCompleteStringCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.AutoCompleteStringCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.DataGridViewCellCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.DataGridViewCellCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.DataGridViewColumnCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.DataGridViewColumnCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.DataGridViewRowCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.DataGridViewRowCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.DataGridViewSelectedCellCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.DataGridViewSelectedCellCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.DataGridViewSelectedColumnCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.DataGridViewSelectedColumnCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.DataGridViewSelectedRowCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.DataGridViewSelectedRowCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.GridColumnStylesCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.GridColumnStylesCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.GridTableStylesCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.GridTableStylesCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.CheckedListBox.CheckedIndexCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ImageList.ImageCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ImageList.ImageCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.Control.ControlCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.Control.ControlCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ToolStripItemCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ToolStripItemCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.LinkLabel.LinkCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.LinkLabel.LinkCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListBox.IntegerCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListBox.IntegerCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListBox.SelectedIndexCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListView.ColumnHeaderCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListView.CheckedIndexCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListView.CheckedListViewItemCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListView.ListViewItemCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListView.SelectedIndexCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListView.SelectedListViewItemCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListViewGroupCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListViewGroupCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListViewItem.ListViewSubItemCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItemCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.Menu.MenuItemCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.Menu.MenuItemCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.StatusBar.StatusBarPanelCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.StatusBar.StatusBarPanelCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.TabControl.TabPageCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.TabControl.TabPageCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.TableLayoutStyleCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.TableLayoutStyleCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ToolBar.ToolBarButtonCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.TreeNodeCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.TreeNodeCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Media.Animation.ThicknessKeyFrameCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.TriggerActionCollection)">
	<summary>Gets type-safe wrapper of <see cref="T:System.Windows.TriggerActionCollection"/></summary>
	<exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member><member name="T:Tools.CollectionsT.SpecializedT.AsTypeSafe">
	<summary>Contains extension methods for getting specialized collections as type-safe generic collections</summary>
</member><member name="F:Tools.ComponentModelT.CancelMessageEventArgs._CancelMessage">
	<summary>Contains value of the <see cref="P:Tools.ComponentModelT.CancelMessageEventArgs.CancelMessage"/> property</summary>
</member><member name="P:Tools.ComponentModelT.CancelMessageEventArgs.CancelMessage">
	<summary>Human readabele cancel reason reported to source of the event"</summary>
</member><member name="T:Tools.ComponentModelT.CancelMessageEventArgs">
	<summary><see cref="T:System.ComponentModel.CancelEventArgs"/> with message witn reason for cancellation</summary>
</member><member name="P:Tools.DataStructuresT.GenericT.IT1orT2`2.value1">
	<summary>Gets or sets value of type <see cref="T1"/></summary>
	<value>Non-null value to set value of type <see cref="T1"/> and delete value of type <see cref="T2"/> or nothing to delete value of type <see cref="T1"/></value>
	<returns>If this instance contains value of type <see cref="T1"/> then returns it, otherwise return null</returns>
	<remarks>
 If <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.value1"/> retruns null it means that either value of type <see cref="T1"/> is not present in this instance or it is present but it is null. Check <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains1"/> property in order to determine actual situation.
 You must set this property to nothing and then set <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains1"/> property to true in order to store null value of type <see cref="T1"/>.
 </remarks>
</member><member name="P:Tools.DataStructuresT.GenericT.IT1orT2`2.value2">
	<summary>Gets or sets value of type <see cref="T2"/></summary>
	<value>Non-null value to set value of type <see cref="T2"/> and delete value of type <see cref="T2"/> or nothing to delete value of type <see cref="T2"/></value>
	<returns>If this instance contains value of type <see cref="T2"/> then returns it, otherwise return null</returns>
	<remarks>
 If <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.value2"/> retruns null it means that either value of type <see cref="T2"/> is not present in this instance or it is present but it is null. Check <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains2"/> property in order to determine actual situation.
 You must set this property to nothing and then set <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains1"/> property to true in order to store null value of type <see cref="T2"/>.
 </remarks>
</member><member name="P:Tools.DataStructuresT.GenericT.IT1orT2`2.objValue">
	<summary>Get or sets stored value in type-unsafe way</summary>
	<value>New value to be stored in this instance</value>
	<returns>Value stored in this instance</returns>
	<exception cref="T:System.NullReferenceException">When trying to obtain value from instance that contains value of type neither <see cref="T1"/> nor <see cref="T2"/></exception>
	<exception cref="T:System.ArgumentException">When trying to set value of type other than <see cref="T1"/> or <see cref="T2"/></exception>
</member><member name="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains1">
	<summary>Determines if currrent instance contains value of type <see cref="T1"/></summary>
	<value>
 True to delete value of type <see cref="T1"/> 
 False to mark this instance as containing value of type <see cref="T1"/> and not containing value of type <see cref="T2"/>.
 </value>
	<returns>True if this instance contains value of type <see cref="T1"/> (even if containde value is null)</returns>
	<remarks>
 When <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains1"/> is True and is set to True nothing happens.
 When <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains1"/> is False and is set tor True nothing is stored in <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.value1"/> and <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.value2"/> is removed.
 </remarks>
</member><member name="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains2">
	<summary>Determines if currrent instance contains value of type <see cref="T2"/></summary>
	<value>
 True to delete value of type <see cref="T2"/> 
 False to mark this instance as containing value of type <see cref="T2"/> and not containing value of type <see cref="T1"/>.
 </value>
	<returns>True if this instance contains value of type <see cref="T2"/> (even if containde value is null)</returns>
	<remarks>
 When <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains2"/> is True and is set to True nothing happens.
 When <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains2"/> is False and is set tor True nothing is stored in <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.value2"/> and <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.value1"/> is removed.
 </remarks>
</member><member name="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains(System.Type)">
	<summary>Identifies whether this instance contains value of specified type</summary>
	<param name="T">Type to be contained</param>
	<returns>True if this instance contais value of type <paramref name="T"/> otherwise False</returns>
</member><member name="P:Tools.DataStructuresT.GenericT.IT1orT2`2.IsEmpty">
	<summary>Determines whether instance contains value of neither type <see cref="T1"/> nor type <see cref="T2"/></summary>
	<returns>True when both values are not present. False if one of values is present (even if it contains null)</returns>
</member><member name="T:Tools.DataStructuresT.GenericT.IT1orT2`2">
	<summary>Represents type that can contain either value of type T1 or value of type T2. It cannot contain both values at the same time.</summary>
	<typeparam name="T1">One of alternativelly stored types</typeparam>
	<typeparam name="T2">One of alternativelly stored types</typeparam>
	<remarks>
 Although this interface inherits <see cref="T:Tools.DataStructuresT.GenericT.IPair`2"/> be very careful when utilizing this inheritance because behaviour of <see cref="T:Tools.DataStructuresT.GenericT.IT1orT2`2"/> is different whnen storing values (it can contain only one value at the sam time). Consider utilizing this ihneritance only in read-only way.
 </remarks>
</member><member name="F:Tools.DataStructuresT.GenericT.T1orT2`2._value1">
	<summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value1"/> property</summary>
</member><member name="F:Tools.DataStructuresT.GenericT.T1orT2`2._value2">
	<summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value2"/> property</summary>
</member><member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.#ctor(`0)">
	<summary>CTor - initializes new instance of <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/> with value of type <see cref="T1"/></summary>
	<param name="value">Value to be contained in new instance</param>
</member><member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.#ctor">
	<summary>CTor - initializes en empty instance of <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/></summary>
</member><member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.#ctor(`1)">
	<summary>CTor - initializes new instance of <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/> with value of type <see cref="T2"/></summary>
	<param name="value">Value to be contained in new instance</param>
</member><member name="P:Tools.DataStructuresT.GenericT.T1orT2`2.value1">
	<summary>Gets or sets value of type <see cref="T1"/></summary>
	<value>Non-null value to set value of type <see cref="T1"/> and delete value of type <see cref="T2"/> or nothing to delete value of type <see cref="T1"/></value>
	<returns>If this instance contains value of type <see cref="T1"/> then returns it, otherwise return null</returns>
	<remarks>
 If <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value1"/> retruns null it means that either value of type <see cref="T1"/> is not present in this instance or it is present but it is null. Check <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains1"/> property in order to determine actual situation.
 You must set this property to nothing and then set <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains1"/> property to true in order to store null value of type <see cref="T1"/>.
 </remarks>
</member><member name="P:Tools.DataStructuresT.GenericT.T1orT2`2.value2">
	<summary>Gets or sets value of type <see cref="T2"/></summary>
	<value>Non-null value to set value of type <see cref="T2"/> and delete value of type <see cref="T2"/> or nothing to delete value of type <see cref="T2"/></value>
	<returns>If this instance contains value of type <see cref="T2"/> then returns it, otherwise return null</returns>
	<remarks>
 If <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value2"/> retruns null it means that either value of type <see cref="T2"/> is not present in this instance or it is present but it is null. Check <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains2"/> property in order to determine actual situation.
 You must set this property to nothing and then set <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains1"/> property to true in order to store null value of type <see cref="T2"/>.
 </remarks>
</member><member name="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains1">
	<summary>Determines if currrent instance contains value of type <see cref="T1"/></summary>
	<value>
 True to delete value of type <see cref="T1"/> 
 False to mark this instance as containing value of type <see cref="T1"/> and not containing value of type <see cref="T2"/>.
 </value>
	<returns>True if this instance contains value of type <see cref="T1"/> (even if containde value is null)</returns>
	<remarks>
 When <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains1"/> is True and is set to True nothing happens.
 When <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains1"/> is False and is set tor True nothing is stored in <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value1"/> and <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value2"/> is removed.
 </remarks>
</member><member name="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains2">
	<summary>Determines if currrent instance contains value of type <see cref="T2"/></summary>
	<value>
 True to delete value of type <see cref="T2"/> 
 False to mark this instance as containing value of type <see cref="T2"/> and not containing value of type <see cref="T1"/>.
 </value>
	<returns>True if this instance contains value of type <see cref="T2"/> (even if containde value is null)</returns>
	<remarks>
 When <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains2"/> is True and is set to True nothing happens.
 When <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains2"/> is False and is set tor True nothing is stored in <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value2"/> and <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value1"/> is removed.
 </remarks>
</member><member name="P:Tools.DataStructuresT.GenericT.T1orT2`2.IsEmpty">
	<summary>Determines whether instance contains value of neither type <see cref="T1"/> nor type <see cref="T2"/></summary>
	<returns>True when both values are not present. False if one of values is present (even if it contains null)</returns>
</member><member name="P:Tools.DataStructuresT.GenericT.T1orT2`2.value">
	<summary>Gets copy if this instance or fills this instance with content of another instance</summary>
	<value>Instance which's content will be used to fill this instance</value>
	<returns>New instance ininialized with content of this instance</returns>
	<exception cref="T:System.NullReferenceException"><see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains1"/> is False and <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains2"/> is False</exception>
</member><member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.op_Implicit(`0)~Tools.DataStructuresT.GenericT.T1orT2{`0,`1}">
	<summary>Boxes value of type <see cref="T1"/> into new instance of <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/></summary>
	<param name="a">Value to be boxed</param>
	<returns>New instance of <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/> initialized with <paramref name="a"/></returns>
</member><member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.op_Implicit(`1)~Tools.DataStructuresT.GenericT.T1orT2{`0,`1}">
	<summary>Boxes value of type <see cref="T2"/> into new instance of <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/></summary>
	<param name="a">Value to be boxed</param>
	<returns>New instance of <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/> initialized with <paramref name="a"/></returns>
</member><member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.op_Explicit(Tools.DataStructuresT.GenericT.T1orT2{`0,`1})~`0">
	<summary>Unboxes value of type <see cref="T1"/> from <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/> when <paramref name="a"/> contains <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value1"/>.</summary>
	<param name="a">Instance that may contain value to be unboxed</param>
	<returns>Value of <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value1"/> property of <paramref name="a"/></returns>
	<exception cref="T:System.InvalidCastException"><paramref name="a"/>doesn't contain value of type <see cref="T1"/></exception>
</member><member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.op_Explicit(Tools.DataStructuresT.GenericT.T1orT2{`0,`1})~`1">
	<summary>Unboxes value of type <see cref="T2"/> from <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/> when <paramref name="a"/> contains <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value2"/>.</summary>
	<param name="a">Instance that may contain value to be unboxed</param>
	<returns>Value of <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value2"/> property of <paramref name="a"/></returns>
	<exception cref="T:System.InvalidCastException"><paramref name="a"/>doesn't contain value of type <see cref="T2"/></exception>
</member><member name="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains(System.Type)">
	<summary>Identifies whether this instance contains value of specified type</summary>
	<param name="T">Type to be contained</param>
	<returns>True if this instance contais value of type <paramref name="T"/> otherwise False</returns>
</member><member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.Swap">
	<summary>Return new instance of <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/> initialized by value of this instance</summary>
	<returns>Instance of type with swapped types <see cref="T1"/> and <see cref="T2"/></returns>
</member><member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.Swap1">
	<summary>Swaps values <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value1"/> and <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value2"/></summary>
</member><member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.Clone">
	<summary>Returns new instance of <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/> inicialized by value of current instance</summary>
</member><member name="P:Tools.DataStructuresT.GenericT.T1orT2`2.objValue">
	<summary>Get or sets stored value in type-unsafe way</summary>
	<value>New value to be stored in this instance</value>
	<returns>Value stored in this instance</returns>
	<exception cref="T:System.NullReferenceException">When trying to obtain value from instance that contains value of type neither <see cref="T1"/> nor <see cref="T2"/></exception>
	<exception cref="T:System.ArgumentException">When trying to set value of type other than <see cref="T1"/> or <see cref="T2"/></exception>
</member><member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.ToString">
	<summary>String representation of instance</summary>
</member><member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.Clone1">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="T:Tools.DataStructuresT.GenericT.T1orT2`2">
	<summary>Implements type that can contain either value of type T1 ore value of type T2. It cannot contain both values at the same time.</summary>
	<typeparam name="T1">One of alternativelly stored types</typeparam>
	<typeparam name="T2">One of alternativelly stored types</typeparam>
	<remarks>
 Although rhis class implements <see cref="T:Tools.DataStructuresT.GenericT.IPair`2"/> through <see cref="T:Tools.DataStructuresT.GenericT.IT1orT2`2"/> be careful when utilizing this implementation because behaviour of <see cref="T:Tools.DataStructuresT.GenericT.IT1orT2`2"/> is different when storing values (it can contain only one value at the sam time). Consider utilizing this inheritance only in read-only way.
 </remarks>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.#ctor">
	<summary>CTor</summary>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.#ctor(Tools.DrawingT.MetadataT.ExifReader)">
	<summary>CTor - loads data from <see cref="T:Tools.DrawingT.MetadataT.ExifReader"/></summary>
	<param name="reader"><see cref="T:Tools.DrawingT.MetadataT.ExifReader"/> to load data from</param>
	<exception cref="T:System.ArgumentNullException">Unable to find predecessor of any of <see cref="P:Tools.DrawingT.MetadataT.ExifReader.OtherSubIFDs"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.RetrieveParent(Tools.DrawingT.MetadataT.ExifReader.SubIFD,Tools.DrawingT.MetadataT.ExifReader)">
	<summary>Tryes to determine IFD that precedes passed IFD in line</summary>
	<param name="SubIfd">IFD to find predecessor for</param>
	<param name="Reader"><see cref="T:Tools.DrawingT.MetadataT.ExifReader"/> used to resolve IFDs</param>
	<returns>Predecessof of <paramref name="SubIfd"/> if found or null</returns>
</member><member name="F:Tools.DrawingT.MetadataT.Exif._AdditionalIFDs">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.Exif.AdditionalIFDs"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif._MainIFDs">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.Exif.MainIFDs(System.Int32)"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif._ExifSubIFD">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.Exif.ExifSubIFD"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif._InteropSubIFD">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.Exif.InteropSubIFD"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif._GPSSubIFD">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.Exif.GPSSubIFD"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.GPSSubIFD">
	<summary>Returns GPS Sub IFD, if there is no GPS Sub IFD then an enmty is created</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.ExifSubIFD">
	<summary>Returns Exif Sub IFD, if there is no Exif Sub IFD then an empty is created</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.InteropSubIFD">
	<summary>Returns Exif Interoperability Sub IFD, if thre is no Interop Sub IFD then an empty is created</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.MainIFDs(System.Int32)">
	<summary>Returns main IFD with given index. If IFD0 or IFD1 is missing then an empty is created</summary>
	<param name="index">Index of IFD to retrieve. Standard values are 0 and 1</param>
	<exception cref="T:System.ArgumentOutOfRangeException">
		<paramref name="index"/> is less than zero -or-
 <paramref name="index"/> is greater than 1 and main IFD with such index does not exist
 </exception>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.MainIFD">
	<summary>Returns main Exif IFD, if there is no IFD0 an empty is created</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.ThumbnailIFD">
	<summary>Returns thumbnail IFD, if there is no IFD1 an empty is created</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.MainIFDsCount">
	<summary>Cound of main IFDs currently present</summary>
	<returns>Determines possible range of the index parameter of the <see cref="P:Tools.DrawingT.MetadataT.Exif.MainIFDs(System.Int32)"/> property, but 0 and 1 are always valid values for index even when value of this property is 0 or 1</returns>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.AdditionalIFDs">
	<summary>List of additional IFDs retrieved from stream when initializing</summary>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.IFD.#ctor">
	<summary>CTor - empty IFD</summary>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.IFD.#ctor(Tools.DrawingT.MetadataT.ExifIFDReader)">
	<summary>CTor - reads content from <see cref="T:Tools.DrawingT.MetadataT.ExifIFDReader"/></summary>
	<param name="Reader"><see cref="T:Tools.DrawingT.MetadataT.ExifIFDReader"/> that has read data of this IFD. Can be null</param>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.IFD._Records">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.Exif.IFD.Records"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFD.Records">
	<summary>Records in this Image File Directory</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFD.Record(Tools.DrawingT.MetadataT.Exif.ExifTagFormat)">
	<summary>Gets or sets value of specified record</summary>
	<param name="Type">Type of record specifies data types of recor as well as number of components</param>
	<value>New value for record. New value is assigned even if old value is of incompatible type. If value is null an item is deleted.</value>
	<returns>Value of record with tag number specified in <paramref name="Type"/> if type specifies that number of components can vary or if number of components match actual number of components in record. If there is no tag with specified number present in this IFD or number of components constraint is being violated null is returned.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFD">
	<summary>Provides read-write access to Image File Directory of Exif data</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.ExifRecordDescription._DataType">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.Exif.ExifRecordDescription.DataType"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.ExifRecordDescription._NumberOfElements">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.Exif.ExifRecordDescription.NumberOfElements"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.ExifRecordDescription.NumberOfElements">
	<summary>Number of elements of type <see cref="P:Tools.DrawingT.MetadataT.Exif.ExifRecordDescription.DataType"/> contained in record</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.ExifRecordDescription.DataType">
	<summary>Data type of items in record</summary>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.ExifRecordDescription.#ctor(Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes,System.UInt16)">
	<summary>CTor</summary>
	<param name="DataType">Data type of record</param>
	<param name="NumberOfElements">Number of elements of type <paramref name="DataType"/> in record.</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="NumberOfElements"/> is 0</exception>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.ExifRecordDescription.#ctor(System.UInt16,Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes)">
	<summary>Protected CTor that allows <see cref="P:Tools.DrawingT.MetadataT.Exif.ExifRecordDescription.NumberOfElements"/> to be zero</summary>
	<param name="NumberOfElements">Number of elements of type <paramref name="DataType"/> in record.</param>
	<param name="DataType"></param>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.ExifRecordDescription">
	<summary>Describes one Exif record</summary>
	<remarks>Descibes which data type record actually contains, how many items of such datatype. For recognized tags also possible format is specified via <see cref="T:Tools.DrawingT.MetadataT.Exif.ExifTagFormat"/></remarks>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.ExifTagFormat.#ctor(System.UInt16,System.UInt16,System.String,Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes[])">
	<summary>CTor</summary>
	<param name="NumberOfElements">Number of elemets that must exactly be in tag. If number of elements can varry pass 0 here</param>
	<param name="Tag">Number of tag</param>
	<param name="Name">Short name of tag</param>
	<param name="DataTypes">Possible datatypes of tag. First datatype specified must be the widest and must be always specified and will be used as default</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="DataTypes"/> is null or contains no element</exception>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.ExifTagFormat.TestThrowReturn(Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes[])">
	<summary>Test if <paramref name="DataTypes"/> is null or containc no element</summary>
	<param name="DataTypes">Array to test</param>
	<returns><paramref name="DataTypes"/></returns>
	<remarks>Used by ctor</remarks>
	<exception cref="T:System.ArgumentNullException"><paramref name="DataTypes"/> is null or contains no element</exception>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.ExifTagFormat._Tag">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.Exif.ExifTagFormat.Tag"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.ExifTagFormat._Name">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.Exif.ExifTagFormat.Name"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.ExifTagFormat.OtherDatatypes">
	<summary>Contains list of possible datatypes for tag excepting datatype specified in <see cref="P:Tools.DrawingT.MetadataT.Exif.ExifRecordDescription.DataType"/></summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.ExifTagFormat.Name">
	<summary>Represents short unique name of tag used to reference it</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.ExifTagFormat.Tag">
	<summary>Represents tag code in Exif</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.ExifTagFormat.DataTypes">
	<summary>Datatypes allowed for this tag</summary>
	<returns>Array of datatypes allowed for this tag. First element of the array is same as <see cref="P:Tools.DrawingT.MetadataT.Exif.ExifRecordDescription.DataType"/> amd represents default and preffered datatype</returns>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.ExifTagFormat">
	<summary>Describes which data can be stored in recognized Exif tag</summary>
	<remarks>Describas which datatype(s) and lengt if allowed for specific recognized Exif record. Actual content of record is described by <see cref="T:Tools.DrawingT.MetadataT.Exif.ExifRecordDescription"/></remarks>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.ExifRecord._Data">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.Exif.ExifRecord.Data"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.ExifRecord._DataType">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.Exif.ExifRecord.DataType"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.Exif.ExifRecord._Fixed">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.Exif.ExifRecord.Fixed"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.ExifRecord.Fixed">
	<summary>True if <see cref="P:Tools.DrawingT.MetadataT.Exif.ExifRecordDescription.NumberOfElements"/> of this record is fixed</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.ExifRecord.DataType">
	<summary>Datatype and number of items of record</summary>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.ExifRecord.Data">
	<summary>Value of record</summary>
	<remarks>Actual type depends on <see cref="P:Tools.DrawingT.MetadataT.Exif.ExifRecord.DataType"/></remarks>
	<exception cref="T:System.InvalidCastException">Setting value of incompatible type</exception>
	<exception cref="T:System.ArgumentException">Attempt to assigne value with other number of components when <see cref="P:Tools.DrawingT.MetadataT.Exif.ExifRecord.Fixed"/> set to true</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null</exception>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.ExifRecord.SetDataValue``1(System.Object)">
	<summary>Sets <paramref name="value"/> to <see cref="F:Tools.DrawingT.MetadataT.Exif.ExifRecord._Data"/> according to <see cref="P:Tools.DrawingT.MetadataT.Exif.ExifRecord.DataType"/></summary>
	<param name="value">Value to be set</param>
	<typeparam name="T">Type of value to be set</typeparam>
	<exception cref="T:System.InvalidCastException">Setting value of incompatible type</exception>
	<exception cref="T:System.ArgumentException">Attempt to assigne value with other number of components when <see cref="P:Tools.DrawingT.MetadataT.Exif.ExifRecord.Fixed"/> set to true</exception>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.ExifRecord.#ctor(Tools.DrawingT.MetadataT.Exif.ExifRecordDescription,System.Object,System.Boolean)">
	<summary>CTor</summary>
	<param name="Data">Initial value of this record</param>
	<param name="Type">Describes type of data contained in this flag</param>
	<param name="Fixed">Determines if length of data can be changed</param>
	<exception cref="T:System.InvalidCastException">Value passed to <paramref name="Data"/> is not compatible with <paramref name="Type"/> specified</exception>
	<exception cref="T:System.ArgumentException"><paramref name="Fixed"/> is set to true and lenght of <paramref name="Data"/> violates this constaint</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="Data"/> is null</exception>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.ExifRecord.#ctor(System.Object,Tools.DrawingT.MetadataT.ExifIFDReader.DirectoryEntry.ExifDataTypes,System.UInt16,System.Boolean)">
	<summary>CTor</summary>
	<param name="Data">Initial value of this record</param>
	<param name="Type">Data type of record</param>
	<param name="NumberOfComponents">Number of components of <paramref name="Type"/></param>
	<param name="fixed">Determines if length of data can be changed</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Data"/> is null</exception>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.ExifRecord">
	<summary>Represents one Exif record</summary>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.IFDMain.#ctor">
	<summary>CTor - empty IFD</summary>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.IFDMain.#ctor(Tools.DrawingT.MetadataT.ExifIFDReader)">
	<summary>CTor - reads content from <see cref="T:Tools.DrawingT.MetadataT.ExifIFDReader"/></summary>
	<param name="Reader"><see cref="T:Tools.DrawingT.MetadataT.ExifIFDReader"/> that has read data of this IFD. Can be null</param>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDMain.Record(Tools.DrawingT.MetadataT.Exif.IFDMain.Tags)">
	<summary>Gets or sets value of specified record</summary>
	<param name="Type">Recognized tagname of record that determines data type as well as number of components</param>
	<value>New value for record. New value is assigned even if old value is of incompatible type. If value is null an item is deleted.</value>
	<returns>Value of record with tag number specified by <paramref name="Type"/> if type for this tag number specifies that number of components can vary or if number of components match actual number of components in record. If there is no tag with specified number present in this IFD or number of components constraint is being violated null is returned.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDMain">
	<summary>Exif main and thumbnail IFD</summary>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.IFDExif.#ctor">
	<summary>CTor - empty IFD</summary>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.IFDExif.#ctor(Tools.DrawingT.MetadataT.ExifIFDReader)">
	<summary>CTor - reads content from <see cref="T:Tools.DrawingT.MetadataT.ExifIFDReader"/></summary>
	<param name="Reader"><see cref="T:Tools.DrawingT.MetadataT.ExifIFDReader"/> that has read data of this IFD. Can be null</param>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDExif.Record(Tools.DrawingT.MetadataT.Exif.IFDExif.Tags)">
	<summary>Gets or sets value of specified record</summary>
	<param name="Type">Recognized tagname of record that determines data type as well as number of components</param>
	<value>New value for record. New value is assigned even if old value is of incompatible type. If value is null an item is deleted.</value>
	<returns>Value of record with tag number specified by <paramref name="Type"/> if type for this tag number specifies that number of components can vary or if number of components match actual number of components in record. If there is no tag with specified number present in this IFD or number of components constraint is being violated null is returned.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDExif">
	<summary>Exif Sub IFD</summary>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.IFDGPS.#ctor">
	<summary>CTor - empty IFD</summary>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.IFDGPS.#ctor(Tools.DrawingT.MetadataT.ExifIFDReader)">
	<summary>CTor - reads content from <see cref="T:Tools.DrawingT.MetadataT.ExifIFDReader"/></summary>
	<param name="Reader"><see cref="T:Tools.DrawingT.MetadataT.ExifIFDReader"/> that has read data of this IFD. Can be null</param>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDGPS.Record(Tools.DrawingT.MetadataT.Exif.IFDGPS.Tags)">
	<summary>Gets or sets value of specified record</summary>
	<param name="Type">Recognized tagname of record that determines data type as well as number of components</param>
	<value>New value for record. New value is assigned even if old value is of incompatible type. If value is null an item is deleted.</value>
	<returns>Value of record with tag number specified by <paramref name="Type"/> if type for this tag number specifies that number of components can vary or if number of components match actual number of components in record. If there is no tag with specified number present in this IFD or number of components constraint is being violated null is returned.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDGPS">
	<summary>Exif GPS IFD</summary>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.IFDInterop.#ctor">
	<summary>CTor - empty IFD</summary>
</member><member name="M:Tools.DrawingT.MetadataT.Exif.IFDInterop.#ctor(Tools.DrawingT.MetadataT.ExifIFDReader)">
	<summary>CTor - reads content from <see cref="T:Tools.DrawingT.MetadataT.ExifIFDReader"/></summary>
	<param name="Reader"><see cref="T:Tools.DrawingT.MetadataT.ExifIFDReader"/> that has read data of this IFD. Can be null</param>
</member><member name="P:Tools.DrawingT.MetadataT.Exif.IFDInterop.Record(Tools.DrawingT.MetadataT.Exif.IFDInterop.Tags)">
	<summary>Gets or sets value of specified record</summary>
	<param name="Type">Recognized tagname of record that determines data type as well as number of components</param>
	<value>New value for record. New value is assigned even if old value is of incompatible type. If value is null an item is deleted.</value>
	<returns>Value of record with tag number specified by <paramref name="Type"/> if type for this tag number specifies that number of components can vary or if number of components match actual number of components in record. If there is no tag with specified number present in this IFD or number of components constraint is being violated null is returned.</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
</member><member name="T:Tools.DrawingT.MetadataT.Exif.IFDInterop">
	<summary>Exif Interoperability IFD</summary>
</member><member name="T:Tools.DrawingT.MetadataT.Exif">
	<summary>Provides read-write acces to block of Exif data</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.#ctor">
	<summary>Do nothing CTor</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC._Tags_Change(Tools.CollectionsT.GenericT.ListWithEvents{System.Collections.Generic.KeyValuePair{Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Byte[]}},Tools.CollectionsT.GenericT.ListWithEvents{System.Collections.Generic.KeyValuePair{Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Byte[]}}.CancelableItemIndexEventArgs)">
	<summary>Handles <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> events and checks if added item data are not so long</summary>
	<param name="sender"><see cref="P:Tools.DrawingT.MetadataT.IPTC.Tag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)"/></param>
	<param name="e">Event arguments</param>
	<remarks>The <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set tor true when lenght of data is longer than 32767 which causet <see cref="T:System.OperationCanceledException"/> to be thrown by caller</remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC._Tags">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.Tags"/> property</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.#ctor(Tools.DrawingT.MetadataT.IPTCReader)">
	<summary>CTor from <see cref="T:Tools.DrawingT.MetadataT.IPTCReader"/></summary>
	<param name="Reader"><see cref="T:Tools.DrawingT.MetadataT.IPTCReader"/> to read all tags from</param>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.#ctor(Tools.DrawingT.MetadataT.IIPTCGetter)">
	<summary>CTor from <see cref="T:Tools.DrawingT.MetadataT.IIPTCGetter"/></summary>
	<param name="Getter"><see cref="T:Tools.DrawingT.MetadataT.IIPTCGetter"/> that contains IPTC stream</param>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.Clear(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>Removes all occurences of specified tag</summary>
	<param name="Key">Tag to remove</param>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.Clear">
	<summary>Removes all tags</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.Contains(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>Gets count of tags with specified key</summary>
	<param name="Key">DataSet identification to count tags with</param>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.OnValueChanged(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>Called when value of any tag changes</summary>
	<param name="Tag">Recod and dataset number</param>
	<remarks>
		<para>Called by <see cref="P:Tools.DrawingT.MetadataT.IPTC.Tag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)"/>'s setter.</para>
		<para>Note for inheritors: Call base class method in order to automatically compute size of embdeded file and invalidate cache for <see cref="P:Tools.DrawingT.MetadataT.IPTC.BW460_Value(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,System.Int32,System.Boolean)"/></para>
	</remarks>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Tag(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>Gets or sets values associated with particular tag</summary>
	<param name="Key">Tag identification</param>
	<remarks>This property does no checks if tag <paramref name="Key"/> is repeatable or not and does not checks structure of byte arrays that represents values of tags, so you can totally corrupt structure if some fields. Also tag grouping is not checked. You should use this property very carefully or you can damage internal structure of IPTC data</remarks>
	<value>New values for particular tag. Values of tags are replaced with new values. If there was more tags with same <paramref name="Key"/> than is being set then the next tags are removed. If there was less tags with same <paramref name="Key"/> necessary items are added at the end of the stream</value>
	<returns>List of values of tag or null if tag is missing</returns>
	<exception cref="T:System.NotSupportedException">Setting byte array longer then 32767</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.Tags">
	<summary>All tags and their values in IPTC stream</summary>
	<remarks><see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> and <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/>' setter throws an <see cref="T:System.OperationCanceledException"/> when trying to arr or set item that consists of more than 32767 bytes</remarks>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.SortTags">
	<summary>Sorts tags so they are ordered in IPTC-standard-non-violating manner</summary>
	<remarks>That means that they are ordered by recod number. Order of individual datasets inside records is kept</remarks>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.GetBytes">
	<summary>Gets bytes of IPTC stream</summary>
	<returns>IPTC data encoded according to the IPTC standard in set of tags</returns>
	<remarks>The tag format is following:
 B1: 0x1C, B2: Record Number, B3 DataSet Number, B4&amp;5 Length of data, B6+ Data
 </remarks>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification._RecordNumber">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.RecordNumber"/> property</summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification._DataSetNumber">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.DatasetNumber"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.RecordNumber">
	<summary>Record (tag group) number</summary>
	<exception cref="T:System.ArgumentOutOfRangeException">Value being set is greater than 9</exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.DatasetNumber">
	<summary>DataSet (tag) number</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.#ctor(Tools.DataStructuresT.GenericT.IPair{Tools.DrawingT.MetadataT.IPTC.RecordNumbers,System.Byte})">
	<summary>Copy CTor</summary>
	<param name="From">Instance to be cloned</param>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.#ctor(Tools.DrawingT.MetadataT.IPTC.RecordNumbers,System.Byte)">
	<summary>CTor</summary>
	<param name="RecordNumber">Number of record (tag group)</param>
	<param name="DataSetNumber">Number of dataset (tag)</param>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.Clone1">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.Swap">
	<summary>Swaps values <see cref="P:Tools.DataStructuresT.GenericT.IPair`2.Value1"/> and <see cref="P:Tools.DataStructuresT.GenericT.IPair`2.Value2"/></summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.Clone">
	<summary>Creates a new object that is a copy of the current instance.</summary>
	<returns>A new object that is a copy of this instance</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.op_Equality(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>Compares two <see cref="T:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification"/>s</summary>
	<param name="a">A <see cref="T:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification"/> to be compared</param>
	<param name="b">A <see cref="T:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification"/> to be compared</param>
	<returns>True when <see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.DatasetNumber"/> and <see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.RecordNumber"/> equals</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.op_Inequality(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>Compares two <see cref="T:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification"/>s</summary>
	<param name="a">A <see cref="T:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification"/> to be compared</param>
	<param name="b">A <see cref="T:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification"/> to be compared</param>
	<returns>False when <see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.DatasetNumber"/> and <see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.RecordNumber"/> equals</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.Equals(System.Object)">
	<summary>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</summary>
	<param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
	<returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false</returns>
	<remarks>Obsolete: Use type safe overload instead</remarks>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.Equals(Tools.DataStructuresT.GenericT.IPair{Tools.DrawingT.MetadataT.IPTC.RecordNumbers,System.Byte})">
	<summary>Indicates whether the current object is equal to another object of the same type.</summary>
	<param name="other">An object to compare with this object.</param>
	<returns>True if <see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.DatasetNumber"/> and <see cref="P:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.RecordNumber"/> of this instance and <paramref name="other"/> equals</returns>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.GetHashCode">
	<summary>Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for use in hashing algorithms and data structures like a hash table.</summary>
	<returns>A hash code for the current System.Object</returns>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.PairMatch.Match">
	<summary><see cref="T:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification"/> to compare <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> with</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.PairMatch.#ctor(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>CTor</summary>
	<param name="Match"><see cref="T:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification"/> to compare <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> with</param>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.PairMatch.Predicate``1(System.Collections.Generic.KeyValuePair{Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,``0})">
	<summary>Function which's delegate can be passed for example to <see cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})"/></summary>
	<param name="Pair">Item to match with <see cref="F:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.PairMatch.Match"/></param>
	<typeparam name="T">Type of value stored in <see cref="T:System.Collections.Generic.KeyValuePair`2"/></typeparam>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.PairMatch.GetPredicate``1(Tools.DrawingT.MetadataT.IPTC.DataSetIdentification)">
	<summary>Returns delegate of <see cref="M:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.PairMatch.Predicate``1(System.Collections.Generic.KeyValuePair{Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,``0})"/> of newly created instance of <see cref="T:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.PairMatch"/></summary>
	<param name="Match">Key to compare with</param>
	<returns>Delegate of <see cref="M:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.PairMatch.Predicate``1(System.Collections.Generic.KeyValuePair{Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,``0})"/></returns>
	<typeparam name="T">Type of value of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> that can be passed to returned <see cref="T:System.Predicate`1"/></typeparam>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.PairMatch.GetIndices``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Tools.DrawingT.MetadataT.IPTC.DataSetIdentification,``0}})">
	<summary>Gets indices of items in given <see cref="T:System.Collections.Generic.IEnumerable`1"/> which's <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> matches <see cref="F:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.PairMatch.Match"/></summary>
	<param name="List">List to search within</param>
	<returns>List of indices of items which's <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> matches <see cref="F:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.PairMatch.Match"/></returns>
	<typeparam name="T">Type of value of <see cref="T:System.Collections.Generic.KeyValuePair`2"/></typeparam>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification.PairMatch">
	<summary>Gives acctess to <see cref="T:System.Predicate`1"/> that matches <see cref="T:System.Collections.Generic.KeyValuePair`2"/> which's <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is same as given <see cref="T:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification"/></summary>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification">
	<summary>Identifies IPTC tag (DataSet). Used for indexing.</summary>
	<completionlist cref="T:Tools.DrawingT.MetadataT.IPTC.DataSetIdentification"/>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.IsEnumMember``1(``0)">
	<summary>Returns value indicating if givel value if member of enumeration</summary>
	<param name="value">Value to be checked</param>
	<returns>True if <paramref name="value"/> is member of <paramref name="T"/></returns>
	<typeparam name="T">Type of enumeration to be searched</typeparam>
	<exception cref="T:System.ArgumentException"><paramref name="T"/> is not <see cref="T:System.Enum"/></exception>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.IPTCTag.#ctor(System.Byte,Tools.DrawingT.MetadataT.IPTC.RecordNumbers,System.String,System.String,Tools.DrawingT.MetadataT.IPTC.IPTCTypes,System.Boolean,System.Boolean,System.Int16,System.Boolean,System.String,System.String,System.Type,System.Boolean)">
	<summary>CTor</summary>
	<param name="Number">Tag (dataset) number</param>
	<param name="Record">Group (record) number</param>
	<param name="Name">Name of tag used in object structure</param>
	<param name="HumanName">Human-friendly name of tga</param>
	<param name="Type">Type of tag data</param>
	<param name="Mandatory">mandatority according to IPTC standard</param>
	<param name="Repeatable">Repeatability</param>
	<param name="Length">Maximal length of taga data</param>
	<param name="Fixed">True <paramref name="Length"/> to be only lenght allowed</param>
	<param name="Category">Category of tag</param>
	<param name="Description">Description of tag</param>
	<param name="Enum">Type of enumeration if tag is enumeration</param>
	<param name="Lock">Lock properties after construction</param>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Record"/> is greater than 9 -or- <paramref name="Length"/> is less than zero</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Type"/> is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCTypes"/></exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTag._Locked">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Locked"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Locked">
	<summary>Indicates if this instance is locked, so nothing can be changed</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Identification">
	<summary>Gets or sets record and dataset number</summary>
	<exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Locked"/> is true</exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTag._Number">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Number"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Number">
	<summary>Number of tag (dataset)</summary>
	<exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Locked"/> is true</exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTag._Record">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Record"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Record">
	<summary>Tag's number of record (group number)</summary>
	<exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Locked"/> is true</exception>
	<exception cref="T:System.ArgumentOutOfRangeException">Value being set is greater than 9</exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTag._Name">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Name"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Name">
	<summary>Tag name as used in object structure</summary>
	<exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Locked"/> is true</exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTag._HumanName">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.HumanName"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.HumanName">
	<summary>Human-friendly name of tag</summary>
	<exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Locked"/> is true</exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTag._Type">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Type"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Type">
	<summary>Type of tag</summary>
	<remarks>You can get type of value of tag by <see cref="M:Tools.DrawingT.MetadataT.IPTC.GetUnderlyingType(Tools.DrawingT.MetadataT.IPTC.IPTCTypes)"/> function or <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.UnderlyingType"/> property</remarks>
	<exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Locked"/> is true</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCTypes"/></exception>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.UnderlyingType">
	<summary>Underlying type for <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Type"/></summary>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTag._Enum">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Enum"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Enum">
	<summary>Type of enumeration of tag (if type of tag is enumeration)</summary>
	<returns>If tag is enumeration then returns type of enumeration, null otherwise</returns>
	<exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Locked"/> is true</exception>
	<exception cref="T:System.ArgumentException">Type being set does not inherit from the <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Enum"/> class</exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTag._Mandatory">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Mandatory"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Mandatory">
	<summary>Indicate if tag is mandatory according to IPTC standard</summary>
	<exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Locked"/> is true</exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTag._Repeatable">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Repeatable"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Repeatable">
	<summary>Indicates if tag is repeatable</summary>
	<exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Locked"/> is true</exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTag._Fixed">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Fixed"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Fixed">
	<summary>Indicates if length of tag data is fixed</summary>
	<exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Locked"/> is true -or- setting value to true when <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Length"/> is 0</exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTag._Length">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Length"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Length">
	<summary>Maximal length of tag data in bytes. If <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Fixed"/> is true that this is also actual length of tagat data in bytes.</summary>
	<value>You can set length to 0 in order to mark length as unlimited. In such case <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Fixed"/> must be false</value>
	<exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Locked"/> is true -or- setting value to 0 when <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Fixed"/> is true</exception>
	<exception cref="T:System.ArgumentOutOfRangeException">setting value to negative</exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTag._Category">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Category"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Category">
	<summary>Tag catagory</summary>
	<exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Locked"/> is true</exception>
</member><member name="F:Tools.DrawingT.MetadataT.IPTC.IPTCTag._Description">
	<summary>Contains value of the <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Description"/> property</summary>
</member><member name="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Description">
	<summary>Description of tag</summary>
	<exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.DrawingT.MetadataT.IPTC.IPTCTag.Locked"/> is true</exception>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.IPTCTag">
	<summary>Describes IPTC dataset's (tag) properties</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.IPTCException.#ctor(System.Exception)">
	<summary>CTor</summary>
	<param name="InnerException">Inner exception</param>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.IPTCException">
	<summary>Represents common base for <see cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException"/> and <see cref="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException"/></summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.IPTCGetException.#ctor(System.Exception)">
	<summary>CTor</summary>
	<param name="InnerException">Inner exception</param>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.IPTCGetException">
	<summary>Thrown when an error occurs when geting IPTC tag value</summary>
</member><member name="M:Tools.DrawingT.MetadataT.IPTC.IPTCSetException.#ctor(System.Exception)">
	<summary>CTor</summary>
	<param name="InnerException">Inner exception</param>
</member><member name="T:Tools.DrawingT.MetadataT.IPTC.IPTCSetException">
	<summary>Thrown when an error occurs when setting IPTC tag value</summary>
</member><member name="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Spoken">
	<summary>Marks language as spoken (currently in use, not extinct)</summary>
</member><member name="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Extinct">
	<summary>Marks language as formerly spoken, but now dead (extinct)</summary>
</member><member name="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Historic">
	<summary>Marks language as historic variant of current language</summary>
</member><member name="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Artificial">
	<summary>Marks language as artificial</summary>
</member><member name="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Group">
	<summary>Marks item as group of languages - not one distinct langauge that can be spoken</summary>
</member><member name="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Special">
	<summary>Marks item as special language code with no language meaning</summary>
</member><member name="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Reserved">
	<summary>Marks language code as reserved for local use (applies to codes qaa-qtz, those codes are not listed)</summary>
</member><member name="T:Tools.GlobalizationT.ISOLanguage.CodeTypes">
	<summary>Possible "kinds" of languages</summary>
</member><member name="M:Tools.GlobalizationT.ISOLanguage.#ctor(System.String,System.String,System.String,System.String,System.UInt32,Tools.GlobalizationT.ISOLanguage.CodeTypes,System.String)">
	<summary>CTor</summary>
	<param name="ISO1">ISO 639-1 (2 characters) code (can be null or an empty <see cref="T:System.String"/>)</param>
	<param name="ISO2">ISO 639-2/B (3 characters, primary) code (can be null or an empty <see cref="T:System.String"/>)</param>
	<param name="English">English name of language. Cannot be null or an enmpty <see cref="T:System.String"/></param>
	<param name="Native">Native name of language. Cannot be null or an empty <see cref="T:System.String"/>. If no native name is available use same as <paramref name="English"/></param>
	<param name="Scale">Scale of language - very very approximate number of speakers (but you can put here actual acurate number of course, too)</param>
	<param name="Type">Type of code - whearher it reffers living or exting language or group of languages etc.</param>
	<param name="Duplicate">Duplicate code ISO 639-2/T for <paramref name="ISO2"/></param>
	<remarks>This CTor is used internally by the <see cref="T:Tools.GlobalizationT.ISOLanguage"/> class. However it is public you'd better consited using another more developper-friendly overloaded CTor</remarks>
	<exception cref="T:System.ArgumentException">The code specified in <paramref name="ISO1"/>, <paramref name="ISO2"/> or <paramref name="Duplicate"/> is invalid</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="English"/> or <paramref name="Native"/> is either null or an empty <see cref="T:System.String"/></exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Type"/> is not valid <see cref="T:Tools.GlobalizationT.ISOLanguage.CodeTypes"/> value</exception>
</member><member name="M:Tools.GlobalizationT.ISOLanguage.#ctor(System.String,System.String,System.String,System.String,Tools.GlobalizationT.ISOLanguage.CodeTypes,System.UInt32,System.String)">
	<summary>CTor</summary>
	<param name="ISO1">ISO 639-1 (2 characters) code (can be null or an empty <see cref="T:System.String"/>)</param>
	<param name="ISO2">ISO 639-2/B (3 characters, primary) code (can be null or an empty <see cref="T:System.String"/>)</param>
	<param name="English">English name of language. Cannot be null or an enmpty <see cref="T:System.String"/></param>
	<param name="Native">Native name of language. Cannot be an empty <see cref="T:System.String"/>. If no native name is available use same as <paramref name="English"/>. If ommited (or null passed) that <paramref name="English"/> is used for <see cref="P:Tools.GlobalizationT.ISOLanguage.Native"/> automatically.</param>
	<param name="Scale">Scale of language - very very approximate number of speakers (but you can put here actual acurate number of course, too)</param>
	<param name="Type">Type of code - whearher it reffers living or exting language or group of languages etc.</param>
	<param name="Duplicate">Duplicate code ISO 639-2/T for <paramref name="ISO2"/></param>
	<exception cref="T:System.ArgumentException">The code specified in <paramref name="ISO1"/>, <paramref name="ISO2"/> or <paramref name="Duplicate"/> is invalid</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="English"/> is is either null or an empty <see cref="T:System.String"/> -or- <paramref name="Native"/> is an empty <see cref="T:System.String"/> ("")</exception>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Type"/> is not valid <see cref="T:Tools.GlobalizationT.ISOLanguage.CodeTypes"/> value</exception>
</member><member name="F:Tools.GlobalizationT.ISOLanguage._ISO1">
	<summary>Contains value of the <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO1"/> property</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ISO1">
	<summary>Gets or sets ISO 639-1 language code</summary>
	<value>New code. It must be 2 characters long <see cref="T:System.String"/> containin only lowerase Latin letters or it can be an empty <see cref="T:System.String"/> or null. An empty string is converted to null</value>
	<returns>ISO 639-1 language code or null of code is not specified</returns>
	<exception cref="T:System.ArgumentException">Setting code to invalid code. Invalid means that it is not null, it is not an empty <see cref="T:System.String"/> and it is not 2 characters long <see cref="T:System.String"/> of lowercase Latin letters.</exception>
</member><member name="M:Tools.GlobalizationT.ISOLanguage.ValidateCode(System.String,System.Byte)">
	<summary>Validates ISO language code</summary>
	<param name="Code">Code to be validated</param>
	<param name="Len">Langth of code that only satisfies validation</param>
	<returns>True if <paramref name="Code"/> is an empty <see cref="T:System.String"/>, nothing or contains exactly <paramref name="Len"/> lowercase Latin letters, otherwise false</returns>
</member><member name="F:Tools.GlobalizationT.ISOLanguage._ISO2">
	<summary>Contains value of the <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> property</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.ISO2">
	<summary>Gets or sets ISO 639-2 language code</summary>
	<value>New code. It must be 3 characters long <see cref="T:System.String"/> containin only lowerase Latin letters or it can be an empty <see cref="T:System.String"/> or null. An empty string is converted to null</value>
	<returns>ISO 639-2 language code or null of code is not specified</returns>
	<remarks><see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> contains ISO 639-2/B code while <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/> contains ISO 639-2/T code</remarks>
	<exception cref="T:System.ArgumentException">Setting code to invalid code. Invalid means that it is not null, it is not an empty <see cref="T:System.String"/> and it is not 3 characters long <see cref="T:System.String"/> of lowercase Latin letters.</exception>
</member><member name="F:Tools.GlobalizationT.ISOLanguage._English">
	<summary>Contains value of the <see cref="P:Tools.GlobalizationT.ISOLanguage.English"/> property</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.English">
	<summary>Gets or sets English name of laguage</summary>
	<exception cref="T:System.ArgumentNullException">Setting value to null or an empty <see cref="T:System.String"/></exception>
</member><member name="F:Tools.GlobalizationT.ISOLanguage._Native">
	<summary>Contains value of the <see cref="P:Tools.GlobalizationT.ISOLanguage.Native"/> property</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.Native">
	<summary>Gets or sets native name of laguage</summary>
	<exception cref="T:System.ArgumentNullException">Setting value to null or an empty <see cref="T:System.String"/></exception>
	<remarks>Native name of language if native name is available. Othervise returns English name (see <seealso cref="P:Tools.GlobalizationT.ISOLanguage.English"/>)</remarks>
	<value>New value for native name. If native name is not available use English name. Value cannot be nothing or an empty <see cref="T:System.String"/></value>
</member><member name="F:Tools.GlobalizationT.ISOLanguage._Scale">
	<summary>Contains value of the <see cref="P:Tools.GlobalizationT.ISOLanguage.Scale"/> property</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.Scale">
	<summary>Scale of the language</summary>
	<returns>
		<para>For built-it languages returns very very very approximate number of speakers of this language. Returns 0 for <see cref="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Group"/> and <see cref="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Special"/>. For <see cref="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Historic"/> and <see cref="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Extinct"/> can return non-zero if there is some comunity of speakers of such language. For <see cref="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Artificial"/> returns zero or non-zero depending on wheather there is any community of speakers. For <see cref="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Spoken"/> returns always non-zero. If non-zero is returned it describes the 'size' of the languages rather than actual number of speakers. The number has only first three digits meaningfull, other are zeros. This number should be used only to distinguish between small and big languages (etc.) not tu measure exact number of speakers. Those numbers comes mainly from Wikipedia. If Wikipedia reffers range the average is returned. If Wikipedia reports two numbers for native and non-native speakers, average of native and sum of native and non-native is returned. (Note: There is no on-line binding to wikipedia. Those numbers were got on May 2007.)</para>
 If property was filled from another source (not by property of <see cref="T:Tools.GlobalizationT.ISOLanguage"/> than exactness and meaning depends on source.
 </returns>
</member><member name="F:Tools.GlobalizationT.ISOLanguage._Type">
	<summary>Contains value of the <see cref="P:Tools.GlobalizationT.ISOLanguage.Type"/> property</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.Type">
	<summary>Gets or sets type of language (code)</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Setting value to unknown type</exception>
</member><member name="F:Tools.GlobalizationT.ISOLanguage._Duplicate">
	<summary>Contains value of the <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/> property</summary>
</member><member name="P:Tools.GlobalizationT.ISOLanguage.Duplicate">
	<summary>Gets or sets duplicate of ISO 639-2 language code</summary>
	<value>New code. It must be 3 characters long <see cref="T:System.String"/> containin only lowerase Latin letters or it can be an empty <see cref="T:System.String"/> or null. An empty string is converted to null</value>
	<returns>Another ISO 639-2 language code or null of code is not specified for same language</returns>
	<remarks><see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> contains ISO 639-2/B code while <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/> contains ISO 639-2/T code</remarks>
	<exception cref="T:System.ArgumentException">Setting code to invalid code. Invalid means that it is not null, it is not an empty <see cref="T:System.String"/> and it is not 3 characters long <see cref="T:System.String"/> of lowercase Latin letters.</exception>
</member><member name="F:Tools.GlobalizationT.ISOLanguage.qaa">
	<summary>The qaa ISO 639-2 code that represents beginning of range of reserved codes</summary>
</member><member name="F:Tools.GlobalizationT.ISOLanguage.qtz">
	<summary>The qtz ISO 639-2 code that represents end of range of reserved codes</summary>
</member><member name="M:Tools.GlobalizationT.ISOLanguage.GetByCode(System.String)">
	<summary>Gets instance of <see cref="T:Tools.GlobalizationT.ISOLanguage"/> by the ISO 639-1 or ISO 639-2 language code</summary>
	<param name="code">Code of language to get</param>
	<returns>Instance of <see cref="T:Tools.GlobalizationT.ISOLanguage"/> that contains description of language represented by code specified or null of such cude is not known</returns>
	<remarks>Works also for codes from reserved range qaa-qtz</remarks>
	<exception cref="T:System.ArgumentException"><paramref name="code"/> is valid neither for ISO 639-1 nor for ISO 639-2 code (contains invalid characters or is too long or too short)</exception>
</member><member name="M:Tools.GlobalizationT.ISOLanguage.op_Explicit(System.String)~Tools.GlobalizationT.ISOLanguage">
	<summary>Converts <see cref="T:System.String"/> into <see cref="T:Tools.GlobalizationT.ISOLanguage"/></summary>
	<param name="a"><see cref="T:System.String"/> to be converted</param>
	<returns><see cref="T:Tools.GlobalizationT.ISOLanguage"/> with specified code (same as result of <see cref="M:Tools.GlobalizationT.ISOLanguage.GetByCode(System.String)"/> whan it returns non-null)</returns>
	<exception cref="T:System.InvalidCastException"><paramref name="a"/> is unknown code -or- <paramref name="a"/> is invalid code</exception>
</member><member name="M:Tools.GlobalizationT.ISOLanguage.ToString">
	<summary>String representation (code(s) and english name)</summary>
</member><member name="M:Tools.GlobalizationT.ISOLanguage.op_Equality(Tools.GlobalizationT.ISOLanguage,Tools.GlobalizationT.ISOLanguage)">
	<summary>Compares two instances of <see cref="T:Tools.GlobalizationT.ISOLanguage"/></summary>
	<param name="a">A <see cref="T:Tools.GlobalizationT.ISOLanguage"/> to be compared</param>
	<param name="b">A <see cref="T:Tools.GlobalizationT.ISOLanguage"/> to be compared</param>
	<returns>True if both instances have same both codes (<see cref="P:Tools.GlobalizationT.ISOLanguage.ISO1"/> and <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/>). If one of codes of one operand if null then it is ignored. For <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> also <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/> is compared. Result is Ture when at least one pair of cross comparison of both <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/>s and <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/>s retuns true. Result is ignored if both <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> and <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/> of one operand are null. If comparison of <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO1"/> leads to true and comparison of <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> leads to false (or vice versa) an <see cref="T:System.InvalidOperationException"/> is thrown.</returns>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.GlobalizationT.ISOLanguage.ISO1"/> of both operands are considered equal while <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> not.</exception>
</member><member name="M:Tools.GlobalizationT.ISOLanguage.Compare(System.String,System.String,Tools.GlobalizationT.ISOLanguage.CompState)">
	<summary>Compares two <see cref="T:System.String"/>s while ignoring nulls</summary>
	<param name="a">A <see cref="T:System.String"/> to compare</param>
	<param name="b">A <see cref="T:System.String"/> to compare</param>
	<param name="State">State of previous comparison</param>
	<returns>New state of comparison</returns>
	<exception cref="T:System.InvalidOperationException">State of comparison is abou to be changed when it is <see cref="F:Tools.GlobalizationT.ISOLanguage.CompState.Equal"/> or <see cref="F:Tools.GlobalizationT.ISOLanguage.CompState.NotEqual"/></exception>
</member><member name="M:Tools.GlobalizationT.ISOLanguage.Compare(System.String,System.String,System.String,System.String,Tools.GlobalizationT.ISOLanguage.CompState)">
	<summary>Compares two pairs of <see cref="T:System.String"/> while ignoring nulls</summary>
	<param name="a1">A <see cref="T:System.String"/> from first pair to compare</param>
	<param name="a2">A <see cref="T:System.String"/> from first pair to compare</param>
	<param name="b1">A <see cref="T:System.String"/> from second pair to compare</param>
	<param name="b2">A <see cref="T:System.String"/> from second pair to compare</param>
	<param name="State">State of previous comparison</param>
	<returns>New state of comparison</returns>
	<exception cref="T:System.InvalidOperationException">State of comparison is abou to be changed when it is <see cref="F:Tools.GlobalizationT.ISOLanguage.CompState.Equal"/> or <see cref="F:Tools.GlobalizationT.ISOLanguage.CompState.NotEqual"/></exception>
</member><member name="F:Tools.GlobalizationT.ISOLanguage.CompState.Equal">
	<summary>Operand equal</summary>
</member><member name="F:Tools.GlobalizationT.ISOLanguage.CompState.Null">
	<summary>Unknown state</summary>
</member><member name="F:Tools.GlobalizationT.ISOLanguage.CompState.NotEqual">
	<summary>Operands did not equal</summary>
</member><member name="T:Tools.GlobalizationT.ISOLanguage.CompState">
	<summary>States of comparison</summary>
</member><member name="M:Tools.GlobalizationT.ISOLanguage.op_Inequality(Tools.GlobalizationT.ISOLanguage,Tools.GlobalizationT.ISOLanguage)">
	<summary>Compares two instances of <see cref="T:Tools.GlobalizationT.ISOLanguage"/></summary>
	<param name="a">A <see cref="T:Tools.GlobalizationT.ISOLanguage"/> to be compared</param>
	<param name="b">A <see cref="T:Tools.GlobalizationT.ISOLanguage"/> to be compared</param>
	<returns>False if both instances have same both codes (<see cref="P:Tools.GlobalizationT.ISOLanguage.ISO1"/> and <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/>). If one of codes of one operand if null then it is ignored. For <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> also <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/> is compared. Result is Ture when at least one pair of cross comparison of both <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/>s and <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/>s retuns true. Result is ignored if both <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> and <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/> of one operand are null. If comparison of <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO1"/> leads to true and comparison of <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> leads to false (or vice versa) an <see cref="T:System.InvalidOperationException"/> is thrown.</returns>
	<exception cref="T:System.InvalidOperationException"><see cref="P:Tools.GlobalizationT.ISOLanguage.ISO1"/> of both operands are considered equal while <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> not.</exception>
</member><member name="M:Tools.GlobalizationT.ISOLanguage.Equals(System.Object)">
	<summary>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</summary>
	<param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
	<returns>true if the specified System.Object is equal to the current <see cref="T:System.Object"/>; otherwise, false.</returns>
	<remarks>Use type safe overload <see cref="M:Tools.GlobalizationT.ISOLanguage.Equals(System.Object)"/> instead. This function uses it internally</remarks>
</member><member name="M:Tools.GlobalizationT.ISOLanguage.Equals(Tools.GlobalizationT.ISOLanguage)">
	<summary>Compares this instance of <see cref="T:Tools.GlobalizationT.ISOLanguage"/> to another. Unlike the = operator does not throw an exception but rather returns false</summary>
	<param name="other">Another instance to compare this instance with</param>
	<returns>True if instances are considered equal. See the = operator for details</returns>
</member><member name="T:Tools.GlobalizationT.ISOLanguage">
	<summary>Represents language represented by ISO 639 language code and provides list of all defined ISO 639-1 and ISO 639-2 language codes</summary>
	<completionlist cref="T:Tools.GlobalizationT.ISOLanguage"/>
</member><member name="F:Tools.TimeSpanFormattable.Inner">
	<summary>Internal <see cref="T:System.TimeSpan"/></summary>
</member><member name="M:Tools.TimeSpanFormattable.#ctor(Tools.TimeSpanFormattable)">
	<summary>Copy CTor</summary>
	<param name="a">Instance to be used to initialize a new instance</param>
</member><member name="M:Tools.TimeSpanFormattable.#ctor(System.Int32,System.Int32,System.Int32)">
	<summary>Initializes a new <see cref="T:Tools.TimeSpanFormattable"/> to a specified number of hours, minutes, and seconds.</summary>
	<param name="seconds">Number of seconds.</param>
	<param name="hours">Number of hours.</param>
	<param name="minutes">Number of minutes.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:Tools.TimeSpanFormattable"/> value less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member><member name="M:Tools.TimeSpanFormattable.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>Initializes a new <see cref="T:Tools.TimeSpanFormattable"/> to a specified number of days, hours, minutes, seconds, and milliseconds.</summary>
	<param name="seconds">Number of seconds.</param>
	<param name="hours">Number of hours.</param>
	<param name="minutes">Number of minutes.</param>
	<param name="days">Number of days.</param>
	<param name="milliseconds">Number of milliseconds.</param>
	<exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:Tools.TimeSpanFormattable"/> value less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member><member name="M:Tools.TimeSpanFormattable.#ctor(System.Int64)">
	<summary>Initializes a new <see cref="T:Tools.TimeSpanFormattable"/> to the specified number of ticks.</summary>
	<param name="ticks">A time period expressed in 100-nanosecond units.</param>
</member><member name="M:Tools.TimeSpanFormattable.FromDays(System.Double)">
	<summary>Returns a <see cref="T:Tools.TimeSpanFormattable"/> that represents a specified number of days, where the specification is accurate to the nearest millisecond.</summary>
	<param name="value">A number of days, accurate to the nearest millisecond.</param>
	<returns>A <see cref="T:Tools.TimeSpanFormattable"/> that represents <paramref name="value"/>.</returns>
	<exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.</exception>
	<exception cref="T:System.OverflowException"><paramref name="value"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member><member name="M:Tools.TimeSpanFormattable.FromHours(System.Double)">
	<summary>Returns a <see cref="T:Tools.TimeSpanFormattable"/> that represents a specified number of hours, where the specification is accurate to the nearest millisecond.</summary>
	<param name="value">A number of hours, accurate to the nearest millisecond.</param>
	<returns>A <see cref="T:Tools.TimeSpanFormattable"/> that represents <paramref name="value"/>.</returns>
	<exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.</exception>
	<exception cref="T:System.OverflowException"><paramref name="value"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member><member name="M:Tools.TimeSpanFormattable.FromMinutes(System.Double)">
	<summary>Returns a <see cref="T:Tools.TimeSpanFormattable"/> that represents a specified number of minutes, where the specification is accurate to the nearest millisecond.</summary>
	<param name="value">A number of minutes, accurate to the nearest millisecond.</param>
	<returns>A <see cref="T:Tools.TimeSpanFormattable"/> that represents <paramref name="value"/>.</returns>
	<exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.</exception>
	<exception cref="T:System.OverflowException"><paramref name="value"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member><member name="M:Tools.TimeSpanFormattable.FromSeconds(System.Double)">
	<summary>Returns a <see cref="T:Tools.TimeSpanFormattable"/> that represents a specified number of seconds, where the specification is accurate to the nearest millisecond.</summary>
	<param name="value">A number of seconds, accurate to the nearest millisecond.</param>
	<returns>A <see cref="T:Tools.TimeSpanFormattable"/> that represents <paramref name="value"/>.</returns>
	<exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.</exception>
	<exception cref="T:System.OverflowException"><paramref name="value"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member><member name="M:Tools.TimeSpanFormattable.FromMillseconds(System.Double)">
	<summary>Returns a <see cref="T:Tools.TimeSpanFormattable"/> that represents a specified number of milliseconds.</summary>
	<param name="value">A number of milliseconds.</param>
	<returns>A <see cref="T:Tools.TimeSpanFormattable"/> that represents <paramref name="value"/>.</returns>
	<exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.</exception>
	<exception cref="T:System.OverflowException"><paramref name="value"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member><member name="M:Tools.TimeSpanFormattable.FromTicks(System.Int64)">
	<summary>Returns a <see cref="T:Tools.TimeSpanFormattable"/> that represents a specified time, where the specification is in units of ticks.</summary>
	<param name="value">A number of ticks that represent a time.</param>
	<returns>A <see cref="T:Tools.TimeSpanFormattable"/> with a value of <paramref name="value"/>.</returns>
</member><member name="M:Tools.TimeSpanFormattable.Parse(System.String)">
	<summary>Constructs a new <see cref="T:Tools.TimeSpanFormattable"/> object from a time interval specified in a string.</summary>
	<param name="s">A string that specifies a time interval.</param>
	<returns>A <see cref="T:Tools.TimeSpanFormattable"/> that corresponds to <paramref name="s"/>.</returns>
	<exception cref="T:System.FormatException"><paramref name="s"/> has an invalid format.</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="s"/> is null.</exception>
	<exception cref="T:System.OverflowException"><paramref name="s"/> represents a number less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.-or- At least one of the days, hours, minutes, or seconds components is outside its valid range.</exception>
</member><member name="M:Tools.TimeSpanFormattable.TryParse(System.String,Tools.TimeSpanFormattable@)">
	<summary>Constructs a new <see cref="T:Tools.TimeSpanFormattable"/> object from a time interval specified in a string. Parameters specify the time interval and the variable where the new <see cref="T:Tools.TimeSpanFormattable"/> object is returned.</summary>
	<param name="s">A string that specifies a time interval.</param>
	<param name="result">When this method returns, contains an object that represents the time interval specified by s, or <see cref="F:System.TimeSpan.Zero"/> if the conversion failed. This parameter is passed uninitialized.</param>
	<returns>true if s was converted successfully; otherwise, false. This operation returns false if the s parameter is null, has an invalid format,represents a time interval less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
</member><member name="P:Tools.TimeSpanFormattable.Ticks">
	<summary>Gets the number of ticks that represent the value of the current <see cref="T:Tools.TimeSpanFormattable"/> structure.</summary>
	<returns>Value of <see cref="P:System.TimeSpan.Ticks"/> of internal <see cref="T:System.TimeSpan"/></returns>
</member><member name="P:Tools.TimeSpanFormattable.Days">
	<summary>Gets the number of whole days represented by the current <see cref="T:Tools.TimeSpanFormattable"/> structure.</summary>
	<returns>Value of <see cref="P:System.TimeSpan.Days"/> of internal <see cref="T:System.TimeSpan"/>. The return value can be positive or negative.</returns>
</member><member name="P:Tools.TimeSpanFormattable.Hours">
	<summary>Gets the number of whole hours represented by the current<see cref="T:Tools.TimeSpanFormattable"/> structure.</summary>
	<returns>Value of <see cref="P:System.TimeSpan.Hours"/> of internal <see cref="T:System.TimeSpan"/>. The return value ranges from -23 through 23.</returns>
</member><member name="P:Tools.TimeSpanFormattable.Milliseconds">
	<summary>Gets the number of whole milliseconds represented by the current <see cref="T:Tools.TimeSpanFormattable"/> structure.</summary>
	<returns>Value of <see cref="P:System.TimeSpan.Milliseconds"/> of internal <see cref="T:System.TimeSpan"/>. The return value ranges from -999 through 999.</returns>
</member><member name="P:Tools.TimeSpanFormattable.Minutes">
	<summary>Gets the number of whole minutes represented by the current <see cref="T:Tools.TimeSpanFormattable"/> structure.</summary>
	<returns>Value of <see cref="P:System.TimeSpan.Minutes"/> of internal <see cref="T:System.TimeSpan"/>. The return value ranges from -59 through 59.</returns>
</member><member name="P:Tools.TimeSpanFormattable.Seconds">
	<summary>Gets the number of whole seconds represented by the current <see cref="T:Tools.TimeSpanFormattable"/> structure.</summary>
	<returns>Value of <see cref="P:System.TimeSpan.Seconds"/> of internal <see cref="T:System.TimeSpan"/>. The return value ranges from -59 through 59.</returns>
</member><member name="P:Tools.TimeSpanFormattable.TotalDays">
	<summary>Gets the value of the current <see cref="T:Tools.TimeSpanFormattable"/> structure expressed in whole and fractional days.</summary>
	<returns>Value of <see cref="P:System.TimeSpan.TotalDays"/> of internal <see cref="T:System.TimeSpan"/></returns>
</member><member name="P:Tools.TimeSpanFormattable.TotalHours">
	<summary>Gets the value of the current <see cref="T:Tools.TimeSpanFormattable"/> structure expressed in whole and fractional hours.</summary>
	<returns>Value of <see cref="P:System.TimeSpan.TotalHours"/> of internal <see cref="T:System.TimeSpan"/></returns>
</member><member name="P:Tools.TimeSpanFormattable.TotalMilliseconds">
	<summary>Gets the value of the current <see cref="T:Tools.TimeSpanFormattable"/> structure expressed in whole and fractional milliseconds.</summary>
	<returns>Value of <see cref="P:System.TimeSpan.TotalMilliseconds"/> of internal <see cref="T:System.TimeSpan"/></returns>
</member><member name="P:Tools.TimeSpanFormattable.TotalMinutes">
	<summary>Gets the value of the current <see cref="T:Tools.TimeSpanFormattable"/> structure expressed in whole and fractional minutes.</summary>
	<returns>Value of <see cref="P:System.TimeSpan.TotalMinutes"/> of internal <see cref="T:System.TimeSpan"/></returns>
</member><member name="P:Tools.TimeSpanFormattable.TotalSeconds">
	<summary>Gets the value of the current <see cref="T:Tools.TimeSpanFormattable"/> structure expressed in whole and fractional seconds.</summary>
	<returns>Value of <see cref="P:System.TimeSpan.TotalSeconds"/> of internal <see cref="T:System.TimeSpan"/></returns>
</member><member name="M:Tools.TimeSpanFormattable.op_Explicit(System.String)~Tools.TimeSpanFormattable">
	<summary>Constructs a new <see cref="T:Tools.TimeSpanFormattable"/> object from a time interval specified in a string.</summary>
	<param name="s">A string that specifies a time interval.</param>
	<returns>A <see cref="T:Tools.TimeSpanFormattable"/> that corresponds to <paramref name="s"/>.</returns>
	<exception cref="T:System.FormatException"><paramref name="s"/> has an invalid format.</exception>
	<exception cref="T:System.ArgumentNullException"><paramref name="s"/> is null.</exception>
	<exception cref="T:System.OverflowException"><paramref name="s"/> represents a number less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.-or- At least one of the days, hours, minutes, or seconds components is outside its valid range.</exception>
</member><member name="M:Tools.TimeSpanFormattable.Duration">
	<summary>Returns a new <see cref="T:Tools.TimeSpanFormattable"/> object whose value is the absolute value of the current <see cref="T:Tools.TimeSpanFormattable"/> object.</summary>
	<returns>A new <see cref="T:Tools.TimeSpanFormattable"/> whose value is the absolute value of the current <see cref="T:Tools.TimeSpanFormattable"/> object.</returns>
	<exception cref="T:System.OverflowException">The value of this instance is <see cref="F:System.TimeSpan.MinValue"/>.</exception>
</member><member name="M:Tools.TimeSpanFormattable.CompareTo(Tools.TimeSpanFormattable)">
	<summary>Compares this instance to a specified <see cref="T:Tools.TimeSpanFormattable"/> object and returns an indication of their relative values.</summary>
	<param name="other">A <see cref="T:Tools.TimeSpanFormattable"/> object to compare to this instance.</param>
	<returns>A signed number indicating the relative values of this instance and <paramref name="other"/>. Value Description: A negative integer This instance is less than <paramref name="other"/>. Zero This instance is equal to <paramref name="other"/>. A positive integer This instance is greater than <paramref name="other"/>.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_Implicit(System.TimeSpan)~Tools.TimeSpanFormattable">
	<summary>Converts <see cref="T:System.TimeSpan"/> into <see cref="T:Tools.TimeSpanFormattable"/></summary>
	<param name="a"><see cref="T:System.TimeSpan"/> to be converted</param>
	<returns><see cref="T:Tools.TimeSpanFormattable"/> with the same value as <paramref name="a"/></returns>
</member><member name="M:Tools.TimeSpanFormattable.#ctor(System.TimeSpan)">
	<summary>CTor from <see cref="T:System.TimeSpan"/></summary>
	<param name="a"><see cref="T:System.TimeSpan"/> to initialize value of newly created instance with</param>
</member><member name="M:Tools.TimeSpanFormattable.op_Implicit(Tools.TimeSpanFormattable)~System.TimeSpan">
	<summary>Converts <see cref="T:Tools.TimeSpanFormattable"/> into <see cref="T:System.TimeSpan"/></summary>
	<param name="a"><see cref="T:Tools.TimeSpanFormattable"/> to be converted</param>
	<returns><see cref="T:System.TimeSpan"/> with same value as <paramref name="a"/></returns>
</member><member name="M:Tools.TimeSpanFormattable.op_UnaryNegation(Tools.TimeSpanFormattable)">
	<summary>Returns a <see cref="T:Tools.TimeSpanFormattable"/> whose value is the negated value of the specified instance.</summary>
	<param name="t">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>A <see cref="T:Tools.TimeSpanFormattable"/> with the same numeric value as this instance, but the opposite sign.</returns>
	<exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan"/>; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue"/>.</exception>
</member><member name="M:Tools.TimeSpanFormattable.op_Subtraction(Tools.TimeSpanFormattable,Tools.TimeSpanFormattable)">
	<summary>Subtracts a specified <see cref="T:Tools.TimeSpanFormattable"/> from another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
	<param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>A <see cref="T:Tools.TimeSpanFormattable"/> whose value is the result of the value of <paramref name="t1"/> minus the value of <paramref name="t2"/>.</returns>
	<exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member><member name="M:Tools.TimeSpanFormattable.op_Subtraction(System.TimeSpan,Tools.TimeSpanFormattable)">
	<summary>Subtracts a specified <see cref="T:Tools.TimeSpanFormattable"/> from another specified <see cref="T:System.TimeSpan"/>.</summary>
	<param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<param name="t1">A <see cref="T:System.TimeSpan"/>.</param>
	<returns>A <see cref="T:System.TimeSpan"/> whose value is the result of the value of <paramref name="t1"/> minus the value of <paramref name="t2"/>.</returns>
	<exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member><member name="M:Tools.TimeSpanFormattable.op_Subtraction(Tools.TimeSpanFormattable,System.TimeSpan)">
	<summary>Subtracts a specified <see cref="T:System.TimeSpan"/> from another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
	<param name="t2">A <see cref="T:System.TimeSpan"/>.</param>
	<param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>A <see cref="T:Tools.TimeSpanFormattable"/> whose value is the result of the value of <paramref name="t1"/> minus the value of <paramref name="t2"/>.</returns>
	<exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member><member name="M:Tools.TimeSpanFormattable.op_UnaryPlus(Tools.TimeSpanFormattable)">
	<summary>Returns the specified instance of <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
	<param name="t">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>Returns <paramref name="t"/>.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_Addition(Tools.TimeSpanFormattable,Tools.TimeSpanFormattable)">
	<summary>Adds two specified <see cref="T:Tools.TimeSpanFormattable"/> instances.</summary>
	<param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>A <see cref="T:Tools.TimeSpanFormattable"/> whose value is the sum of the values of <paramref name="t1"/> and <paramref name="t2"/>.</returns>
	<exception cref="T:System.OverflowException">The resulting <see cref="T:Tools.TimeSpanFormattable"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member><member name="M:Tools.TimeSpanFormattable.op_Addition(Tools.TimeSpanFormattable,System.TimeSpan)">
	<summary>Adds specified <see cref="T:System.TimeSpan"/> to another <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
	<param name="t2">A <see cref="T:System.TimeSpan"/>.</param>
	<param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>A <see cref="T:Tools.TimeSpanFormattable"/> whose value is the sum of the values of <paramref name="t1"/> and <paramref name="t2"/>.</returns>
	<exception cref="T:System.OverflowException">The resulting <see cref="T:Tools.TimeSpanFormattable"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member><member name="M:Tools.TimeSpanFormattable.op_Addition(System.TimeSpan,Tools.TimeSpanFormattable)">
	<summary>Adds specified <see cref="T:Tools.TimeSpanFormattable"/> to another <see cref="T:System.TimeSpan"/>.</summary>
	<param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<param name="t1">A <see cref="T:System.TimeSpan"/>.</param>
	<returns>A <see cref="T:Tools.TimeSpanFormattable"/> whose value is the sum of the values of <paramref name="t1"/> and <paramref name="t2"/>.</returns>
	<exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member><member name="M:Tools.TimeSpanFormattable.op_Equality(Tools.TimeSpanFormattable,Tools.TimeSpanFormattable)">
	<summary>Indicates whether two <see cref="T:Tools.TimeSpanFormattable"/> instances are equal.</summary>
	<param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>true if the values of <paramref name="t1"/> and <paramref name="t2"/> are equal; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_Inequality(Tools.TimeSpanFormattable,Tools.TimeSpanFormattable)">
	<summary>Indicates whether two <see cref="T:Tools.TimeSpanFormattable"/> instances are not equal.</summary>
	<param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>true if the values of <paramref name="t1"/> and <paramref name="t2"/> are not equal; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_LessThan(Tools.TimeSpanFormattable,Tools.TimeSpanFormattable)">
	<summary>Indicates whether a specified <see cref="T:Tools.TimeSpanFormattable"/> is less than another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
	<param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>true if the value of <paramref name="t1"/> is less than the value of <paramref name="t2"/>; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_LessThanOrEqual(Tools.TimeSpanFormattable,Tools.TimeSpanFormattable)">
	<summary>Indicates whether a specified <see cref="T:Tools.TimeSpanFormattable"/> is less than or equal to another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
	<param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>true if the value of <paramref name="t1"/> is less than or equal to the value of <paramref name="t2"/>; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_GreaterThan(Tools.TimeSpanFormattable,Tools.TimeSpanFormattable)">
	<summary>Indicates whether a specified <see cref="T:Tools.TimeSpanFormattable"/> is greater than another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
	<param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>true if the value of <paramref name="t1"/> is greater than the value of <paramref name="t2"/>; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_GreaterThanOrEqual(Tools.TimeSpanFormattable,Tools.TimeSpanFormattable)">
	<summary>Indicates whether a specified <see cref="T:Tools.TimeSpanFormattable"/> is greater than or equal to another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
	<param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>true if the value of <paramref name="t1"/> is greater than or equal to the value of <paramref name="t2"/>; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_Equality(System.TimeSpan,Tools.TimeSpanFormattable)">
	<summary>Indicates whether <see cref="T:System.TimeSpan"/> and <see cref="T:Tools.TimeSpanFormattable"/> instances are equal.</summary>
	<param name="t1">A <see cref="T:System.TimeSpan"/>.</param>
	<param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>true if the values of <paramref name="t1"/> and <paramref name="t2"/> are equal; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_Inequality(System.TimeSpan,Tools.TimeSpanFormattable)">
	<summary>Indicates whether <see cref="T:System.TimeSpan"/> and <see cref="T:Tools.TimeSpanFormattable"/> instances are not equal.</summary>
	<param name="t1">A <see cref="T:System.TimeSpan"/>.</param>
	<param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>true if the values of <paramref name="t1"/> and <paramref name="t2"/> are not equal; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_LessThan(System.TimeSpan,Tools.TimeSpanFormattable)">
	<summary>Indicates whether a specified <see cref="T:System.TimeSpan"/> is less than another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
	<param name="t1">A <see cref="T:System.TimeSpan"/>.</param>
	<param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>true if the value of <paramref name="t1"/> is less than the value of <paramref name="t2"/>; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_LessThanOrEqual(System.TimeSpan,Tools.TimeSpanFormattable)">
	<summary>Indicates whether a specified <see cref="T:System.TimeSpan"/> is less than or equal to another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
	<param name="t1">A <see cref="T:System.TimeSpan"/>.</param>
	<param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>true if the value of <paramref name="t1"/> is less than or equal to the value of <paramref name="t2"/>; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_GreaterThan(System.TimeSpan,Tools.TimeSpanFormattable)">
	<summary>Indicates whether a specified <see cref="T:System.TimeSpan"/> is greater than another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
	<param name="t1">A <see cref="T:System.TimeSpan"/>.</param>
	<param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>true if the value of <paramref name="t1"/> is greater than the value of <paramref name="t2"/>; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_GreaterThanOrEqual(System.TimeSpan,Tools.TimeSpanFormattable)">
	<summary>Indicates whether a specified <see cref="T:System.TimeSpan"/> is greater than or equal to another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
	<param name="t1">A <see cref="T:System.TimeSpan"/>.</param>
	<param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>true if the value of <paramref name="t1"/> is greater than or equal to the value of <paramref name="t2"/>; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_Equality(Tools.TimeSpanFormattable,System.TimeSpan)">
	<summary>Indicates whether <see cref="T:Tools.TimeSpanFormattable"/> and <see cref="T:System.TimeSpan"/> instances are equal.</summary>
	<param name="t2">A <see cref="T:System.TimeSpan"/>.</param>
	<param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>true if the values of <paramref name="t1"/> and <paramref name="t2"/> are equal; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_Inequality(Tools.TimeSpanFormattable,System.TimeSpan)">
	<summary>Indicates whether  <see cref="T:Tools.TimeSpanFormattable"/> nad <see cref="T:System.TimeSpan"/> instances are not equal.</summary>
	<param name="t2">A <see cref="T:System.TimeSpan"/>"/&gt;.</param>
	<param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>true if the values of <paramref name="t1"/> and <paramref name="t2"/> are not equal; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_LessThan(Tools.TimeSpanFormattable,System.TimeSpan)">
	<summary>Indicates whether a specified <see cref="T:Tools.TimeSpanFormattable"/> is less than another specified <see cref="T:System.TimeSpan"/>.</summary>
	<param name="t2">A <see cref="T:System.TimeSpan"/>.</param>
	<param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>true if the value of <paramref name="t1"/> is less than the value of <paramref name="t2"/>; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_LessThanOrEqual(Tools.TimeSpanFormattable,System.TimeSpan)">
	<summary>Indicates whether a specified <see cref="T:Tools.TimeSpanFormattable"/> is less than or equal to another specified <see cref="T:System.TimeSpan"/>.</summary>
	<param name="t2">A <see cref="T:System.TimeSpan"/>.</param>
	<param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>true if the value of <paramref name="t1"/> is less than or equal to the value of <paramref name="t2"/>; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_GreaterThan(Tools.TimeSpanFormattable,System.TimeSpan)">
	<summary>Indicates whether a specified <see cref="T:Tools.TimeSpanFormattable"/> is greater than another specified <see cref="T:System.TimeSpan"/>.</summary>
	<param name="t2">A <see cref="T:System.TimeSpan"/>.</param>
	<param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>true if the value of <paramref name="t1"/> is greater than the value of <paramref name="t2"/>; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_GreaterThanOrEqual(Tools.TimeSpanFormattable,System.TimeSpan)">
	<summary>Indicates whether a specified <see cref="T:Tools.TimeSpanFormattable"/> is greater than or equal to another specified <see cref="T:System.TimeSpan"/>.</summary>
	<param name="t2">A <see cref="T:System.TimeSpan"/>.</param>
	<param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>true if the value of <paramref name="t1"/> is greater than or equal to the value of <paramref name="t2"/>; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.op_Multiply(System.Int32,Tools.TimeSpanFormattable)">
	<summary>Multiplies given <see cref="T:Tools.TimeSpanFormattable"/> with given multiplier</summary>
	<param name="Time">A <see cref="T:Tools.TimeSpanFormattable"/></param>
	<param name="multiplier">Multiplier</param>
	<returns><paramref name="Time"/> multiplied <paramref name="multiplier"/> times. Accurancy of theis operation is milliseconds</returns>
	<exception cref="T:System.OverflowException">Resulting value is up to be less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/></exception>
</member><member name="M:Tools.TimeSpanFormattable.op_Multiply(Tools.TimeSpanFormattable,System.Int32)">
	<summary>Multiplies given <see cref="T:Tools.TimeSpanFormattable"/> with given multiplier</summary>
	<param name="Time">A <see cref="T:Tools.TimeSpanFormattable"/></param>
	<param name="multiplier">Multiplier</param>
	<returns><paramref name="Time"/> multiplied <paramref name="multiplier"/> times. Accurancy of theis operation is milliseconds</returns>
	<exception cref="T:System.OverflowException">Resulting value is up to be less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/></exception>
</member><member name="M:Tools.TimeSpanFormattable.op_Multiply(System.Double,Tools.TimeSpanFormattable)">
	<summary>Multiplies given <see cref="T:Tools.TimeSpanFormattable"/> with given multiplier</summary>
	<param name="Time">A <see cref="T:Tools.TimeSpanFormattable"/></param>
	<param name="multiplier">Multiplier</param>
	<returns><paramref name="Time"/> multiplied <paramref name="multiplier"/> times. Accurancy of theis operation is milliseconds</returns>
	<exception cref="T:System.OverflowException">Resulting value is up to be less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/></exception>
</member><member name="M:Tools.TimeSpanFormattable.op_Multiply(Tools.TimeSpanFormattable,System.Double)">
	<summary>Multiplies given <see cref="T:Tools.TimeSpanFormattable"/> with given multiplier</summary>
	<param name="Time">A <see cref="T:Tools.TimeSpanFormattable"/></param>
	<param name="multiplier">Multiplier</param>
	<returns><paramref name="Time"/> multiplied <paramref name="multiplier"/> times. Accurancy of theis operation is milliseconds</returns>
	<exception cref="T:System.OverflowException">Resulting value is up to be less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/></exception>
</member><member name="M:Tools.TimeSpanFormattable.Equals(Tools.TimeSpanFormattable)">
	<summary>Indicates whether the current <see cref="T:Tools.TimeSpanFormattable"/> is equal to another <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
	<param name="other">A <see cref="T:Tools.TimeSpanFormattable"/> to compare with this object.</param>
	<returns>true if the current <see cref="T:Tools.TimeSpanFormattable"/> is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.Equals(System.Object)">
	<summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:Tools.TimeSpanFormattable"/> object.</summary>
	<param name="obj">An <see cref="T:Tools.TimeSpanFormattable"/> or <see cref="T:System.TimeSpan"/> object to compare with this instance.</param>
	<returns>true if obj represents the same time interval as this instance; otherwise, false.</returns>
</member><member name="M:Tools.TimeSpanFormattable.GetHashCode">
	<summary>Returns a hash code for this instance.</summary>
	<returns>A 32-bit signed integer hash code.</returns>
</member><member name="M:Tools.TimeSpanFormattable.ToString">
	<summary>Returns the string representation of the value of this instance.</summary>
	<returns>A string that represents the value of this instance. The return value is of the form: [-][d.]hh:mm:ss[.ff] Items in square brackets ([ and ]) are optional, colons and periods (: and.) are literal characters; and the other items are as follows.Item Description "-" optional minus sign indicating a negative time "d" optional days "hh" hours, ranging from 0 to 23 "mm" minutes, ranging from 0 to 59 "ss" seconds, ranging from 0 to 59 "ff" optional fractional seconds, from 1 to 7 decimal digits For more information about comparing the string representation of <see cref="T:System.TimeSpan"/> and Oracle data types, see article Q324577, "<see cref="T:System.TimeSpan"/> Does Not Match Oracle 9i INTERVAL DAY TO SECOND Data Type," in the Microsoft Knowledge Base at <see>http://support.microsoft.com</see></returns>
</member><member name="M:Tools.TimeSpanFormattable.ToString(System.String,System.IFormatProvider)">
	<summary>Formats the value of the current instance using the specified format.</summary>
	<param name="format">The <see cref="T:System.String"/> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system.
 <para>If null is pased then <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> is used. This argument is used to obtain decimal separators, positive and negative signs and time separators in custom format and is also passed to custom subformats in braces. In order this parameter to work it's <see cref="M:System.IFormatProvider.GetFormat(System.Type)">GetFormat</see> method must return non-null value for <see cref="T:System.Globalization.NumberFormatInfo"/> and/or <see cref="T:System.Globalization.DateTimeFormatInfo"/>. If one of returned values is null <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo"/> resp. <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo"/> is used.</para>
	</param>
	<returns>A <see cref="T:System.String"/> containing the value of the current instance in the specified format.</returns>
	<remarks>For more information about formating of <see cref="T:Tools.TimeSpanFormattable"/> see documentation of overloaded <seealso cref="M:Tools.TimeSpanFormattable.ToString"/></remarks>
	<exception cref="T:System.FormatException">Unknown predefined format -or- syntax error in format string</exception>
	<exception cref="T:System.ArgumentOutOfRangeException">The 'T()' patter is used on negative <see cref="T:Tools.TimeSpanFormattable"/> or value of current <see cref="T:Tools.TimeSpanFormattable"/> added to <see cref="F:System.DateTime.MinValue"/> causes <see cref="F:System.DateTime.MaxValue"/> to be exceeded.</exception>
</member><member name="M:Tools.TimeSpanFormattable.ToString(System.String)">
	<summary>Formats the value of the current instance using the specified format, numeric format information is obtained from current locale setting of the operating system. If you want to use custom <see cref="T:System.IFormatProvider"/> use overloaded <see cref="M:Tools.TimeSpanFormattable.ToString"/> function.</summary>
	<param name="format">The <see cref="T:System.String"/> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:Tools.TimeSpanFormattable"/>.</param>
	<returns>A <see cref="T:System.String"/> containing the value of the current instance in the specified format.</returns>
	<remarks>
		<para><see cref="T:Tools.TimeSpanFormattable"/> provides large pallete of formats that can be used to represent current instance as <see cref="T:System.String"/>. Predefined and custom formats can be used.</para>
		<list type="table">
			<listheader>Predefined fromat strings</listheader>
			<listheader><term>Predefined format string</term><description>Treated as this custom format string</description></listheader>
			<item><term>g (short with full hours)</term><description>-h(00):mm</description></item>
			<item><term>G (long with full hours)</term><description>-h(00):mm:ss (This is default format used when no format string is specified)</description></item>
			<item><term>t (short time pattern)</term><description>-hh:mm</description></item>
			<item><term>T (long time pattern)</term><description>-hh:mm:ss</description></item>
			<item><term>l (shortest possible from hours to milliseconds)</term><description>-((h&lt;&gt;0)h(0):mm:ss|(m&lt;&gt;0)m(0):ss|s(0))((ll&lt;&gt;0).lll)</description></item>
			<item><term>L (shortest possible from days to milliseconds)</term><description>-((d&lt;&gt;0)d.)((h&lt;&gt;0)hh:mm:ss|(m&lt;&gt;0)m(0):ss|s(0))((ll&lt;&gt;0).lll)</description></item>
			<item><term>s (shortest possible from hours to seconds)</term><description>-((h&lt;&gt;0)h(0):mm:ss|(m&lt;&gt;0)m(0):ss|s(0))</description></item>
			<item><term>S (shortest possible from days to seconds)</term><description>-((d&lt;&gt;0)d.)((h&lt;&gt;0)hh:mm:ss|(m&lt;&gt;0)m(0):ss|s(0))</description></item>
		</list>
		<list type="table">
			<listheader>Custom format strings</listheader>
			<listheader><term>Format string</term><description>Description</description></listheader>
			<item><term>d, dd, ddd, ...</term>
				<description>Any number of lowercase ds represents days (value of <see cref="P:Tools.TimeSpanFormattable.Days"/>). Number of ds determines minimal number of digits that will represent number of days.</description>
			</item>
			<item><term>d(), dd()</term>
				<description>Custom-formated days. Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalDays"/> which equals to <see cref="P:Tools.TimeSpanFormattable.Days"/> fromated by format specified in braces. For more information about formats in braces see below.</description>
			</item>
			<item><term>D()</term>
				<description>Custom-formated fractional days. Value of <see cref="P:Tools.TimeSpanFormattable.TotalDays"/> fromated with format specified in braces. For more information about formats in braces see below.</description>
			</item>
			<item><term>[d], [dd], [ddd], ... or [d()] or [D()]</term>
				<description>Optional days. Same formats as described above but output is ommited when number of whole days (<see cref="P:Tools.TimeSpanFormattable.Days"/>) is zero.</description>
			</item>
			<item><term>h</term>
				<description>Short hours. Value of <see cref="P:Tools.TimeSpanFormattable.Hours"/> in 24 hour format from range 0÷23 as 1 or 2 digits.</description>
			</item>
			<item><term>hh</term>
				<description>Long hours. Value of <see cref="P:Tools.TimeSpanFormattable.Hours"/> in 24 hour format from range 0÷23 always as 2 digits.</description>
			</item>
			<item><term>h()</term>
				<description>Custom-formated hours. Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalHours"/> formated with format specified in braces. For more information about formats in braces see below.</description>
			</item>
			<item><term>hh()</term>
				<description>Custom-formated hours part. <see cref="P:Tools.TimeSpanFormattable.Hours"/> formated with format specified in braces. For more information about formats in braces see below.</description>
			</item>
			<item><term>H()</term>
				<description>Custom-formated fractional hours. Value of <see cref="P:Tools.TimeSpanFormattable.TotalHours"/> formated with format specified in braces. For more information about formats in braces see below.</description>
			</item>
			<item><term>m</term>
				<description>Short minutes. Value of <see cref="P:Tools.TimeSpanFormattable.Minutes"/> from range 0÷59 as 1 or 2 digits.</description>
			</item>
			<item><term>mm</term>
				<description>Long minutes. Value of <see cref="P:Tools.TimeSpanFormattable.Minutes"/> from range 0÷59 always as 2 digits.</description>
			</item>
			<item><term>m()</term>
				<description>Custom-formated minutes. Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalMinutes"/> formated with format specified in braces. For more information about formats in braces see below.</description>
			</item>
			<item><term>mm()</term>
				<description>Custom-formated whole minutes. <see cref="P:Tools.TimeSpanFormattable.Minutes"/> formated with format specified in braces. For more information about formats in braces see below.</description>
			</item>
			<item><term>M()</term>
				<description>Custom-formated fractional minutes. Value of <see cref="P:Tools.TimeSpanFormattable.TotalMinutes"/> formated with formate specified in braces. For more information about formats in braces see below.</description>
			</item>
			<item><term>s</term>
				<description>Short seconds. Value of <see cref="P:Tools.TimeSpanFormattable.Seconds"/> from range 0÷59 as 1 or 2 digits.</description>
			</item>
			<item><term>ss</term>
				<description>Long seconds. Value of <see cref="P:Tools.TimeSpanFormattable.Seconds"/> from range 0÷59 always as 2 digits.</description>
			</item>
			<item><term>s()</term>
				<description>Custom-formated seconds. Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalSeconds"/> formated with format specified in braces. For more information about formats in braces see below.</description>
			</item>
			<item><term>ss()</term>
				<description>Custom-formated whole seconds. <see cref="P:Tools.TimeSpanFormattable.Seconds"/> formated with format specified in braces. For more information about formats in braces see below.</description>
			</item>
			<item><term>S()</term>
				<description>Custom-formated fractional seconds. Value of <see cref="P:Tools.TimeSpanFormattable.TotalSeconds"/> fromated with format specified in braces. For more information about formats in braces see below.</description>
			</item>
			<item><term>l</term>
				<description>Short milliseconds. Value of <see cref="P:Tools.TimeSpanFormattable.Milliseconds"/> from range 0÷999 as 1, 2 or 3 digits.</description>
			</item>
			<item><term>ll</term>
				<description>Middle milliseconds. Value of <see cref="P:Tools.TimeSpanFormattable.Milliseconds"/> from range 0÷999 as 2 or 3 digits.</description>
			</item>
			<item><term>lll</term>
				<description>Long milliseconds. Value of <see cref="P:Tools.TimeSpanFormattable.Milliseconds"/> from range 0÷999 always as 3 digits.</description>
			</item>
			<item><term>l()</term>
				<description>Custom-formated milliseconds. Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalMilliseconds"/> formated with format specified in braces. For more information about formats in braces see below.</description>
			</item>
			<item><term>ll()</term>
				<description>Custom-formated whole milliseconds. <see cref="P:Tools.TimeSpanFormattable.TotalMilliseconds"/> formated with format specified in braces. For more information about formats in braces see below.</description>
			</item>
			<item><term>L()</term>
				<description>Custom-formated fractional milliseconds. Value of <see cref="P:Tools.TimeSpanFormattable.TotalMilliseconds"/> formated with formate specified in braces. For more information about formats in braces see below.</description>
			</item>
			<item><term>t, tt, ttt, ...</term>
				<description>Any number of lowercase ts represents value of <see cref="P:Tools.TimeSpanFormattable.Ticks"/>. The umber of ts determines minimal number of digits copyed to output.</description>
			</item>
			<item><term>t()</term>
				<description>Custom-formated ticks. Value of <see cref="P:Tools.TimeSpanFormattable.Ticks"/> formated with format specified in braces. For more information about formats in braces see below.</description>
			</item>
			<item><term>T()</term>
				<description>
             Custom-formated time. Time part represented as <see cref="T:System.DateTime"/> formated with format specified in braces. For more information about formats in braces see below.
             The <see cref="T:System.DateTime"/> value if made as result of addition of <see cref="F:System.DateTime.MinValue"/> and current value of this <see cref="T:Tools.TimeSpanFormattable"/> and thus this pattern should be used only for positive <see cref="T:Tools.TimeSpanFormattable"/> values otherwise <see cref="T:System.ArgumentOutOfRangeException"/> may be thrown.
         </description>
			</item>
			<item><term>:</term>
				<description>The time separator defined in the current <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator"/> property that is used to differentiate hours, minutes, and seconds.</description>
			</item>
			<item><term>.</term>
				<description>The actual character used as the decimal separator is determined by the <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator"/> property of the <see cref="T:System.Globalization.NumberFormatInfo"/> that controls formatting.</description>
			</item>
			<item><term>"</term>
				<description>Quoted string (quotation mark). Displays the literal value of any string between two quotation marks (").</description>
			</item>
			<item><term>'</term>
				<description>Quoted string (apostrophe). Displays the literal value of any string between two apostrophe (') characters.</description>
			</item>
			<item><term>%c</term>
				<description>Represents the result associated with a custom format specifier "c", when the custom DateTime format string consists solely of that custom format specifier. This is used to determine between predefined and custom format string. Each format string that's length is 1 is treated as predefined format string. If you want to treat 1-character long custom format string as custom format string, precede it with the '%' character (otherwise it will be always treated as predefined format string even when such predefined format string doesn't exist which may lead to unexpected results or exceptions). In any other case ('%' is not first character of 2-characters long custom format string) the '%' is treated as any other unknown character and thus it is copyed to output (or causes <see cref="T:System.FormatException"/> if placed where it is not allowed).</description>
			</item>
			<item><term>\c</term>
				<description>
					<para>The escape character. Displays the character "c" as a literal when that character is preceded by the escape character (\). To insert the backslash character itself in the result string, use two escape characters ("\\").</para>
					<para>This described behavior takes effect in context of quoted literals (" and ') and at root level of pattern. For information how the backslash escape character is treated in format in braces see below.</para>
				</description>
			</item>
			<item><term>-</term>
				<description>Optional sign. The minus sign (defined by current culture) is copyed to output when value of this <see cref="T:Tools.TimeSpanFormattable"/> is negative.</description>
			</item>
			<item><term>+</term>
				<description>Compulsory sign. The minus or plus sign (defined by current culture) is copyed to output if value of this <see cref="T:Tools.TimeSpanFormattable"/> is non-zero.</description>
			</item>
			<item><term>(()|()|)</term>
				<description>
             Conditional formating. See below.
         </description>
			</item>
			<item><term>Any other character</term>
				<description>Any unknown character is copyed to output</description>
			</item>
		</list>
		<para>Formats in braces:</para>
		<para>
     There are several contexts where you can use other nested format string to format part of rendered string. Those nested format strings are also enclosed with braces (). The format string expected in braces depends on value being formated. d,h,m,s,l and t are integral numbers, D,H,M,S and L are floating point numbers and T is <see cref="T:System.DateTime"/>. You can use any format string valied for appropriate data type - predefined or custom or you can leave braces empty to use default format.
     Because you may want to pass closing brace ')' into custom format, you must understand how the closing brace is being esacped. If you want to pass the ')' into custom format instead of using it to close custom format block escape it with '\' (type '\)'). If you want to pass backslash ('\') into nested custom format string escape it with another '\' (type '\\'). Note if you will type any other chracter than ')' or '\' after '\' inside braces-delimited nested custom format string the whole sequence will be passed into underlying nested custom format string.
     For example if you want to use custom format string 'hh"(hours) and "mm"(minutes)"' (which produces something like '13(hours) and 33(minutes)' you should type 
     <example>T(hh"(hours\) and "mm"(minutes\)")</example>(Note: Same effect can be reached with format string 'hh"(hours) and "mm"(minutes)"' directly.
 </para>
		<para>Conditional formating:</para>
		<para>
     Any part of formating string can be surrounded by conditional formating construct. Sub-string in each part of conditional formatting must be valid formating string. Sub-string outside conditional formatting must be valid formating string. Conditional formatings can be nested.
 </para>
		<para>
     Conditional formating has similar structure as if-elseif-else statement. It begins with brace '(' and ends with brace ')'. Conditions are stated in another braces '()' just at start of conditional part. 2nd and next conditional parts are delimited by pipe '|' (followsed by braces with condition). Last conditional part (the else) does not need condition.
     Syntax of conditional segment of formating string is:
 </para>
		<code>((condition1)format1|(condition2)format2|(condition3)format3|format4)</code>
		<para>There can be 1 or more condition-format pairs. There can be or can be not last fall-backl format. Conditions are evaluated from left to right. Format associated with firts condition that evaluates to true is emited to output. False evaluated formats and skipped formats are still parsed and must be valid. But are not emitted to output. Syntax of condition is:</para>
		<code>value operator literal</code>
		<para>Value can be one of following:</para>
		<list type="table"><listheader><term>Value string</term><description>Meaning</description></listheader>
			<item><term>d</term><description>Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalDays"/></description></item>
			<item><term>D</term><description><see cref="P:Tools.TimeSpanFormattable.TotalDays"/></description></item>
			<item><term>dd</term><description><see cref="P:Tools.TimeSpanFormattable.Days"/></description></item>
			<item><term>h</term><description>Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalHours"/></description></item>
			<item><term>H</term><description><see cref="P:Tools.TimeSpanFormattable.TotalHours"/></description></item>
			<item><term>hh</term><description><see cref="P:Tools.TimeSpanFormattable.Hours"/></description></item>
			<item><term>m</term><description>Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalMinutes"/></description></item>
			<item><term>M</term><description><see cref="P:Tools.TimeSpanFormattable.TotalMinutes"/></description></item>
			<item><term>mm</term><description><see cref="P:Tools.TimeSpanFormattable.Minutes"/></description></item>
			<item><term>s</term><description>Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalSeconds"/></description></item>
			<item><term>S</term><description><see cref="P:Tools.TimeSpanFormattable.TotalSeconds"/></description></item>
			<item><term>ss</term><description><see cref="P:Tools.TimeSpanFormattable.Seconds"/></description></item>
			<item><term>l</term><description>Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalMilliseconds"/></description></item>
			<item><term>L</term><description><see cref="P:Tools.TimeSpanFormattable.TotalMilliseconds"/></description></item>
			<item><term>ll</term><description><see cref="P:Tools.TimeSpanFormattable.Milliseconds"/></description></item>
			<item><term>T</term><description><see cref="T:System.TimeSpan"/> with same value as current instance of <see cref="T:Tools.TimeSpanFormattable"/></description></item>
			<item><term>t</term><description><see cref="P:Tools.TimeSpanFormattable.Ticks"/></description></item>
		</list>
		<para>Any value can be surronded by pipes (||) in order to make absolute value of it.</para>
		<para>Operator can be one of following comparison operators: &lt;, &lt;=, =, &gt;, &gt;=, &lt;&gt;</para>
		<para>Literal is numeric literal in like 123.148. Can be preceded with negative sing (-). Parts on the left and on the right side of decimal dot are optinal. Examples of valid number are: 128, -128, 128., .128, 128.128, -.128, -128., -128, 128. When comparing to T (whole <see cref="T:System.TimeSpan"/>) right operand shall not be number but time value in format D.h:m:s.l.
 Time literal have not to be fully specified. If it is specified as number only, it is treated as hours. Days can be ommited (including first dot). Minutes, seconds and milliseconds can be ommited including leading colons (or dots). Examples of valid times are: 14 (14 hours), 14.3 (14 days, 3 hours), 14.25:10 (14 days, 25 hours, 10 minutes), 10 (10 hours), 10:00:01 (10 hours, 1 second), 0:0:0000001.321 (1.321 seconds)</para>
		<para>Conditions does not allow any spaces in them. Any character that is not understood is treated as error. Technically you can specify multiple fall down conditions and specify |() condition after | condition. Practically no such condition is ever emitted because some of prevous conditions (|) have evaluetad to true. However syntactically it is OK, error oe not thrown. Any formating that can be used outside conditions (including so-called formats in braces) can be used inside conditions.</para>
		<para>Note: Format string is parsed from left to right by finite deterministic state automaton and thus format string like mmm on time span of value 1:14:00 will produce "1414" etc.</para>
		<para>Examples (both have same results):</para>
		<example><code>Time is\: ((M&gt;=60)hh:mm:ss|(S&gt;=60)mm:ss|ss).l</code></example>
		<example><code>Time is\: ((T&gt;=1)hh:mm:ss|(T&gt;=0:1)mm:ss|ss).l</code></example>
		<para>Note: All numbers are rendered as absolute value, you must use +/- to display a sign</para>
		<para>See also: <a href="http://msdn2.microsoft.com/en-us/library/0c899ak8.aspx">Custom numeric formats</a>, <a href="http://msdn2.microsoft.com/en-us/library/dwhawy9k.aspx">Standard numeric formats</a></para>
	</remarks>
	<exception cref="T:System.FormatException">Unknown predefined format -or- syntax error in format string</exception>
	<exception cref="T:System.ArgumentOutOfRangeException">The 'T()' patter is used on negative <see cref="T:Tools.TimeSpanFormattable"/> or value of current <see cref="T:Tools.TimeSpanFormattable"/> added to <see cref="F:System.DateTime.MinValue"/> causes <see cref="F:System.DateTime.MaxValue"/> to be exceeded.</exception>
</member><member name="M:Tools.TimeSpanFormattable.Format(System.TimeSpan,System.String,System.IFormatProvider)">
	<summary>Formats given <see cref="T:Tools.TimeSpanFormattable"/> using given format string</summary>
	<param name="TS">A <see cref="T:Tools.TimeSpanFormattable"/> to be formated</param>
	<param name="formatStr">A format string (Can be predefined or custom)</param>
	<param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system.
 <para>If null is pased then <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> is used. This argument is used to obtain decimal separators, positive and negative signs and time separators in custom format and is also passed to custom subformats in braces. In order this parameter to work it's <see cref="M:System.IFormatProvider.GetFormat(System.Type)">GetFormat</see> method must return non-null value for <see cref="T:System.Globalization.NumberFormatInfo"/> and/or <see cref="T:System.Globalization.DateTimeFormatInfo"/>. If one of returned values is null <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo"/> resp. <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo"/> is used.</para></param>
	<returns><paramref name="TS"/> fromated using <paramref name="formatStr"/></returns>
	<exception cref="T:System.FormatException">Unknown predefined format -or- syntax error in format string</exception>
	<exception cref="T:System.ArgumentOutOfRangeException">The 'T()' patter is used on negative <see cref="T:Tools.TimeSpanFormattable"/> or value of current <see cref="T:Tools.TimeSpanFormattable"/> added to <see cref="F:System.DateTime.MinValue"/> causes <see cref="F:System.DateTime.MaxValue"/> to be exceeded.</exception>
	<remarks>For more information about formating <see cref="T:Tools.TimeSpanFormattable"/> see <seealso cref="M:Tools.TimeSpanFormattable.ToString"/></remarks>
</member><member name="M:Tools.TimeSpanFormattable.ExpandPredefinedFormat(System.Char)">
	<summary>Gets custom formats that represents given predefined format</summary>
	<param name="format">Predefined format</param>
	<returns>Custom format that predefined format <paramref name="format"/> expands to.</returns>
	<exception cref="T:System.FormatException">Given predefined format <paramref name="format"/> is not known. Know predefined formats are G, g, T and t.</exception>
	<remarks>For more information about formating <see cref="T:Tools.TimeSpanFormattable"/> see <seealso cref="M:Tools.TimeSpanFormattable.ToString"/></remarks>
</member><member name="F:Tools.TimeSpanFormattable.pfShort">
	<summary>Short code of predefined format g - short with full hours</summary>
	<seealso cref="F:Tools.TimeSpanFormattable.efShort"/>
</member><member name="F:Tools.TimeSpanFormattable.pfLong">
	<summary>Short code of predefined format G - long with full hours</summary>
	<seealso cref="F:Tools.TimeSpanFormattable.efLong"/>
</member><member name="F:Tools.TimeSpanFormattable.pfShortTime">
	<summary>Short code of predefined format t - short time pattern</summary>
	<seealso cref="F:Tools.TimeSpanFormattable.efShortTime"/>
</member><member name="F:Tools.TimeSpanFormattable.pfLongTime">
	<summary>Short code of predefined format T - long time patern</summary>
	<seealso cref="F:Tools.TimeSpanFormattable.efLongTime"/>
</member><member name="F:Tools.TimeSpanFormattable.pfShortest_hl">
	<summary>Short code of predefined format l - shortest possible from hours to milliseconds</summary>
	<seealso cref="F:Tools.TimeSpanFormattable.efShortest_hl"/>
</member><member name="F:Tools.TimeSpanFormattable.pfShortest_dl">
	<summary>Short code of predefined format L - shortest possible from days to milliseconds</summary>
	<seealso cref="F:Tools.TimeSpanFormattable.efShortest_dl"/>
</member><member name="F:Tools.TimeSpanFormattable.pfShortest_hs">
	<summary>Short code of predefined format L - shortest possible hours days to seconds</summary>
	<seealso cref="F:Tools.TimeSpanFormattable.efShortest_hs"/>
</member><member name="F:Tools.TimeSpanFormattable.pfShortest_ds">
	<summary>Short code of predefined format L - shortest possible from days to seconds</summary>
	<seealso cref="F:Tools.TimeSpanFormattable.efShortest_ds"/>
</member><member name="F:Tools.TimeSpanFormattable.efShort">
	<summary>Expanded pattern of predefined format g - short with full hours</summary>
	<seealso cref="F:Tools.TimeSpanFormattable.pfShort"/>
</member><member name="F:Tools.TimeSpanFormattable.efLong">
	<summary>Expanded pattern of predefined format G - long with full hours</summary>
	<seealso cref="F:Tools.TimeSpanFormattable.pfLong"/>
</member><member name="F:Tools.TimeSpanFormattable.efShortTime">
	<summary>Expanded pattern of predefined format t - short time pattern</summary>
	<seealso cref="F:Tools.TimeSpanFormattable.pfShortTime"/>
</member><member name="F:Tools.TimeSpanFormattable.efLongTime">
	<summary>Expanded pattern of predefined format T - long time patern</summary>
	<seealso cref="F:Tools.TimeSpanFormattable.pfLongTime"/>
</member><member name="F:Tools.TimeSpanFormattable.efShortest_hl">
	<summary>Expanded pattern of predefined format l - shortest possible from hours to milliseconds</summary>
	<seealso cref="F:Tools.TimeSpanFormattable.pfShortest_hl"/>
</member><member name="F:Tools.TimeSpanFormattable.efShortest_dl">
	<summary>Expanded pattern of predefined format L - shortest possible from days to milliseconds</summary>
	<seealso cref="F:Tools.TimeSpanFormattable.pfShortest_dl"/>
</member><member name="F:Tools.TimeSpanFormattable.efShortest_hs">
	<summary>Expanded pattern of predefined format L - shortest possible hours days to seconds</summary>
	<seealso cref="F:Tools.TimeSpanFormattable.pfShortest_hs"/>
</member><member name="F:Tools.TimeSpanFormattable.efShortest_ds">
	<summary>Expanded pattern of predefined format L - shortest possible from days to seconds</summary>
	<seealso cref="F:Tools.TimeSpanFormattable.pfShortest_ds"/>
</member><member name="P:Tools.TimeSpanFormattable.PredefinedFormats">
	<summary>Gets dictionary of all predefined formats. Keys contain short codes, values contain expanded patterns.</summary>
	<returns>New instance of <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains all the predefined formats</returns>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.nth">
	<summary>Normal state</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.d1">
	<summary>After d</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.d2">
	<summary>After dd</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.d3">
	<summary>Ar ddd (and any number of ds)</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.dFormat">
	<summary>Afterd d(</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.dFormatb">
	<summary>Afterd d(\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.D_">
	<summary>After D</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.D_Format">
	<summary>After D(</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.D_Formatb">
	<summary>After D(\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.leftB">
	<summary>After [</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.leftBd1">
	<summary>After [d</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.leftBd2">
	<summary>After [dd</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.leftBdFormat">
	<summary>After [d(</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.leftBdFormatb">
	<summary>After [d(\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.leftBD_">
	<summary>After [D</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.leftBD_Format">
	<summary>After [D(</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.leftBD_Formatb">
	<summary>After [D(\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.leftBEnd">
	<summary>After [D(...) or [d(...)</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.h1">
	<summary>After h</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.H_">
	<summary>After H</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.hFormat">
	<summary>After h(</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.hFormatb">
	<summary>After h(\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.H_Format">
	<summary>After H(</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.H_Formatb">
	<summary>After H(\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.h2">
	<summary>After hh</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.h2Format">
	<summary>After hh(</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.h2Formatb">
	<summary>After hh(\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.m1">
	<summary>After m</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.M_">
	<summary>After M</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.mFormat">
	<summary>After m(</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.mFormatb">
	<summary>After m(\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.M_Format">
	<summary>After M(</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.M_Formatb">
	<summary>After M(\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.m2">
	<summary>After mm</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.m2Format">
	<summary>After mm(</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.m2Formatb">
	<summary>After mm(\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.s1">
	<summary>After s</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.S_">
	<summary>After S</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.sFormat">
	<summary>After s(</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.sFormatb">
	<summary>After s(\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.S_Format">
	<summary>After S(</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.S_Formatb">
	<summary>After S(\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.s2">
	<summary>After ss</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.s2Format">
	<summary>After ss(</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.s2Formatb">
	<summary>After ss(\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.l1">
	<summary>After l</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.l2">
	<summary>After ll</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.L_">
	<summary>After L</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.lFormat">
	<summary>After l(</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.lFormatb">
	<summary>After l(\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.L_Format">
	<summary>After L(</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.L_Formatb">
	<summary>After L(\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.l2Format">
	<summary>After ll(</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.l2Formatb">
	<summary>After ll(\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.t1">
	<summary>After t</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.t2">
	<summary>After tt</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.T_">
	<summary>After T</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.tFormat">
	<summary>After t(</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.tFormatb">
	<summary>After t(\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.T_Format">
	<summary>After T(</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.T_Formatb">
	<summary>After T(\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.singleQ">
	<summary>After '</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.singleQb">
	<summary>After '\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.doubleQ">
	<summary>After "</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.doubleQb">
	<summary>After "\</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Back">
	<summary>After \</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Open">
	<summary>After (</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Open2">
	<summary>After (( or |( in condition</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Pipe">
	<summary>In condition body after |</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.OpenPipe">
	<summary>Condition expression, part 1, after |</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.AwaitComparison">
	<summary>Condition expression, after 1st part, expects comparison operator</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.AwaitPipe">
	<summary>Condition expression, part 1, expects closing pipe</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Openh">
	<summary>Condition expression, part 1, after h</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Openm">
	<summary>Condition expression, part 1, after m</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Opens">
	<summary>Condition expression, part 1, after s</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Opend">
	<summary>Condition expression, part 1, after d</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Openl">
	<summary>Condition expression, part 1, after l</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.OpenPipeh">
	<summary>Condition expression, part 1, after h (in pipes)</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.OpenPipem">
	<summary>Condition expression, part 1, after m (in pipes)</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.OpenPipes">
	<summary>Condition expression, part 1, after s (in pipes)</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.OpenPiped">
	<summary>Condition expression, part 1, after d (in pipes)</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.OpenPipel">
	<summary>Condition expression, part 1, after l (in pipes)</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Clt">
	<summary>Condition expression, comparison operator, after &lt;</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Cgt">
	<summary>Condition expression, comparison operator, after &gt;</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.AwaitNumber">
	<summary>Condition expression, after operator &lt; or &gt;=</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.AfterMinus">
	<summary>Condition expression, part 2, after minus sign</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.AfterDot">
	<summary>Condition expression, part 2, after dot</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.BeforeDot">
	<summary>Condition expression, part 2, in number before dot</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.OpenT">
	<summary>Condition expression, before oparetor after t or |t|</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.OpenPipeT">
	<summary>Condition expression, part1, after |t</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Tlt">
	<summary>Condition expression, operator, after &lt; or |t|&lt;</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Tgt">
	<summary>Condition expression, operator, after t&gt; or |t|&gt;</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TMinus">
	<summary>Condition expression, part 2, after -</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TAwait1">
	<summary>Condition expression, after comparison operator</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TNumber1">
	<summary>Condition expression, part 2, first number of time</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TAwaitH">
	<summary>Condition expression, part 2, before hour bart</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TH">
	<summary>Condition expression, part2, hour part</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TAwaitM">
	<summary>Condition expression, part 2, before minute part</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TM">
	<summary>Condition expression, part 2, minute part</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TAwaitS">
	<summary>Condition expression, part 2, before second part</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TS">
	<summary>Condition expression, part 2, second part</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TAwaitL">
	<summary>Condition expression, part 2, before millisecond part</summary>
</member><member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TL">
	<summary>Condition expression, part 2, millisecond part</summary>
</member><member name="T:Tools.TimeSpanFormattable.FormatAutomatState">
	<summary>States of finite state deterministic automaton used to parse custom format string in <see cref="M:Tools.TimeSpanFormattable.FormatCustomized(System.TimeSpan,System.String,System.IFormatProvider)"/></summary>
</member><member name="M:Tools.TimeSpanFormattable.PartCustomFormatBS(System.String,System.String@,System.Int32)">
	<summary>Handles backslash in nested format in braces. Extracted repeatedly used part of <see cref="M:Tools.TimeSpanFormattable.FormatCustomized(System.TimeSpan,System.String,System.IFormatProvider)"/>.</summary>
	<param name="format">Format string</param>
	<param name="InFormat">Nested format string being produced.</param>
	<param name="i">Current position in <paramref name="format"/></param>
</member><member name="M:Tools.TimeSpanFormattable.FormatCustomized(System.TimeSpan,System.String,System.IFormatProvider)">
	<summary>Realizes Finite Deterministic State Automaton that parses format string and produces resulting output string</summary>
	<param name="TS">A <see cref="T:Tools.TimeSpanFormattable"/> to be formated</param>
	<param name="format">Format string</param>
	<param name="prov">The <see cref="T:System.IFormatProvider"/> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system.
 <para>If null is pased then <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> is used. This argument is used to obtain decimal separators, positive and negative signs and time separators in custom format and is also passed to custom subformats in braces. In order this parameter to work it's <see cref="M:System.IFormatProvider.GetFormat(System.Type)">GetFormat</see> method must return non-null value for <see cref="T:System.Globalization.NumberFormatInfo"/> and/or <see cref="T:System.Globalization.DateTimeFormatInfo"/>. If one of returned values is null <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo"/> resp. <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo"/> is used.</para>
	</param>
	<returns><paramref name="TS"/> formated using <paramref name="format"/></returns>
	<remarks>For more information about formating <see cref="T:Tools.TimeSpanFormattable"/> see <seealso cref="M:Tools.TimeSpanFormattable.ToString"/></remarks>
	<exception cref="T:System.FormatException">Unknown predefined format -or- syntax error in format string</exception>
	<exception cref="T:System.ArgumentOutOfRangeException">The 'T()' pattern is used on negative <see cref="T:Tools.TimeSpanFormattable"/> or value of current <see cref="T:Tools.TimeSpanFormattable"/> added to <see cref="F:System.DateTime.MinValue"/> causes <see cref="F:System.DateTime.MaxValue"/> to be exceeded.</exception>
</member><member name="M:Tools.TimeSpanFormattable.GetCondition(System.TimeSpan,System.TimeSpan,Tools.TimeSpanFormattable.ComparisonOperators)">
	<summary>Creates boolean condition for <see cref="T:System.TimeSpan"/></summary>
	<param name="v">Value to be compared at left side</param>
	<param name="CompareTo">Value to be compared at right side</param>
	<param name="op">Comparizon operator</param>
	<returns>Result of comparison <paramref name="Value"/>
		<paramref name="op"/>
		<paramref name="CompareTo"/></returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="op"/> is not memebr of <see cref="T:Tools.TimeSpanFormattable.ComparisonOperators"/></exception>
</member><member name="M:Tools.TimeSpanFormattable.GetCondition(System.IConvertible,System.Double,Tools.TimeSpanFormattable.ComparisonOperators)">
	<summary>Creates boolean condition for number</summary>
	<param name="Value">Value to be compared at left side</param>
	<param name="CompareTo">Value to be compared at right side</param>
	<param name="op">Comparizon operator</param>
	<returns>Result of comparison <paramref name="Value"/>
		<paramref name="op"/>
		<paramref name="CompareTo"/></returns>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="op"/> is not memebr of <see cref="T:Tools.TimeSpanFormattable.ComparisonOperators"/></exception>
	<exception cref="T:System.ArgumentException"><paramref name="Value"/> is not of one of following types: <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/></exception>
</member><member name="F:Tools.TimeSpanFormattable.ComparisonOperators.Less">
	<summary>Less than (&lt;)</summary>
</member><member name="F:Tools.TimeSpanFormattable.ComparisonOperators.Greater">
	<summary>Greater than (&gt;)</summary>
</member><member name="F:Tools.TimeSpanFormattable.ComparisonOperators.Equal">
	<summary>Equal to (=)</summary>
</member><member name="F:Tools.TimeSpanFormattable.ComparisonOperators.LessEqual">
	<summary>Less than or equal to (&lt;=)</summary>
</member><member name="F:Tools.TimeSpanFormattable.ComparisonOperators.GreaterEqual">
	<summary>Greater than or equal to (&gt;=)</summary>
</member><member name="F:Tools.TimeSpanFormattable.ComparisonOperators.NotEqual">
	<summary>Not equal to (&lt;)</summary>
</member><member name="T:Tools.TimeSpanFormattable.ComparisonOperators">
	<summary>Comparison operators for format string conditions</summary>
</member><member name="T:Tools.TimeSpanFormattable">
	<summary><see cref="T:System.TimeSpan"/> that implements <see cref="T:System.IFormattable"/></summary>
	<remarks>This class has plenty of formating possibilities which can be used via <see cref="T:System.String"/> or <see cref="M:Tools.TimeSpanFormattable.ToString"/>.</remarks>
	<seealso cref="T:System.TimeSpan"/>
</member><member name="P:Tools.ReflectionT.ISignatureProvider.Name">
	<summary>Gets name of current provider</summary>
</member><member name="M:Tools.ReflectionT.ISignatureProvider.GetSignature(System.Reflection.AssemblyName,Tools.ReflectionT.SignatureFlags)">
	<summary>Gets string representation of an assembly name</summary>
	<param name="Assembly">Assembly to represent</param>
	<param name="Flags">Controls how the signature will be rendered</param>
	<returns>String representation of <paramref name="Assembly"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Assembly"/> is null</exception>
</member><member name="M:Tools.ReflectionT.ISignatureProvider.GetSignature(System.Reflection.Assembly,Tools.ReflectionT.SignatureFlags)">
	<summary>Gets string representation of an assembly</summary>
	<param name="Assembly">Assembly to represent</param>
	<param name="Flags">Controls how the signature will be rendered</param>
	<returns>String representation of <paramref name="Assembly"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Assembly"/> is null</exception>
</member><member name="M:Tools.ReflectionT.ISignatureProvider.GetSignature(System.Reflection.Module,Tools.ReflectionT.SignatureFlags)">
	<summary>gets representation of a module</summary>
	<param name="Module">Module to represent</param>
	<param name="Flags">Controls how the signature will be rendered</param>
	<returns>String representation of <paramref name="Module"/></returns>
 ''' <exception cref="T:System.ArgumentNullException"><paramref name="Module"/> is null</exception>
</member><member name="M:Tools.ReflectionT.ISignatureProvider.GetSignature(Tools.ReflectionT.NamespaceInfo,Tools.ReflectionT.SignatureFlags)">
	<summary>Gets string representation of a namespace</summary>
	<param name="Namespace">Namespace to represent</param>
	<param name="Flags">Controls how the signature will be rendered</param>
	<returns>String representation of <paramref name="Namespace"/></returns>
 ''' <exception cref="T:System.ArgumentNullException"><paramref name="Namespace"/> is null</exception>
</member><member name="M:Tools.ReflectionT.ISignatureProvider.GetSignature(System.Reflection.MemberInfo,Tools.ReflectionT.SignatureFlags)">
	<summary>Gets string representation of a member</summary>
	<param name="Member">Member to represent</param>
	<param name="Flags">Controls how the signature will be rendered</param>
	<returns>String representation of <paramref name="Member"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
</member><member name="T:Tools.ReflectionT.ISignatureProvider">
	<summary>Provides interface of object that provides string representation of various reflection object</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.ShortNameOnly">
	<summary>Only short name included. This has value 0.</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.AccessModifiers">
	<summary>Include access modifiers shuch ase Private, Public, etc.</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.OtherModifiers">
	<summary>Include other modifiers such as Static, Overrides, etc.</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.ObjectType">
	<summary>Include object type such as Class, Function, etc.</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.LongName">
	<summary>Use fullly qualified name (otherwise short name is used)</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.GenericParameters">
	<summary>Include generic parameter names</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.GenericParametersDetails">
	<summary>Include generic parameter details (constraints). Works only when <see cref="F:Tools.ReflectionT.SignatureFlags.GenericParameters"/> is set.</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.FullGenericparameters">
	<summary>Include generic parameters with detauils (constraints). This is combination of <see cref="F:Tools.ReflectionT.SignatureFlags.GenericParameters"/> and <see cref="F:Tools.ReflectionT.SignatureFlags.GenericParametersDetails"/></summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.Signature">
	<summary>Include method signature (types of arguments only)</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.SignatureDetails">
	<summary>Include names and other details in signarure. valid only if <see cref="F:Tools.ReflectionT.SignatureFlags.Signature"/> is set</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.FullSignature">
	<summary>Include full signature with all details. Tis is combination of <see cref="F:Tools.ReflectionT.SignatureFlags.Signature"/> and <see cref="F:Tools.ReflectionT.SignatureFlags.SignatureDetails"/>.</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.Type">
	<summary>Include (return) type. (Also type of enumeration or delegate type of event.)</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.Inheritance">
	<summary>Include inheritance and implementatipon info</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.SomeAttributes">
	<summary>Include some attribute commonly used by the provider</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.AllAttributes">
	<summary>Incklude all attributes. When set <see cref="F:Tools.ReflectionT.SignatureFlags.SomeAttributes"/> has no effect.</summary>
	<remarks>This is advanced and provider may not support it and ignore.
 If provider does not suppiort this but support <see cref="F:Tools.ReflectionT.SignatureFlags.SomeAttributes"/> it should use it instead.</remarks>
</member><member name="F:Tools.ReflectionT.SignatureFlags.Short">
	<summary>Short but meaningful signature. This is combination of <see cref="F:Tools.ReflectionT.SignatureFlags.GenericParameters"/>, <see cref="F:Tools.ReflectionT.SignatureFlags.Signature"/>, <see cref="F:Tools.ReflectionT.SignatureFlags.NoEmptyBraces"/>, <see cref="F:Tools.ReflectionT.SignatureFlags.AllShortNames"/> and (in fact or) <see cref="F:Tools.ReflectionT.SignatureFlags.NoMultiline"/>.</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.Detailed">
	<summary>Detailed signature. Only flags not set are <see cref="F:Tools.ReflectionT.SignatureFlags.LongName"/>, <see cref="F:Tools.ReflectionT.SignatureFlags.AllAttributes"/>, <see cref="F:Tools.ReflectionT.SignatureFlags.NoEmptyBraces"/>, <see cref="F:Tools.ReflectionT.SignatureFlags.AllShortNames"/> and <see cref="F:Tools.ReflectionT.SignatureFlags.NoMultiline"/></summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.Full">
	<summary>Full details. This is combination of <see cref="F:Tools.ReflectionT.SignatureFlags.Detailed"/> and <see cref="F:Tools.ReflectionT.SignatureFlags.AllAttributes"/> with <see cref="F:Tools.ReflectionT.SignatureFlags.SomeAttributes"/> not set</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.NoEmptyBraces">
	<summary>Instructs provider tom emmit possible empty braces in signature (e.g. for method with no parameters)</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.AllShortNames">
	<summary>Instructs provider to render only short names of types in signatures (for generic argumens and method parameters, omits namespace part of type name)</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.NoMultiline">
	<summary>Instructs provider not to create multiline code</summary>
</member><member name="F:Tools.ReflectionT.SignatureFlags.Strict">
	<summary>Instructs provider to create only such fragments that are supported by provider's language.</summary>
	<remarks> This does not necesarily mean that provider will provide code that is valid in target language (i.e. if it is also instructed to ommit element type definition (<see cref="F:Tools.ReflectionT.SignatureFlags.ObjectType"/> is not set) or omit empty braces (<see cref="F:Tools.ReflectionT.SignatureFlags.NoEmptyBraces"/>).
 This mean that unsupported constructs will not be provided - it will be writtent in other way. I.e. VB does not support overloading of <c>AndAlso</c> (&amp;&amp; in C#) operator, so in strict mode the provider will return <c>Public Shared Function op_LogicalAnd</c> instead of <c>Public Shared Operator AndAlso</c>.</remarks>
</member><member name="T:Tools.ReflectionT.SignatureFlags">
	<summary>Instructions for signature provider to which parts of signature to include in resulting string</summary>
	<remarks>Signature provider may chose to not generate some parts even when asked to and generate some parts even when not asked to</remarks>
</member><member name="P:Tools.ReflectionT.VisualBasicSignatureProvider.Name">
	<summary>Gets name of current provider</summary>
	<returns>"Visual Basic 9"</returns>
</member><member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.GetSignature(System.Reflection.AssemblyName,Tools.ReflectionT.SignatureFlags)">
	<summary>Gets string representation of an assembly name</summary>
	<param name="Assembly">Assembly to represent</param>
	<param name="Flags">Controls how the signature will be rendered</param>
	<returns>String representation of <paramref name="Assembly"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Assembly"/> is null</exception>
</member><member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.GetSignature(System.Reflection.Assembly,Tools.ReflectionT.SignatureFlags)">
	<summary>Gets string representation of an assembly</summary>
	<param name="Assembly">Assembly to represent</param>
	<param name="Flags">Controls how the signature will be rendered</param>
	<returns>String representation of <paramref name="Assembly"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Assembly"/> is null</exception>
</member><member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.AppendCustomAttributes(System.Collections.Generic.IList{System.Reflection.CustomAttributeData},System.Text.StringBuilder,Tools.ReflectionT.SignatureFlags,Tools.ReflectionT.VisualBasicSignatureProvider.CustomAttributeFlags,System.Boolean,Tools.dFunction{System.Boolean,System.Type})">
	<summary>Append information about custom attributes to <see cref="T:System.Text.StringBuilder"/></summary>
	<param name="Attributes">Attributes to append information about</param>
	<param name="ret">target <see cref="T:System.Text.StringBuilder"/></param>
	<param name="flags">Flags to control rendering</param>
	<param name="Way">True to use assembly-style attributes</param>
	<param name="Multiline">True to span attributtes on multiple lines. Note: <see cref="F:Tools.ReflectionT.SignatureFlags.NoMultiline"/> is set, multiple lines will not be produced.</param>
	<param name="filter">Attribute callback filter. Used only when <see cref="F:Tools.ReflectionT.SignatureFlags.SomeAttributes"/> is set and <see cref="F:Tools.ReflectionT.SignatureFlags.AllAttributes"/> is not set. Only attributes for which it is true will be returned.</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="ret"/> is null ==or== <paramref name="filter"/> is null and <see cref="F:Tools.ReflectionT.SignatureFlags.AllAttributes"/> is not set and <see cref="F:Tools.ReflectionT.SignatureFlags.SomeAttributes"/> is set. ==or== <paramref name="Attributes"/> is null</exception>
</member><member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.RepresentValue(System.Object,Tools.ReflectionT.SignatureFlags,System.Text.StringBuilder)">
	<summary>Serializes value of attribute-allowed type to <see cref="T:System.Text.StringBuilder"/></summary>
	<param name="val">Value to serialize</param>
	<param name="Flags">Serialization flags</param>
	<param name="ret"><see cref="T:System.Text.StringBuilder"/> to serialize value to</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="ret"/> is null</exception>
</member><member name="F:Tools.ReflectionT.VisualBasicSignatureProvider.SupportedOperators">
	<summary>Operator suported for displaying signature by this provider</summary>
</member><member name="F:Tools.ReflectionT.VisualBasicSignatureProvider.StrictOperators">
	<summary>Operator suported for displaying signature by this provider in strict mode</summary>
</member><member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.GetSignature(System.Reflection.MemberInfo,Tools.ReflectionT.SignatureFlags)">
	<summary>Gets string representation of a member</summary>
	<param name="Member">Member to represent</param>
	<param name="Flags">Controls how the signature will be rendered</param>
	<returns>String representation of <paramref name="Member"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
</member><member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.OperatorName(Tools.ReflectionT.Operators)">
	<summary>Converts any operator tor its string representation</summary>
	<param name="op">Operator to convert</param>
	<returns>Operator string representation in Visual Basic.</returns>
	<remarks>Works also for operators that cannot be overloaded or even don't exist in VB.</remarks>
</member><member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.AppendSignature(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo},Tools.ReflectionT.SignatureFlags,System.Text.StringBuilder)">
	<summary>Appends method signature to <see cref="T:System.Text.StringBuilder"/></summary>
	<param name="Parameters">parameters that represents signature to append</param>
	<param name="Flags">Flags that controls signature rendering</param>
	<param name="ret"><see cref="T:System.Text.StringBuilder"/> to append signature to</param>
	<remarks>Braces (()) around parameters are not rendered.</remarks>
	<exception cref="T:System.ArgumentNullException"><paramref name="ret"/> or <paramref name="Parameters"/> is null</exception>
</member><member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.AppendGenericConstraints(System.Type,System.Text.StringBuilder,Tools.ReflectionT.SignatureFlags)">
	<summary>tes constraints of generic type to <see cref="T:System.Text.StringBuilder"/> in Visual-Basic-like way</summary>
	<param name="gPar"><see cref="T:System.Type"/> that represents generic parameter</param>
	<param name="ret"><see cref="T:System.Text.StringBuilder"/> to write constraints to</param>
	<param name="Flags">Flags that controls rendering</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="ret"/> or <paramref name="gPar"/> is null</exception>
	<remarks>If <paramref name="Flags"/> ans not set <see cref="F:Tools.ReflectionT.SignatureFlags.GenericParametersDetails"/> bit the method exits immediatelly</remarks>
</member><member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.RepresentTypeName(System.Type,System.Text.StringBuilder,Tools.ReflectionT.SignatureFlags)">
	<summary>Represents Visual-Baslic-like type name into <see cref="T:System.Text.StringBuilder"/></summary>
	<param name="Type">Type to represent name of</param>
	<param name="ret"><see cref="T:System.Text.StringBuilder"/> to write name to</param>
	<exception cref="T:System.ArgumentNullException"><paramref name="Type"/> or <paramref name="ret"/> is null</exception>
</member><member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.GetAccessModifiers(System.Reflection.MemberInfo)">
	<summary>Gets member access modifiers</summary>
	<param name="Member">Member to get modifiers of</param>
	<returns>Visual-Basic-like member access modifiers</returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
</member><member name="F:Tools.ReflectionT.VisualBasicSignatureProvider.CustomAttributeFlags.Other">
	<summary>Normal way</summary>
</member><member name="F:Tools.ReflectionT.VisualBasicSignatureProvider.CustomAttributeFlags.Assembly">
	<summary>Assembly way</summary>
</member><member name="F:Tools.ReflectionT.VisualBasicSignatureProvider.CustomAttributeFlags.Module">
	<summary>PE module way</summary>
</member><member name="T:Tools.ReflectionT.VisualBasicSignatureProvider.CustomAttributeFlags">
	<summary>Ways of rendering custom attributes</summary>
</member><member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.GetSignature(System.Reflection.Module,Tools.ReflectionT.SignatureFlags)">
	<summary>gets representation of a module</summary>
	<param name="Module">Module to represent</param>
	<param name="Flags">Controls how the signature will be rendered</param>
	<returns>String representation of <paramref name="Module"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Module"/> is null</exception>
</member><member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.GetSignature(Tools.ReflectionT.NamespaceInfo,Tools.ReflectionT.SignatureFlags)">
	<summary>Gets string representation of a namespace</summary>
	<param name="Namespace">Namespace to represent</param>
	<param name="Flags">Controls how the signature will be rendered</param>
	<returns>String representation of <paramref name="Namespace"/></returns>
	<exception cref="T:System.ArgumentNullException"><paramref name="Namespace"/> is null</exception>
</member><member name="T:Tools.ReflectionT.VisualBasicSignatureProvider">
	<summary>Provides string representation of various reflection object using Visual Basic syntax</summary>
</member><member name="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Normal">
	<summary>Normal state (data are in sync)</summary>
</member><member name="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Null">
	<summary>Null (data are not available)</summary>
</member><member name="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.New">
	<summary>New (data was null and now it is not null)</summary>
</member><member name="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Changed">
	<summary>Changed (data was changed since last save)</summary>
</member><member name="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Deleted">
	<summary>Deleted (data was not null and now it is null)</summary>
</member><member name="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Error">
	<summary>Data error</summary>
</member><member name="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.NA">
	<summary>Data status unkown</summary>
</member><member name="T:Tools.WindowsT.FormsT.StatusMarker.Statuses">
	<summary>Supported states of <see cref="T:Tools.WindowsT.FormsT.StatusMarker"/></summary>
</member><member name="F:Tools.WindowsT.FormsT.StatusMarker._Status">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.StatusMarker.Status"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.StatusMarker.Status">
	<summary>Gets or sets shown status of the control</summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.StatusMarker.Statuses"/></exception>
</member><member name="E:Tools.WindowsT.FormsT.StatusMarker.StatusChanged">
	<summary>Raised after <see cref="P:Tools.WindowsT.FormsT.StatusMarker.Status"/> changes</summary>
</member><member name="M:Tools.WindowsT.FormsT.StatusMarker.OnStatusChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.StatusMarker.StatusChanged"/> event</summary>
	<param name="e">Event parameters (<see cref="F:System.EventArgs.Empty"/>)</param>
</member><member name="P:Tools.WindowsT.FormsT.StatusMarker.DeleteMenuState">
	<summary>Gets or set state of <see cref="P:Tools.WindowsT.FormsT.StatusMarker.tmiDelete"/></summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState"/></exception>
</member><member name="P:Tools.WindowsT.FormsT.StatusMarker.MarkAsChangedMenuState">
	<summary>Gets or set state of <see cref="P:Tools.WindowsT.FormsT.StatusMarker.tmiMarkAsChanged"/></summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState"/></exception>
</member><member name="P:Tools.WindowsT.FormsT.StatusMarker.ResetMenuState">
	<summary>Gets or set state of <see cref="P:Tools.WindowsT.FormsT.StatusMarker.tmiReset"/></summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState"/></exception>
</member><member name="P:Tools.WindowsT.FormsT.StatusMarker.MenuState(System.Windows.Forms.ToolStripMenuItem)">
	<summary>Gets or sets state of menu item</summary>
	<param name="Menu">Menu item to get or set state for</param>
</member><member name="P:Tools.WindowsT.FormsT.StatusMarker.AddMenuState">
	<summary>Gets or set state of <see cref="P:Tools.WindowsT.FormsT.StatusMarker.tmiAdd"/></summary>
	<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState"/></exception>
</member><member name="F:Tools.WindowsT.FormsT.StatusMarker._AutoChanged">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.StatusMarker.AutoChanged"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.StatusMarker.AutoChanged">
	<summary>Gets or sets value indicating if <see cref="P:Tools.WindowsT.FormsT.StatusMarker.Status"/> automatically changes to <see cref="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Changed"/> when <see cref="P:Tools.WindowsT.FormsT.StatusMarker.tmiMarkAsChanged"/> is clicked</summary>
</member><member name="E:Tools.WindowsT.FormsT.StatusMarker.Add">
	<summary>Raised after <see cref="P:Tools.WindowsT.FormsT.StatusMarker.tmiAdd"/> is clicked</summary>
</member><member name="M:Tools.WindowsT.FormsT.StatusMarker.OnAdd(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.StatusMarker.Add"/> event</summary>
	<param name="e">Event parameters</param>
</member><member name="E:Tools.WindowsT.FormsT.StatusMarker.MarkAsChanged">
	<summary>Raised after <see cref="P:Tools.WindowsT.FormsT.StatusMarker.tmiMarkAsChanged"/> is clicked</summary>
</member><member name="M:Tools.WindowsT.FormsT.StatusMarker.OnMarkAsChanged(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.StatusMarker.MarkAsChanged"/> event</summary>
	<param name="e">Event parameters</param>
</member><member name="E:Tools.WindowsT.FormsT.StatusMarker.Reset">
	<summary>Raised after <see cref="P:Tools.WindowsT.FormsT.StatusMarker.tmiReset"/> is clicked</summary>
</member><member name="M:Tools.WindowsT.FormsT.StatusMarker.OnReset(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.StatusMarker.Reset"/> event</summary>
	<param name="e">Event parameters</param>
</member><member name="E:Tools.WindowsT.FormsT.StatusMarker.Delete">
	<summary>Raised after <see cref="P:Tools.WindowsT.FormsT.StatusMarker.tmiDelete"/> is clicked</summary>
</member><member name="M:Tools.WindowsT.FormsT.StatusMarker.OnDelete(System.EventArgs)">
	<summary>Raises the <see cref="E:Tools.WindowsT.FormsT.StatusMarker.Delete"/> event</summary>
	<param name="e">Event parameters</param>
</member><member name="M:Tools.WindowsT.FormsT.StatusMarker.OnButtonClick">
	<summary>Shows <see cref="P:Tools.WindowsT.FormsT.StatusMarker.cmsStatus"/></summary>
</member><member name="P:Tools.WindowsT.FormsT.StatusMarker.AutoSize">
	<summary>Gets or sets if this control automatically sizes by its content</summary>
</member><member name="P:Tools.WindowsT.FormsT.StatusMarker.StatusedControl">
	<summary>Control this instance reports status of</summary>
	<value>Can be null if there is no auto-monitored control</value>
	<returns>Auto-monitored control or null if there is no auto-monitored control</returns>
	<remarks>
		<para>Supported types of StatusedControls are (ordered by precedence - if component implements <see cref="T:Tools.IReportsChange"/> then <see cref="T:Tools.IReportsChange"/> is used, otherwise <see cref="T:System.Windows.Forms.TextBoxBase"/> is checked etc.):</para>
		<list type="table">
			<listheader><term>Type</term><description>Depends on event</description></listheader>
			<item><term><see cref="T:Tools.IReportsChange"/></term><description><see cref="E:Tools.IReportsChange.Changed"/></description></item>
			<item><term><see cref="T:System.Windows.Forms.TextBoxBase"/></term><description><see cref="E:System.Windows.Forms.Control.TextChanged"/></description></item>
			<item><term><see cref="T:System.Windows.Forms.NumericUpDown"/></term><description><see cref="E:System.Windows.Forms.NumericUpDown.ValueChanged"/></description></item>
			<item><term><see cref="T:System.Windows.Forms.DomainUpDown"/></term><description><see cref="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged"/></description></item>
			<item><term><see cref="T:System.Windows.Forms.ComboBox"/></term><description>If <see cref="P:System.Windows.Forms.ComboBox.DropDownStyle"/> is <see cref="F:System.Windows.Forms.ComboBoxStyle.DropDownList"/>
					<see cref="E:System.Windows.Forms.ComboBox.SelectedIndexChanged"/>; <see cref="E:System.Windows.Forms.Control.TextChanged"/> otherwise</description>. Note: Do not change <see cref="P:System.Windows.Forms.ComboBox.DropDownStyle"/> property after the <see cref="T:System.Windows.Forms.ComboBox"/> is assigned to <see cref="P:Tools.WindowsT.FormsT.StatusMarker.StatusedControl"/></item>
			<item><term><see cref="T:System.Windows.Forms.CheckBox"/></term><description>If <see cref="P:System.Windows.Forms.CheckBox.ThreeState"/> is True <see cref="E:System.Windows.Forms.CheckBox.CheckStateChanged"/>; <see cref="E:System.Windows.Forms.CheckBox.CheckedChanged"/> otherwise. Note: Do not change value of the <see cref="P:System.Windows.Forms.CheckBox.ThreeState"/> property after the <see cref="T:System.Windows.Forms.CheckBox"/> is assigned to <see cref="P:Tools.WindowsT.FormsT.StatusMarker.StatusedControl"/></description></item>
			<item><term><see cref="T:System.Windows.Forms.RadioButton"/></term><description><see cref="E:System.Windows.Forms.RadioButton.CheckedChanged"/></description></item>
			<item><term><see cref="T:System.Windows.Forms.CheckedListBox"/></term><description><see cref="E:System.Windows.Forms.CheckedListBox.ItemCheck"/></description></item>
			<item><term><see cref="T:System.Windows.Forms.MonthCalendar"/></term><description><see cref="E:System.Windows.Forms.MonthCalendar.DateChanged"/></description></item>
			<item><term><see cref="T:System.Windows.Forms.DateTimePicker"/></term><description><see cref="E:System.Windows.Forms.DateTimePicker.ValueChanged"/></description></item>
			<item><term><see cref="T:System.Windows.Forms.TrackBar"/></term><description><see cref="E:System.Windows.Forms.TrackBar.ValueChanged"/></description></item>
			<item><term><see cref="T:System.Windows.Forms.ScrollBar"/></term><description><see cref="E:System.Windows.Forms.ScrollBar.ValueChanged"/></description></item>
			<item><term><see cref="T:System.Windows.Forms.ToolStripTextBox"/></term><description><see cref="E:System.Windows.Forms.ToolStripItem.TextChanged"/></description></item>
			<item><term><see cref="T:System.Windows.Forms.ToolStripComboBox"/></term><description>If <see cref="P:System.Windows.Forms.ToolStripComboBox.DropDownStyle"/> is <see cref="F:System.Windows.Forms.ComboBoxStyle.DropDownList"/>
					<see cref="E:System.Windows.Forms.ToolStripComboBox.SelectedIndexChanged"/>; <see cref="E:System.Windows.Forms.ToolStripItem.TextChanged"/> otherwise</description>. Note: Do not change <see cref="P:System.Windows.Forms.ToolStripComboBox.DropDownStyle"/> property after the <see cref="T:System.Windows.Forms.ToolStripComboBox"/> is assigned to <see cref="P:Tools.WindowsT.FormsT.StatusMarker.StatusedControl"/></item>
			<item><term><see cref="T:System.Windows.Forms.ToolStripButton"/></term><description><see cref="E:System.Windows.Forms.ToolStripButton.CheckedChanged"/></description></item>
			<item><term><see cref="T:System.Windows.Forms.ToolStripMenuItem"/></term><description><see cref="E:System.Windows.Forms.ToolStripMenuItem.CheckedChanged"/></description></item>
		</list>
	</remarks>
	<exception cref="T:System.NotSupportedException">Type of passed component is not supported</exception>
</member><member name="M:Tools.WindowsT.FormsT.StatusMarker.RemoveHandler">
	<summary>Removes method <see cref="M:Tools.WindowsT.FormsT.StatusMarker.Handler``2(``0,``1)"/> as hendler of event of <see cref="P:Tools.WindowsT.FormsT.StatusMarker.StatusedControl"/> where it was added in <see cref="M:Tools.WindowsT.FormsT.StatusMarker.AddHandler(System.ComponentModel.Component)"/> method</summary>
	<exception cref="T:System.NotSupportedException">Type of <see cref="P:Tools.WindowsT.FormsT.StatusMarker.StatusedControl"/> is not supported. See <seealso cref="P:Tools.WindowsT.FormsT.StatusMarker.StatusedControl"/> for list of supported types.</exception>
	<remarks>Note for inheritors: You can extedn <see cref="T:Tools.WindowsT.FormsT.StatusMarker"/>'s support of statused controls either by overriding <see cref="M:Tools.WindowsT.FormsT.StatusMarker.AddHandler(System.ComponentModel.Component)"/> and <see cref="M:Tools.WindowsT.FormsT.StatusMarker.RemoveHandler"/> methods or by implementing <see cref="T:Tools.IReportsChange"/> by the control that should be supported</remarks>
</member><member name="M:Tools.WindowsT.FormsT.StatusMarker.AddHandler(System.ComponentModel.Component)">
	<summary>Adds method <see cref="M:Tools.WindowsT.FormsT.StatusMarker.Handler``2(``0,``1)"/> as handler of appropriate event of given component</summary>
	<param name="Component">Component to add handler to</param>
	<remarks>Note for inheritors: You can extedn <see cref="T:Tools.WindowsT.FormsT.StatusMarker"/>'s support of statused controls either by overriding <see cref="M:Tools.WindowsT.FormsT.StatusMarker.AddHandler(System.ComponentModel.Component)"/> and <see cref="M:Tools.WindowsT.FormsT.StatusMarker.RemoveHandler"/> methods or by implementing <see cref="T:Tools.IReportsChange"/> by the control that should be supported</remarks>
	<exception cref="T:System.NotSupportedException">Type of <paramref name="Component"/> is not supported. See <seealso cref="P:Tools.WindowsT.FormsT.StatusMarker.StatusedControl"/> for list of supported types.</exception>
</member><member name="M:Tools.WindowsT.FormsT.StatusMarker.Handler``2(``0,``1)">
	<summary>Handles change of value of monitored control</summary>
	<param name="sender">Source of event - should be same as <see cref="P:Tools.WindowsT.FormsT.StatusMarker.StatusedControl"/></param>
	<param name="e">Event arguments repored by <paramref name="sender"/></param>
	<typeparam name="TSender">Type of sender (typically <see cref="T:System.Object"/>)</typeparam>
	<typeparam name="TEventargs">Type of event arguments (typically <see cref="T:System.EventArgs"/>)</typeparam>
	<remarks>This method is generic because it is required for handlers to work. It does not rely on exact types of <paramref name="sender"/> amd <paramref name="e"/>.</remarks>
</member><member name="T:Tools.WindowsT.FormsT.StatusMarker">
	<summary>Marks state of data item</summary>
</member><member name="P:Tools.WindowsT.FormsT.IControlWithStatus.Status">
	<summary>Current status of control</summary>
</member><member name="P:Tools.WindowsT.FormsT.IControlWithStatus.DeleteMenustate">
	<summary>State of delete menu item</summary>
</member><member name="P:Tools.WindowsT.FormsT.IControlWithStatus.MarkAsChangedMenuState">
	<summary>State of mar-as-changed menu item</summary>
</member><member name="P:Tools.WindowsT.FormsT.IControlWithStatus.ResetMenuState">
	<summary>state of reset menu item</summary>
</member><member name="P:Tools.WindowsT.FormsT.IControlWithStatus.AddMenuState">
	<summary>state of add menu item</summary>
</member><member name="P:Tools.WindowsT.FormsT.IControlWithStatus.AutoChanged">
	<summary>Indicates if <see cref="P:Tools.WindowsT.FormsT.IControlWithStatus.Status"/> automatically chnages to <see cref="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Changed"/> and <see cref="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.New"/> if user takes appropriate action</summary>
</member><member name="E:Tools.WindowsT.FormsT.IControlWithStatus.Add">
	<summary>Raised after add menu item is clicked</summary>
</member><member name="E:Tools.WindowsT.FormsT.IControlWithStatus.MarkAsChanged">
	<summary>Raised after mark-as-changed menu item is clicked</summary>
</member><member name="E:Tools.WindowsT.FormsT.IControlWithStatus.Reset">
	<summary>Raised after reset menu item is clicked</summary>
</member><member name="E:Tools.WindowsT.FormsT.IControlWithStatus.Delete">
	<summary>Raised after delete menu item is clcked</summary>
</member><member name="E:Tools.WindowsT.FormsT.IControlWithStatus.StatusChanged">
	<summary>Raised after <see cref="P:Tools.WindowsT.FormsT.IControlWithStatus.Status"/> is changed</summary>
</member><member name="T:Tools.WindowsT.FormsT.IControlWithStatus">
	<summary>Provides common interface for controls that exposes its status</summary>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`1)">
	<summary>Performs conversion from type <see cref="TOther"/> to type <see cref="T"/></summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
	<param name="value">Value to be converted to type <see cref="T"/></param>
	<returns>Value of type <see cref="T"/> initialized by <paramref name="value"/></returns>
</member><member name="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.dConvertFrom">
	<summary>Delegate to <see cref="M:Tools.ComponentModelT.TypeConverter`1.ConverterFrom(System.Type)"/> function</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
	<param name="value">Value to be converted to type <see cref="T"/></param>
	<returns>Value of type <see cref="T"/> initialized by <paramref name="value"/></returns>
</member><member name="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1">
	<summary>Interface for type-safe <see cref="T:System.ComponentModel.TypeConverter"/>s (read-only conversion)</summary>
	<typeparam name="TOther">Other type (e.g. <see cref="T:System.String"/> - most common). Value of <paramref name="T"/> are mostly converted to this type in order to be show to user and are converted from this type in mostly in order to get user input</typeparam>
	<remarks>By implementing this interface you tells to your base class (<see cref="T:Tools.ComponentModelT.TypeConverter`1"/>) that you are able to convert from type <paramref name="TOther"/></remarks>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)">
	<summary>Performs conversion from type <see cref="T"/> to type <see cref="TOther"/></summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="value">Value to be converted</param>
	<returns>Representation of <paramref name="value"/> in type <see cref="TOther"/></returns>
</member><member name="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.dConvertTo">
	<summary>delegate to <see cref="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)"/> function</summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="value">Value to be converted</param>
	<returns>Representation of <paramref name="value"/> in type <see cref="TOther"/></returns>
</member><member name="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1">
	<summary>Interface for type-safe <see cref="T:System.ComponentModel.TypeConverter"/>s (write-only conversion)</summary>
	<typeparam name="TOther">Other type (e.g. <see cref="T:System.String"/> - most common). Value of <paramref name="T"/> are mostly converted to this type in order to be show to user and are converted from this type in mostly in order to get user input</typeparam>
	<remarks>By implementing this interface you tells to your base class (<see cref="T:Tools.ComponentModelT.TypeConverter`1"/>) that you are able to convert to type <paramref name="TOther"/></remarks>
</member><member name="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverter`1">
	<summary>Interface for type-safe <see cref="T:System.ComponentModel.TypeConverter"/>s (read-write conversion)</summary>
	<typeparam name="TOther">Other type (e.g. <see cref="T:System.String"/> - most common). Value of <paramref name="T"/> are mostly converted to this type in order to be show to user and are converted from this type in mostly in order to get user input</typeparam>
	<remarks>By implementing this interface you tells to your base class (<see cref="T:Tools.ComponentModelT.TypeConverter`1"/>) that you are able to convert to and from type <paramref name="TOther"/></remarks>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.IsValid(System.ComponentModel.ITypeDescriptorContext,`1)">
	<summary>Returns whether the given instance of <see cref="TOther"/> is valid for type <see cref="T"/></summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="value">Value to test validity</param>
	<returns>true if the specified value is valid for this type <see cref="T"/>; otherwise, false.</returns>
</member><member name="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.dIsValid">
	<summary>Delegate to the <see cref="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.IsValid(System.ComponentModel.ITypeDescriptorContext,`1)"/> function</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="value">Value to test validity</param>
	<returns>true if the specified value is valid for this type <see cref="T"/>; otherwise, false.</returns>
</member><member name="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1">
	<summary>Interface for type-safe <see cref="T:System.ComponentModel.TypeConverter"/>s (read-write conversion with validation)</summary>
	<typeparam name="TOther">Other type (e.g. <see cref="T:System.String"/> - most common). Value of <paramref name="T"/> are mostly converted to this type in order to be show to user and are converted from this type in mostly in order to get user input</typeparam>
	<remarks>By implementing this interface you tells to your base class (<see cref="T:Tools.ComponentModelT.TypeConverter`1"/>) that you are able to convert to and from type <paramref name="TOther"/></remarks>
</member><member name="T:Tools.ComponentModelT.TypeConverter`1.dConvertFrom">
	<summary>Semi type-safe delegate of the <see cref="M:Tools.ComponentModelT.TypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/> function</summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="value">The <see cref="T:System.Object"/> to convert.</param>
	<returns>Converted value</returns>
</member><member name="T:Tools.ComponentModelT.TypeConverter`1.dConvertTo">
	<summary>Semi type-safe delegate of the <see cref="M:Tools.ComponentModelT.TypeConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/> function</summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="value">Value to be converted</param>
	<returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
</member><member name="T:Tools.ComponentModelT.TypeConverter`1.dIsValid">
	<summary>Semi type-safe delegate of the <see cref="M:Tools.ComponentModelT.TypeConverter`1.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)"/> function</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="value">The <see cref="T:System.Object"/> to test for validity.</param>
	<returns>true if the specified value is valid for this object; otherwise, false.</returns>
</member><member name="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertFrom">
	<summary><see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.dConvertFrom"/> delegate of <see cref="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`1)"/> to be adapted</summary>
</member><member name="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertTo">
	<summary><see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.dConvertTo"/> delegate of <see cref="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)"/> to be adapted</summary>
</member><member name="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dIsValid">
	<summary><see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.dIsValid"/> delegate of <see cref="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.IsValid(System.ComponentModel.ITypeDescriptorContext,`1)"/> to be adapted</summary>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
	<summary>Function with sighature of <see cref="T:Tools.ComponentModelT.TypeConverter`1.dConvertFrom"/> that invokes <see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertFrom"/> delegate</summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="value">The <see cref="T:System.Object"/> to convert.</param>
	<returns>Converted value</returns>
	<exception cref="T:System.NullReferenceException"><see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertFrom"/> is null</exception>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)">
	<summary>Function with sighature of <see cref="T:Tools.ComponentModelT.TypeConverter`1.dConvertTo"/> that invokes <see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertTo"/> delegate</summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="value">Value to be converted</param>
	<returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
	<exception cref="T:System.NullReferenceException"><see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertTo"/> is null</exception>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
	<summary>Function with sighature of <see cref="T:Tools.ComponentModelT.TypeConverter`1.dIsValid"/> that invokes <see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dIsValid"/> delegate</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="value">The <see cref="T:System.Object"/> to test for validity.</param>
	<returns>true if the specified value is valid for this object; otherwise, false.</returns>
	<exception cref="T:System.NullReferenceException"><see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dIsValid"/> is null</exception>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.#ctor(Tools.ComponentModelT.TypeConverter{`0}.ITypeConverterFrom{`1}.dConvertFrom)">
	<summary>CTor with <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.dConvertFrom"/> delegate</summary>
	<param name="d">Delegate to be adapted (value for <see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertFrom"/>)</param>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.#ctor(Tools.ComponentModelT.TypeConverter{`0}.ITypeConverterTo{`1}.dConvertTo)">
	<summary>CTor with <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.dConvertTo"/> delegate</summary>
	<param name="d">Delegate to be adapted (value for <see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertTo"/>)</param>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.#ctor(Tools.ComponentModelT.TypeConverter{`0}.ITypeConverterWithValidation{`1}.dIsValid)">
	<summary>CTor with <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.dIsValid"/> delegate</summary>
	<param name="d">Delegate to be adapted (value for <see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dIsValid"/>)</param>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.#ctor(Tools.ComponentModelT.TypeConverter{`0}.ITypeConverterFrom{`1}.dConvertFrom,Tools.ComponentModelT.TypeConverter{`0}.ITypeConverterTo{`1}.dConvertTo,Tools.ComponentModelT.TypeConverter{`0}.ITypeConverterWithValidation{`1}.dIsValid)">
	<summary>CTor with all delegates</summary>
	<param name="dcfrom"><see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.dConvertFrom"/> delegate to be adapted (value for <see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertFrom"/>). Can be null.</param>
	<param name="dcto"><see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.dConvertTo"/> delegate to be adapted (value for <see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertTo"/>). Can be null.</param>
	<param name="dvalid"><see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.dIsValid"/> delegate to be adapted (value for <see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dIsValid"/>). Can be null or ommited.</param>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.#ctor">
	<summary>CTor with no delegate</summary>
</member><member name="T:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1">
	<summary>Adapts type-safe delegates from <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1"/> to semi type-safe delegates from <see cref="T:Tools.ComponentModelT.TypeConverter`1"/></summary>
	<typeparam name="TOther">TOther type of delegates</typeparam>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
	<summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
	<returns>true if this converter can perform the conversion; otherwise, false.</returns>
	<remarks>This function searches for implementation of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1"/> interface where TOther is <paramref name="sourceType"/> or type it implements/derives from using <see cref="M:Tools.ComponentModelT.TypeConverter`1.ConverterFrom(System.Type)"/></remarks>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
	<summary>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
	<returns>true if this converter can perform the conversion; otherwise, false.</returns>
	<remarks>This function searches for implementation of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1"/> interface where TOther is <paramref name="destinationType"/> or type it implements/derives from using <see cref="M:Tools.ComponentModelT.TypeConverter`1.ConverterTo(System.Type)"/></remarks>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
	<summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
	<param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="value">The <see cref="T:System.Object"/> to convert.</param>
	<returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
	<exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
	<remarks>This function searches for <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1"/> implementation and calls its <see cref="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`1)"/> method if found. Otherwise it calls <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)"/></remarks>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
	<summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="destinationType">The <see cref="T:System.Type"/> to convert the value parameter to.</param>
	<param name="value">The <see cref="T:System.Object"/> to convert.</param>
	<returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
	<exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
	<exception cref="T:System.ArgumentNullException">The destinationType parameter is null</exception>
	<remarks>This function searches for <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1"/> implementation and calls its <see cref="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)"/> method if found. Otherwise it calls <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)"/></remarks>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
	<summary>Re-creates an <see cref="T:System.Object"/> given a set of property values for the object.</summary>
	<param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> that represents a dictionary of new property values.</param>
	<returns>An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.</returns>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.CreateInstance(System.Collections.IDictionary,System.ComponentModel.ITypeDescriptorContext)">
	<summary>Re-creates instance of <see cref="T"/> given a set of property values for it.</summary>
	<param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> that represents a dictionary of new property values.</param>
	<returns>Instance of <see cref="T"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method calls <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> unless it is overriden in derived class.</returns>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
	<summary>Returns whether the given value object is valid for this type and for the specified context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="value">The <see cref="T:System.Object"/> to test for validity.</param>
	<returns>true if the specified value is valid for this object; otherwise, false.</returns>
	<remarks>This function searches for <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1"/> implementation and calls its <see cref="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.IsValid(System.ComponentModel.ITypeDescriptorContext,`1)"/> method if found. Otherwise it calls <see cref="M:System.ComponentModel.TypeConverter.IsValid(System.Object)"/></remarks>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.ConverterFrom(System.Type)">
	<summary>Searches derived class implementation for implementation of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1"/> where TOther is <paramref name="sourceType"/> or type it implements/derives from</summary>
	<param name="sourceType">Type of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1"/> to search for</param>
	<returns><see cref="T:Tools.ComponentModelT.TypeConverter`1.dConvertFrom"/> delegate that invokes appropriate <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.dConvertFrom"/> delegate function that performs conversion</returns>
	<remarks>
		<para>This function first searchse for <paramref name="sourceType"/> implementation of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1"/> interface. If it is not found it searches for implementation of any interface implemented by <paramref name="sourceType"/> and then for any base class of <paramref name="sourceType"/></para>
		<para>Note for inheritors: This function uses reflection, so it is not very efficient. You can improve an efficiency by overriding this function and returning required delegate. If you want to keep semantics of this function (delegates are automatically found) for classses derived from yours one call base class function <see cref="M:Tools.ComponentModelT.TypeConverter`1.ConverterFrom(System.Type)"/> if you are asked for delegate for type that you don't provide converter of.
 Because your implementation has signature of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.dConvertFrom"/> and you need signature of <see cref="T:Tools.ComponentModelT.TypeConverter`1.dConvertFrom"/> you should youse <see cref="T:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1"/> to adapt your delegate and return delegate to <see cref="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/>.</para>
	</remarks>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.ConverterTo(System.Type)">
	<summary>Searches derived class implementation for implementation of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1"/> where TOther is <paramref name="destinationType"/> or type derived from it/implementing it</summary>
	<param name="destinationType">Type of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1"/> to search for</param>
	<returns><see cref="T:Tools.ComponentModelT.TypeConverter`1.dConvertTo"/> delegate that invokes appropriate <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.dConvertTo"/> delegate function that performs conversion.</returns>
	<remarks>
		<para>This function first searchse for <paramref name="destinationType"/> implementation of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1"/> interface. If it is not found it searches for implementation of any class derived from <paramref name="sourceType"/> and if <paramref name="sourceType"/> is interface for any of its implementations</para>
		<para>Note for inheritors: This function uses reflection, so it is not very efficient. You can improve an efficiency by overriding this function and returning required delegate. If you want to keep semantics of this function (delegates are automatically found) for classses derived from yours one call base class function <see cref="M:Tools.ComponentModelT.TypeConverter`1.ConverterTo(System.Type)"/> if you are asked for delegate for type that you don't provide converter of.
 Because your implementation has signature of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.dConvertTo"/> and you need signature of <see cref="T:Tools.ComponentModelT.TypeConverter`1.dConvertTo"/> you should youse <see cref="T:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1"/> to adapt your delegate and return delegate to <see cref="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)"/>.</para>
	</remarks>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.IsValidSimple(System.ComponentModel.ITypeDescriptorContext,System.Object)">
	<summary>Provides simple implementation of <see cref="M:Tools.ComponentModelT.TypeConverter`1.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)"/> method derived class implements <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1"/> but does not implement <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1"/> for the same type</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="value">The <see cref="T:System.Object"/> to test for validity.</param>
	<returns>True if <see cref="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`1)"/> does not thow an exception, otherwise false</returns>
</member><member name="M:Tools.ComponentModelT.TypeConverter`1.Validator(System.Type)">
	<summary>Searches derived class implementation for implementation of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1"/> where TOther is <paramref name="validateType"/> or type it implements/derives from</summary>
	<param name="validateType">Type of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1"/> to search for</param>
	<returns><see cref="T:Tools.ComponentModelT.TypeConverter`1.dIsValid"/> delegate that invokes appropriate <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.dIsValid"/> delegate function that performs validation. If no method is found but <see cref="M:Tools.ComponentModelT.TypeConverter`1.ConverterFrom(System.Type)"/> returns non-null this function returns delegate to <see cref="M:Tools.ComponentModelT.TypeConverter`1.IsValidSimple(System.ComponentModel.ITypeDescriptorContext,System.Object)"/></returns>
	<remarks>
		<para>This function first searchse for <paramref name="validateType"/> implementation of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1"/> interface. If it is not found it searches for implementation of any interface implemented by <paramref name="validateType"/> and then for any base class of <paramref name="validateType"/></para>
		<para>Note for inheritors: This function uses reflection, so it is not very efficient. You can improve an efficiency by overriding this function and returning required delegate. If you want to keep semantics of this function (delegates are automatically found) for classses derived from yours one call base class function <see cref="M:Tools.ComponentModelT.TypeConverter`1.Validator(System.Type)"/> if you are asked for delegate for type that you don't provide converter of.
 Because your implementation has signature of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.dIsValid"/> and you need signature of <see cref="T:Tools.ComponentModelT.TypeConverter`1.dConvertFrom"/> you should youse <see cref="T:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1"/> to adapt your delegate and return delegate to <see cref="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)"/>.</para>
	</remarks>
</member><member name="T:Tools.ComponentModelT.TypeConverter`1">
	<summary>Represents base class for type-safe <see cref="T:System.ComponentModel.TypeConverter"/>'s</summary>
	<typeparam name="T">Type that is converted from and to other types</typeparam>
	<remarks>It's not enough to derive from this class to get working type-safe <see cref="T:System.ComponentModel.TypeConverter"/>. After deriving from this class you must implement one or more type converter interfaces (protected nested interfaces in this class). Those interfaces tells this class which conversions are available and provides conversion methods.</remarks>
</member><member name="M:Tools.ComponentModelT.TypeConverter`2.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`1)">
	<summary>Performs conversion from type <see cref="TOther"/> to type <see cref="T"/></summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
	<param name="value">Value to be converted to type <see cref="T"/></param>
	<returns>Value of type <see cref="T"/> initialized by <paramref name="value"/></returns>
</member><member name="M:Tools.ComponentModelT.TypeConverter`2.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)">
	<summary>Performs conversion from type <see cref="T"/> to type <see cref="TOther"/></summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="value">Value to be converted</param>
	<returns>Representation of <paramref name="value"/> in type <see cref="TOther"/></returns>
</member><member name="M:Tools.ComponentModelT.TypeConverter`2.IsValid(System.ComponentModel.ITypeDescriptorContext,`1)">
	<summary>Returns whether the given instance of <see cref="TOther"/> is valid for type <see cref="T"/></summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="value">Value to test validity</param>
	<returns>true if the specified value is valid for this type <see cref="T"/>; otherwise, false.</returns>
	<remarks>If not overriden in derived class thi method calls <see cref="M:Tools.ComponentModelT.TypeConverter`2.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`1)"/> and checks if it throws an exception or not.</remarks>
</member><member name="F:Tools.ComponentModelT.TypeConverter`2.Adaptor">
	<summary>Adapts methods <see cref="M:Tools.ComponentModelT.TypeConverter`2.IsValid(System.ComponentModel.ITypeDescriptorContext,`1)"/>, <see cref="M:Tools.ComponentModelT.TypeConverter`2.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`1)"/> and <see cref="M:Tools.ComponentModelT.TypeConverter`2.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)"/> from <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1"/>'s delegates into <see cref="T:Tools.ComponentModelT.TypeConverter`1"/>'s delegates</summary>
</member><member name="M:Tools.ComponentModelT.TypeConverter`2.ConverterFrom(System.Type)">
	<summary>Increases efficiency of base class method by returning delegate directly</summary>
	<param name="sourceType">Type to return delegate for</param>
	<returns>If <paramref name="sourceType"/> is <see cref="TOther"/> then returns <see cref="M:Tools.ComponentModelT.TypeConverter`2.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`1)"/> otherwise calls base class's method</returns>
</member><member name="M:Tools.ComponentModelT.TypeConverter`2.ConverterTo(System.Type)">
	<summary>Increases efficiency of base class method by returning delegate directly</summary>
	<param name="destinationType">Type to return delegate for</param>
	<returns>If <paramref name="destinationType"/> is <see cref="TOther"/> then returns <see cref="M:Tools.ComponentModelT.TypeConverter`2.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)"/> otherwise calls base class's method</returns>
</member><member name="M:Tools.ComponentModelT.TypeConverter`2.Validator(System.Type)">
	<summary>Increases efficiency of base class method by returning delegate directly</summary>
	<param name="validateType">Type to return delegate for</param>
	<returns>If <paramref name="validateType"/> is <see cref="TOther"/> then returns <see cref="M:Tools.ComponentModelT.TypeConverter`2.IsValid(System.ComponentModel.ITypeDescriptorContext,`1)"/> otherwise calls base class's method</returns>
</member><member name="M:Tools.ComponentModelT.TypeConverter`2.ConvertFrom(`1)">
	<summary>Converts value of type <see cref="TOther"/> to <see cref="T"/></summary>
	<param name="value">value to be converted</param>
</member><member name="M:Tools.ComponentModelT.TypeConverter`2.ConvertTo(`0)">
	<summary>Converts value of type <see cref="T"/> to <see cref="TOther"/></summary>
	<param name="value">value to be converted</param>
</member><member name="M:Tools.ComponentModelT.TypeConverter`2.IsValid(`1)">
	<summary>Checks if value of type <see cref="TOther"/> can be converted to <see cref="T"/></summary>
	<param name="value">value to be converted</param>
</member><member name="T:Tools.ComponentModelT.TypeConverter`2">
	<summary>Fully type-safe <see cref="T:System.ComponentModel.TypeConverter"/></summary>
	<typeparam name="T">Main type that will be conberted to <paramref name="TOther"/> and from <paramref name="TOther"/></typeparam>
	<typeparam name="TOther">Type the <paramref name="T"/> will be converted from and to</typeparam>
	<remarks>This class provides type-safe base of <see cref="T:System.ComponentModel.TypeConverter"/> for two types. You can extend its support for another types by implementing another <see cref="T:Tools.ComponentModelT.TypeConverter`1"/> nested interfaces.</remarks>
</member><member name="M:Tools.ComponentModelT.FileByteConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Byte[])">
	<summary>Performs conversion from <see cref="T:System.Byte"/> to <see cref="T:System.String"/></summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="value">Value to be converted</param>
	<returns>An empty <see cref="T:System.String"/> if <paramref name="value"/> is null; otherwise <see cref="P:System.Array.Length"/> followed by the 'B' letter</returns>
</member><member name="T:Tools.ComponentModelT.FileByteConverter">
	<summary>Simple <see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:System.Byte"/></summary>
</member><member name="M:Tools.ComponentModelT.ExpandableObjectConverter`1.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Returns whether this object supports properties, using the specified context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<returns>True</returns>
</member><member name="M:Tools.ComponentModelT.ExpandableObjectConverter`1.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
	<summary>Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
	<param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
	<returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.</returns>
</member><member name="T:Tools.ComponentModelT.ExpandableObjectConverter`1">
	<summary>Provides base class for type-safe <see cref="T:System.ComponentModel.ExpandableObjectConverter"/> with support for interface based conversion as <see cref="T:Tools.ComponentModelT.TypeConverter`1"/></summary>
	<typeparam name="T">Main type conversion is provided from and to</typeparam>
</member><member name="M:Tools.ComponentModelT.ExpandableObjectConverter`2.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Returns whether this object supports properties, using the specified context.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<returns>True</returns>
</member><member name="M:Tools.ComponentModelT.ExpandableObjectConverter`2.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
	<summary>Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.</summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
	<param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
	<returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.</returns>
</member><member name="T:Tools.ComponentModelT.ExpandableObjectConverter`2">
	<summary>Provides base class for type-safe <see cref="T:System.ComponentModel.ExpandableObjectConverter"/> with direct support for conversion to/from one type as <see cref="T:Tools.ComponentModelT.TypeConverter`2"/> and interface-based type-safe converters implementation as <see cref="T:Tools.ComponentModelT.TypeConverter`1"/></summary>
	<typeparam name="T">Main type conversion is providfed from and to</typeparam>
	<typeparam name="TOther">The other type to which and from which main type <paramref name="T"/> is converted</typeparam>
</member><member name="M:Tools.ComponentModelT.HexaConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
	<summary>Performs conversion from <see cref="T:System.String"/> to <see cref="T:System.Byte"/></summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
	<param name="value">Value to be converted to <see cref="T:System.Byte"/></param>
	<returns><see cref="T:System.Byte"/> initialized by <paramref name="value"/></returns>
	<exception cref="T:System.ArgumentException">Length of <paramref name="value"/> is odd -or- <paramref name="value"/> contaions non-hexa character</exception>
</member><member name="M:Tools.ComponentModelT.HexaConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Byte[])">
	<summary>Performs conversion from <see cref="T:System.Byte"/> to type <see cref="T:System.String"/></summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="value">Value to be converted</param>
	<returns>Representation of <paramref name="value"/> in <see cref="T:System.String"/></returns>
</member><member name="T:Tools.ComponentModelT.HexaConverter">
	<summary><see cref="T:Tools.ComponentModelT.TypeConverter`1"/> for <see cref="T:System.Byte"/> as hexasring</summary>
</member><member name="M:Tools.ComponentModelT.EnumConverterWithAttributes`1.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exclusive list.</summary>
	<returns>True when <see cref="T"/> has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> or if its <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> has <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> true</returns>
</member><member name="M:Tools.ComponentModelT.EnumConverterWithAttributes`1.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Returns whether this object supports a standard set of values that can be picked from a list.</summary>
	<returns>true</returns>
</member><member name="M:Tools.ComponentModelT.EnumConverterWithAttributes`1.IsValid(System.ComponentModel.ITypeDescriptorContext,System.String)">
	<summary>Returns whether the given value object is valid for this type.</summary>
	<returns>true if the specified value is valid for type <see cref="T"/>; otherwise, false.</returns>
	<param name="value">The object to test for validity. </param>
</member><member name="M:Tools.ComponentModelT.EnumConverterWithAttributes`1.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
	<summary>Returns a collection of standard values from the default context for the data type this type converter is designed for.</summary>
	<returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> containing a standard set of valid values.</returns>
</member><member name="M:Tools.ComponentModelT.EnumConverterWithAttributes`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
	<summary>Performs conversion from <see cref="T:System.String"/> to type <see cref="T"/></summary>
	<param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
	<param name="value">Value to be converted to type <see cref="T"/></param>
	<returns>Value of type <see cref="T"/> initialized by <paramref name="value"/></returns>
</member><member name="M:Tools.ComponentModelT.EnumConverterWithAttributes`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)">
	<summary>Performs conversion from type <see cref="T"/> to <see cref="T:System.String"/></summary>
	<param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
	<param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
	<param name="value">Value to be converted</param>
	<returns>Representation of <paramref name="value"/> as <see cref="T:System.String"/></returns>
</member><member name="T:Tools.ComponentModelT.EnumConverterWithAttributes`1">
	<summary>Implements <see cref="T:Tools.ComponentModelT.TypeConverter`1"/> for enums that uses <see cref="T:System.ComponentModel.DisplayNameAttribute"/> applyed on enum items and <see cref="T:Tools.ComponentModelT.RestrictAttribute"/></summary>
</member><member name="F:Tools.InternalT.AuthorAttribute._Name">
	<summary>Contains value of the <see cref="P:Tools.InternalT.AuthorAttribute.Name"/> property</summary>
</member><member name="F:Tools.InternalT.AuthorAttribute._eMail">
	<summary>Contains value of the <see cref="P:Tools.InternalT.AuthorAttribute.eMail"/> property</summary>
</member><member name="F:Tools.InternalT.AuthorAttribute._WWW">
	<summary>Contains value of the <see cref="P:Tools.InternalT.AuthorAttribute.WWW"/> property</summary>
</member><member name="M:Tools.InternalT.AuthorAttribute.#ctor(System.String,System.String,System.String)">
	<summary>CTor</summary>
	<param name="Name">Name or nick of the author</param>
	<param name="eMail">@-mail to the author</param>
	<param name="WWW">Web pages of the author</param>
</member><member name="P:Tools.InternalT.AuthorAttribute.Name">
	<summary>Name or nick of the author</summary>
</member><member name="P:Tools.InternalT.AuthorAttribute.eMail">
	<summary>@-mail to the author</summary>
</member><member name="P:Tools.InternalT.AuthorAttribute.WWW">
	<summary>Web pages of the author</summary>
</member><member name="T:Tools.InternalT.AuthorAttribute">
	<summary>Marks person defined by instance of this attribute as author of marked part of code.</summary>
	<remarks>
 Use this attribute to mark yourself as author of code you have written.</remarks>
</member><member name="F:Tools.InternalT.VersionAttribute._Major">
	<summary>Contains value of the <see cref="P:Tools.InternalT.VersionAttribute.Major"/> property</summary>
</member><member name="F:Tools.InternalT.VersionAttribute._Minor">
	<summary>Contains value of the <see cref="P:Tools.InternalT.VersionAttribute.Minor"/> property</summary>
</member><member name="F:Tools.InternalT.VersionAttribute._Build">
	<summary>Contains value of the <see cref="P:Tools.InternalT.VersionAttribute.Build"/> property</summary>
</member><member name="F:Tools.InternalT.VersionAttribute._Revision">
	<summary>Contains value of the <see cref="P:Tools.InternalT.VersionAttribute.Revision"/> property</summary>
</member><member name="F:Tools.InternalT.VersionAttribute._Note">
	<summary>Contains value of the <see cref="P:Tools.InternalT.VersionAttribute.Note"/> property</summary>
</member><member name="M:Tools.InternalT.VersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>CTor - initializes version as <paramref name="Major"/>.<paramref name="MajorRevision"/>.<paramref name="Minor"/>.<paramref name="MinorRevision"/></summary>
	<param name="Major">Major version number</param>
	<param name="Minor">Minor version number</param>
	<param name="Build">Build number</param>
	<param name="Revision">Revision number</param>
	<exception cref="T:System.ArgumentOutOfRangeException">Version component is less than zero</exception>
</member><member name="M:Tools.InternalT.VersionAttribute.#ctor(Tools.InternalT.VersionAttribute.TypeOrInt32,Tools.InternalT.VersionAttribute.TypeOrInt32,Tools.InternalT.VersionAttribute.TypeOrInt32,Tools.InternalT.VersionAttribute.TypeOrInt32)">
	<summary>CTor - initializes new instance of version with each parameter either defined by <see cref="T:System.Int32"/> value or inherited from assembly where passed <see cref="T:System.Type"/> is present.</summary>
	<param name="Major">Value to initialize <see cref="P:Tools.InternalT.VersionAttribute.Major"/> property</param>
	<param name="Minor">Value to initialize <see cref="P:Tools.InternalT.VersionAttribute.Minor"/> property</param>
	<param name="Build">Value to initialize <see cref="P:Tools.InternalT.VersionAttribute.Build"/> property</param>
	<param name="Revision">Value to initialize <see cref="P:Tools.InternalT.VersionAttribute.Revision"/> property</param>
</member><member name="M:Tools.InternalT.VersionAttribute.#ctor(System.Type)">
	<summary>CTor - initializes new instance with version fully inherited from assembly where passed <see cref="T:System.Type"/> is present</summary>
	<param name="TypeFromAssembly">Type form which's assembly inherit the version</param>
</member><member name="M:Tools.InternalT.VersionAttribute.#ctor(System.Int32,System.Int32,System.Type)">
	<summary>CTor - initializes new instance with concrete <see cref="P:Tools.InternalT.VersionAttribute.Major"/> and <see cref="P:Tools.InternalT.VersionAttribute.Minor"/> numbers and inherits <see cref="P:Tools.InternalT.VersionAttribute.Build"/> and <see cref="P:Tools.InternalT.VersionAttribute.Revision"/> from assembly of passed <see cref="T:System.Type"/></summary>
	<param name="Major">Value to initialize <see cref="P:Tools.InternalT.VersionAttribute.Major"/> property</param>
	<param name="Minor">Value to initialize <see cref="P:Tools.InternalT.VersionAttribute.Minor"/> property</param>
	<param name="BuildAndRevision">Type from which's assembly the <see cref="P:Tools.InternalT.VersionAttribute.Build"/> and <see cref="P:Tools.InternalT.VersionAttribute.Revision"/> properties will be inherited</param>
</member><member name="M:Tools.InternalT.VersionAttribute.#ctor(System.Type,System.Int32,System.Int32)">
	<summary>CTor - initializes new instance with concrete <see cref="P:Tools.InternalT.VersionAttribute.Build"/> and <see cref="P:Tools.InternalT.VersionAttribute.Revision"/> numbers and inherits <see cref="P:Tools.InternalT.VersionAttribute.Major"/> and <see cref="P:Tools.InternalT.VersionAttribute.Minor"/> from assembly of passed <see cref="T:System.Type"/></summary>
	<param name="MajorAndMinor">Type from which's assembly the <see cref="P:Tools.InternalT.VersionAttribute.Major"/> and <see cref="P:Tools.InternalT.VersionAttribute.Minor"/> properties will be inherited</param>
	<param name="Build">Value to initialize <see cref="P:Tools.InternalT.VersionAttribute.Build"/> property</param>
	<param name="Revision">Value to initialize <see cref="P:Tools.InternalT.VersionAttribute.Revision"/> property</param>
</member><member name="F:Tools.InternalT.VersionAttribute.TypeOrInt32.Type">
	<summary>Value when <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/> is <see cref="T:System.Type"/></summary>
</member><member name="F:Tools.InternalT.VersionAttribute.TypeOrInt32.Int32">
	<summary>Value when <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/> is <see cref="T:System.Int32"/></summary>
</member><member name="M:Tools.InternalT.VersionAttribute.TypeOrInt32.#ctor(System.Type)">
	<summary>CTor - initializes new <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/> to represent <see cref="T:System.Type"/></summary>
	<param name="Type"><see cref="T:System.Type"/>To be stored in new instance of <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/></param>
</member><member name="M:Tools.InternalT.VersionAttribute.TypeOrInt32.#ctor(System.Int32)">
	<summary>CTor - initializes new <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/> to represent <see cref="T:System.Int32"/></summary>
	<param name="Int32"><see cref="T:System.Int32"/>To be stored in new instance of <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/></param>
</member><member name="M:Tools.InternalT.VersionAttribute.TypeOrInt32.op_Implicit(System.Int32)~Tools.InternalT.VersionAttribute.TypeOrInt32">
	<summary>Converts <see cref="T:System.Int32"/> to new instance of <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/> containing it</summary>
	<param name="a"><see cref="T:System.Int32"/> to be contained in newly created instance</param>
	<returns>New instance of <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/> initialized with <paramref name="a"/></returns>
</member><member name="M:Tools.InternalT.VersionAttribute.TypeOrInt32.op_Implicit(System.Type)~Tools.InternalT.VersionAttribute.TypeOrInt32">
	<summary>Converts <see cref="T:System.Type"/> to new instance of <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/> containing it</summary>
	<param name="a"><see cref="T:System.Type"/> to be contained in newly created instance</param>
	<returns>New instance of <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/> initialized with <paramref name="a"/></returns>
</member><member name="M:Tools.InternalT.VersionAttribute.TypeOrInt32.op_Explicit(Tools.InternalT.VersionAttribute.TypeOrInt32)~System.Type">
	<summary>If <paramref name="a"/> contains <see cref="T:System.Type"/> unwrap it</summary>
	<param name="a">Instance that contains value to be unwraped</param>
	<returns>Value of <see cref="T:System.Type"/> stored in <paramref name="a"/> if <paramref name="a"/> contains it</returns>
	<exception cref="T:System.InvalidOperationException"><paramref name="a"/> doesn't contain value of type <see cref="T:System.Type"/></exception>
</member><member name="M:Tools.InternalT.VersionAttribute.TypeOrInt32.op_Explicit(Tools.InternalT.VersionAttribute.TypeOrInt32)~System.Int32">
	<summary>If <paramref name="a"/> contains <see cref="T:System.Int32"/> unwrap it</summary>
	<param name="a">Instance that contains value to be unwraped</param>
	<returns>Value of <see cref="T:System.Int32"/> stored in <paramref name="a"/> if <paramref name="a"/> contains it</returns>
	<exception cref="T:System.InvalidOperationException"><paramref name="a"/> doesn't contain value of type <see cref="T:System.Int32"/></exception>
</member><member name="T:Tools.InternalT.VersionAttribute.TypeOrInt32">
	<summary>Represents something tha can be either <see cref="T:System.Type"/> or <see cref="T:System.Int32"/></summary>
	<remarks>This class is designed to be used only with <see cref="T:Tools.InternalT.VersionAttribute"/>. If you are looking for general-purpose class try <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/> instead.</remarks>
</member><member name="P:Tools.InternalT.VersionAttribute.Major">
	<summary>First part of version number</summary>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than zero</exception>
</member><member name="P:Tools.InternalT.VersionAttribute.Minor">
	<summary>Second part of version number</summary>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than zero</exception>
</member><member name="P:Tools.InternalT.VersionAttribute.Build">
	<summary>Third part of version number</summary>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than zero</exception>
</member><member name="P:Tools.InternalT.VersionAttribute.Revision">
	<summary>Fourth part of version number</summary>
	<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than zero</exception>
</member><member name="P:Tools.InternalT.VersionAttribute.Note">
	<summary>Version-related note</summary>
</member><member name="F:Tools.InternalT.VersionAttribute._LastChange">
	<summary>Contains value of the <see cref="P:Tools.InternalT.VersionAttribute.LastChangeDate"/> property</summary>
</member><member name="P:Tools.InternalT.VersionAttribute.LastChange">
	<summary>Date of last modification (date format in invariant culture: MM/DD/YYYY)</summary>
	<remarks>Be carefull when setting this attribute property. If you make mistake if will cause exception when reading it at runtime.</remarks>
	<exception cref="T:System.FormatException">Value being set does not contain a valid string representation of a date and time.</exception>
</member><member name="P:Tools.InternalT.VersionAttribute.LastChangeDate">
	<summary>Date of last modification</summary>
</member><member name="T:Tools.InternalT.VersionAttribute">
	<summary>Defines a version of component of code</summary>
</member><member name="F:Tools.InternalT.AttributesSpecificDeclarations.AuthorAndVersionAttributesUsage">
	<summary>Defines value for <see cref="T:System.AttributeUsageAttribute"/> applyed on <see cref="T:Tools.InternalT.AuthorAttribute"/>, <see cref="T:Tools.InternalT.VersionAttribute"/> and realetd attributes.</summary>
	<remarks>DO NOT remove ored constants from this declaration. Add constants only when you really need it. (since version 1.1 there is no need to add constants.</remarks>
</member><member name="T:Tools.InternalT.AttributesSpecificDeclarations">
	<summary>Declares things that are spacific for attributes declared in <see cref="N:Tools.InternalT"/> namespace</summary>
</member><member name="M:Tools.InternalT.FirstVersion.#ctor(System.DateTime)">
	<summary>CTor from date</summary>
	<param name="Date">Date when item was first introduced</param>
</member><member name="M:Tools.InternalT.FirstVersion.#ctor(System.String)">
	<summary>CTor from string that represents date in invariant culture format MM/DD/YYYY</summary>
	<param name="InvariantDateStr">Invariant culture string representation of date when tool was first introduced (MM/DD/YYYY)</param>
	<remarks>Be carefull when setting this attribute property. If you make mistake if will cause exception when reading it at runtime.</remarks>
	<exception cref="T:System.FormatException"><paramref name="InvariantDateStr"/> not contain a valid string representation of a date and time.</exception>
</member><member name="M:Tools.InternalT.FirstVersion.#ctor(System.UInt16,System.Byte,System.Byte)">
	<summary>CTor from parts of date</summary>
	<param name="Day">Day (number of day in <paramref name="Month"/>, 1-based)</param>
	<param name="Month">Month (number of month in <paramref name="Year"/>, 1-based)</param>
	<param name="Year">Number of eyar</param>
	<remarks>Arguments valid for <see cref="T:System.DateTime"/> constructor are acceptable.</remarks>
	<exception cref="T:System.ArgumentOutOfRangeException">year is less than 1 or greater than 9999.-or- month is less than 1 or greater than 12.-or- day is less than 1 or greater than the number of days in month.</exception>
	<exception cref="T:System.ArgumentException">The specified parameters evaluate to less than <see cref="F:System.DateTime.MinValue"/> or more than <see cref="F:System.DateTime.MaxValue"/>.</exception>
</member><member name="F:Tools.InternalT.FirstVersion._FirstVersion">
	<summary>Contains value of the <see cref="P:Tools.InternalT.FirstVersion.FirstVersionDate"/> property</summary>
</member><member name="P:Tools.InternalT.FirstVersion.FirstVersionDate">
	<summary>Date when first version the item was created</summary>
</member><member name="P:Tools.InternalT.FirstVersion.FirstVerStr">
	<summary>Date when first version of item was created (date format in invariant culture: MM/DD/YYYY)</summary>
	<exception cref="T:System.FormatException">Value being set does not contain a valid string representation of a date and time.</exception>
</member><member name="T:Tools.InternalT.FirstVersion">
	<summary>Defines date when item was introduced</summary>
</member><member name="F:Tools.InternalT.AssemblyBuildStageAttribute._State">
	<summary>Contains value of the <see cref="P:Tools.InternalT.AssemblyBuildStageAttribute.State"/> property</summary>
</member><member name="P:Tools.InternalT.AssemblyBuildStageAttribute.State">
	<summary>Identifies stage of life-cycle</summary>
</member><member name="M:Tools.InternalT.AssemblyBuildStageAttribute.#ctor(Tools.InternalT.BuildStates)">
	<summary>CTor</summary>
	<param name="State">Identifies stage of life-cycle</param>
</member><member name="T:Tools.InternalT.AssemblyBuildStageAttribute">
	<summary>Identifies in which stage of development life-cycle current build was done</summary>
</member><member name="F:Tools.InternalT.BuildStates.Nightly">
	<summary>Debug build, usually done by developer to debug and test</summary>
</member><member name="F:Tools.InternalT.BuildStates.Alpha">
	<summary>Early stagte of development posled to public</summary>
</member><member name="F:Tools.InternalT.BuildStates.Beta">
	<summary>More tested and debuged statge of development, but still not final</summary>
</member><member name="F:Tools.InternalT.BuildStates.RC">
	<summary>Near-final stage of development</summary>
</member><member name="F:Tools.InternalT.BuildStates.Release">
	<summary>Production release</summary>
</member><member name="T:Tools.InternalT.BuildStates">
	<summary>Represents possible stages of life-cycle of assembly used by ĐTools project</summary>
</member><member name="T:Tools.WindowsT.FormsT.TextBoxWithStatus">
	<summary>Note: This control will be removed and replaced with attachable implementation of <see cref="T:Tools.WindowsT.FormsT.StatusMarker"/></summary>
</member><member name="M:Tools.WindowsT.FormsT.UserControlExtended.#ctor">
	<summary>CTor</summary>
</member><member name="F:Tools.WindowsT.FormsT.UserControlExtended._KeyPreview">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreview"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreview">
	<summary>Gets or sets a value indicating whether the user control will receive key events before the event is passed to the control that has focus.</summary>
	<value>true if the user control will receive all key events; false if the currently selected user control on the control receives key events. The default is false.</value>
	<remarks>
		<para>When this property is set to true, the user control will receive all <see cref="E:System.Windows.Forms.Control.KeyPress"/>, <see cref="E:System.Windows.Forms.Control.KeyDown"/>, and <see cref="E:System.Windows.Forms.Control.KeyUp"/> events. After the user controls's event handlers have completed processing the keystroke, the keystroke is then assigned to the control with focus. For example, if the <see cref="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreview"/> property is set to true and the currently selected control is a <see cref="T:System.Windows.Forms.TextBox"/>, after the keystroke is handled by the event handlers of the user control the <see cref="T:System.Windows.Forms.TextBox"/> control will receive the key that was pressed. To handle keyboard events only at the user control level and not allow controls to receive keyboard events, set the <see cref="P:System.Windows.Forms.KeyPressEventArgs.Handled"/> property in your user controls's <see cref="E:System.Windows.Forms.Control.KeyPress"/> event handler to true.</para>
		<para>You can use this property to process most keystrokes in your user control and either handle the keystroke or call the appropriate control to handle the keystroke. For example, when a user control uses function keys, you might want to process the keystrokes at the user-control level rather than writing code for each control that might receive keystroke events.</para>
		<para>If a user control has no visible or enabled controls, it automatically receives all keyboard events.</para>
		<para>The described behavior is realized in overriden <see cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)"/>.</para>
		<para>For more details see <seealso cref="P:System.Windows.Forms.Form.KeyPreview"/>. It works in the same way.</para>
		<para>When you are using derived control that inherits <see cref="T:Tools.WindowsT.FormsT.UserControlExtended"/> and has nativelly set this property to true, but this behavior interfers with functionality of your form, you can set this property to false (if it is not restricted by creator of derived control) to avoid such interference but with risk that some keyboard-driven functions of the controll will not work.</para>
		<para>Note for inheritors: You do not need to override this property (even you cannot) in order to change its design-time default value. You can simply set value of <see cref="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreviewDefaultValue"/> in CTor. You must also set same default value to <see cref="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreview"/> in CTor.</para>
	</remarks>
</member><member name="F:Tools.WindowsT.FormsT.UserControlExtended._KeyPreviewDefaultValue">
	<summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreviewDefaultValue"/> property</summary>
</member><member name="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreviewDefaultValue">
	<summary>Contains default value of <see cref="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreview"/> property</summary>
	<remarks>This default value is used by various tools (like Visual Studion WinForms designer) to indicate if value of property have been changed and thus must be serialized.
 You can change value of this in CTor of derived class in order to change design-time behaviour of your derived control</remarks>
</member><member name="M:Tools.WindowsT.FormsT.UserControlExtended.ShouldSerializeKeyPreview">
	<summary>Gets value indicating if value of the <see cref="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreview"/> property should be serialized (means it has different then default value)</summary>
</member><member name="M:Tools.WindowsT.FormsT.UserControlExtended.ResetKeyPreview">
	<summary>Resets value of the <see cref="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreview"/> property to its default value</summary>
</member><member name="M:Tools.WindowsT.FormsT.UserControlExtended.ProcessKeyPreview(System.Windows.Forms.Message@)">
	<summary>Previews a keyboard message.</summary>
	<returns>true if the message was processed by the control; otherwise, false.</returns>
	<param name="m">A <see cref="T:System.Windows.Forms.Message"/>, passed by reference, that represents the window message to process. </param>
</member><member name="T:Tools.WindowsT.FormsT.UserControlExtended">
	<summary>Provides empty base class for user controls that extends <see cref="T:System.Windows.Forms.UserControl"/> by adding several features.</summary>
</member>
</members>
</doc>